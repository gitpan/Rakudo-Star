.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1439"  :anon :subid("421_1340317675.197")
    .param pmc param_1441 :slurpy
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 0
    .const 'Sub' $P2443 = "462_1340317675.197" 
    capture_lex $P2443
    .const 'Sub' $P2430 = "459_1340317675.197" 
    capture_lex $P2430
    .const 'Sub' $P2422 = "458_1340317675.197" 
    capture_lex $P2422
    .const 'Sub' $P2409 = "457_1340317675.197" 
    capture_lex $P2409
    .const 'Sub' $P2307 = "446_1340317675.197" 
    capture_lex $P2307
    .const 'Sub' $P2242 = "441_1340317675.197" 
    capture_lex $P2242
    .const 'Sub' $P1803 = "72_1340317675.197" 
    capture_lex $P1803
    .const 'Sub' $P1451 = "422_1340317675.197" 
    capture_lex $P1451
.annotate 'line', 1
    .lex "@ARGS", param_1441
    .lex "GLOBALish", $P1442
    .lex "$?PACKAGE", $P1443
    .lex "NQPCursorRole", $P1444
    .lex "NQPMatch", $P1445
    .lex "NQPCursor", $P1446
    .lex "NQPRegexMethod", $P1447
    .lex "NQPRegex", $P1448
    .lex "EXPORT", $P1449
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 5
    .const 'Sub' $P1451 = "422_1340317675.197" 
    capture_lex $P1451
    $P1451()
.annotate 'line', 825
    .const 'Sub' $P2242 = "441_1340317675.197" 
    capture_lex $P2242
    $P2242()
.annotate 'line', 864
    .const 'Sub' $P2307 = "446_1340317675.197" 
    capture_lex $P2307
    $P2307()
.annotate 'line', 970
    .const 'Sub' $P2409 = "457_1340317675.197" 
    capture_lex $P2409
    $P2409()
.annotate 'line', 983
    .const 'Sub' $P2422 = "458_1340317675.197" 
    capture_lex $P2422
    $P2422()
.annotate 'line', 989
    .const 'Sub' $P2430 = "459_1340317675.197" 
    capture_lex $P2430
    $P2430()
.annotate 'line', 1
    set $P101, param_1441
    if $P101, if_2438
    set $P100, $P101
    goto if_2438_end
  if_2438:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P102, "ModuleLoader"
    getinterp $P103
    set $P104, $P103["context"]
    $P105 = $P102."set_mainline_module"($P104)
    set $P100, $P105
  if_2438_end:
    .return ($P100)
    .const 'Sub' $P2440 = "461_1340317675.197" 
    .return ($P2440)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post463") :outer("421_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 0
    .const 'Sub' $P1440 = "421_1340317675.197" 
    .local pmc block
    set block, $P1440
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P107
    get_class $P108, "LexPad"
    get_class $P109, "NQPLexPad"
    $P107."hll_map"($P108, $P109)
    nqp_create_sc $P110, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107"
    .local pmc cur_sc
    set cur_sc, $P110
    cur_sc."set_description"("src\\stage2\\QRegex.nqp")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P111, "ModuleLoader"
    $P112 = $P111."load_setting"("NQPCORE")
    block."set_outer_ctx"($P112)
    set $S100, ""
    new $P111, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P111
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "NQPMatch"
    push string_heap, "NQPCursor"
    push string_heap, "NQPRegexMethod"
    push string_heap, "NQPRegex"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "24B4A3E094679322365C61BEF17761CEF7D3E30E-1340317674.193"
    push string_heap, "src\\stage2\\NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "addstate"
    push string_heap, "addedge"
    push string_heap, "states"
    push string_heap, "addnode"
    push string_heap, "regex_nfa"
    push string_heap, "fate"
    push string_heap, "alt"
    push string_heap, "anchor"
    push string_heap, "cclass"
    push string_heap, "concat"
    push string_heap, "enumcharlist"
    push string_heap, "literal"
    push string_heap, "subrule"
    push string_heap, "quant"
    push string_heap, "pastnode"
    push string_heap, "subcapture"
    push string_heap, "past"
    push string_heap, "mergesubrule"
    push string_heap, "mergesubstates"
    push string_heap, "run"
    push string_heap, "run_alt"
    push string_heap, "$!states"
    push string_heap, "$!edges"
    push string_heap, "Uninstantiable"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "list"
    push string_heap, "hash"
    push string_heap, "from"
    push string_heap, "orig"
    push string_heap, "to"
    push string_heap, "CURSOR"
    push string_heap, "Bool"
    push string_heap, "chars"
    push string_heap, "!make"
    push string_heap, "ast"
    push string_heap, "!dump_str"
    push string_heap, "@!array"
    push string_heap, "%!hash"
    push string_heap, "$!orig"
    push string_heap, "$!from"
    push string_heap, "$!to"
    push string_heap, "$!ast"
    push string_heap, "$!cursor"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!alt"
    push string_heap, "!alt_nfa"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "$!code"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "$!code"
    push string_heap, "Uninstantiable"
    push string_heap, "DEFAULT"
    push string_heap, "Uninstantiable"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "AEE56C4185E3F1A9434A478736F71908013C2160-1340317670.905"
    push string_heap, "src\\stage2\\gen\\nqp-mo.pm"
    push string_heap, "QRegex::NFA"
    push string_heap, "$!states"
    push string_heap, "$!edges"
    push string_heap, "new"
    push string_heap, "addstate"
    push string_heap, "addedge"
    push string_heap, "states"
    push string_heap, "addnode"
    push string_heap, "regex_nfa"
    push string_heap, "fate"
    push string_heap, "alt"
    push string_heap, "anchor"
    push string_heap, "cclass"
    push string_heap, "concat"
    push string_heap, "enumcharlist"
    push string_heap, "literal"
    push string_heap, "subrule"
    push string_heap, "quant"
    push string_heap, "pastnode"
    push string_heap, "subcapture"
    push string_heap, "past"
    push string_heap, "mergesubrule"
    push string_heap, "mergesubstates"
    push string_heap, "run"
    push string_heap, "run_alt"
    push string_heap, "__dump"
    push string_heap, "NQPCursorRole"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!alt"
    push string_heap, "!alt_nfa"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "NQPMatch"
    push string_heap, "$!orig"
    push string_heap, "$!from"
    push string_heap, "$!to"
    push string_heap, "$!ast"
    push string_heap, "$!cursor"
    push string_heap, "from"
    push string_heap, "orig"
    push string_heap, "to"
    push string_heap, "CURSOR"
    push string_heap, "Str"
    push string_heap, "Bool"
    push string_heap, "chars"
    push string_heap, "!make"
    push string_heap, "ast"
    push string_heap, "!dump_str"
    push string_heap, "get_string"
    push string_heap, "get_integer"
    push string_heap, "get_number"
    push string_heap, "NQPCursor"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!alt"
    push string_heap, "!alt_nfa"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "NQPRegexMethod"
    push string_heap, "$!code"
    push string_heap, "new"
    push string_heap, "ACCEPTS"
    push string_heap, "Str"
    push string_heap, "get_string"
    push string_heap, "invoke"
    push string_heap, "$!code"
    push string_heap, "NQPRegex"
    push string_heap, "ACCEPTS"
    push string_heap, "EXPORT"
    push string_heap, "DEFAULT"
    push string_heap, "P6opaque"
    push string_heap, "NFA"
    push string_heap, "Uninstantiable"
    push string_heap, "$!states"
    push string_heap, "$!edges"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "$!orig"
    push string_heap, "$!from"
    push string_heap, "$!to"
    push string_heap, "$!ast"
    push string_heap, "$!cursor"
    push string_heap, "$!code"
    push string_heap, "$?CLASS"
    push string_heap, "$NO_CAPS"
    push string_heap, "$pass_mark"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!alt"
    push string_heap, "!alt_nfa"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    .const 'Sub' $P2443 = "462_1340317675.197" 
    capture_lex $P2443
    $P113 = $P2443()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P113
    .const 'LexInfo' $P2528 = "421_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 0
    $P2528."set_static_lexpad_value"("GLOBALish", $P114)
    .const 'LexInfo' $P2529 = "421_1340317675.197" 
    $P2529."finish_static_lexpad"()
    .const 'LexInfo' $P2530 = "421_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 0
    $P2530."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2531 = "421_1340317675.197" 
    $P2531."finish_static_lexpad"()
    .const '' $P2532 = "10_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 2
    set_sub_code_object $P2532, $P114
    .const '' $P2533 = "11_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 3
    set_sub_code_object $P2533, $P114
    .const '' $P2534 = "12_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 4
    set_sub_code_object $P2534, $P114
    .const '' $P2535 = "13_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 5
    set_sub_code_object $P2535, $P114
    .const '' $P2536 = "14_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 6
    set_sub_code_object $P2536, $P114
    .const '' $P2537 = "15_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 7
    set_sub_code_object $P2537, $P114
    .const '' $P2538 = "16_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 8
    set_sub_code_object $P2538, $P114
    .const '' $P2539 = "17_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 9
    set_sub_code_object $P2539, $P114
    .const '' $P2540 = "18_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 10
    set_sub_code_object $P2540, $P114
    .const '' $P2541 = "19_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 11
    set_sub_code_object $P2541, $P114
    .const '' $P2542 = "20_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 12
    set_sub_code_object $P2542, $P114
    .const '' $P2543 = "21_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 13
    set_sub_code_object $P2543, $P114
    .const '' $P2544 = "22_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 14
    set_sub_code_object $P2544, $P114
    .const '' $P2545 = "23_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 15
    set_sub_code_object $P2545, $P114
    .const '' $P2546 = "24_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 16
    set_sub_code_object $P2546, $P114
    .const '' $P2547 = "25_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 17
    set_sub_code_object $P2547, $P114
    .const '' $P2548 = "26_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 18
    set_sub_code_object $P2548, $P114
    .const '' $P2549 = "27_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 19
    set_sub_code_object $P2549, $P114
    .const '' $P2550 = "28_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 20
    set_sub_code_object $P2550, $P114
    .const '' $P2551 = "29_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 21
    set_sub_code_object $P2551, $P114
    .const '' $P2552 = "30_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 22
    set_sub_code_object $P2552, $P114
    .const '' $P2553 = "31_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 23
    set_sub_code_object $P2553, $P114
    .const '' $P2554 = "32_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 24
    set_sub_code_object $P2554, $P114
    .const 'LexInfo' $P2555 = "422_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    $P2555."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2556 = "422_1340317675.197" 
    $P2556."finish_static_lexpad"()
    .const 'LexInfo' $P2557 = "422_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    $P2557."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2558 = "422_1340317675.197" 
    $P2558."finish_static_lexpad"()
    .const 'LexInfo' $P2559 = "421_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 25
    $P2559."set_static_lexpad_value"("NQPCursorRole", $P114)
    .const 'LexInfo' $P2560 = "421_1340317675.197" 
    $P2560."finish_static_lexpad"()
    .const '' $P2561 = "33_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 26
    set_sub_code_object $P2561, $P114
    .const '' $P2562 = "34_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 27
    set_sub_code_object $P2562, $P114
    .const '' $P2563 = "35_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 28
    set_sub_code_object $P2563, $P114
    .const '' $P2564 = "36_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 29
    set_sub_code_object $P2564, $P114
    .const '' $P2565 = "37_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 30
    set_sub_code_object $P2565, $P114
    .const '' $P2566 = "38_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 31
    set_sub_code_object $P2566, $P114
    .const '' $P2567 = "39_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 32
    set_sub_code_object $P2567, $P114
    .const '' $P2568 = "40_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 33
    set_sub_code_object $P2568, $P114
    .const '' $P2569 = "41_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 34
    set_sub_code_object $P2569, $P114
    .const '' $P2570 = "42_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 35
    set_sub_code_object $P2570, $P114
    .const '' $P2571 = "43_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 36
    set_sub_code_object $P2571, $P114
    .const '' $P2572 = "44_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 37
    set_sub_code_object $P2572, $P114
    .const '' $P2573 = "45_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 38
    set_sub_code_object $P2573, $P114
    .const '' $P2574 = "46_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 39
    set_sub_code_object $P2574, $P114
    .const '' $P2575 = "47_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 40
    set_sub_code_object $P2575, $P114
    .const '' $P2576 = "48_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 41
    set_sub_code_object $P2576, $P114
    .const '' $P2577 = "49_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 42
    set_sub_code_object $P2577, $P114
    .const '' $P2578 = "50_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 43
    set_sub_code_object $P2578, $P114
    .const '' $P2579 = "51_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 44
    set_sub_code_object $P2579, $P114
    .const '' $P2580 = "52_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 45
    set_sub_code_object $P2580, $P114
    .const '' $P2581 = "53_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 46
    set_sub_code_object $P2581, $P114
    .const '' $P2582 = "54_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 47
    set_sub_code_object $P2582, $P114
    .const '' $P2583 = "55_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 48
    set_sub_code_object $P2583, $P114
    .const '' $P2584 = "56_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 49
    set_sub_code_object $P2584, $P114
    .const '' $P2585 = "57_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 50
    set_sub_code_object $P2585, $P114
    .const '' $P2586 = "58_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 51
    set_sub_code_object $P2586, $P114
    .const '' $P2587 = "59_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 52
    set_sub_code_object $P2587, $P114
    .const '' $P2588 = "60_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 53
    set_sub_code_object $P2588, $P114
    .const '' $P2589 = "61_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 54
    set_sub_code_object $P2589, $P114
    .const '' $P2590 = "62_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 55
    set_sub_code_object $P2590, $P114
    .const '' $P2591 = "63_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 56
    set_sub_code_object $P2591, $P114
    .const '' $P2592 = "64_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 57
    set_sub_code_object $P2592, $P114
    .const '' $P2593 = "65_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 58
    set_sub_code_object $P2593, $P114
    .const '' $P2594 = "66_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 59
    set_sub_code_object $P2594, $P114
    .const '' $P2595 = "67_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 60
    set_sub_code_object $P2595, $P114
    .const '' $P2596 = "68_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 61
    set_sub_code_object $P2596, $P114
    .const '' $P2597 = "69_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 62
    set_sub_code_object $P2597, $P114
    .const '' $P2598 = "70_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 63
    set_sub_code_object $P2598, $P114
    .const '' $P2599 = "71_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 64
    set_sub_code_object $P2599, $P114
    .const '' $P2600 = "72_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 65
    set_sub_code_object $P2600, $P114
    .const 'LexInfo' $P2601 = "72_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 25
    $P2601."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2602 = "72_1340317675.197" 
    $P2602."finish_static_lexpad"()
    .const 'LexInfo' $P2603 = "72_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 25
    $P2603."set_static_lexpad_value"("$?ROLE", $P114)
    .const 'LexInfo' $P2604 = "72_1340317675.197" 
    $P2604."finish_static_lexpad"()
    .const 'LexInfo' $P2605 = "421_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    $P2605."set_static_lexpad_value"("NQPMatch", $P114)
    .const 'LexInfo' $P2606 = "421_1340317675.197" 
    $P2606."finish_static_lexpad"()
    .const '' $P2607 = "73_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 67
    set_sub_code_object $P2607, $P114
    .const '' $P2608 = "74_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 68
    set_sub_code_object $P2608, $P114
    .const '' $P2609 = "75_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 69
    set_sub_code_object $P2609, $P114
    .const '' $P2610 = "76_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 70
    set_sub_code_object $P2610, $P114
    .const '' $P2611 = "77_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 71
    set_sub_code_object $P2611, $P114
    .const '' $P2612 = "77_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 72
    set_sub_code_object $P2612, $P114
    .const '' $P2613 = "78_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 73
    set_sub_code_object $P2613, $P114
    .const '' $P2614 = "79_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 74
    set_sub_code_object $P2614, $P114
    .const '' $P2615 = "80_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 75
    set_sub_code_object $P2615, $P114
    .const '' $P2616 = "81_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 76
    set_sub_code_object $P2616, $P114
    .const '' $P2617 = "82_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 77
    set_sub_code_object $P2617, $P114
    .const '' $P2618 = "83_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 78
    set_sub_code_object $P2618, $P114
    .const '' $P2619 = "84_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 79
    set_sub_code_object $P2619, $P114
    .const 'LexInfo' $P2620 = "441_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    $P2620."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2621 = "441_1340317675.197" 
    $P2621."finish_static_lexpad"()
    .const 'LexInfo' $P2622 = "441_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    $P2622."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2623 = "441_1340317675.197" 
    $P2623."finish_static_lexpad"()
    .const 'LexInfo' $P2624 = "421_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 80
    $P2624."set_static_lexpad_value"("NQPCursor", $P114)
    .const 'LexInfo' $P2625 = "421_1340317675.197" 
    $P2625."finish_static_lexpad"()
    .const '' $P2626 = "85_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 81
    set_sub_code_object $P2626, $P114
    .const '' $P2627 = "86_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 82
    set_sub_code_object $P2627, $P114
    .const '' $P2628 = "87_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 83
    set_sub_code_object $P2628, $P114
    .const '' $P2629 = "88_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 84
    set_sub_code_object $P2629, $P114
    .const '' $P2630 = "89_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 85
    set_sub_code_object $P2630, $P114
    .const 'LexInfo' $P2631 = "446_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 80
    $P2631."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2632 = "446_1340317675.197" 
    $P2632."finish_static_lexpad"()
    .const 'LexInfo' $P2633 = "446_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 80
    $P2633."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2634 = "446_1340317675.197" 
    $P2634."finish_static_lexpad"()
    .const 'LexInfo' $P2635 = "421_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 86
    $P2635."set_static_lexpad_value"("NQPRegexMethod", $P114)
    .const 'LexInfo' $P2636 = "421_1340317675.197" 
    $P2636."finish_static_lexpad"()
    .const '' $P2637 = "417_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 87
    set_sub_code_object $P2637, $P114
    .const '' $P2638 = "418_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 88
    set_sub_code_object $P2638, $P114
    .const '' $P2639 = "419_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 89
    set_sub_code_object $P2639, $P114
    .const '' $P2640 = "419_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 90
    set_sub_code_object $P2640, $P114
    .const 'LexInfo' $P2641 = "457_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 86
    $P2641."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2642 = "457_1340317675.197" 
    $P2642."finish_static_lexpad"()
    .const 'LexInfo' $P2643 = "457_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 86
    $P2643."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2644 = "457_1340317675.197" 
    $P2644."finish_static_lexpad"()
    .const 'LexInfo' $P2645 = "421_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 91
    $P2645."set_static_lexpad_value"("NQPRegex", $P114)
    .const 'LexInfo' $P2646 = "421_1340317675.197" 
    $P2646."finish_static_lexpad"()
    .const '' $P2647 = "420_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 92
    set_sub_code_object $P2647, $P114
    .const 'LexInfo' $P2648 = "458_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 91
    $P2648."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2649 = "458_1340317675.197" 
    $P2649."finish_static_lexpad"()
    .const 'LexInfo' $P2650 = "458_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 91
    $P2650."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2651 = "458_1340317675.197" 
    $P2651."finish_static_lexpad"()
    .const 'LexInfo' $P2652 = "421_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 93
    $P2652."set_static_lexpad_value"("EXPORT", $P114)
    .const 'LexInfo' $P2653 = "421_1340317675.197" 
    $P2653."finish_static_lexpad"()
    .const 'LexInfo' $P2654 = "459_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 94
    $P2654."set_static_lexpad_value"("DEFAULT", $P114)
    .const 'LexInfo' $P2655 = "459_1340317675.197" 
    $P2655."finish_static_lexpad"()
    .const 'LexInfo' $P2656 = "460_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 94
    $P2656."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2657 = "460_1340317675.197" 
    $P2657."finish_static_lexpad"()
    .const 'LexInfo' $P2658 = "460_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 94
    $P2658."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2659 = "460_1340317675.197" 
    $P2659."finish_static_lexpad"()
    .const 'LexInfo' $P2660 = "459_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 93
    $P2660."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2661 = "459_1340317675.197" 
    $P2661."finish_static_lexpad"()
    .const 'LexInfo' $P2662 = "459_1340317675.197" 
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 93
    $P2662."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2663 = "459_1340317675.197" 
    $P2663."finish_static_lexpad"()
    nqp_get_sc_object $P114, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 0
    set_hll_global "GLOBAL", $P114
.end


.HLL "nqp"

.namespace []
.sub "_block2442"  :anon :subid("462_1340317675.197") :outer("421_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 0
    .const 'Sub' $P2444 = "10_1340317675.197" 
    .const 'Sub' $P2445 = "11_1340317675.197" 
    .const 'Sub' $P2446 = "12_1340317675.197" 
    .const 'Sub' $P2447 = "13_1340317675.197" 
    .const 'Sub' $P2448 = "14_1340317675.197" 
    .const 'Sub' $P2449 = "15_1340317675.197" 
    .const 'Sub' $P2450 = "16_1340317675.197" 
    .const 'Sub' $P2451 = "17_1340317675.197" 
    .const 'Sub' $P2452 = "18_1340317675.197" 
    .const 'Sub' $P2453 = "19_1340317675.197" 
    .const 'Sub' $P2454 = "20_1340317675.197" 
    .const 'Sub' $P2455 = "21_1340317675.197" 
    .const 'Sub' $P2456 = "22_1340317675.197" 
    .const 'Sub' $P2457 = "23_1340317675.197" 
    .const 'Sub' $P2458 = "24_1340317675.197" 
    .const 'Sub' $P2459 = "25_1340317675.197" 
    .const 'Sub' $P2460 = "26_1340317675.197" 
    .const 'Sub' $P2461 = "27_1340317675.197" 
    .const 'Sub' $P2462 = "28_1340317675.197" 
    .const 'Sub' $P2463 = "29_1340317675.197" 
    .const 'Sub' $P2464 = "30_1340317675.197" 
    .const 'Sub' $P2465 = "31_1340317675.197" 
    .const 'Sub' $P2466 = "32_1340317675.197" 
    .const 'Sub' $P2467 = "33_1340317675.197" 
    .const 'Sub' $P2468 = "34_1340317675.197" 
    .const 'Sub' $P2469 = "35_1340317675.197" 
    .const 'Sub' $P2470 = "36_1340317675.197" 
    .const 'Sub' $P2471 = "37_1340317675.197" 
    .const 'Sub' $P2472 = "38_1340317675.197" 
    .const 'Sub' $P2473 = "39_1340317675.197" 
    .const 'Sub' $P2474 = "40_1340317675.197" 
    .const 'Sub' $P2475 = "41_1340317675.197" 
    .const 'Sub' $P2476 = "42_1340317675.197" 
    .const 'Sub' $P2477 = "43_1340317675.197" 
    .const 'Sub' $P2478 = "44_1340317675.197" 
    .const 'Sub' $P2479 = "45_1340317675.197" 
    .const 'Sub' $P2480 = "46_1340317675.197" 
    .const 'Sub' $P2481 = "47_1340317675.197" 
    .const 'Sub' $P2482 = "48_1340317675.197" 
    .const 'Sub' $P2483 = "49_1340317675.197" 
    .const 'Sub' $P2484 = "50_1340317675.197" 
    .const 'Sub' $P2485 = "51_1340317675.197" 
    .const 'Sub' $P2486 = "52_1340317675.197" 
    .const 'Sub' $P2487 = "53_1340317675.197" 
    .const 'Sub' $P2488 = "54_1340317675.197" 
    .const 'Sub' $P2489 = "55_1340317675.197" 
    .const 'Sub' $P2490 = "56_1340317675.197" 
    .const 'Sub' $P2491 = "57_1340317675.197" 
    .const 'Sub' $P2492 = "58_1340317675.197" 
    .const 'Sub' $P2493 = "59_1340317675.197" 
    .const 'Sub' $P2494 = "60_1340317675.197" 
    .const 'Sub' $P2495 = "61_1340317675.197" 
    .const 'Sub' $P2496 = "62_1340317675.197" 
    .const 'Sub' $P2497 = "63_1340317675.197" 
    .const 'Sub' $P2498 = "64_1340317675.197" 
    .const 'Sub' $P2499 = "65_1340317675.197" 
    .const 'Sub' $P2500 = "66_1340317675.197" 
    .const 'Sub' $P2501 = "67_1340317675.197" 
    .const 'Sub' $P2502 = "68_1340317675.197" 
    .const 'Sub' $P2503 = "69_1340317675.197" 
    .const 'Sub' $P2504 = "70_1340317675.197" 
    .const 'Sub' $P2505 = "71_1340317675.197" 
    .const 'Sub' $P2506 = "72_1340317675.197" 
    .const 'Sub' $P2507 = "73_1340317675.197" 
    .const 'Sub' $P2508 = "74_1340317675.197" 
    .const 'Sub' $P2509 = "75_1340317675.197" 
    .const 'Sub' $P2510 = "76_1340317675.197" 
    .const 'Sub' $P2511 = "77_1340317675.197" 
    .const 'Sub' $P2512 = "78_1340317675.197" 
    .const 'Sub' $P2513 = "79_1340317675.197" 
    .const 'Sub' $P2514 = "80_1340317675.197" 
    .const 'Sub' $P2515 = "81_1340317675.197" 
    .const 'Sub' $P2516 = "82_1340317675.197" 
    .const 'Sub' $P2517 = "83_1340317675.197" 
    .const 'Sub' $P2518 = "84_1340317675.197" 
    .const 'Sub' $P2519 = "85_1340317675.197" 
    .const 'Sub' $P2520 = "86_1340317675.197" 
    .const 'Sub' $P2521 = "87_1340317675.197" 
    .const 'Sub' $P2522 = "88_1340317675.197" 
    .const 'Sub' $P2523 = "89_1340317675.197" 
    .const 'Sub' $P2524 = "417_1340317675.197" 
    .const 'Sub' $P2525 = "418_1340317675.197" 
    .const 'Sub' $P2526 = "419_1340317675.197" 
    .const 'Sub' $P2527 = "420_1340317675.197" 
    new $P112, "ResizablePMCArray"
    push $P112, $P2444
    push $P112, $P2445
    push $P112, $P2446
    push $P112, $P2447
    push $P112, $P2448
    push $P112, $P2449
    push $P112, $P2450
    push $P112, $P2451
    push $P112, $P2452
    push $P112, $P2453
    push $P112, $P2454
    push $P112, $P2455
    push $P112, $P2456
    push $P112, $P2457
    push $P112, $P2458
    push $P112, $P2459
    push $P112, $P2460
    push $P112, $P2461
    push $P112, $P2462
    push $P112, $P2463
    push $P112, $P2464
    push $P112, $P2465
    push $P112, $P2466
    push $P112, $P2467
    push $P112, $P2468
    push $P112, $P2469
    push $P112, $P2470
    push $P112, $P2471
    push $P112, $P2472
    push $P112, $P2473
    push $P112, $P2474
    push $P112, $P2475
    push $P112, $P2476
    push $P112, $P2477
    push $P112, $P2478
    push $P112, $P2479
    push $P112, $P2480
    push $P112, $P2481
    push $P112, $P2482
    push $P112, $P2483
    push $P112, $P2484
    push $P112, $P2485
    push $P112, $P2486
    push $P112, $P2487
    push $P112, $P2488
    push $P112, $P2489
    push $P112, $P2490
    push $P112, $P2491
    push $P112, $P2492
    push $P112, $P2493
    push $P112, $P2494
    push $P112, $P2495
    push $P112, $P2496
    push $P112, $P2497
    push $P112, $P2498
    push $P112, $P2499
    push $P112, $P2500
    push $P112, $P2501
    push $P112, $P2502
    push $P112, $P2503
    push $P112, $P2504
    push $P112, $P2505
    push $P112, $P2506
    push $P112, $P2507
    push $P112, $P2508
    push $P112, $P2509
    push $P112, $P2510
    push $P112, $P2511
    push $P112, $P2512
    push $P112, $P2513
    push $P112, $P2514
    push $P112, $P2515
    push $P112, $P2516
    push $P112, $P2517
    push $P112, $P2518
    push $P112, $P2519
    push $P112, $P2520
    push $P112, $P2521
    push $P112, $P2522
    push $P112, $P2523
    push $P112, $P2524
    push $P112, $P2525
    push $P112, $P2526
    push $P112, $P2527
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1450"  :subid("422_1340317675.197") :outer("421_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 5
    .const 'Sub' $P1791 = "32_1340317675.197" 
    capture_lex $P1791
    .const 'Sub' $P1785 = "31_1340317675.197" 
    capture_lex $P1785
    .const 'Sub' $P1781 = "30_1340317675.197" 
    capture_lex $P1781
    .const 'Sub' $P1741 = "29_1340317675.197" 
    capture_lex $P1741
    .const 'Sub' $P1695 = "28_1340317675.197" 
    capture_lex $P1695
    .const 'Sub' $P1683 = "27_1340317675.197" 
    capture_lex $P1683
    .const 'Sub' $P1677 = "26_1340317675.197" 
    capture_lex $P1677
    .const 'Sub' $P1670 = "25_1340317675.197" 
    capture_lex $P1670
    .const 'Sub' $P1585 = "24_1340317675.197" 
    capture_lex $P1585
    .const 'Sub' $P1554 = "23_1340317675.197" 
    capture_lex $P1554
    .const 'Sub' $P1543 = "22_1340317675.197" 
    capture_lex $P1543
    .const 'Sub' $P1535 = "21_1340317675.197" 
    capture_lex $P1535
    .const 'Sub' $P1522 = "20_1340317675.197" 
    capture_lex $P1522
    .const 'Sub' $P1516 = "19_1340317675.197" 
    capture_lex $P1516
    .const 'Sub' $P1510 = "18_1340317675.197" 
    capture_lex $P1510
    .const 'Sub' $P1498 = "17_1340317675.197" 
    capture_lex $P1498
    .const 'Sub' $P1493 = "16_1340317675.197" 
    capture_lex $P1493
    .const 'Sub' $P1483 = "15_1340317675.197" 
    capture_lex $P1483
    .const 'Sub' $P1480 = "14_1340317675.197" 
    capture_lex $P1480
    .const 'Sub' $P1478 = "13_1340317675.197" 
    capture_lex $P1478
    .const 'Sub' $P1467 = "12_1340317675.197" 
    capture_lex $P1467
    .const 'Sub' $P1463 = "11_1340317675.197" 
    capture_lex $P1463
    .const 'Sub' $P1460 = "10_1340317675.197" 
    capture_lex $P1460
    .lex "$?PACKAGE", $P1452
    .lex "$?CLASS", $P1453
.annotate 'line', 74
    box $P100, .CCLASS_ANY
    set $P101, $P1452
    get_who $P102, $P101
    set $P1454, $P102["%cclass_code"]
    unless_null $P1454, vivify_464
    $P1454 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1454
  vivify_464:
    set $P1454["."], $P100
.annotate 'line', 75
    box $P100, .CCLASS_NUMERIC
    set $P101, $P1452
    get_who $P102, $P101
    set $P1455, $P102["%cclass_code"]
    unless_null $P1455, vivify_465
    $P1455 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1455
  vivify_465:
    set $P1455["d"], $P100
.annotate 'line', 76
    box $P100, .CCLASS_WHITESPACE
    set $P101, $P1452
    get_who $P102, $P101
    set $P1456, $P102["%cclass_code"]
    unless_null $P1456, vivify_466
    $P1456 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1456
  vivify_466:
    set $P1456["s"], $P100
.annotate 'line', 77
    box $P100, .CCLASS_WORD
    set $P101, $P1452
    get_who $P102, $P101
    set $P1457, $P102["%cclass_code"]
    unless_null $P1457, vivify_467
    $P1457 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1457
  vivify_467:
    set $P1457["w"], $P100
.annotate 'line', 78
    box $P100, .CCLASS_NEWLINE
    set $P101, $P1452
    get_who $P102, $P101
    set $P1458, $P102["%cclass_code"]
    unless_null $P1458, vivify_468
    $P1458 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1458
  vivify_468:
    set $P1458["n"], $P100
.annotate 'line', 79
    box $P100, .CCLASS_NEWLINE
    set $P101, $P1452
    get_who $P102, $P101
    set $P1459, $P102["%cclass_code"]
    unless_null $P1459, vivify_469
    $P1459 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1459
  vivify_469:
    set $P1459["nl"], $P100
.annotate 'line', 6
    new $P100, "Float"
    assign $P100, 0
    set $P101, $P1452
    get_who $P102, $P101
    set $P102["$EDGE_FATE"], $P100
.annotate 'line', 7
    new $P100, "Float"
    assign $P100, 1
    set $P101, $P1452
    get_who $P102, $P101
    set $P102["$EDGE_EPSILON"], $P100
.annotate 'line', 8
    new $P100, "Float"
    assign $P100, 2
    set $P101, $P1452
    get_who $P102, $P101
    set $P102["$EDGE_CODEPOINT"], $P100
.annotate 'line', 9
    new $P100, "Float"
    assign $P100, 3
    set $P101, $P1452
    get_who $P102, $P101
    set $P102["$EDGE_CODEPOINT_NEG"], $P100
.annotate 'line', 10
    new $P100, "Float"
    assign $P100, 4
    set $P101, $P1452
    get_who $P102, $P101
    set $P102["$EDGE_CHARCLASS"], $P100
.annotate 'line', 11
    new $P100, "Float"
    assign $P100, 5
    set $P101, $P1452
    get_who $P102, $P101
    set $P102["$EDGE_CHARCLASS_NEG"], $P100
.annotate 'line', 12
    new $P100, "Float"
    assign $P100, 6
    set $P101, $P1452
    get_who $P102, $P101
    set $P102["$EDGE_CHARLIST"], $P100
.annotate 'line', 13
    new $P100, "Float"
    assign $P100, 7
    set $P101, $P1452
    get_who $P102, $P101
    set $P102["$EDGE_CHARLIST_NEG"], $P100
.annotate 'line', 14
    new $P100, "Float"
    assign $P100, 8
    set $P101, $P1452
    get_who $P102, $P101
    set $P102["$EDGE_SUBRULE"], $P100
.annotate 'line', 5
    set $P100, $P1452
    get_who $P101, $P100
    set $P1515, $P101["%cclass_code"]
    unless_null $P1515, vivify_515
    $P1515 = root_new ['parrot';'Hash']
  vivify_515:
.annotate 'line', 378
    .const 'Sub' $P1791 = "32_1340317675.197" 
    newclosure $P1801, $P1791
.annotate 'line', 5
    .return ($P1801)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "new" :anon :subid("10_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1461
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 19
    .lex "self", param_1461
.annotate 'line', 20
    new $P100, "Undef"
    set $P1462, $P100
    .lex "$new", $P1462
    set $P101, param_1461
    nqp_decontainerize $P102, $P101
    new $P103, "ResizablePMCArray"
    $P104 = $P102."bless"($P103 :named("state"))
    set $P1462, $P104
.annotate 'line', 21
    set $P101, $P1462
    unless_null $P101, vivify_470
    new $P101, "Undef"
  vivify_470:
    $P101."addstate"()
.annotate 'line', 22
    set $P101, $P1462
    unless_null $P101, vivify_471
    new $P101, "Undef"
  vivify_471:
    $P101."addstate"()
.annotate 'line', 19
    set $P101, $P1462
    unless_null $P101, vivify_472
    new $P101, "Undef"
  vivify_472:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "addstate" :anon :subid("11_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1464
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 26
    .lex "self", param_1464
.annotate 'line', 27
    new $P100, "Undef"
    set $P1465, $P100
    .lex "$id", $P1465
    set $P101, param_1464
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P104, $P102, $P103, "$!states", 0
    unless_null $P104, vivify_473
    new $P104, "Undef"
  vivify_473:
    set $N100, $P104
    new $P105, 'Float'
    set $P105, $N100
    set $P1465, $P105
.annotate 'line', 28
    new $P101, "ResizablePMCArray"
    set $P102, $P1465
    unless_null $P102, vivify_474
    new $P102, "Undef"
  vivify_474:
    set $I100, $P102
    set $P103, param_1464
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P1466, $P104, $P105, "$!states", 0
    unless_null $P1466, vivify_475
    $P1466 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P104, $P105, "$!states", 0, $P1466
  vivify_475:
    set $P1466[$I100], $P101
.annotate 'line', 26
    set $P101, $P1465
    unless_null $P101, vivify_476
    new $P101, "Undef"
  vivify_476:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "addedge" :anon :subid("12_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1468
    .param pmc param_1469
    .param pmc param_1470
    .param pmc param_1471
    .param pmc param_1472
    .param pmc param_1473 :optional :named("newedge")
    .param int has_param_1473 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 32
    .lex "self", param_1468
    .lex "$from", param_1469
    .lex "$to", param_1470
    .lex "$action", param_1471
    .lex "$value", param_1472
    if has_param_1473, optparam_477
    new $P100, "Float"
    assign $P100, 1
    set param_1473, $P100
  optparam_477:
    .lex "$newedge", param_1473
.annotate 'line', 35
    new $P101, "Undef"
    set $P1474, $P101
    .lex "$st", $P1474
.annotate 'line', 33
    set $P102, param_1473
    unless_null $P102, vivify_478
    new $P102, "Undef"
  vivify_478:
    unless $P102, if_1475_end
    new $P103, "Float"
    assign $P103, 1
    set $P104, param_1468
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_bind_attr_obj $P105, $P106, "$!edges", 1, $P103
  if_1475_end:
.annotate 'line', 34
    set $P102, param_1470
    unless_null $P102, vivify_479
    new $P102, "Undef"
  vivify_479:
    set $N100, $P102
    set $N101, 0
    islt $I100, $N100, $N101
    unless $I100, if_1476_end
    set $P103, param_1468
    nqp_decontainerize $P104, $P103
    $P105 = $P104."addstate"()
    set param_1470, $P105
  if_1476_end:
.annotate 'line', 35
    set $P102, param_1469
    unless_null $P102, vivify_480
    new $P102, "Undef"
  vivify_480:
    set $I100, $P102
    set $P103, param_1468
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P1477, $P104, $P105, "$!states", 0
    unless_null $P1477, vivify_481
    $P1477 = root_new ['parrot';'ResizablePMCArray']
  vivify_481:
    set $P106, $P1477[$I100]
    unless_null $P106, vivify_482
    new $P106, "Undef"
  vivify_482:
    set $P1474, $P106
.annotate 'line', 36
    set $P102, $P1474
    unless_null $P102, vivify_483
    new $P102, "Undef"
  vivify_483:
    set $P103, param_1471
    unless_null $P103, vivify_484
    new $P103, "Undef"
  vivify_484:
    push $P102, $P103
.annotate 'line', 37
    set $P102, $P1474
    unless_null $P102, vivify_485
    new $P102, "Undef"
  vivify_485:
    set $P103, param_1472
    unless_null $P103, vivify_486
    new $P103, "Undef"
  vivify_486:
    push $P102, $P103
.annotate 'line', 38
    set $P102, $P1474
    unless_null $P102, vivify_487
    new $P102, "Undef"
  vivify_487:
    set $P103, param_1470
    unless_null $P103, vivify_488
    new $P103, "Undef"
  vivify_488:
    add $P104, $P103, 0
    push $P102, $P104
.annotate 'line', 32
    set $P102, param_1470
    unless_null $P102, vivify_489
    new $P102, "Undef"
  vivify_489:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "states" :anon :subid("13_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1479
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 42
    .lex "self", param_1479
    set $P100, param_1479
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P103, $P101, $P102, "$!states", 0
    unless_null $P103, vivify_490
    new $P103, "Undef"
  vivify_490:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "addnode" :anon :subid("14_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1481
    .param pmc param_1482
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 44
    .lex "self", param_1481
    .lex "$node", param_1482
.annotate 'line', 45
    set $P100, param_1481
    nqp_decontainerize $P101, $P100
    set $P102, param_1482
    unless_null $P102, vivify_491
    new $P102, "Undef"
  vivify_491:
    $P101."regex_nfa"($P102, 1, 0)
.annotate 'line', 44
    set $P100, param_1481
    nqp_decontainerize $P101, $P100
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "regex_nfa" :anon :subid("15_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1484
    .param pmc param_1485
    .param pmc param_1486
    .param pmc param_1487
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 49
    .lex "self", param_1484
    .lex "$node", param_1485
    .lex "$from", param_1486
    .lex "$to", param_1487
.annotate 'line', 50
    new $P100, "Undef"
    set $P1488, $P100
    .lex "$method", $P1488
    set $P101, param_1485
    unless_null $P101, vivify_492
    new $P101, "Undef"
  vivify_492:
    $P102 = $P101."rxtype"()
    set $P1489, $P102
    defined $I1491, $P1489
    if $I1491, default_1490
    new $P103, "String"
    assign $P103, "concat"
    set $P1489, $P103
  default_1490:
    set $P1488, $P1489
.annotate 'line', 51
    set $P102, param_1484
    nqp_decontainerize $P103, $P102
    get_how $P104, $P103
    set $P105, param_1484
    nqp_decontainerize $P106, $P105
    set $P107, $P1488
    unless_null $P107, vivify_493
    new $P107, "Undef"
  vivify_493:
    $P108 = $P104."can"($P106, $P107)
    if $P108, if_1492
.annotate 'line', 53
    set $P116, param_1484
    nqp_decontainerize $P117, $P116
    set $P118, param_1485
    unless_null $P118, vivify_494
    new $P118, "Undef"
  vivify_494:
    set $P119, param_1486
    unless_null $P119, vivify_495
    new $P119, "Undef"
  vivify_495:
    set $P120, param_1487
    unless_null $P120, vivify_496
    new $P120, "Undef"
  vivify_496:
    $P121 = $P117."fate"($P118, $P119, $P120)
    set $P101, $P121
.annotate 'line', 51
    goto if_1492_end
  if_1492:
.annotate 'line', 52
    set $P109, param_1484
    nqp_decontainerize $P110, $P109
    set $P111, param_1485
    unless_null $P111, vivify_497
    new $P111, "Undef"
  vivify_497:
    set $P112, param_1486
    unless_null $P112, vivify_498
    new $P112, "Undef"
  vivify_498:
    set $P113, param_1487
    unless_null $P113, vivify_499
    new $P113, "Undef"
  vivify_499:
    set $P114, $P1488
    unless_null $P114, vivify_500
    new $P114, "Undef"
  vivify_500:
    set $S100, $P114
    $P115 = $P110.$S100($P111, $P112, $P113)
    set $P101, $P115
  if_1492_end:
.annotate 'line', 49
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "fate" :anon :subid("16_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1494
    .param pmc param_1495
    .param pmc param_1496
    .param pmc param_1497
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 56
    .lex "self", param_1494
    .lex "$node", param_1495
    .lex "$from", param_1496
    .lex "$to", param_1497
.annotate 'line', 57
    set $P100, param_1494
    nqp_decontainerize $P101, $P100
    set $P102, param_1496
    unless_null $P102, vivify_501
    new $P102, "Undef"
  vivify_501:
    find_lex $P103, "$?PACKAGE"
    get_who $P104, $P103
    set $P105, $P104["$EDGE_FATE"]
    unless_null $P105, vivify_502
    new $P105, "Undef"
  vivify_502:
    $P106 = $P101."addedge"($P102, 0, $P105, 0, 0 :named("newedge"))
.annotate 'line', 56
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "alt" :anon :subid("17_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1499
    .param pmc param_1500
    .param pmc param_1501
    .param pmc param_1502
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 60
    .const 'Sub' $P1504 = "423_1340317675.197" 
    capture_lex $P1504
    .lex "self", param_1499
    .lex "$node", param_1500
    .lex "$from", param_1501
    .lex "$to", param_1502
.annotate 'line', 61
    set $P101, param_1500
    unless_null $P101, vivify_503
    new $P101, "Undef"
  vivify_503:
    $P102 = $P101."list"()
    defined $I100, $P102
    unless $I100, for_undef_504
    iter $P100, $P102
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop1509_handler
    push_eh $P106
  loop1509_test:
    unless $P100, loop1509_done
    shift $P103, $P100
  loop1509_redo:
    .const 'Sub' $P1504 = "423_1340317675.197" 
    capture_lex $P1504
    $P1504($P103)
  loop1509_next:
    goto loop1509_test
  loop1509_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop1509_next
    eq $P107, .CONTROL_LOOP_REDO, loop1509_redo
  loop1509_done:
    pop_eh 
  for_undef_504:
.annotate 'line', 60
    set $P100, param_1502
    unless_null $P100, vivify_511
    new $P100, "Undef"
  vivify_511:
    .return ($P100)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1503"  :anon :subid("423_1340317675.197") :outer("17_1340317675.197")
    .param pmc param_1506
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 62
    new $P104, "Undef"
    set $P1505, $P104
    .lex "$st", $P1505
    .lex "$_", param_1506
    find_lex $P105, "self"
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$_"
    unless_null $P107, vivify_505
    new $P107, "Undef"
  vivify_505:
    find_lex $P108, "$from"
    unless_null $P108, vivify_506
    new $P108, "Undef"
  vivify_506:
    find_lex $P109, "$to"
    unless_null $P109, vivify_507
    new $P109, "Undef"
  vivify_507:
    $P110 = $P106."regex_nfa"($P107, $P108, $P109)
    set $P1505, $P110
.annotate 'line', 63
    find_lex $P107, "$to"
    unless_null $P107, vivify_508
    new $P107, "Undef"
  vivify_508:
    set $N100, $P107
    set $N101, 0
    islt $I101, $N100, $N101
    if $I101, if_1508
    new $P106, 'Integer'
    set $P106, $I101
    goto if_1508_end
  if_1508:
    set $P108, $P1505
    unless_null $P108, vivify_509
    new $P108, "Undef"
  vivify_509:
    set $N102, $P108
    set $N103, 0
    isgt $I102, $N102, $N103
    new $P106, 'Integer'
    set $P106, $I102
  if_1508_end:
    if $P106, if_1507
    set $P105, $P106
    goto if_1507_end
  if_1507:
    set $P109, $P1505
    unless_null $P109, vivify_510
    new $P109, "Undef"
  vivify_510:
    store_lex "$to", $P109
    set $P105, $P109
  if_1507_end:
.annotate 'line', 61
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "anchor" :anon :subid("18_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1511
    .param pmc param_1512
    .param pmc param_1513
    .param pmc param_1514
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 68
    .lex "self", param_1511
    .lex "$node", param_1512
    .lex "$from", param_1513
    .lex "$to", param_1514
.annotate 'line', 69
    set $P100, param_1511
    nqp_decontainerize $P101, $P100
    set $P102, param_1513
    unless_null $P102, vivify_512
    new $P102, "Undef"
  vivify_512:
    set $P103, param_1514
    unless_null $P103, vivify_513
    new $P103, "Undef"
  vivify_513:
    find_lex $P104, "$?PACKAGE"
    get_who $P105, $P104
    set $P106, $P105["$EDGE_EPSILON"]
    unless_null $P106, vivify_514
    new $P106, "Undef"
  vivify_514:
    $P107 = $P101."addedge"($P102, $P103, $P106, 0)
.annotate 'line', 68
    .return ($P107)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "cclass" :anon :subid("19_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1517
    .param pmc param_1518
    .param pmc param_1519
    .param pmc param_1520
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 82
    .lex "self", param_1517
    .lex "$node", param_1518
    .lex "$from", param_1519
    .lex "$to", param_1520
.annotate 'line', 83
    set $P100, param_1517
    nqp_decontainerize $P101, $P100
    set $P102, param_1519
    unless_null $P102, vivify_516
    new $P102, "Undef"
  vivify_516:
    set $P103, param_1520
    unless_null $P103, vivify_517
    new $P103, "Undef"
  vivify_517:
    find_lex $P104, "$?PACKAGE"
    get_who $P105, $P104
    set $P106, $P105["$EDGE_CHARCLASS"]
    unless_null $P106, vivify_518
    new $P106, "Undef"
  vivify_518:
    set $P107, param_1518
    unless_null $P107, vivify_519
    new $P107, "Undef"
  vivify_519:
    $P108 = $P107."negate"()
    istrue $I100, $P108
    add $P109, $P106, $I100
.annotate 'line', 84
    set $P110, param_1518
    unless_null $P110, vivify_520
    new $P110, "Undef"
  vivify_520:
    $S100 = $P110."subtype"()
    downcase $S101, $S100
    find_lex $P111, "$?PACKAGE"
    get_who $P112, $P111
    set $P1521, $P112["%cclass_code"]
    unless_null $P1521, vivify_521
    $P1521 = root_new ['parrot';'Hash']
  vivify_521:
    set $P113, $P1521[$S101]
    unless_null $P113, vivify_522
    new $P113, "Undef"
  vivify_522:
.annotate 'line', 83
    $P114 = $P101."addedge"($P102, $P103, $P109, $P113)
.annotate 'line', 82
    .return ($P114)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "concat" :anon :subid("20_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1523
    .param pmc param_1524
    .param pmc param_1525
    .param pmc param_1526
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 87
    .lex "self", param_1523
    .lex "$node", param_1524
    .lex "$from", param_1525
    .lex "$to", param_1526
.annotate 'line', 88
    new $P100, "Undef"
    set $P1527, $P100
    .lex "$i", $P1527
.annotate 'line', 89
    new $P101, "Undef"
    set $P1528, $P101
    .lex "$n", $P1528
.annotate 'line', 88
    new $P102, "Float"
    assign $P102, 0
    set $P1527, $P102
.annotate 'line', 89
    set $P102, param_1524
    unless_null $P102, vivify_523
    new $P102, "Undef"
  vivify_523:
    $P103 = $P102."list"()
    set $N100, $P103
    new $P104, 'Float'
    set $P104, $N100
    sub $P105, $P104, 1
    set $P1528, $P105
.annotate 'line', 90
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop1531_handler
    push_eh $P106
  loop1531_test:
    set $P103, param_1525
    unless_null $P103, vivify_524
    new $P103, "Undef"
  vivify_524:
    set $N100, $P103
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1529
    new $P102, 'Integer'
    set $P102, $I100
    goto if_1529_end
  if_1529:
    set $P104, $P1527
    unless_null $P104, vivify_525
    new $P104, "Undef"
  vivify_525:
    set $N102, $P104
    set $P105, $P1528
    unless_null $P105, vivify_526
    new $P105, "Undef"
  vivify_526:
    set $N103, $P105
    islt $I101, $N102, $N103
    new $P102, 'Integer'
    set $P102, $I101
  if_1529_end:
    unless $P102, loop1531_done
  loop1531_redo:
.annotate 'line', 91
    set $P106, param_1523
    nqp_decontainerize $P107, $P106
    set $P108, $P1527
    unless_null $P108, vivify_527
    new $P108, "Undef"
  vivify_527:
    set $I102, $P108
    set $P1530, param_1524
    unless_null $P1530, vivify_528
    $P1530 = root_new ['parrot';'ResizablePMCArray']
  vivify_528:
    set $P109, $P1530[$I102]
    unless_null $P109, vivify_529
    new $P109, "Undef"
  vivify_529:
    set $P110, param_1525
    unless_null $P110, vivify_530
    new $P110, "Undef"
  vivify_530:
    $P111 = $P107."regex_nfa"($P109, $P110, -1)
    set param_1525, $P111
.annotate 'line', 92
    set $P106, $P1527
    unless_null $P106, vivify_531
    new $P106, "Undef"
  vivify_531:
    add $P107, $P106, 1
    set $P1527, $P107
  loop1531_next:
.annotate 'line', 90
    goto loop1531_test
  loop1531_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop1531_next
    eq $P107, .CONTROL_LOOP_REDO, loop1531_redo
  loop1531_done:
    pop_eh 
.annotate 'line', 94
    set $P104, param_1525
    unless_null $P104, vivify_532
    new $P104, "Undef"
  vivify_532:
    set $N100, $P104
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1533
    new $P103, 'Integer'
    set $P103, $I100
    goto if_1533_end
  if_1533:
    set $P105, $P1528
    unless_null $P105, vivify_533
    new $P105, "Undef"
  vivify_533:
    set $N102, $P105
    set $N103, 0
    isge $I101, $N102, $N103
    new $P103, 'Integer'
    set $P103, $I101
  if_1533_end:
    if $P103, if_1532
    set $P113, param_1526
    unless_null $P113, vivify_534
    new $P113, "Undef"
  vivify_534:
    set $P102, $P113
    goto if_1532_end
  if_1532:
    set $P106, param_1523
    nqp_decontainerize $P107, $P106
    set $P108, $P1527
    unless_null $P108, vivify_535
    new $P108, "Undef"
  vivify_535:
    set $I102, $P108
    set $P1534, param_1524
    unless_null $P1534, vivify_536
    $P1534 = root_new ['parrot';'ResizablePMCArray']
  vivify_536:
    set $P109, $P1534[$I102]
    unless_null $P109, vivify_537
    new $P109, "Undef"
  vivify_537:
    set $P110, param_1525
    unless_null $P110, vivify_538
    new $P110, "Undef"
  vivify_538:
    set $P111, param_1526
    unless_null $P111, vivify_539
    new $P111, "Undef"
  vivify_539:
    $P112 = $P107."regex_nfa"($P109, $P110, $P111)
    set $P102, $P112
  if_1532_end:
.annotate 'line', 87
    .return ($P102)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "enumcharlist" :anon :subid("21_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1536
    .param pmc param_1537
    .param pmc param_1538
    .param pmc param_1539
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 97
    .lex "self", param_1536
    .lex "$node", param_1537
    .lex "$from", param_1538
    .lex "$to", param_1539
.annotate 'line', 98
    new $P100, "Undef"
    set $P1540, $P100
    .lex "$charlist", $P1540
    set $P1541, param_1537
    unless_null $P1541, vivify_540
    $P1541 = root_new ['parrot';'ResizablePMCArray']
  vivify_540:
    set $P101, $P1541[0]
    unless_null $P101, vivify_541
    new $P101, "Undef"
  vivify_541:
    set $P1540, $P101
.annotate 'line', 99
    set $P102, param_1537
    unless_null $P102, vivify_542
    new $P102, "Undef"
  vivify_542:
    $S100 = $P102."subtype"()
    iseq $I100, $S100, "zerowidth"
    if $I100, if_1542
.annotate 'line', 104
    set $P103, param_1536
    nqp_decontainerize $P104, $P103
    set $P105, param_1538
    unless_null $P105, vivify_543
    new $P105, "Undef"
  vivify_543:
    set $P106, param_1539
    unless_null $P106, vivify_544
    new $P106, "Undef"
  vivify_544:
    find_lex $P107, "$?PACKAGE"
    get_who $P108, $P107
    set $P110, $P108["$EDGE_CHARLIST"]
    unless_null $P110, vivify_545
    new $P110, "Undef"
  vivify_545:
    set $P111, param_1537
    unless_null $P111, vivify_546
    new $P111, "Undef"
  vivify_546:
    $P112 = $P111."negate"()
    istrue $I101, $P112
    add $P113, $P110, $I101
    set $P114, $P1540
    unless_null $P114, vivify_547
    new $P114, "Undef"
  vivify_547:
    $P115 = $P104."addedge"($P105, $P106, $P113, $P114)
.annotate 'line', 103
    set $P101, $P115
.annotate 'line', 99
    goto if_1542_end
  if_1542:
.annotate 'line', 100
    set $P103, param_1536
    nqp_decontainerize $P104, $P103
    set $P105, param_1538
    unless_null $P105, vivify_548
    new $P105, "Undef"
  vivify_548:
    find_lex $P106, "$?PACKAGE"
    get_who $P107, $P106
    set $P108, $P107["$EDGE_CHARLIST"]
    unless_null $P108, vivify_549
    new $P108, "Undef"
  vivify_549:
    set $P109, param_1537
    unless_null $P109, vivify_550
    new $P109, "Undef"
  vivify_550:
    $P110 = $P109."negate"()
    istrue $I101, $P110
    add $P111, $P108, $I101
    set $P112, $P1540
    unless_null $P112, vivify_551
    new $P112, "Undef"
  vivify_551:
    $P113 = $P104."addedge"($P105, -1, $P111, $P112)
    set param_1538, $P113
.annotate 'line', 101
    set $P103, param_1536
    nqp_decontainerize $P104, $P103
    set $P105, param_1538
    unless_null $P105, vivify_552
    new $P105, "Undef"
  vivify_552:
    find_lex $P106, "$?PACKAGE"
    get_who $P107, $P106
    set $P108, $P107["$EDGE_FATE"]
    unless_null $P108, vivify_553
    new $P108, "Undef"
  vivify_553:
    $P109 = $P104."addedge"($P105, 0, $P108, 0)
.annotate 'line', 99
    set $P101, $P109
  if_1542_end:
.annotate 'line', 97
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "literal" :anon :subid("22_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1544
    .param pmc param_1545
    .param pmc param_1546
    .param pmc param_1547
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 108
    .lex "self", param_1544
    .lex "$node", param_1545
    .lex "$from", param_1546
    .lex "$to", param_1547
.annotate 'line', 109
    new $P100, "Undef"
    set $P1548, $P100
    .lex "$litconst", $P1548
.annotate 'line', 110
    new $P101, "Undef"
    set $P1549, $P101
    .lex "$litlen", $P1549
.annotate 'line', 111
    new $P102, "Undef"
    set $P1550, $P102
    .lex "$i", $P1550
.annotate 'line', 109
    set $P1551, param_1545
    unless_null $P1551, vivify_554
    $P1551 = root_new ['parrot';'ResizablePMCArray']
  vivify_554:
    set $P103, $P1551[0]
    unless_null $P103, vivify_555
    new $P103, "Undef"
  vivify_555:
    set $P1548, $P103
.annotate 'line', 110
    set $P103, $P1548
    unless_null $P103, vivify_556
    new $P103, "Undef"
  vivify_556:
    set $S100, $P103
    length $I100, $S100
    new $P104, 'Integer'
    set $P104, $I100
    sub $P105, $P104, 1
    set $P1549, $P105
.annotate 'line', 111
    new $P103, "Float"
    assign $P103, 0
    set $P1550, $P103
.annotate 'line', 112
    set $P104, $P1549
    unless_null $P104, vivify_557
    new $P104, "Undef"
  vivify_557:
    set $N100, $P104
    set $N101, 0
    isge $I100, $N100, $N101
    if $I100, if_1552
.annotate 'line', 120
    set $P105, param_1544
    nqp_decontainerize $P106, $P105
    set $P107, param_1546
    unless_null $P107, vivify_558
    new $P107, "Undef"
  vivify_558:
    set $P108, param_1547
    unless_null $P108, vivify_559
    new $P108, "Undef"
  vivify_559:
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_EPSILON"]
    unless_null $P111, vivify_560
    new $P111, "Undef"
  vivify_560:
    $P112 = $P106."addedge"($P107, $P108, $P111, 0)
.annotate 'line', 119
    set $P103, $P112
.annotate 'line', 112
    goto if_1552_end
  if_1552:
.annotate 'line', 113
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1553_handler
    push_eh $P107
  loop1553_test:
    set $P105, $P1550
    unless_null $P105, vivify_561
    new $P105, "Undef"
  vivify_561:
    set $N102, $P105
    set $P106, $P1549
    unless_null $P106, vivify_562
    new $P106, "Undef"
  vivify_562:
    set $N103, $P106
    islt $I101, $N102, $N103
    unless $I101, loop1553_done
  loop1553_redo:
.annotate 'line', 114
    set $P107, param_1544
    nqp_decontainerize $P108, $P107
    set $P109, param_1546
    unless_null $P109, vivify_563
    new $P109, "Undef"
  vivify_563:
    find_lex $P110, "$?PACKAGE"
    get_who $P111, $P110
    set $P112, $P111["$EDGE_CODEPOINT"]
    unless_null $P112, vivify_564
    new $P112, "Undef"
  vivify_564:
    set $P113, $P1548
    unless_null $P113, vivify_565
    new $P113, "Undef"
  vivify_565:
    set $S100, $P113
    set $P114, $P1550
    unless_null $P114, vivify_566
    new $P114, "Undef"
  vivify_566:
    set $I102, $P114
    ord $I103, $S100, $I102
    $P115 = $P108."addedge"($P109, -1, $P112, $I103)
    set param_1546, $P115
.annotate 'line', 115
    set $P107, $P1550
    unless_null $P107, vivify_567
    new $P107, "Undef"
  vivify_567:
    add $P108, $P107, 1
    set $P1550, $P108
  loop1553_next:
.annotate 'line', 113
    goto loop1553_test
  loop1553_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1553_next
    eq $P108, .CONTROL_LOOP_REDO, loop1553_redo
  loop1553_done:
    pop_eh 
.annotate 'line', 117
    set $P105, param_1544
    nqp_decontainerize $P106, $P105
    set $P107, param_1546
    unless_null $P107, vivify_568
    new $P107, "Undef"
  vivify_568:
    set $P108, param_1547
    unless_null $P108, vivify_569
    new $P108, "Undef"
  vivify_569:
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_CODEPOINT"]
    unless_null $P111, vivify_570
    new $P111, "Undef"
  vivify_570:
    set $P112, $P1548
    unless_null $P112, vivify_571
    new $P112, "Undef"
  vivify_571:
    set $S100, $P112
    set $P113, $P1550
    unless_null $P113, vivify_572
    new $P113, "Undef"
  vivify_572:
    set $I101, $P113
    ord $I102, $S100, $I101
    $P114 = $P106."addedge"($P107, $P108, $P111, $I102)
.annotate 'line', 112
    set $P103, $P114
  if_1552_end:
.annotate 'line', 108
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "subrule" :anon :subid("23_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1555
    .param pmc param_1556
    .param pmc param_1557
    .param pmc param_1558
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 124
    .const 'Sub' $P1577 = "425_1340317675.197" 
    capture_lex $P1577
    .const 'Sub' $P1563 = "424_1340317675.197" 
    capture_lex $P1563
    .lex "self", param_1555
    .lex "$node", param_1556
    .lex "$from", param_1557
    .lex "$to", param_1558
.annotate 'line', 125
    new $P100, "Undef"
    set $P1559, $P100
    .lex "$subtype", $P1559
    set $P101, param_1556
    unless_null $P101, vivify_573
    new $P101, "Undef"
  vivify_573:
    $P102 = $P101."subtype"()
    set $P1559, $P102
.annotate 'line', 126
    set $P103, param_1556
    unless_null $P103, vivify_574
    new $P103, "Undef"
  vivify_574:
    $S100 = $P103."name"()
    iseq $I100, $S100, "before"
    if $I100, if_1561
    new $P102, 'Integer'
    set $P102, $I100
    goto if_1561_end
  if_1561:
    set $P104, param_1556
    unless_null $P104, vivify_575
    new $P104, "Undef"
  vivify_575:
    $P105 = $P104."negate"()
    isfalse $I101, $P105
    new $P102, 'Integer'
    set $P102, $I101
  if_1561_end:
    if $P102, if_1560
.annotate 'line', 131
    set $P110, $P1559
    unless_null $P110, vivify_576
    new $P110, "Undef"
  vivify_576:
    set $S101, $P110
    isne $I102, $S101, "zerowidth"
    if $I102, if_1569
    new $P109, 'Integer'
    set $P109, $I102
    goto if_1569_end
  if_1569:
.annotate 'line', 132
    set $P113, param_1556
    unless_null $P113, vivify_577
    new $P113, "Undef"
  vivify_577:
    $S102 = $P113."name"()
    iseq $I103, $S102, "alpha"
    unless $I103, unless_1570
    new $P111, 'Integer'
    set $P111, $I103
    goto unless_1570_end
  unless_1570:
.annotate 'line', 133
    set $P115, $P1559
    unless_null $P115, vivify_578
    new $P115, "Undef"
  vivify_578:
    set $S103, $P115
    iseq $I104, $S103, "method"
    if $I104, if_1571
    new $P114, 'Integer'
    set $P114, $I104
    goto if_1571_end
  if_1571:
    set $P1572, param_1556
    unless_null $P1572, vivify_579
    $P1572 = root_new ['parrot';'ResizablePMCArray']
  vivify_579:
    set $P1573, $P1572[0]
    unless_null $P1573, vivify_580
    $P1573 = root_new ['parrot';'ResizablePMCArray']
  vivify_580:
    set $P116, $P1573[0]
    unless_null $P116, vivify_581
    new $P116, "Undef"
  vivify_581:
    set $S104, $P116
    iseq $I105, $S104, "alpha"
    new $P114, 'Integer'
    set $P114, $I105
  if_1571_end:
    set $P111, $P114
  unless_1570_end:
.annotate 'line', 132
    set $P109, $P111
  if_1569_end:
.annotate 'line', 131
    if $P109, if_1568
.annotate 'line', 138
    set $P118, $P1559
    unless_null $P118, vivify_582
    new $P118, "Undef"
  vivify_582:
    set $S105, $P118
    iseq $I106, $S105, "zerowidth"
    if $I106, if_1574
.annotate 'line', 149
    set $P122, $P1559
    unless_null $P122, vivify_583
    new $P122, "Undef"
  vivify_583:
    set $S106, $P122
    iseq $I107, $S106, "capture"
    if $I107, if_1580
    new $P121, 'Integer'
    set $P121, $I107
    goto if_1580_end
  if_1580:
    set $P1581, param_1556
    unless_null $P1581, vivify_584
    $P1581 = root_new ['parrot';'ResizablePMCArray']
  vivify_584:
    set $P123, $P1581[1]
    unless_null $P123, vivify_585
    new $P123, "Undef"
  vivify_585:
    set $P121, $P123
  if_1580_end:
    if $P121, if_1579
.annotate 'line', 151
    set $P131, param_1555
    nqp_decontainerize $P132, $P131
    set $P133, param_1557
    unless_null $P133, vivify_586
    new $P133, "Undef"
  vivify_586:
    set $P134, param_1558
    unless_null $P134, vivify_587
    new $P134, "Undef"
  vivify_587:
    find_lex $P135, "$?PACKAGE"
    get_who $P136, $P135
    set $P137, $P136["$EDGE_SUBRULE"]
    unless_null $P137, vivify_588
    new $P137, "Undef"
  vivify_588:
    set $P1583, param_1556
    unless_null $P1583, vivify_589
    $P1583 = root_new ['parrot';'ResizablePMCArray']
  vivify_589:
    set $P1584, $P1583[0]
    unless_null $P1584, vivify_590
    $P1584 = root_new ['parrot';'ResizablePMCArray']
  vivify_590:
    set $P138, $P1584[0]
    unless_null $P138, vivify_591
    new $P138, "Undef"
  vivify_591:
    $P139 = $P132."addedge"($P133, $P134, $P137, $P138)
    set $P120, $P139
.annotate 'line', 149
    goto if_1579_end
  if_1579:
.annotate 'line', 150
    set $P124, param_1555
    nqp_decontainerize $P125, $P124
    set $P1582, param_1556
    unless_null $P1582, vivify_592
    $P1582 = root_new ['parrot';'ResizablePMCArray']
  vivify_592:
    set $P127, $P1582[1]
    unless_null $P127, vivify_593
    new $P127, "Undef"
  vivify_593:
    set $P128, param_1557
    unless_null $P128, vivify_594
    new $P128, "Undef"
  vivify_594:
    set $P129, param_1558
    unless_null $P129, vivify_595
    new $P129, "Undef"
  vivify_595:
    $P130 = $P125."regex_nfa"($P127, $P128, $P129)
    set $P120, $P130
  if_1579_end:
.annotate 'line', 148
    set $P117, $P120
.annotate 'line', 138
    goto if_1574_end
  if_1574:
.annotate 'line', 139
    set $P120, param_1556
    unless_null $P120, vivify_596
    new $P120, "Undef"
  vivify_596:
    $P121 = $P120."negate"()
    if $P121, if_1575
.annotate 'line', 142
    .const 'Sub' $P1577 = "425_1340317675.197" 
    capture_lex $P1577
    $P123 = $P1577()
    set $P119, $P123
.annotate 'line', 139
    goto if_1575_end
  if_1575:
.annotate 'line', 140
    set $P122, param_1555
    nqp_decontainerize $P123, $P122
    set $P124, param_1556
    unless_null $P124, vivify_604
    new $P124, "Undef"
  vivify_604:
    set $P125, param_1557
    unless_null $P125, vivify_605
    new $P125, "Undef"
  vivify_605:
    set $P127, param_1558
    unless_null $P127, vivify_606
    new $P127, "Undef"
  vivify_606:
    $P128 = $P123."fate"($P124, $P125, $P127)
.annotate 'line', 139
    set $P119, $P128
  if_1575_end:
.annotate 'line', 138
    set $P117, $P119
  if_1574_end:
    set $P108, $P117
.annotate 'line', 131
    goto if_1568_end
  if_1568:
.annotate 'line', 134
    set $P117, param_1555
    nqp_decontainerize $P118, $P117
    set $P119, param_1557
    unless_null $P119, vivify_607
    new $P119, "Undef"
  vivify_607:
    set $P120, param_1558
    unless_null $P120, vivify_608
    new $P120, "Undef"
  vivify_608:
    find_lex $P121, "$?PACKAGE"
    get_who $P122, $P121
    set $P123, $P122["$EDGE_CHARCLASS"]
    unless_null $P123, vivify_609
    new $P123, "Undef"
  vivify_609:
    set $P124, param_1556
    unless_null $P124, vivify_610
    new $P124, "Undef"
  vivify_610:
    $N100 = $P124."negate"()
    add $P125, $P123, $N100
.annotate 'line', 135
    $P126 = $P118."addedge"($P119, $P120, $P125, .CCLASS_ALPHABETIC)
.annotate 'line', 134
    set param_1558, $P126
.annotate 'line', 136
    set $P117, param_1555
    nqp_decontainerize $P118, $P117
    set $P119, param_1557
    unless_null $P119, vivify_611
    new $P119, "Undef"
  vivify_611:
    set $P120, param_1558
    unless_null $P120, vivify_612
    new $P120, "Undef"
  vivify_612:
    find_lex $P121, "$?PACKAGE"
    get_who $P122, $P121
    set $P123, $P122["$EDGE_CODEPOINT"]
    unless_null $P123, vivify_613
    new $P123, "Undef"
  vivify_613:
    set $P124, param_1556
    unless_null $P124, vivify_614
    new $P124, "Undef"
  vivify_614:
    $N100 = $P124."negate"()
    add $P125, $P123, $N100
    $P126 = $P118."addedge"($P119, $P120, $P125, 95)
.annotate 'line', 133
    set $P108, $P126
  if_1568_end:
.annotate 'line', 131
    set $P101, $P108
.annotate 'line', 126
    goto if_1560_end
  if_1560:
    .const 'Sub' $P1563 = "424_1340317675.197" 
    capture_lex $P1563
    $P107 = $P1563()
    set $P101, $P107
  if_1560_end:
.annotate 'line', 124
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1576"  :anon :subid("425_1340317675.197") :outer("23_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 143
    new $P122, "Undef"
    set $P1578, $P122
    .lex "$end", $P1578
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    $P125 = $P124."addstate"()
    set $P1578, $P125
.annotate 'line', 144
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    find_lex $P125, "$from"
    unless_null $P125, vivify_597
    new $P125, "Undef"
  vivify_597:
    set $P127, $P1578
    unless_null $P127, vivify_598
    new $P127, "Undef"
  vivify_598:
    find_lex $P129, "$?PACKAGE"
    get_who $P130, $P129
    set $P131, $P130["$EDGE_SUBRULE"]
    unless_null $P131, vivify_599
    new $P131, "Undef"
  vivify_599:
    find_lex $P132, "$node"
    unless_null $P132, vivify_600
    new $P132, "Undef"
  vivify_600:
    $P133 = $P132."name"()
    $P124."addedge"($P125, $P127, $P131, $P133)
.annotate 'line', 145
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    find_lex $P125, "$node"
    unless_null $P125, vivify_601
    new $P125, "Undef"
  vivify_601:
    set $P127, $P1578
    unless_null $P127, vivify_602
    new $P127, "Undef"
  vivify_602:
    find_lex $P129, "$to"
    unless_null $P129, vivify_603
    new $P129, "Undef"
  vivify_603:
    $P130 = $P124."fate"($P125, $P127, $P129)
.annotate 'line', 142
    .return ($P130)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1562"  :anon :subid("424_1340317675.197") :outer("23_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 127
    new $P106, "Undef"
    set $P1564, $P106
    .lex "$end", $P1564
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    $P109 = $P108."addstate"()
    set $P1564, $P109
.annotate 'line', 128
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    find_lex $P1565, "$node"
    unless_null $P1565, vivify_615
    $P1565 = root_new ['parrot';'ResizablePMCArray']
  vivify_615:
    set $P1566, $P1565[0]
    unless_null $P1566, vivify_616
    $P1566 = root_new ['parrot';'ResizablePMCArray']
  vivify_616:
    set $P1567, $P1566[1]
    unless_null $P1567, vivify_617
    $P1567 = root_new ['parrot';'Hash']
  vivify_617:
    set $P109, $P1567["orig_qast"]
    unless_null $P109, vivify_618
    new $P109, "Undef"
  vivify_618:
    find_lex $P110, "$from"
    unless_null $P110, vivify_619
    new $P110, "Undef"
  vivify_619:
    set $P111, $P1564
    unless_null $P111, vivify_620
    new $P111, "Undef"
  vivify_620:
    $P108."regex_nfa"($P109, $P110, $P111)
.annotate 'line', 129
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$node"
    unless_null $P109, vivify_621
    new $P109, "Undef"
  vivify_621:
    set $P110, $P1564
    unless_null $P110, vivify_622
    new $P110, "Undef"
  vivify_622:
    find_lex $P111, "$to"
    unless_null $P111, vivify_623
    new $P111, "Undef"
  vivify_623:
    $P112 = $P108."fate"($P109, $P110, $P111)
.annotate 'line', 126
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "quant" :anon :subid("24_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1588
    .param pmc param_1589
    .param pmc param_1590
    .param pmc param_1591
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 155
    .const 'Sub' $P1663 = "432_1340317675.197" 
    capture_lex $P1663
    .const 'Sub' $P1650 = "431_1340317675.197" 
    capture_lex $P1650
    .const 'Sub' $P1644 = "430_1340317675.197" 
    capture_lex $P1644
    .const 'Sub' $P1635 = "429_1340317675.197" 
    capture_lex $P1635
    .const 'Sub' $P1603 = "426_1340317675.197" 
    capture_lex $P1603
    new $P1587, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1587, control_1586
    push_eh $P1587
    .lex "self", param_1588
    .lex "$node", param_1589
    .lex "$from", param_1590
    .lex "$to", param_1591
.annotate 'line', 156
    new $P100, "Undef"
    set $P1592, $P100
    .lex "$min", $P1592
.annotate 'line', 157
    new $P101, "Undef"
    set $P1593, $P101
    .lex "$max", $P1593
.annotate 'line', 156
    new $P102, "Float"
    assign $P102, 0
    set $P103, param_1589
    unless_null $P103, vivify_624
    new $P103, "Undef"
  vivify_624:
    $P104 = $P103."min"()
    set $P1594, $P104
    defined $I1596, $P1594
    if $I1596, default_1595
    new $P105, "Float"
    assign $P105, 0
    set $P1594, $P105
  default_1595:
    add $P106, $P102, $P1594
    set $P1592, $P106
.annotate 'line', 157
    new $P102, "Float"
    assign $P102, 0
    set $P103, param_1589
    unless_null $P103, vivify_625
    new $P103, "Undef"
  vivify_625:
    $P104 = $P103."max"()
    set $P1597, $P104
    defined $I1599, $P1597
    if $I1599, default_1598
    new $P105, "Float"
    assign $P105, -1
    set $P1597, $P105
  default_1598:
    add $P106, $P102, $P1597
    set $P1593, $P106
.annotate 'line', 159
    set $P103, $P1593
    unless_null $P103, vivify_626
    new $P103, "Undef"
  vivify_626:
    set $N100, $P103
    set $N101, 1
    isgt $I100, $N100, $N101
    unless $I100, unless_1601
    new $P102, 'Integer'
    set $P102, $I100
    goto unless_1601_end
  unless_1601:
    set $P104, $P1592
    unless_null $P104, vivify_627
    new $P104, "Undef"
  vivify_627:
    set $N102, $P104
    set $N103, 1
    isgt $I101, $N102, $N103
    new $P102, 'Integer'
    set $P102, $I101
  unless_1601_end:
    unless $P102, if_1600_end
    .const 'Sub' $P1603 = "426_1340317675.197" 
    capture_lex $P1603
    $P1603()
  if_1600_end:
.annotate 'line', 190
    set $P103, $P1593
    unless_null $P103, vivify_678
    new $P103, "Undef"
  vivify_678:
    set $N100, $P103
    set $N101, -1
    iseq $I100, $N100, $N101
    if $I100, if_1630
.annotate 'line', 222
    set $P107, $P1592
    unless_null $P107, vivify_679
    new $P107, "Undef"
  vivify_679:
    set $N102, $P107
    set $N103, 0
    iseq $I101, $N102, $N103
    if $I101, if_1661
    new $P106, 'Integer'
    set $P106, $I101
    goto if_1661_end
  if_1661:
    set $P108, $P1593
    unless_null $P108, vivify_680
    new $P108, "Undef"
  vivify_680:
    set $N104, $P108
    set $N105, 1
    iseq $I102, $N104, $N105
    new $P106, 'Integer'
    set $P106, $I102
  if_1661_end:
    if $P106, if_1660
.annotate 'line', 229
    set $P112, param_1588
    nqp_decontainerize $P113, $P112
    set $P114, param_1589
    unless_null $P114, vivify_681
    new $P114, "Undef"
  vivify_681:
    set $P115, param_1590
    unless_null $P115, vivify_682
    new $P115, "Undef"
  vivify_682:
    set $P116, param_1591
    unless_null $P116, vivify_683
    new $P116, "Undef"
  vivify_683:
    $P117 = $P113."fate"($P114, $P115, $P116)
.annotate 'line', 228
    set $P105, $P117
.annotate 'line', 222
    goto if_1660_end
  if_1660:
    .const 'Sub' $P1663 = "432_1340317675.197" 
    capture_lex $P1663
    $P111 = $P1663()
    set $P105, $P111
  if_1660_end:
    set $P102, $P105
.annotate 'line', 190
    goto if_1630_end
  if_1630:
.annotate 'line', 191
    set $P104, $P1592
    unless_null $P104, vivify_698
    new $P104, "Undef"
  vivify_698:
    set $N102, $P104
    set $N103, 0
    iseq $I101, $N102, $N103
    if $I101, if_1631
.annotate 'line', 207
    .const 'Sub' $P1650 = "431_1340317675.197" 
    capture_lex $P1650
    $P1650()
    goto if_1631_end
  if_1631:
.annotate 'line', 192
    set $P1633, param_1589
    unless_null $P1633, vivify_721
    $P1633 = root_new ['parrot';'ResizablePMCArray']
  vivify_721:
    set $P105, $P1633[1]
    unless_null $P105, vivify_722
    new $P105, "Undef"
  vivify_722:
    defined $I102, $P105
    if $I102, if_1632
.annotate 'line', 202
    .const 'Sub' $P1644 = "430_1340317675.197" 
    capture_lex $P1644
    $P1644()
    goto if_1632_end
  if_1632:
.annotate 'line', 192
    .const 'Sub' $P1635 = "429_1340317675.197" 
    capture_lex $P1635
    $P1635()
  if_1632_end:
  if_1631_end:
.annotate 'line', 190
    set $P104, param_1591
    unless_null $P104, vivify_753
    new $P104, "Undef"
  vivify_753:
    set $P102, $P104
  if_1630_end:
.annotate 'line', 155
    .return ($P102)
  control_1586:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P103, exception, "payload"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "_block1602"  :anon :subid("426_1340317675.197") :outer("24_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 159
    .const 'Sub' $P1621 = "428_1340317675.197" 
    capture_lex $P1621
    .const 'Sub' $P1611 = "427_1340317675.197" 
    capture_lex $P1611
.annotate 'line', 160
    new $P105, "Undef"
    set $P1604, $P105
    .lex "$count", $P1604
.annotate 'line', 161
    new $P106, "Undef"
    set $P1605, $P106
    .lex "$st", $P1605
.annotate 'line', 162
    new $P107, "Undef"
    set $P1606, $P107
    .lex "$has_sep", $P1606
.annotate 'line', 160
    new $P108, "Float"
    assign $P108, 0
    set $P1604, $P108
.annotate 'line', 159
    set $P108, $P1605
    unless_null $P108, vivify_628
    new $P108, "Undef"
  vivify_628:
.annotate 'line', 162
    find_lex $P1607, "$node"
    unless_null $P1607, vivify_629
    $P1607 = root_new ['parrot';'ResizablePMCArray']
  vivify_629:
    set $P108, $P1607[1]
    unless_null $P108, vivify_630
    new $P108, "Undef"
  vivify_630:
    defined $I102, $P108
    new $P109, 'Integer'
    set $P109, $I102
    set $P1606, $P109
.annotate 'line', 163
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1618_handler
    push_eh $P113
  loop1618_test:
    set $P109, $P1604
    unless_null $P109, vivify_631
    new $P109, "Undef"
  vivify_631:
    set $N104, $P109
    find_lex $P110, "$max"
    unless_null $P110, vivify_632
    new $P110, "Undef"
  vivify_632:
    set $N105, $P110
    islt $I102, $N104, $N105
    unless $I102, unless_1608
    new $P108, 'Integer'
    set $P108, $I102
    goto unless_1608_end
  unless_1608:
    set $P111, $P1604
    unless_null $P111, vivify_633
    new $P111, "Undef"
  vivify_633:
    set $N106, $P111
    find_lex $P112, "$min"
    unless_null $P112, vivify_634
    new $P112, "Undef"
  vivify_634:
    set $N107, $P112
    islt $I103, $N106, $N107
    new $P108, 'Integer'
    set $P108, $I103
  unless_1608_end:
    unless $P108, loop1618_done
  loop1618_redo:
.annotate 'line', 164
    set $P113, $P1604
    unless_null $P113, vivify_635
    new $P113, "Undef"
  vivify_635:
    set $N108, $P113
    find_lex $P114, "$min"
    unless_null $P114, vivify_636
    new $P114, "Undef"
  vivify_636:
    set $N109, $P114
    isge $I104, $N108, $N109
    unless $I104, if_1609_end
    .const 'Sub' $P1611 = "427_1340317675.197" 
    capture_lex $P1611
    $P1611()
  if_1609_end:
.annotate 'line', 168
    set $P114, $P1606
    unless_null $P114, vivify_642
    new $P114, "Undef"
  vivify_642:
    if $P114, if_1615
    set $P113, $P114
    goto if_1615_end
  if_1615:
    set $P115, $P1604
    unless_null $P115, vivify_643
    new $P115, "Undef"
  vivify_643:
    set $N108, $P115
    set $N109, 0
    isgt $I104, $N108, $N109
    new $P113, 'Integer'
    set $P113, $I104
  if_1615_end:
    unless $P113, if_1614_end
.annotate 'line', 169
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P1616, "$node"
    unless_null $P1616, vivify_644
    $P1616 = root_new ['parrot';'ResizablePMCArray']
  vivify_644:
    set $P118, $P1616[1]
    unless_null $P118, vivify_645
    new $P118, "Undef"
  vivify_645:
    find_lex $P119, "$from"
    unless_null $P119, vivify_646
    new $P119, "Undef"
  vivify_646:
    $P120 = $P117."regex_nfa"($P118, $P119, -1)
    store_lex "$from", $P120
  if_1614_end:
.annotate 'line', 171
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    find_lex $P1617, "$node"
    unless_null $P1617, vivify_647
    $P1617 = root_new ['parrot';'ResizablePMCArray']
  vivify_647:
    set $P115, $P1617[0]
    unless_null $P115, vivify_648
    new $P115, "Undef"
  vivify_648:
    find_lex $P116, "$from"
    unless_null $P116, vivify_649
    new $P116, "Undef"
  vivify_649:
    $P117 = $P114."regex_nfa"($P115, $P116, -1)
    store_lex "$from", $P117
.annotate 'line', 172
    set $P113, $P1604
    unless_null $P113, vivify_650
    new $P113, "Undef"
  vivify_650:
    add $P114, $P113, 1
    set $P1604, $P114
  loop1618_next:
.annotate 'line', 163
    goto loop1618_test
  loop1618_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1618_next
    eq $P114, .CONTROL_LOOP_REDO, loop1618_redo
  loop1618_done:
    pop_eh 
.annotate 'line', 174
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$from"
    unless_null $P110, vivify_651
    new $P110, "Undef"
  vivify_651:
    find_lex $P111, "$to"
    unless_null $P111, vivify_652
    new $P111, "Undef"
  vivify_652:
    find_lex $P112, "$?PACKAGE"
    get_who $P113, $P112
    set $P114, $P113["$EDGE_EPSILON"]
    unless_null $P114, vivify_653
    new $P114, "Undef"
  vivify_653:
    $P109."addedge"($P110, $P111, $P114, 0)
.annotate 'line', 175
    find_lex $P108, "$max"
    unless_null $P108, vivify_654
    new $P108, "Undef"
  vivify_654:
    set $N104, $P108
    set $N105, -1
    iseq $I102, $N104, $N105
    unless $I102, if_1619_end
    .const 'Sub' $P1621 = "428_1340317675.197" 
    capture_lex $P1621
    $P1621()
  if_1619_end:
.annotate 'line', 187
    find_lex $P109, "$to"
    unless_null $P109, vivify_674
    new $P109, "Undef"
  vivify_674:
    set $N104, $P109
    set $N105, 0
    islt $I102, $N104, $N105
    if $I102, if_1629
    new $P108, 'Integer'
    set $P108, $I102
    goto if_1629_end
  if_1629:
    set $P110, $P1605
    unless_null $P110, vivify_675
    new $P110, "Undef"
  vivify_675:
    set $N106, $P110
    set $N107, 0
    isgt $I103, $N106, $N107
    new $P108, 'Integer'
    set $P108, $I103
  if_1629_end:
    unless $P108, if_1628_end
    set $P111, $P1605
    unless_null $P111, vivify_676
    new $P111, "Undef"
  vivify_676:
    store_lex "$to", $P111
  if_1628_end:
.annotate 'line', 188
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    find_lex $P109, "$to"
    unless_null $P109, vivify_677
    new $P109, "Undef"
  vivify_677:
    setattribute $P108, 'payload', $P109
    throw $P108
.annotate 'line', 159
    .return ()
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1610"  :anon :subid("427_1340317675.197") :outer("426_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 165
    new $P115, "Undef"
    set $P1612, $P115
    .lex "$f", $P1612
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$from"
    unless_null $P118, vivify_637
    new $P118, "Undef"
  vivify_637:
    find_lex $P119, "$to"
    unless_null $P119, vivify_638
    new $P119, "Undef"
  vivify_638:
    find_lex $P120, "$?PACKAGE"
    get_who $P121, $P120
    set $P122, $P121["$EDGE_EPSILON"]
    unless_null $P122, vivify_639
    new $P122, "Undef"
  vivify_639:
    $P123 = $P117."addedge"($P118, $P119, $P122, 0)
    set $P1612, $P123
.annotate 'line', 166
    find_lex $P117, "$st"
    unless_null $P117, vivify_640
    new $P117, "Undef"
  vivify_640:
    unless $P117, unless_1613
    set $P116, $P117
    goto unless_1613_end
  unless_1613:
    set $P118, $P1612
    unless_null $P118, vivify_641
    new $P118, "Undef"
  vivify_641:
    set $P116, $P118
  unless_1613_end:
    store_lex "$st", $P116
.annotate 'line', 164
    .return ($P116)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1620"  :anon :subid("428_1340317675.197") :outer("426_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 176
    new $P109, "Undef"
    set $P1622, $P109
    .lex "$start", $P1622
.annotate 'line', 179
    new $P110, "Undef"
    set $P1623, $P110
    .lex "$looper", $P1623
.annotate 'line', 176
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."addstate"()
    set $P1622, $P113
.annotate 'line', 177
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$from"
    unless_null $P113, vivify_655
    new $P113, "Undef"
  vivify_655:
    set $P114, $P1622
    unless_null $P114, vivify_656
    new $P114, "Undef"
  vivify_656:
    find_lex $P115, "$?PACKAGE"
    get_who $P116, $P115
    set $P117, $P116["$EDGE_EPSILON"]
    unless_null $P117, vivify_657
    new $P117, "Undef"
  vivify_657:
    $P112."addedge"($P113, $P114, $P117, 0)
.annotate 'line', 178
    set $P111, $P1622
    unless_null $P111, vivify_658
    new $P111, "Undef"
  vivify_658:
    store_lex "$from", $P111
.annotate 'line', 179
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."addstate"()
    set $P1623, $P113
.annotate 'line', 180
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    set $P113, $P1623
    unless_null $P113, vivify_659
    new $P113, "Undef"
  vivify_659:
    find_lex $P114, "$to"
    unless_null $P114, vivify_660
    new $P114, "Undef"
  vivify_660:
    find_lex $P115, "$?PACKAGE"
    get_who $P116, $P115
    set $P117, $P116["$EDGE_EPSILON"]
    unless_null $P117, vivify_661
    new $P117, "Undef"
  vivify_661:
    $P112."addedge"($P113, $P114, $P117, 0)
.annotate 'line', 181
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    set $P113, $P1623
    unless_null $P113, vivify_662
    new $P113, "Undef"
  vivify_662:
    find_lex $P114, "$from"
    unless_null $P114, vivify_663
    new $P114, "Undef"
  vivify_663:
    find_lex $P115, "$?PACKAGE"
    get_who $P116, $P115
    set $P117, $P116["$EDGE_EPSILON"]
    unless_null $P117, vivify_664
    new $P117, "Undef"
  vivify_664:
    $P112."addedge"($P113, $P114, $P117, 0)
.annotate 'line', 182
    find_lex $P112, "$has_sep"
    unless_null $P112, vivify_665
    new $P112, "Undef"
  vivify_665:
    if $P112, if_1625
    set $P111, $P112
    goto if_1625_end
  if_1625:
    find_lex $P113, "$count"
    unless_null $P113, vivify_666
    new $P113, "Undef"
  vivify_666:
    set $N106, $P113
    set $N107, 0
    isgt $I103, $N106, $N107
    new $P111, 'Integer'
    set $P111, $I103
  if_1625_end:
    unless $P111, if_1624_end
.annotate 'line', 183
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    find_lex $P1626, "$node"
    unless_null $P1626, vivify_667
    $P1626 = root_new ['parrot';'ResizablePMCArray']
  vivify_667:
    set $P116, $P1626[1]
    unless_null $P116, vivify_668
    new $P116, "Undef"
  vivify_668:
    find_lex $P117, "$from"
    unless_null $P117, vivify_669
    new $P117, "Undef"
  vivify_669:
    $P118 = $P115."regex_nfa"($P116, $P117, -1)
    store_lex "$from", $P118
  if_1624_end:
.annotate 'line', 185
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P1627, "$node"
    unless_null $P1627, vivify_670
    $P1627 = root_new ['parrot';'ResizablePMCArray']
  vivify_670:
    set $P113, $P1627[0]
    unless_null $P113, vivify_671
    new $P113, "Undef"
  vivify_671:
    find_lex $P114, "$from"
    unless_null $P114, vivify_672
    new $P114, "Undef"
  vivify_672:
    set $P115, $P1623
    unless_null $P115, vivify_673
    new $P115, "Undef"
  vivify_673:
    $P116 = $P112."regex_nfa"($P113, $P114, $P115)
.annotate 'line', 175
    .return ($P116)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1662"  :anon :subid("432_1340317675.197") :outer("24_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 223
    new $P109, "Undef"
    set $P1664, $P109
    .lex "$st", $P1664
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P1665, "$node"
    unless_null $P1665, vivify_684
    $P1665 = root_new ['parrot';'ResizablePMCArray']
  vivify_684:
    set $P112, $P1665[0]
    unless_null $P112, vivify_685
    new $P112, "Undef"
  vivify_685:
    find_lex $P113, "$from"
    unless_null $P113, vivify_686
    new $P113, "Undef"
  vivify_686:
    find_lex $P114, "$to"
    unless_null $P114, vivify_687
    new $P114, "Undef"
  vivify_687:
    $P115 = $P111."regex_nfa"($P112, $P113, $P114)
    set $P1664, $P115
.annotate 'line', 224
    find_lex $P111, "$to"
    unless_null $P111, vivify_688
    new $P111, "Undef"
  vivify_688:
    set $N106, $P111
    set $N107, 0
    islt $I103, $N106, $N107
    if $I103, if_1667
    new $P110, 'Integer'
    set $P110, $I103
    goto if_1667_end
  if_1667:
    set $P112, $P1664
    unless_null $P112, vivify_689
    new $P112, "Undef"
  vivify_689:
    set $N108, $P112
    set $N109, 0
    isgt $I104, $N108, $N109
    new $P110, 'Integer'
    set $P110, $I104
  if_1667_end:
    unless $P110, if_1666_end
    set $P113, $P1664
    unless_null $P113, vivify_690
    new $P113, "Undef"
  vivify_690:
    store_lex "$to", $P113
  if_1666_end:
.annotate 'line', 225
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$from"
    unless_null $P112, vivify_691
    new $P112, "Undef"
  vivify_691:
    find_lex $P113, "$to"
    unless_null $P113, vivify_692
    new $P113, "Undef"
  vivify_692:
    find_lex $P114, "$?PACKAGE"
    get_who $P115, $P114
    set $P116, $P115["$EDGE_EPSILON"]
    unless_null $P116, vivify_693
    new $P116, "Undef"
  vivify_693:
    $P117 = $P111."addedge"($P112, $P113, $P116, 0)
    set $P1664, $P117
.annotate 'line', 226
    find_lex $P111, "$to"
    unless_null $P111, vivify_694
    new $P111, "Undef"
  vivify_694:
    set $N106, $P111
    set $N107, 0
    islt $I103, $N106, $N107
    if $I103, if_1669
    new $P110, 'Integer'
    set $P110, $I103
    goto if_1669_end
  if_1669:
    set $P112, $P1664
    unless_null $P112, vivify_695
    new $P112, "Undef"
  vivify_695:
    set $N108, $P112
    set $N109, 0
    isgt $I104, $N108, $N109
    new $P110, 'Integer'
    set $P110, $I104
  if_1669_end:
    unless $P110, if_1668_end
    set $P113, $P1664
    unless_null $P113, vivify_696
    new $P113, "Undef"
  vivify_696:
    store_lex "$to", $P113
  if_1668_end:
.annotate 'line', 222
    find_lex $P110, "$to"
    unless_null $P110, vivify_697
    new $P110, "Undef"
  vivify_697:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1649"  :anon :subid("431_1340317675.197") :outer("24_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 208
    new $P105, "Undef"
    set $P1651, $P105
    .lex "$start", $P1651
.annotate 'line', 210
    new $P106, "Undef"
    set $P1652, $P106
    .lex "$looper", $P1652
.annotate 'line', 211
    new $P107, "Undef"
    set $P1653, $P107
    .lex "$st", $P1653
.annotate 'line', 208
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    $P110 = $P109."addstate"()
    set $P1651, $P110
.annotate 'line', 209
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$from"
    unless_null $P110, vivify_699
    new $P110, "Undef"
  vivify_699:
    set $P111, $P1651
    unless_null $P111, vivify_700
    new $P111, "Undef"
  vivify_700:
    find_lex $P112, "$?PACKAGE"
    get_who $P113, $P112
    set $P114, $P113["$EDGE_EPSILON"]
    unless_null $P114, vivify_701
    new $P114, "Undef"
  vivify_701:
    $P109."addedge"($P110, $P111, $P114, 0)
.annotate 'line', 210
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    $P110 = $P109."addstate"()
    set $P1652, $P110
.annotate 'line', 211
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P1654, "$node"
    unless_null $P1654, vivify_702
    $P1654 = root_new ['parrot';'ResizablePMCArray']
  vivify_702:
    set $P110, $P1654[0]
    unless_null $P110, vivify_703
    new $P110, "Undef"
  vivify_703:
    set $P111, $P1651
    unless_null $P111, vivify_704
    new $P111, "Undef"
  vivify_704:
    set $P112, $P1652
    unless_null $P112, vivify_705
    new $P112, "Undef"
  vivify_705:
    $P113 = $P109."regex_nfa"($P110, $P111, $P112)
    set $P1653, $P113
.annotate 'line', 212
    find_lex $P1656, "$node"
    unless_null $P1656, vivify_706
    $P1656 = root_new ['parrot';'ResizablePMCArray']
  vivify_706:
    set $P108, $P1656[1]
    unless_null $P108, vivify_707
    new $P108, "Undef"
  vivify_707:
    defined $I102, $P108
    if $I102, if_1655
.annotate 'line', 216
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    set $P111, $P1652
    unless_null $P111, vivify_708
    new $P111, "Undef"
  vivify_708:
    set $P112, $P1651
    unless_null $P112, vivify_709
    new $P112, "Undef"
  vivify_709:
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_EPSILON"]
    unless_null $P115, vivify_710
    new $P115, "Undef"
  vivify_710:
    $P110."addedge"($P111, $P112, $P115, 0)
.annotate 'line', 215
    goto if_1655_end
  if_1655:
.annotate 'line', 213
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P1657, "$node"
    unless_null $P1657, vivify_711
    $P1657 = root_new ['parrot';'ResizablePMCArray']
  vivify_711:
    set $P111, $P1657[1]
    unless_null $P111, vivify_712
    new $P111, "Undef"
  vivify_712:
    set $P112, $P1652
    unless_null $P112, vivify_713
    new $P112, "Undef"
  vivify_713:
    set $P113, $P1651
    unless_null $P113, vivify_714
    new $P113, "Undef"
  vivify_714:
    $P110."regex_nfa"($P111, $P112, $P113)
  if_1655_end:
.annotate 'line', 218
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    set $P110, $P1652
    unless_null $P110, vivify_715
    new $P110, "Undef"
  vivify_715:
    find_lex $P111, "$to"
    unless_null $P111, vivify_716
    new $P111, "Undef"
  vivify_716:
    find_lex $P112, "$?PACKAGE"
    get_who $P113, $P112
    set $P114, $P113["$EDGE_EPSILON"]
    unless_null $P114, vivify_717
    new $P114, "Undef"
  vivify_717:
    $P109."addedge"($P110, $P111, $P114, 0)
.annotate 'line', 219
    find_lex $P110, "$to"
    unless_null $P110, vivify_718
    new $P110, "Undef"
  vivify_718:
    set $N104, $P110
    set $N105, 0
    islt $I102, $N104, $N105
    if $I102, if_1659
    new $P109, 'Integer'
    set $P109, $I102
    goto if_1659_end
  if_1659:
    set $P111, $P1653
    unless_null $P111, vivify_719
    new $P111, "Undef"
  vivify_719:
    set $N106, $P111
    set $N107, 0
    isgt $I103, $N106, $N107
    new $P109, 'Integer'
    set $P109, $I103
  if_1659_end:
    if $P109, if_1658
    set $P108, $P109
    goto if_1658_end
  if_1658:
    set $P112, $P1653
    unless_null $P112, vivify_720
    new $P112, "Undef"
  vivify_720:
    store_lex "$to", $P112
    set $P108, $P112
  if_1658_end:
.annotate 'line', 207
    .return ($P108)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1643"  :anon :subid("430_1340317675.197") :outer("24_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 204
    new $P110, "Undef"
    set $P1645, $P110
    .lex "$st", $P1645
.annotate 'line', 203
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P1646, "$node"
    unless_null $P1646, vivify_723
    $P1646 = root_new ['parrot';'ResizablePMCArray']
  vivify_723:
    set $P113, $P1646[0]
    unless_null $P113, vivify_724
    new $P113, "Undef"
  vivify_724:
    find_lex $P114, "$from"
    unless_null $P114, vivify_725
    new $P114, "Undef"
  vivify_725:
    find_lex $P115, "$from"
    unless_null $P115, vivify_726
    new $P115, "Undef"
  vivify_726:
    $P112."regex_nfa"($P113, $P114, $P115)
.annotate 'line', 204
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$from"
    unless_null $P113, vivify_727
    new $P113, "Undef"
  vivify_727:
    find_lex $P114, "$to"
    unless_null $P114, vivify_728
    new $P114, "Undef"
  vivify_728:
    find_lex $P115, "$?PACKAGE"
    get_who $P116, $P115
    set $P117, $P116["$EDGE_EPSILON"]
    unless_null $P117, vivify_729
    new $P117, "Undef"
  vivify_729:
    $P118 = $P112."addedge"($P113, $P114, $P117, 0)
    set $P1645, $P118
.annotate 'line', 205
    find_lex $P113, "$to"
    unless_null $P113, vivify_730
    new $P113, "Undef"
  vivify_730:
    set $N104, $P113
    set $N105, 0
    islt $I103, $N104, $N105
    if $I103, if_1648
    new $P112, 'Integer'
    set $P112, $I103
    goto if_1648_end
  if_1648:
    set $P114, $P1645
    unless_null $P114, vivify_731
    new $P114, "Undef"
  vivify_731:
    set $N106, $P114
    set $N107, 0
    isgt $I104, $N106, $N107
    new $P112, 'Integer'
    set $P112, $I104
  if_1648_end:
    if $P112, if_1647
    set $P111, $P112
    goto if_1647_end
  if_1647:
    set $P115, $P1645
    unless_null $P115, vivify_732
    new $P115, "Undef"
  vivify_732:
    store_lex "$to", $P115
    set $P111, $P115
  if_1647_end:
.annotate 'line', 202
    .return ($P111)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1634"  :anon :subid("429_1340317675.197") :outer("24_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 193
    new $P106, "Undef"
    set $P1636, $P106
    .lex "$start", $P1636
.annotate 'line', 195
    new $P107, "Undef"
    set $P1637, $P107
    .lex "$looper", $P1637
.annotate 'line', 196
    new $P108, "Undef"
    set $P1638, $P108
    .lex "$st", $P1638
.annotate 'line', 193
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    $P111 = $P110."addstate"()
    set $P1636, $P111
.annotate 'line', 194
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$from"
    unless_null $P111, vivify_733
    new $P111, "Undef"
  vivify_733:
    set $P112, $P1636
    unless_null $P112, vivify_734
    new $P112, "Undef"
  vivify_734:
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_EPSILON"]
    unless_null $P115, vivify_735
    new $P115, "Undef"
  vivify_735:
    $P110."addedge"($P111, $P112, $P115, 0)
.annotate 'line', 195
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    $P111 = $P110."addstate"()
    set $P1637, $P111
.annotate 'line', 196
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P1639, "$node"
    unless_null $P1639, vivify_736
    $P1639 = root_new ['parrot';'ResizablePMCArray']
  vivify_736:
    set $P111, $P1639[0]
    unless_null $P111, vivify_737
    new $P111, "Undef"
  vivify_737:
    set $P112, $P1636
    unless_null $P112, vivify_738
    new $P112, "Undef"
  vivify_738:
    set $P113, $P1637
    unless_null $P113, vivify_739
    new $P113, "Undef"
  vivify_739:
    $P114 = $P110."regex_nfa"($P111, $P112, $P113)
    set $P1638, $P114
.annotate 'line', 197
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P1640, "$node"
    unless_null $P1640, vivify_740
    $P1640 = root_new ['parrot';'ResizablePMCArray']
  vivify_740:
    set $P111, $P1640[1]
    unless_null $P111, vivify_741
    new $P111, "Undef"
  vivify_741:
    set $P112, $P1637
    unless_null $P112, vivify_742
    new $P112, "Undef"
  vivify_742:
    set $P113, $P1636
    unless_null $P113, vivify_743
    new $P113, "Undef"
  vivify_743:
    $P110."regex_nfa"($P111, $P112, $P113)
.annotate 'line', 198
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    set $P111, $P1637
    unless_null $P111, vivify_744
    new $P111, "Undef"
  vivify_744:
    find_lex $P112, "$to"
    unless_null $P112, vivify_745
    new $P112, "Undef"
  vivify_745:
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_EPSILON"]
    unless_null $P115, vivify_746
    new $P115, "Undef"
  vivify_746:
    $P110."addedge"($P111, $P112, $P115, 0)
.annotate 'line', 199
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$from"
    unless_null $P111, vivify_747
    new $P111, "Undef"
  vivify_747:
    find_lex $P112, "$to"
    unless_null $P112, vivify_748
    new $P112, "Undef"
  vivify_748:
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_EPSILON"]
    unless_null $P115, vivify_749
    new $P115, "Undef"
  vivify_749:
    $P116 = $P110."addedge"($P111, $P112, $P115, 0)
    set $P1638, $P116
.annotate 'line', 200
    find_lex $P111, "$to"
    unless_null $P111, vivify_750
    new $P111, "Undef"
  vivify_750:
    set $N104, $P111
    set $N105, 0
    islt $I103, $N104, $N105
    if $I103, if_1642
    new $P110, 'Integer'
    set $P110, $I103
    goto if_1642_end
  if_1642:
    set $P112, $P1638
    unless_null $P112, vivify_751
    new $P112, "Undef"
  vivify_751:
    set $N106, $P112
    set $N107, 0
    isgt $I104, $N106, $N107
    new $P110, 'Integer'
    set $P110, $I104
  if_1642_end:
    if $P110, if_1641
    set $P109, $P110
    goto if_1641_end
  if_1641:
    set $P113, $P1638
    unless_null $P113, vivify_752
    new $P113, "Undef"
  vivify_752:
    store_lex "$to", $P113
    set $P109, $P113
  if_1641_end:
.annotate 'line', 192
    .return ($P109)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "pastnode" :anon :subid("25_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1671
    .param pmc param_1672
    .param pmc param_1673
    .param pmc param_1674
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 233
    .lex "self", param_1671
    .lex "$node", param_1672
    .lex "$from", param_1673
    .lex "$to", param_1674
.annotate 'line', 234
    set $P102, param_1672
    unless_null $P102, vivify_754
    new $P102, "Undef"
  vivify_754:
    $S100 = $P102."subtype"()
    iseq $I100, $S100, "zerowidth"
    unless $I100, unless_1676
    new $P101, 'Integer'
    set $P101, $I100
    goto unless_1676_end
  unless_1676:
    set $P103, param_1672
    unless_null $P103, vivify_755
    new $P103, "Undef"
  vivify_755:
    $S101 = $P103."subtype"()
    iseq $I101, $S101, "declarative"
    new $P101, 'Integer'
    set $P101, $I101
  unless_1676_end:
    if $P101, if_1675
.annotate 'line', 236
    set $P112, param_1671
    nqp_decontainerize $P113, $P112
    set $P114, param_1672
    unless_null $P114, vivify_756
    new $P114, "Undef"
  vivify_756:
    set $P115, param_1673
    unless_null $P115, vivify_757
    new $P115, "Undef"
  vivify_757:
    set $P116, param_1674
    unless_null $P116, vivify_758
    new $P116, "Undef"
  vivify_758:
    $P117 = $P113."fate"($P114, $P115, $P116)
    set $P100, $P117
.annotate 'line', 234
    goto if_1675_end
  if_1675:
.annotate 'line', 235
    set $P104, param_1671
    nqp_decontainerize $P105, $P104
    set $P106, param_1673
    unless_null $P106, vivify_759
    new $P106, "Undef"
  vivify_759:
    set $P107, param_1674
    unless_null $P107, vivify_760
    new $P107, "Undef"
  vivify_760:
    find_lex $P108, "$?PACKAGE"
    get_who $P109, $P108
    set $P110, $P109["$EDGE_EPSILON"]
    unless_null $P110, vivify_761
    new $P110, "Undef"
  vivify_761:
    $P111 = $P105."addedge"($P106, $P107, $P110, 0)
    set $P100, $P111
  if_1675_end:
.annotate 'line', 233
    .return ($P100)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "subcapture" :anon :subid("26_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1678
    .param pmc param_1679
    .param pmc param_1680
    .param pmc param_1681
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 239
    .lex "self", param_1678
    .lex "$node", param_1679
    .lex "$from", param_1680
    .lex "$to", param_1681
.annotate 'line', 240
    set $P100, param_1678
    nqp_decontainerize $P101, $P100
    set $P1682, param_1679
    unless_null $P1682, vivify_762
    $P1682 = root_new ['parrot';'ResizablePMCArray']
  vivify_762:
    set $P102, $P1682[0]
    unless_null $P102, vivify_763
    new $P102, "Undef"
  vivify_763:
    set $P103, param_1680
    unless_null $P103, vivify_764
    new $P103, "Undef"
  vivify_764:
    set $P104, param_1681
    unless_null $P104, vivify_765
    new $P104, "Undef"
  vivify_765:
    $P105 = $P101."regex_nfa"($P102, $P103, $P104)
.annotate 'line', 239
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "past" :anon :subid("27_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1686
    .param pmc param_1687 :optional :named("non_empty")
    .param int has_param_1687 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 243
    .const 'Sub' $P1692 = "433_1340317675.197" 
    capture_lex $P1692
    new $P1685, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1685, control_1684
    push_eh $P1685
    .lex "self", param_1686
    if has_param_1687, optparam_766
    new $P100, "Undef"
    set param_1687, $P100
  optparam_766:
    .lex "$non_empty", param_1687
.annotate 'line', 248
    new $P101, "Undef"
    set $P1688, $P101
    .lex "$past", $P1688
.annotate 'line', 244
    set $P102, param_1686
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P105, $P103, $P104, "$!edges", 1
    unless_null $P105, vivify_767
    new $P105, "Undef"
  vivify_767:
    if $P105, unless_1689_end
.annotate 'line', 245
    set $P106, param_1687
    unless_null $P106, vivify_768
    new $P106, "Undef"
  vivify_768:
    if $P106, unless_1690_end
    new $P107, "Exception"
    set $P107['type'], .CONTROL_RETURN
    new $P108, "Float"
    assign $P108, 0
    setattribute $P107, 'payload', $P108
    throw $P107
  unless_1690_end:
.annotate 'line', 246
    set $P106, param_1686
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?PACKAGE"
    get_who $P109, $P108
    set $P110, $P109["$EDGE_FATE"]
    unless_null $P110, vivify_769
    new $P110, "Undef"
  vivify_769:
    $P107."addedge"(1, 0, $P110, 0, 1 :named("newedge"))
  unless_1689_end:
.annotate 'line', 248
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "PAST"
    get_who $P104, $P103
    set $P105, $P104["Op"]
    $P106 = $P105."new"("list" :named("pasttype"))
    set $P1688, $P106
.annotate 'line', 249
    set $P103, param_1686
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P106, $P104, $P105, "$!states", 0
    unless_null $P106, vivify_770
    new $P106, "Undef"
  vivify_770:
    defined $I100, $P106
    unless $I100, for_undef_771
    iter $P102, $P106
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1694_handler
    push_eh $P108
  loop1694_test:
    unless $P102, loop1694_done
    shift $P107, $P102
  loop1694_redo:
    .const 'Sub' $P1692 = "433_1340317675.197" 
    capture_lex $P1692
    $P1692($P107)
  loop1694_next:
    goto loop1694_test
  loop1694_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1694_next
    eq $P109, .CONTROL_LOOP_REDO, loop1694_redo
  loop1694_done:
    pop_eh 
  for_undef_771:
.annotate 'line', 243
    set $P102, $P1688
    unless_null $P102, vivify_774
    new $P102, "Undef"
  vivify_774:
    .return ($P102)
  control_1684:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P103, exception, "payload"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1691"  :anon :subid("433_1340317675.197") :outer("27_1340317675.197")
    .param pmc param_1693
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 249
    .lex "$_", param_1693
.annotate 'line', 250
    find_lex $P108, "$past"
    unless_null $P108, vivify_772
    new $P108, "Undef"
  vivify_772:
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
    find_lex $P113, "$_"
    unless_null $P113, vivify_773
    new $P113, "Undef"
  vivify_773:
    $P114 = $P112."new"($P113 :flat, "list" :named("pasttype"))
    $P115 = $P108."push"($P114)
.annotate 'line', 249
    .return ($P115)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "mergesubrule" :anon :subid("28_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1696
    .param pmc param_1697
    .param pmc param_1698
    .param pmc param_1699
    .param pmc param_1700
    .param pmc param_1701
    .param pmc param_1702 :optional
    .param int has_param_1702 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 255
    .const 'Sub' $P1722 = "435_1340317675.197" 
    capture_lex $P1722
    .const 'Sub' $P1714 = "434_1340317675.197" 
    capture_lex $P1714
    .lex "self", param_1696
    .lex "$start", param_1697
    .lex "$to", param_1698
    .lex "$fate", param_1699
    .lex "$cursor", param_1700
    .lex "$name", param_1701
    if has_param_1702, optparam_775
    $P1703 = root_new ['parrot';'Hash']
    set param_1702, $P1703
  optparam_775:
    .lex "%caller_seen", param_1702
.annotate 'line', 257
    $P1705 = root_new ['parrot';'Hash']
    set $P1704, $P1705
    .lex "%seen", $P1704
.annotate 'line', 258
    $P1707 = root_new ['parrot';'ResizablePMCArray']
    set $P1706, $P1707
    .lex "@substates", $P1706
.annotate 'line', 257
    set $P1708, param_1702
    unless_null $P1708, vivify_776
    $P1708 = root_new ['parrot';'Hash']
  vivify_776:
    clone $P100, $P1708
    set $P1704, $P100
.annotate 'line', 255
    set $P1709, $P1706
    unless_null $P1709, vivify_777
    $P1709 = root_new ['parrot';'ResizablePMCArray']
  vivify_777:
.annotate 'line', 259
    set $P100, param_1700
    unless_null $P100, vivify_778
    new $P100, "Undef"
  vivify_778:
    set $P101, param_1701
    unless_null $P101, vivify_779
    new $P101, "Undef"
  vivify_779:
    set $S100, $P101
    can $I100, $P100, $S100
    unless $I100, if_1710_end
.annotate 'line', 260
    set $P102, param_1701
    unless_null $P102, vivify_780
    new $P102, "Undef"
  vivify_780:
    set $P1712, $P1704
    unless_null $P1712, vivify_781
    $P1712 = root_new ['parrot';'Hash']
  vivify_781:
    set $P103, $P1712[$P102]
    unless_null $P103, vivify_782
    new $P103, "Undef"
  vivify_782:
    isfalse $I101, $P103
    unless $I101, if_1711_end
    .const 'Sub' $P1714 = "434_1340317675.197" 
    capture_lex $P1714
    $P1714()
  if_1711_end:
.annotate 'line', 264
    set $P1719, $P1706
    unless_null $P1719, vivify_788
    $P1719 = root_new ['parrot';'ResizablePMCArray']
  vivify_788:
    isfalse $I101, $P1719
    if $I101, if_1718
    new $P102, 'Integer'
    set $P102, $I101
    goto if_1718_end
  if_1718:
    set $P103, param_1701
    unless_null $P103, vivify_789
    new $P103, "Undef"
  vivify_789:
    set $P1720, $P1704
    unless_null $P1720, vivify_790
    $P1720 = root_new ['parrot';'Hash']
  vivify_790:
    set $P104, $P1720[$P103]
    unless_null $P104, vivify_791
    new $P104, "Undef"
  vivify_791:
    isfalse $I102, $P104
    new $P102, 'Integer'
    set $P102, $I102
  if_1718_end:
    unless $P102, if_1717_end
    .const 'Sub' $P1722 = "435_1340317675.197" 
    capture_lex $P1722
    $P1722()
  if_1717_end:
  if_1710_end:
.annotate 'line', 279
    new $P100, "Float"
    assign $P100, 1
    set $P101, param_1701
    unless_null $P101, vivify_806
    new $P101, "Undef"
  vivify_806:
    set $P1738, $P1704
    unless_null $P1738, vivify_807
    $P1738 = root_new ['parrot';'Hash']
    set $P1704, $P1738
  vivify_807:
    set $P1738[$P101], $P100
.annotate 'line', 280
    set $P100, param_1696
    nqp_decontainerize $P101, $P100
    set $P102, param_1697
    unless_null $P102, vivify_808
    new $P102, "Undef"
  vivify_808:
    set $P103, param_1698
    unless_null $P103, vivify_809
    new $P103, "Undef"
  vivify_809:
    set $P104, param_1699
    unless_null $P104, vivify_810
    new $P104, "Undef"
  vivify_810:
    set $P1739, $P1706
    unless_null $P1739, vivify_811
    $P1739 = root_new ['parrot';'ResizablePMCArray']
  vivify_811:
    set $P105, param_1700
    unless_null $P105, vivify_812
    new $P105, "Undef"
  vivify_812:
    set $P1740, $P1704
    unless_null $P1740, vivify_813
    $P1740 = root_new ['parrot';'Hash']
  vivify_813:
    $P106 = $P101."mergesubstates"($P102, $P103, $P104, $P1739, $P105, $P1740)
.annotate 'line', 255
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1713"  :anon :subid("434_1340317675.197") :outer("28_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 261
    new $P104, "Undef"
    set $P1715, $P104
    .lex "$meth", $P1715
    find_lex $P105, "$cursor"
    unless_null $P105, vivify_783
    new $P105, "Undef"
  vivify_783:
    get_how $P106, $P105
    find_lex $P107, "$cursor"
    unless_null $P107, vivify_784
    new $P107, "Undef"
  vivify_784:
    find_lex $P108, "$name"
    unless_null $P108, vivify_785
    new $P108, "Undef"
  vivify_785:
    $P109 = $P106."find_method"($P107, $P108, 1 :named("no_trace"))
    set $P1715, $P109
.annotate 'line', 262
    set $P106, $P1715
    unless_null $P106, vivify_786
    new $P106, "Undef"
  vivify_786:
    can $I102, $P106, "nqpattr"
    if $I102, if_1716
    new $P105, 'Integer'
    set $P105, $I102
    goto if_1716_end
  if_1716:
    set $P107, $P1715
    unless_null $P107, vivify_787
    new $P107, "Undef"
  vivify_787:
    $P108 = $P107."nqpattr"("nfa")
    store_lex "@substates", $P108
    set $P105, $P108
  if_1716_end:
.annotate 'line', 260
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "_block1721"  :anon :subid("435_1340317675.197") :outer("28_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 264
    .const 'Sub' $P1734 = "437_1340317675.197" 
    capture_lex $P1734
    .const 'Sub' $P1728 = "436_1340317675.197" 
    capture_lex $P1728
.annotate 'line', 267
    $P1724 = root_new ['parrot';'Hash']
    set $P1723, $P1724
    .lex "%protorx", $P1723
.annotate 'line', 268
    new $P105, "Undef"
    set $P1725, $P105
    .lex "$nfa", $P1725
.annotate 'line', 269
    new $P106, "Undef"
    set $P1726, $P106
    .lex "$gotmatch", $P1726
.annotate 'line', 267
    find_lex $P107, "$cursor"
    unless_null $P107, vivify_792
    new $P107, "Undef"
  vivify_792:
    get_how $P108, $P107
    find_lex $P109, "$cursor"
    unless_null $P109, vivify_793
    new $P109, "Undef"
  vivify_793:
    .const 'Sub' $P1728 = "436_1340317675.197" 
    newclosure $P1729, $P1728
    $P110 = $P108."cache"($P109, "!protoregex_table", $P1729)
    set $P1723, $P110
.annotate 'line', 268
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "QRegex"
    get_who $P109, $P108
    set $P110, $P109["NFA"]
    $P111 = $P110."new"()
    set $P1725, $P111
.annotate 'line', 269
    new $P107, "Float"
    assign $P107, 0
    set $P1726, $P107
.annotate 'line', 270
    find_lex $P107, "$name"
    unless_null $P107, vivify_795
    new $P107, "Undef"
  vivify_795:
    set $S101, $P107
    set $P1731, $P1723
    unless_null $P1731, vivify_796
    $P1731 = root_new ['parrot';'Hash']
  vivify_796:
    exists $I103, $P1731[$S101]
    unless $I103, if_1730_end
.annotate 'line', 271
    find_lex $P109, "$name"
    unless_null $P109, vivify_797
    new $P109, "Undef"
  vivify_797:
    set $P1732, $P1723
    unless_null $P1732, vivify_798
    $P1732 = root_new ['parrot';'Hash']
  vivify_798:
    set $P110, $P1732[$P109]
    unless_null $P110, vivify_799
    new $P110, "Undef"
  vivify_799:
    defined $I104, $P110
    unless $I104, for_undef_800
    iter $P108, $P110
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1736_handler
    push_eh $P113
  loop1736_test:
    unless $P108, loop1736_done
    shift $P111, $P108
  loop1736_redo:
    .const 'Sub' $P1734 = "437_1340317675.197" 
    capture_lex $P1734
    $P1734($P111)
  loop1736_next:
    goto loop1736_test
  loop1736_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1736_next
    eq $P114, .CONTROL_LOOP_REDO, loop1736_redo
  loop1736_done:
    pop_eh 
  for_undef_800:
  if_1730_end:
.annotate 'line', 276
    set $P108, $P1726
    unless_null $P108, vivify_804
    new $P108, "Undef"
  vivify_804:
    if $P108, if_1737
    set $P107, $P108
    goto if_1737_end
  if_1737:
    set $P109, $P1725
    unless_null $P109, vivify_805
    new $P109, "Undef"
  vivify_805:
    $P110 = $P109."states"()
    store_lex "@substates", $P110
    set $P107, $P110
  if_1737_end:
.annotate 'line', 264
    .return ($P107)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1727"  :anon :subid("436_1340317675.197") :outer("435_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 267
    find_lex $P110, "$cursor"
    unless_null $P110, vivify_794
    new $P110, "Undef"
  vivify_794:
    $P111 = $P110."!protoregex_table"()
    .return ($P111)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1733"  :anon :subid("437_1340317675.197") :outer("435_1340317675.197")
    .param pmc param_1735
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 271
    .lex "$rxname", param_1735
.annotate 'line', 272
    find_lex $P112, "$nfa"
    unless_null $P112, vivify_801
    new $P112, "Undef"
  vivify_801:
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_SUBRULE"]
    unless_null $P115, vivify_802
    new $P115, "Undef"
  vivify_802:
    set $P116, param_1735
    unless_null $P116, vivify_803
    new $P116, "Undef"
  vivify_803:
    $P112."addedge"(1, 0, $P115, $P116)
.annotate 'line', 273
    new $P112, "Float"
    assign $P112, 1
    store_lex "$gotmatch", $P112
.annotate 'line', 271
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "mergesubstates" :anon :subid("29_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1742
    .param pmc param_1743
    .param pmc param_1744
    .param pmc param_1745
    .param pmc param_1746
    .param pmc param_1747
    .param pmc param_1748 :optional
    .param int has_param_1748 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 283
    .const 'Sub' $P1753 = "438_1340317675.197" 
    capture_lex $P1753
    .lex "self", param_1742
    .lex "$start", param_1743
    .lex "$to", param_1744
    .lex "$fate", param_1745
    .lex "@substates", param_1746
    .lex "$cursor", param_1747
    if has_param_1748, optparam_814
    $P1749 = root_new ['parrot';'Hash']
    set param_1748, $P1749
  optparam_814:
    .lex "%seen", param_1748
.annotate 'line', 284
    set $P1751, param_1746
    unless_null $P1751, vivify_815
    $P1751 = root_new ['parrot';'ResizablePMCArray']
  vivify_815:
    if $P1751, if_1750
.annotate 'line', 320
    set $P106, param_1742
    nqp_decontainerize $P107, $P106
    set $P108, param_1743
    unless_null $P108, vivify_816
    new $P108, "Undef"
  vivify_816:
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_FATE"]
    unless_null $P111, vivify_817
    new $P111, "Undef"
  vivify_817:
    set $P112, param_1745
    unless_null $P112, vivify_818
    new $P112, "Undef"
  vivify_818:
    $P113 = $P107."addedge"($P108, 0, $P111, $P112)
.annotate 'line', 319
    set $P100, $P113
.annotate 'line', 284
    goto if_1750_end
  if_1750:
    .const 'Sub' $P1753 = "438_1340317675.197" 
    capture_lex $P1753
    $P105 = $P1753()
    set $P100, $P105
  if_1750_end:
.annotate 'line', 283
    .return ($P100)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "_block1752"  :anon :subid("438_1340317675.197") :outer("29_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 284
    .const 'Sub' $P1763 = "439_1340317675.197" 
    capture_lex $P1763
.annotate 'line', 286
    new $P101, "Undef"
    set $P1754, $P101
    .lex "$substart", $P1754
.annotate 'line', 298
    new $P102, "Undef"
    set $P1755, $P102
    .lex "$subend", $P1755
.annotate 'line', 299
    new $P103, "Undef"
    set $P1756, $P103
    .lex "$i", $P1756
.annotate 'line', 286
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    $P106 = $P105."addstate"()
    set $P1754, $P106
.annotate 'line', 290
    find_lex $P1757, "@substates"
    unless_null $P1757, vivify_819
    $P1757 = root_new ['parrot';'ResizablePMCArray']
  vivify_819:
    clone $P104, $P1757
    store_lex "@substates", $P104
.annotate 'line', 291
    find_lex $P1758, "@substates"
    unless_null $P1758, vivify_820
    $P1758 = root_new ['parrot';'ResizablePMCArray']
  vivify_820:
    shift $P104, $P1758
.annotate 'line', 292
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1761_handler
    push_eh $P110
  loop1761_test:
    find_lex $P1759, "@substates"
    unless_null $P1759, vivify_821
    $P1759 = root_new ['parrot';'ResizablePMCArray']
  vivify_821:
    unless $P1759, loop1761_done
  loop1761_redo:
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P107, $P105, $P106, "$!states", 0
    unless_null $P107, vivify_822
    new $P107, "Undef"
  vivify_822:
    find_lex $P1760, "@substates"
    unless_null $P1760, vivify_823
    $P1760 = root_new ['parrot';'ResizablePMCArray']
  vivify_823:
    shift $P108, $P1760
    clone $P109, $P108
    push $P107, $P109
  loop1761_next:
    goto loop1761_test
  loop1761_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1761_next
    eq $P111, .CONTROL_LOOP_REDO, loop1761_redo
  loop1761_done:
    pop_eh 
.annotate 'line', 298
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P107, $P105, $P106, "$!states", 0
    unless_null $P107, vivify_824
    new $P107, "Undef"
  vivify_824:
    elements $I100, $P107
    new $P108, 'Integer'
    set $P108, $I100
    set $P1755, $P108
.annotate 'line', 299
    set $P104, $P1754
    unless_null $P104, vivify_825
    new $P104, "Undef"
  vivify_825:
    set $P1756, $P104
.annotate 'line', 300
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1779_handler
    push_eh $P109
  loop1779_test:
    set $P104, $P1756
    unless_null $P104, vivify_826
    new $P104, "Undef"
  vivify_826:
    set $N100, $P104
    set $P105, $P1755
    unless_null $P105, vivify_827
    new $P105, "Undef"
  vivify_827:
    set $N101, $P105
    islt $I100, $N100, $N101
    unless $I100, loop1779_done
  loop1779_redo:
    .const 'Sub' $P1763 = "439_1340317675.197" 
    capture_lex $P1763
    $P1763()
  loop1779_next:
    goto loop1779_test
  loop1779_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1779_next
    eq $P111, .CONTROL_LOOP_REDO, loop1779_redo
  loop1779_done:
    pop_eh 
.annotate 'line', 314
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$start"
    unless_null $P106, vivify_863
    new $P106, "Undef"
  vivify_863:
    set $P107, $P1754
    unless_null $P107, vivify_864
    new $P107, "Undef"
  vivify_864:
    add $P108, $P107, 1
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_EPSILON"]
    unless_null $P111, vivify_865
    new $P111, "Undef"
  vivify_865:
    $P105."addedge"($P106, $P108, $P111, 0)
.annotate 'line', 315
    find_lex $P105, "$to"
    unless_null $P105, vivify_866
    new $P105, "Undef"
  vivify_866:
    set $N100, $P105
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1780
.annotate 'line', 317
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    set $P116, $P1754
    unless_null $P116, vivify_867
    new $P116, "Undef"
  vivify_867:
    find_lex $P117, "$?PACKAGE"
    get_who $P118, $P117
    set $P119, $P118["$EDGE_FATE"]
    unless_null $P119, vivify_868
    new $P119, "Undef"
  vivify_868:
    find_lex $P120, "$fate"
    unless_null $P120, vivify_869
    new $P120, "Undef"
  vivify_869:
    $P121 = $P115."addedge"($P116, 0, $P119, $P120)
    set $P104, $P121
.annotate 'line', 315
    goto if_1780_end
  if_1780:
.annotate 'line', 316
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    set $P108, $P1754
    unless_null $P108, vivify_870
    new $P108, "Undef"
  vivify_870:
    find_lex $P109, "$to"
    unless_null $P109, vivify_871
    new $P109, "Undef"
  vivify_871:
    find_lex $P110, "$?PACKAGE"
    get_who $P111, $P110
    set $P112, $P111["$EDGE_EPSILON"]
    unless_null $P112, vivify_872
    new $P112, "Undef"
  vivify_872:
    $P113 = $P107."addedge"($P108, $P109, $P112, 0)
    set $P104, $P113
  if_1780_end:
.annotate 'line', 284
    .return ($P104)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "_block1762"  :anon :subid("439_1340317675.197") :outer("438_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 301
    new $P106, "Undef"
    set $P1764, $P106
    .lex "$substate", $P1764
.annotate 'line', 302
    new $P107, "Undef"
    set $P1765, $P107
    .lex "$j", $P1765
.annotate 'line', 303
    new $P108, "Undef"
    set $P1766, $P108
    .lex "$k", $P1766
.annotate 'line', 301
    find_lex $P109, "$i"
    unless_null $P109, vivify_828
    new $P109, "Undef"
  vivify_828:
    set $I101, $P109
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P1767, $P111, $P112, "$!states", 0
    unless_null $P1767, vivify_829
    $P1767 = root_new ['parrot';'ResizablePMCArray']
  vivify_829:
    set $P113, $P1767[$I101]
    unless_null $P113, vivify_830
    new $P113, "Undef"
  vivify_830:
    set $P1764, $P113
.annotate 'line', 302
    new $P109, "Float"
    assign $P109, 0
    set $P1765, $P109
.annotate 'line', 303
    set $P109, $P1764
    unless_null $P109, vivify_831
    new $P109, "Undef"
  vivify_831:
    elements $I101, $P109
    new $P110, 'Integer'
    set $P110, $I101
    set $P1766, $P110
.annotate 'line', 304
    new $P111, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P111, loop1778_handler
    push_eh $P111
  loop1778_test:
    set $P109, $P1765
    unless_null $P109, vivify_832
    new $P109, "Undef"
  vivify_832:
    set $N102, $P109
    set $P110, $P1766
    unless_null $P110, vivify_833
    new $P110, "Undef"
  vivify_833:
    set $N103, $P110
    islt $I101, $N102, $N103
    unless $I101, loop1778_done
  loop1778_redo:
.annotate 'line', 305
    set $P111, $P1765
    unless_null $P111, vivify_834
    new $P111, "Undef"
  vivify_834:
    add $P112, $P111, 2
    set $I102, $P112
    set $P1768, $P1764
    unless_null $P1768, vivify_835
    $P1768 = root_new ['parrot';'ResizablePMCArray']
  vivify_835:
    set $P113, $P1768[$I102]
    unless_null $P113, vivify_836
    new $P113, "Undef"
  vivify_836:
    find_lex $P114, "$substart"
    unless_null $P114, vivify_837
    new $P114, "Undef"
  vivify_837:
    add $P115, $P113, $P114
    set $P116, $P1765
    unless_null $P116, vivify_838
    new $P116, "Undef"
  vivify_838:
    add $P117, $P116, 2
    set $I103, $P117
    set $P1769, $P1764
    unless_null $P1769, vivify_839
    $P1769 = root_new ['parrot';'ResizablePMCArray']
    set $P1764, $P1769
  vivify_839:
    set $P1769[$I103], $P115
.annotate 'line', 307
    set $P111, $P1765
    unless_null $P111, vivify_840
    new $P111, "Undef"
  vivify_840:
    set $I102, $P111
    set $P1771, $P1764
    unless_null $P1771, vivify_841
    $P1771 = root_new ['parrot';'ResizablePMCArray']
  vivify_841:
    set $P112, $P1771[$I102]
    unless_null $P112, vivify_842
    new $P112, "Undef"
  vivify_842:
    set $N104, $P112
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_FATE"]
    unless_null $P115, vivify_843
    new $P115, "Undef"
  vivify_843:
    set $N105, $P115
    iseq $I103, $N104, $N105
    unless $I103, if_1770_end
.annotate 'line', 306
    find_lex $P116, "$fate"
    unless_null $P116, vivify_844
    new $P116, "Undef"
  vivify_844:
    set $P117, $P1765
    unless_null $P117, vivify_845
    new $P117, "Undef"
  vivify_845:
    add $P118, $P117, 1
    set $I104, $P118
    set $P1772, $P1764
    unless_null $P1772, vivify_846
    $P1772 = root_new ['parrot';'ResizablePMCArray']
    set $P1764, $P1772
  vivify_846:
    set $P1772[$I104], $P116
  if_1770_end:
.annotate 'line', 309
    set $P111, $P1765
    unless_null $P111, vivify_847
    new $P111, "Undef"
  vivify_847:
    set $I102, $P111
    set $P1774, $P1764
    unless_null $P1774, vivify_848
    $P1774 = root_new ['parrot';'ResizablePMCArray']
  vivify_848:
    set $P112, $P1774[$I102]
    unless_null $P112, vivify_849
    new $P112, "Undef"
  vivify_849:
    set $N104, $P112
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_SUBRULE"]
    unless_null $P115, vivify_850
    new $P115, "Undef"
  vivify_850:
    set $N105, $P115
    iseq $I103, $N104, $N105
    unless $I103, if_1773_end
.annotate 'line', 308
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$i"
    unless_null $P118, vivify_851
    new $P118, "Undef"
  vivify_851:
    set $P119, $P1765
    unless_null $P119, vivify_852
    new $P119, "Undef"
  vivify_852:
    add $P120, $P119, 2
    set $I104, $P120
    set $P1775, $P1764
    unless_null $P1775, vivify_853
    $P1775 = root_new ['parrot';'ResizablePMCArray']
  vivify_853:
    set $P121, $P1775[$I104]
    unless_null $P121, vivify_854
    new $P121, "Undef"
  vivify_854:
    find_lex $P122, "$fate"
    unless_null $P122, vivify_855
    new $P122, "Undef"
  vivify_855:
    find_lex $P123, "$cursor"
    unless_null $P123, vivify_856
    new $P123, "Undef"
  vivify_856:
    set $P124, $P1765
    unless_null $P124, vivify_857
    new $P124, "Undef"
  vivify_857:
    add $P125, $P124, 1
    set $I105, $P125
    set $P1776, $P1764
    unless_null $P1776, vivify_858
    $P1776 = root_new ['parrot';'ResizablePMCArray']
  vivify_858:
    set $P126, $P1776[$I105]
    unless_null $P126, vivify_859
    new $P126, "Undef"
  vivify_859:
    find_lex $P1777, "%seen"
    unless_null $P1777, vivify_860
    $P1777 = root_new ['parrot';'Hash']
  vivify_860:
    $P117."mergesubrule"($P118, $P121, $P122, $P123, $P126, $P1777)
  if_1773_end:
.annotate 'line', 310
    set $P111, $P1765
    unless_null $P111, vivify_861
    new $P111, "Undef"
  vivify_861:
    add $P112, $P111, 3
    set $P1765, $P112
  loop1778_next:
.annotate 'line', 304
    goto loop1778_test
  loop1778_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P112, exception, 'type'
    eq $P112, .CONTROL_LOOP_NEXT, loop1778_next
    eq $P112, .CONTROL_LOOP_REDO, loop1778_redo
  loop1778_done:
    pop_eh 
.annotate 'line', 312
    find_lex $P109, "$i"
    unless_null $P109, vivify_862
    new $P109, "Undef"
  vivify_862:
    add $P110, $P109, 1
    store_lex "$i", $P110
.annotate 'line', 300
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "run" :anon :subid("30_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1782
    .param pmc param_1783
    .param pmc param_1784
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 324
    .lex "self", param_1782
    .lex "$target", param_1783
    .lex "$offset", param_1784
.annotate 'line', 371
    set $P100, param_1782
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P103, $P101, $P102, "$!states", 0
    unless_null $P103, vivify_873
    new $P103, "Undef"
  vivify_873:
    set $P104, param_1783
    unless_null $P104, vivify_874
    new $P104, "Undef"
  vivify_874:
    set $S100, $P104
    set $P105, param_1784
    unless_null $P105, vivify_875
    new $P105, "Undef"
  vivify_875:
    set $I100, $P105
    nqp_nfa_run_protoregex $P106, $P103, $S100, $I100
.annotate 'line', 324
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "run_alt" :anon :subid("31_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1786
    .param pmc param_1787
    .param pmc param_1788
    .param pmc param_1789
    .param pmc param_1790
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 374
    .lex "self", param_1786
    .lex "$target", param_1787
    .lex "$offset", param_1788
    .lex "$bstack", param_1789
    .lex "$cstack", param_1790
.annotate 'line', 375
    set $P100, param_1786
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P103, $P101, $P102, "$!states", 0
    unless_null $P103, vivify_876
    new $P103, "Undef"
  vivify_876:
    set $P104, param_1787
    unless_null $P104, vivify_877
    new $P104, "Undef"
  vivify_877:
    set $S100, $P104
    set $P105, param_1788
    unless_null $P105, vivify_878
    new $P105, "Undef"
  vivify_878:
    set $I100, $P105
    set $P106, param_1789
    unless_null $P106, vivify_879
    new $P106, "Undef"
  vivify_879:
    set $P107, param_1790
    unless_null $P107, vivify_880
    new $P107, "Undef"
  vivify_880:
    nqp_nfa_run_alternation $P103, $S100, $I100, $P106, $P107
.annotate 'line', 374
    .return ()
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "__dump" :anon :subid("32_1340317675.197") :outer("422_1340317675.197")
    .param pmc param_1792
    .param pmc param_1793
    .param pmc param_1794
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 378
    .const 'Sub' $P1798 = "440_1340317675.197" 
    capture_lex $P1798
    .lex "self", param_1792
    .lex "$dumper", param_1793
    .lex "$label", param_1794
.annotate 'line', 379
    new $P100, "Undef"
    set $P1795, $P100
    .lex "$subindent", $P1795
.annotate 'line', 381
    new $P101, "Undef"
    set $P1796, $P101
    .lex "$st", $P1796
.annotate 'line', 379
    set $P102, param_1793
    unless_null $P102, vivify_881
    new $P102, "Undef"
  vivify_881:
    $P103 = $P102."newIndent"()
    set $P1795, $P103
.annotate 'line', 380
    "print"("[")
.annotate 'line', 381
    new $P102, "Float"
    assign $P102, 0
    set $P1796, $P102
.annotate 'line', 382
    set $P103, param_1792
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 1
    repr_get_attr_obj $P106, $P104, $P105, "$!states", 0
    unless_null $P106, vivify_882
    new $P106, "Undef"
  vivify_882:
    defined $I100, $P106
    unless $I100, for_undef_883
    iter $P102, $P106
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1800_handler
    push_eh $P108
  loop1800_test:
    unless $P102, loop1800_done
    shift $P107, $P102
  loop1800_redo:
    .const 'Sub' $P1798 = "440_1340317675.197" 
    capture_lex $P1798
    $P1798($P107)
  loop1800_next:
    goto loop1800_test
  loop1800_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1800_next
    eq $P110, .CONTROL_LOOP_REDO, loop1800_redo
  loop1800_done:
    pop_eh 
  for_undef_883:
.annotate 'line', 386
    set $P102, param_1793
    unless_null $P102, vivify_888
    new $P102, "Undef"
  vivify_888:
    $P102."deleteIndent"()
.annotate 'line', 387
    set $P102, param_1793
    unless_null $P102, vivify_889
    new $P102, "Undef"
  vivify_889:
    $P103 = $P102."indent"()
    $P104 = "print"("\n", $P103, "]")
.annotate 'line', 378
    .return ($P104)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1797"  :anon :subid("440_1340317675.197") :outer("32_1340317675.197")
    .param pmc param_1799
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 382
    .lex "$_", param_1799
.annotate 'line', 383
    new $P108, 'String'
    set $P108, "\n"
    find_lex $P109, "$subindent"
    unless_null $P109, vivify_884
    new $P109, "Undef"
  vivify_884:
    concat $P110, $P108, $P109
    concat $P111, $P110, "'%d' => [%s]"
    set $S100, $P111
    find_lex $P112, "$st"
    unless_null $P112, vivify_885
    new $P112, "Undef"
  vivify_885:
    find_lex $P113, "$_"
    unless_null $P113, vivify_886
    new $P113, "Undef"
  vivify_886:
    join $S101, ", ", $P113
    new $P114, "ResizablePMCArray"
    push $P114, $P112
    push $P114, $S101
    sprintf $S102, $S100, $P114
    "print"($S102)
.annotate 'line', 384
    find_lex $P108, "$st"
    unless_null $P108, vivify_887
    new $P108, "Undef"
  vivify_887:
    add $P109, $P108, 1
    store_lex "$st", $P109
.annotate 'line', 382
    .return ($P109)
.end


.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace ["NQPCursorRole"]
.sub "_block1802"  :subid("72_1340317675.197") :outer("421_1340317675.197")
    .param pmc param_1804
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 392
    .const 'Sub' $P2235 = "71_1340317675.197" 
    capture_lex $P2235
    .const 'Sub' $P2225 = "70_1340317675.197" 
    capture_lex $P2225
    .const 'Sub' $P2215 = "69_1340317675.197" 
    capture_lex $P2215
    .const 'Sub' $P2205 = "68_1340317675.197" 
    capture_lex $P2205
    .const 'Sub' $P2195 = "67_1340317675.197" 
    capture_lex $P2195
    .const 'Sub' $P2185 = "66_1340317675.197" 
    capture_lex $P2185
    .const 'Sub' $P2175 = "65_1340317675.197" 
    capture_lex $P2175
    .const 'Sub' $P2165 = "64_1340317675.197" 
    capture_lex $P2165
    .const 'Sub' $P2155 = "63_1340317675.197" 
    capture_lex $P2155
    .const 'Sub' $P2142 = "62_1340317675.197" 
    capture_lex $P2142
    .const 'Sub' $P2129 = "61_1340317675.197" 
    capture_lex $P2129
    .const 'Sub' $P2114 = "60_1340317675.197" 
    capture_lex $P2114
    .const 'Sub' $P2094 = "59_1340317675.197" 
    capture_lex $P2094
    .const 'Sub' $P2079 = "58_1340317675.197" 
    capture_lex $P2079
    .const 'Sub' $P2061 = "57_1340317675.197" 
    capture_lex $P2061
    .const 'Sub' $P2050 = "56_1340317675.197" 
    capture_lex $P2050
    .const 'Sub' $P2043 = "55_1340317675.197" 
    capture_lex $P2043
    .const 'Sub' $P2036 = "54_1340317675.197" 
    capture_lex $P2036
    .const 'Sub' $P2023 = "53_1340317675.197" 
    capture_lex $P2023
    .const 'Sub' $P2000 = "52_1340317675.197" 
    capture_lex $P2000
    .const 'Sub' $P1984 = "51_1340317675.197" 
    capture_lex $P1984
    .const 'Sub' $P1973 = "50_1340317675.197" 
    capture_lex $P1973
    .const 'Sub' $P1953 = "49_1340317675.197" 
    capture_lex $P1953
    .const 'Sub' $P1932 = "48_1340317675.197" 
    capture_lex $P1932
    .const 'Sub' $P1909 = "47_1340317675.197" 
    capture_lex $P1909
    .const 'Sub' $P1902 = "46_1340317675.197" 
    capture_lex $P1902
    .const 'Sub' $P1897 = "45_1340317675.197" 
    capture_lex $P1897
    .const 'Sub' $P1891 = "44_1340317675.197" 
    capture_lex $P1891
    .const 'Sub' $P1889 = "43_1340317675.197" 
    capture_lex $P1889
    .const 'Sub' $P1881 = "42_1340317675.197" 
    capture_lex $P1881
    .const 'Sub' $P1877 = "41_1340317675.197" 
    capture_lex $P1877
    .const 'Sub' $P1871 = "40_1340317675.197" 
    capture_lex $P1871
    .const 'Sub' $P1866 = "39_1340317675.197" 
    capture_lex $P1866
    .const 'Sub' $P1855 = "38_1340317675.197" 
    capture_lex $P1855
    .const 'Sub' $P1848 = "37_1340317675.197" 
    capture_lex $P1848
    .const 'Sub' $P1816 = "36_1340317675.197" 
    capture_lex $P1816
    .const 'Sub' $P1813 = "35_1340317675.197" 
    capture_lex $P1813
    .const 'Sub' $P1810 = "34_1340317675.197" 
    capture_lex $P1810
    .const 'Sub' $P1807 = "33_1340317675.197" 
    capture_lex $P1807
    .lex "$?CLASS", param_1804
.annotate 'line', 408
    new $P100, "Undef"
    set $P1805, $P100
    .lex "$NO_CAPS", $P1805
.annotate 'line', 525
    new $P101, "Undef"
    set $P1806, $P101
    .lex "$pass_mark", $P1806
.annotate 'line', 408
    new $P102, "Hash"
    set $P1805, $P102
.annotate 'line', 525
    new $P102, "Float"
    assign $P102, 1
    set $P1806, $P102
.annotate 'line', 815
    .const 'Sub' $P2235 = "71_1340317675.197" 
    newclosure $P2240, $P2235
.annotate 'line', 392
    .return ($P2240)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "target" :anon :subid("33_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1808
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 404
    .lex "self", param_1808
    set $P102, param_1808
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_str $S1809, $P103, $P104, "$!target", -1
    .return ($S1809)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "from" :anon :subid("34_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1811
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 405
    .lex "self", param_1811
    set $P102, param_1811
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_int $I1812, $P103, $P104, "$!from", -1
    .return ($I1812)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "pos" :anon :subid("35_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1814
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 406
    .lex "self", param_1814
    set $P102, param_1814
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_int $I1815, $P103, $P104, "$!pos", -1
    .return ($I1815)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "CAPHASH" :anon :subid("36_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1817
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 409
    .const 'Sub' $P1841 = "90_1340317675.197" 
    capture_lex $P1841
    .lex "self", param_1817
.annotate 'line', 410
    new $P102, "Undef"
    set $P1818, $P102
    .lex "$caps", $P1818
.annotate 'line', 411
    $P1820 = root_new ['parrot';'Hash']
    set $P1819, $P1820
    .lex "%caplist", $P1819
.annotate 'line', 412
    new $P103, "Undef"
    set $P1821, $P103
    .lex "$iter", $P1821
.annotate 'line', 413
    new $P104, "Undef"
    set $P1822, $P104
    .lex "$curcap", $P1822
.annotate 'line', 414
    new $P105, "Undef"
    set $P1823, $P105
    .lex "$subcur", $P1823
.annotate 'line', 415
    new $P106, "Undef"
    set $P1824, $P106
    .lex "$submatch", $P1824
.annotate 'line', 416
    new $P107, "Undef"
    set $P1825, $P107
    .lex "$name", $P1825
.annotate 'line', 410
    new $P108, "Hash"
    set $P1818, $P108
.annotate 'line', 411
    find_lex $P108, "$NO_CAPS"
    unless_null $P108, vivify_890
    new $P108, "Undef"
  vivify_890:
    set $P1819, $P108
.annotate 'line', 409
    set $P108, $P1821
    unless_null $P108, vivify_891
    new $P108, "Undef"
  vivify_891:
    set $P108, $P1822
    unless_null $P108, vivify_892
    new $P108, "Undef"
  vivify_892:
    set $P108, $P1823
    unless_null $P108, vivify_893
    new $P108, "Undef"
  vivify_893:
    set $P108, $P1824
    unless_null $P108, vivify_894
    new $P108, "Undef"
  vivify_894:
    set $P108, $P1825
    unless_null $P108, vivify_895
    new $P108, "Undef"
  vivify_895:
.annotate 'line', 418
    set $P108, param_1817
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P111, $P109, $P110, "$!regexsub", -1
    unless_null $P111, vivify_896
    new $P111, "Undef"
  vivify_896:
    unless $P111, if_1826_end
.annotate 'line', 419
    set $P112, param_1817
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_obj $P115, $P113, $P114, "$!regexsub", -1
    unless_null $P115, vivify_897
    new $P115, "Undef"
  vivify_897:
    $P116 = $P115."nqpattr"("caps")
    set $P1819, $P116
.annotate 'line', 420
    set $P1828, $P1819
    unless_null $P1828, vivify_898
    $P1828 = root_new ['parrot';'Hash']
  vivify_898:
    unless $P1828, if_1827_end
.annotate 'line', 421
    set $P1829, $P1819
    unless_null $P1829, vivify_899
    $P1829 = root_new ['parrot';'Hash']
  vivify_899:
    iter $P112, $P1829
    set $P1821, $P112
.annotate 'line', 422
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1833_handler
    push_eh $P113
  loop1833_test:
    set $P112, $P1821
    unless_null $P112, vivify_900
    new $P112, "Undef"
  vivify_900:
    unless $P112, loop1833_done
  loop1833_redo:
.annotate 'line', 423
    set $P113, $P1821
    unless_null $P113, vivify_901
    new $P113, "Undef"
  vivify_901:
    shift $P114, $P113
    set $S100, $P114
    new $P115, 'String'
    set $P115, $S100
    set $P1822, $P115
.annotate 'line', 424
    set $P113, $P1822
    unless_null $P113, vivify_902
    new $P113, "Undef"
  vivify_902:
    set $P1831, $P1819
    unless_null $P1831, vivify_903
    $P1831 = root_new ['parrot';'Hash']
  vivify_903:
    set $P114, $P1831[$P113]
    unless_null $P114, vivify_904
    new $P114, "Undef"
  vivify_904:
    set $N100, $P114
    set $N101, 2
    isge $I100, $N100, $N101
    unless $I100, if_1830_end
    new $P115, "ResizablePMCArray"
    set $P116, $P1822
    unless_null $P116, vivify_905
    new $P116, "Undef"
  vivify_905:
    set $P1832, $P1818
    unless_null $P1832, vivify_906
    $P1832 = root_new ['parrot';'Hash']
    set $P1818, $P1832
  vivify_906:
    set $P1832[$P116], $P115
  if_1830_end:
  loop1833_next:
.annotate 'line', 422
    goto loop1833_test
  loop1833_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1833_next
    eq $P114, .CONTROL_LOOP_REDO, loop1833_redo
  loop1833_done:
    pop_eh 
  if_1827_end:
  if_1826_end:
.annotate 'line', 428
    set $P108, param_1817
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P111, $P109, $P110, "$!cstack", -1
    unless_null $P111, vivify_907
    new $P111, "Undef"
  vivify_907:
    unless $P111, if_1834_end
.annotate 'line', 429
    set $P112, param_1817
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_obj $P115, $P113, $P114, "$!cstack", -1
    unless_null $P115, vivify_908
    new $P115, "Undef"
  vivify_908:
    iter $P116, $P115
    set $P1821, $P116
.annotate 'line', 430
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1847_handler
    push_eh $P113
  loop1847_test:
    set $P112, $P1821
    unless_null $P112, vivify_909
    new $P112, "Undef"
  vivify_909:
    unless $P112, loop1847_done
  loop1847_redo:
.annotate 'line', 431
    set $P113, $P1821
    unless_null $P113, vivify_910
    new $P113, "Undef"
  vivify_910:
    shift $P114, $P113
    set $P1823, $P114
.annotate 'line', 432
    set $P113, $P1823
    unless_null $P113, vivify_911
    new $P113, "Undef"
  vivify_911:
    $P114 = $P113."MATCH"()
    set $P1824, $P114
.annotate 'line', 433
    set $P113, $P1823
    unless_null $P113, vivify_912
    new $P113, "Undef"
  vivify_912:
    find_lex $P114, "$?CLASS"
    unless_null $P114, vivify_913
    new $P114, "Undef"
  vivify_913:
    getattribute $P115, $P113, $P114, "$!name"
    set $P1825, $P115
.annotate 'line', 434
    set $P113, $P1825
    unless_null $P113, vivify_914
    new $P113, "Undef"
  vivify_914:
    defined $I100, $P113
    unless $I100, if_1835_end
.annotate 'line', 435
    set $P114, $P1825
    unless_null $P114, vivify_915
    new $P114, "Undef"
  vivify_915:
    set $S100, $P114
    index $I101, $S100, "="
    set $N100, $I101
    set $N101, 0
    islt $I102, $N100, $N101
    if $I102, if_1836
.annotate 'line', 441
    set $P116, $P1825
    unless_null $P116, vivify_916
    new $P116, "Undef"
  vivify_916:
    set $S101, $P116
    split $P117, "=", $S101
    defined $I103, $P117
    unless $I103, for_undef_917
    iter $P115, $P117
    new $P120, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P120, loop1846_handler
    push_eh $P120
  loop1846_test:
    unless $P115, loop1846_done
    shift $P118, $P115
  loop1846_redo:
    .const 'Sub' $P1841 = "90_1340317675.197" 
    capture_lex $P1841
    $P1841($P118)
  loop1846_next:
    goto loop1846_test
  loop1846_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P121, exception, 'type'
    eq $P121, .CONTROL_LOOP_NEXT, loop1846_next
    eq $P121, .CONTROL_LOOP_REDO, loop1846_redo
  loop1846_done:
    pop_eh 
  for_undef_917:
.annotate 'line', 440
    goto if_1836_end
  if_1836:
.annotate 'line', 436
    set $P115, $P1825
    unless_null $P115, vivify_928
    new $P115, "Undef"
  vivify_928:
    set $P1838, $P1819
    unless_null $P1838, vivify_929
    $P1838 = root_new ['parrot';'Hash']
  vivify_929:
    set $P116, $P1838[$P115]
    unless_null $P116, vivify_930
    new $P116, "Undef"
  vivify_930:
    set $N102, $P116
    set $N103, 2
    isge $I103, $N102, $N103
    if $I103, if_1837
.annotate 'line', 438
    set $P121, $P1825
    unless_null $P121, vivify_931
    new $P121, "Undef"
  vivify_931:
    set $S101, $P121
    set $P120, $P1818
    unless_null $P120, vivify_932
    new $P120, "Undef"
  vivify_932:
    set $P122, $P1824
    unless_null $P122, vivify_933
    new $P122, "Undef"
  vivify_933:
    set $P120[$S101], $P122
    goto if_1837_end
  if_1837:
.annotate 'line', 437
    set $P117, $P1825
    unless_null $P117, vivify_934
    new $P117, "Undef"
  vivify_934:
    set $P1839, $P1818
    unless_null $P1839, vivify_935
    $P1839 = root_new ['parrot';'Hash']
  vivify_935:
    set $P118, $P1839[$P117]
    unless_null $P118, vivify_936
    new $P118, "Undef"
  vivify_936:
    set $P119, $P1824
    unless_null $P119, vivify_937
    new $P119, "Undef"
  vivify_937:
    push $P118, $P119
  if_1837_end:
  if_1836_end:
  if_1835_end:
  loop1847_next:
.annotate 'line', 430
    goto loop1847_test
  loop1847_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1847_next
    eq $P114, .CONTROL_LOOP_REDO, loop1847_redo
  loop1847_done:
    pop_eh 
  if_1834_end:
.annotate 'line', 409
    set $P108, $P1818
    unless_null $P108, vivify_938
    new $P108, "Undef"
  vivify_938:
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1840"  :anon :subid("90_1340317675.197") :outer("36_1340317675.197")
    .param pmc param_1842
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 441
    .lex "$name", param_1842
.annotate 'line', 442
    set $P120, param_1842
    unless_null $P120, vivify_918
    new $P120, "Undef"
  vivify_918:
    find_lex $P1844, "%caplist"
    unless_null $P1844, vivify_919
    $P1844 = root_new ['parrot';'Hash']
  vivify_919:
    set $P121, $P1844[$P120]
    unless_null $P121, vivify_920
    new $P121, "Undef"
  vivify_920:
    set $N102, $P121
    set $N103, 2
    isge $I104, $N102, $N103
    if $I104, if_1843
.annotate 'line', 444
    set $P126, param_1842
    unless_null $P126, vivify_921
    new $P126, "Undef"
  vivify_921:
    set $S102, $P126
    find_lex $P125, "$caps"
    unless_null $P125, vivify_922
    new $P125, "Undef"
  vivify_922:
    find_lex $P127, "$submatch"
    unless_null $P127, vivify_923
    new $P127, "Undef"
  vivify_923:
    set $P125[$S102], $P127
    set $P119, $P127
.annotate 'line', 442
    goto if_1843_end
  if_1843:
.annotate 'line', 443
    set $P122, param_1842
    unless_null $P122, vivify_924
    new $P122, "Undef"
  vivify_924:
    find_lex $P1845, "$caps"
    unless_null $P1845, vivify_925
    $P1845 = root_new ['parrot';'Hash']
  vivify_925:
    set $P123, $P1845[$P122]
    unless_null $P123, vivify_926
    new $P123, "Undef"
  vivify_926:
    find_lex $P124, "$submatch"
    unless_null $P124, vivify_927
    new $P124, "Undef"
  vivify_927:
    push $P123, $P124
    set $P119, $P123
  if_1843_end:
.annotate 'line', 441
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_init" :anon :subid("37_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1849
    .param pmc param_1850
    .param pmc param_1851 :optional :named("p")
    .param int has_param_1851 :opt_flag
    .param pmc param_1852 :optional :named("c")
    .param int has_param_1852 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 453
    .lex "self", param_1849
    .lex "$target", param_1850
    if has_param_1851, optparam_939
    new $P102, "Float"
    assign $P102, 0
    set param_1851, $P102
  optparam_939:
    .lex "$p", param_1851
    if has_param_1852, optparam_940
    new $P103, "Undef"
    set param_1852, $P103
  optparam_940:
    .lex "$c", param_1852
.annotate 'line', 454
    new $P104, "Undef"
    set $P1853, $P104
    .lex "$new", $P1853
    set $P105, param_1849
    nqp_decontainerize $P106, $P105
    $P107 = $P106."CREATE"()
    set $P1853, $P107
.annotate 'line', 455
    set $P105, $P1853
    unless_null $P105, vivify_941
    new $P105, "Undef"
  vivify_941:
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_942
    new $P106, "Undef"
  vivify_942:
    set $P107, param_1850
    unless_null $P107, vivify_943
    new $P107, "Undef"
  vivify_943:
    setattribute $P105, $P106, "$!orig", $P107
.annotate 'line', 456
    set $P105, param_1850
    unless_null $P105, vivify_944
    new $P105, "Undef"
  vivify_944:
    set $S100, $P105
    find_encoding $I100, "ucs4"
    trans_encoding $S101, $S100, $I100
    new $P106, 'String'
    set $P106, $S101
    set param_1850, $P106
.annotate 'line', 457
    set $P105, $P1853
    unless_null $P105, vivify_945
    new $P105, "Undef"
  vivify_945:
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_946
    new $P106, "Undef"
  vivify_946:
    set $P107, param_1850
    unless_null $P107, vivify_947
    new $P107, "Undef"
  vivify_947:
    set $S100, $P107
    repr_bind_attr_str $P105, $P106, "$!target", $S100
.annotate 'line', 458
    set $P105, param_1852
    unless_null $P105, vivify_948
    new $P105, "Undef"
  vivify_948:
    defined $I100, $P105
    if $I100, if_1854
.annotate 'line', 463
    set $P106, $P1853
    unless_null $P106, vivify_949
    new $P106, "Undef"
  vivify_949:
    find_lex $P107, "$?CLASS"
    unless_null $P107, vivify_950
    new $P107, "Undef"
  vivify_950:
    set $P108, param_1851
    unless_null $P108, vivify_951
    new $P108, "Undef"
  vivify_951:
    set $I101, $P108
    repr_bind_attr_int $P106, $P107, "$!from", $I101
.annotate 'line', 464
    set $P106, $P1853
    unless_null $P106, vivify_952
    new $P106, "Undef"
  vivify_952:
    find_lex $P107, "$?CLASS"
    unless_null $P107, vivify_953
    new $P107, "Undef"
  vivify_953:
    set $P108, param_1851
    unless_null $P108, vivify_954
    new $P108, "Undef"
  vivify_954:
    set $I101, $P108
    repr_bind_attr_int $P106, $P107, "$!pos", $I101
.annotate 'line', 462
    goto if_1854_end
  if_1854:
.annotate 'line', 459
    set $P106, $P1853
    unless_null $P106, vivify_955
    new $P106, "Undef"
  vivify_955:
    find_lex $P107, "$?CLASS"
    unless_null $P107, vivify_956
    new $P107, "Undef"
  vivify_956:
    repr_bind_attr_int $P106, $P107, "$!from", -1
.annotate 'line', 460
    set $P106, $P1853
    unless_null $P106, vivify_957
    new $P106, "Undef"
  vivify_957:
    find_lex $P107, "$?CLASS"
    unless_null $P107, vivify_958
    new $P107, "Undef"
  vivify_958:
    set $P108, param_1852
    unless_null $P108, vivify_959
    new $P108, "Undef"
  vivify_959:
    set $I101, $P108
    repr_bind_attr_int $P106, $P107, "$!pos", $I101
  if_1854_end:
.annotate 'line', 453
    set $P105, $P1853
    unless_null $P105, vivify_960
    new $P105, "Undef"
  vivify_960:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_start" :anon :subid("38_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1856
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 469
    .lex "self", param_1856
.annotate 'line', 470
    new $P102, "Undef"
    set $P1857, $P102
    .lex "$new", $P1857
    set $P103, param_1856
    nqp_decontainerize $P104, $P103
    repr_instance_of $P105, $P104
    set $P1857, $P105
.annotate 'line', 471
    set $P103, $P1857
    unless_null $P103, vivify_961
    new $P103, "Undef"
  vivify_961:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_962
    new $P104, "Undef"
  vivify_962:
    set $P105, param_1856
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P108, $P106, $P107, "$!orig", -1
    unless_null $P108, vivify_963
    new $P108, "Undef"
  vivify_963:
    setattribute $P103, $P104, "$!orig", $P108
.annotate 'line', 472
    set $P103, $P1857
    unless_null $P103, vivify_964
    new $P103, "Undef"
  vivify_964:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_965
    new $P104, "Undef"
  vivify_965:

            $P0 = getinterp
            $P1858 = $P0['sub';1]
        
    setattribute $P103, $P104, "$!regexsub", $P1858
.annotate 'line', 476
    set $P103, param_1856
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_obj $P106, $P104, $P105, "$!restart", -1
    unless_null $P106, vivify_966
    new $P106, "Undef"
  vivify_966:
    unless $P106, if_1859_end
.annotate 'line', 477
    set $P107, $P1857
    unless_null $P107, vivify_967
    new $P107, "Undef"
  vivify_967:
    find_lex $P108, "$?CLASS"
    unless_null $P108, vivify_968
    new $P108, "Undef"
  vivify_968:
    set $P109, param_1856
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I1860, $P110, $P111, "$!pos", -1
    repr_bind_attr_int $P107, $P108, "$!pos", $I1860
.annotate 'line', 478
    set $P107, param_1856
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_obj $P110, $P108, $P109, "$!cstack", -1
    unless_null $P110, vivify_969
    new $P110, "Undef"
  vivify_969:
    unless $P110, if_1861_end
    set $P111, $P1857
    unless_null $P111, vivify_970
    new $P111, "Undef"
  vivify_970:
    find_lex $P112, "$?CLASS"
    unless_null $P112, vivify_971
    new $P112, "Undef"
  vivify_971:
    set $P113, param_1856
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_obj $P116, $P114, $P115, "$!cstack", -1
    unless_null $P116, vivify_972
    new $P116, "Undef"
  vivify_972:
    clone $P117, $P116
    setattribute $P111, $P112, "$!cstack", $P117
  if_1861_end:
.annotate 'line', 479
    set $P107, $P1857
    unless_null $P107, vivify_973
    new $P107, "Undef"
  vivify_973:
.annotate 'line', 481
    set $P108, $P1857
    unless_null $P108, vivify_974
    new $P108, "Undef"
  vivify_974:
    find_lex $P109, "$?CLASS"
    unless_null $P109, vivify_975
    new $P109, "Undef"
  vivify_975:
    set $P110, param_1856
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S1862, $P111, $P112, "$!target", -1
    repr_bind_attr_str $P108, $P109, "$!target", $S1862
.annotate 'line', 482
    set $P113, $P1857
    unless_null $P113, vivify_976
    new $P113, "Undef"
  vivify_976:
    find_lex $P114, "$?CLASS"
    unless_null $P114, vivify_977
    new $P114, "Undef"
  vivify_977:
    set $P115, param_1856
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_int $I1863, $P116, $P117, "$!from", -1
    repr_bind_attr_int $P113, $P114, "$!from", $I1863
    find_lex $P118, "$?CLASS"
    unless_null $P118, vivify_978
    new $P118, "Undef"
  vivify_978:
.annotate 'line', 484
    set $P119, $P1857
    unless_null $P119, vivify_979
    new $P119, "Undef"
  vivify_979:
    find_lex $P120, "$?CLASS"
    unless_null $P120, vivify_980
    new $P120, "Undef"
  vivify_980:
    set $P121, param_1856
    nqp_decontainerize $P122, $P121
    find_lex $P123, "$?CLASS"
    repr_get_attr_obj $P124, $P122, $P123, "$!bstack", -1
    unless_null $P124, vivify_981
    new $P124, "Undef"
  vivify_981:
    clone $P125, $P124
    setattribute $P119, $P120, "$!bstack", $P125
    .return ($P107, $S1862, $I1863, $P118, $P125, 1)
  if_1859_end:
.annotate 'line', 487
    set $P103, $P1857
    unless_null $P103, vivify_982
    new $P103, "Undef"
  vivify_982:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_983
    new $P104, "Undef"
  vivify_983:
    repr_bind_attr_int $P103, $P104, "$!pos", -3
.annotate 'line', 488
    set $P103, $P1857
    unless_null $P103, vivify_984
    new $P103, "Undef"
  vivify_984:
.annotate 'line', 490
    set $P104, $P1857
    unless_null $P104, vivify_985
    new $P104, "Undef"
  vivify_985:
    find_lex $P105, "$?CLASS"
    unless_null $P105, vivify_986
    new $P105, "Undef"
  vivify_986:
    set $P106, param_1856
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S1864, $P107, $P108, "$!target", -1
    repr_bind_attr_str $P104, $P105, "$!target", $S1864
.annotate 'line', 491
    set $P109, $P1857
    unless_null $P109, vivify_987
    new $P109, "Undef"
  vivify_987:
    find_lex $P110, "$?CLASS"
    unless_null $P110, vivify_988
    new $P110, "Undef"
  vivify_988:
    set $P111, param_1856
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_int $I1865, $P112, $P113, "$!pos", -1
    repr_bind_attr_int $P109, $P110, "$!from", $I1865
    find_lex $P114, "$?CLASS"
    unless_null $P114, vivify_989
    new $P114, "Undef"
  vivify_989:
.annotate 'line', 493
    set $P115, $P1857
    unless_null $P115, vivify_990
    new $P115, "Undef"
  vivify_990:
    find_lex $P116, "$?CLASS"
    unless_null $P116, vivify_991
    new $P116, "Undef"
  vivify_991:
    new $P117, "ResizableIntegerArray"
    setattribute $P115, $P116, "$!bstack", $P117
    .return ($P103, $S1864, $I1865, $P114, $P117, 0)
.annotate 'line', 469
    .return ()
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_start_subcapture" :anon :subid("39_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1867
    .param pmc param_1868
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 498
    .lex "self", param_1867
    .lex "$from", param_1868
.annotate 'line', 499
    new $P102, "Undef"
    set $P1869, $P102
    .lex "$new", $P1869
    set $P103, param_1867
    nqp_decontainerize $P104, $P103
    repr_instance_of $P105, $P104
    set $P1869, $P105
.annotate 'line', 500
    set $P103, $P1869
    unless_null $P103, vivify_992
    new $P103, "Undef"
  vivify_992:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_993
    new $P104, "Undef"
  vivify_993:
    set $P105, param_1867
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P108, $P106, $P107, "$!orig", -1
    unless_null $P108, vivify_994
    new $P108, "Undef"
  vivify_994:
    setattribute $P103, $P104, "$!orig", $P108
.annotate 'line', 501
    set $P103, $P1869
    unless_null $P103, vivify_995
    new $P103, "Undef"
  vivify_995:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_996
    new $P104, "Undef"
  vivify_996:
    set $P105, param_1867
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S1870, $P106, $P107, "$!target", -1
    repr_bind_attr_str $P103, $P104, "$!target", $S1870
.annotate 'line', 502
    set $P103, $P1869
    unless_null $P103, vivify_997
    new $P103, "Undef"
  vivify_997:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_998
    new $P104, "Undef"
  vivify_998:
    set $P105, param_1868
    unless_null $P105, vivify_999
    new $P105, "Undef"
  vivify_999:
    set $I100, $P105
    repr_bind_attr_int $P103, $P104, "$!from", $I100
.annotate 'line', 503
    set $P103, $P1869
    unless_null $P103, vivify_1000
    new $P103, "Undef"
  vivify_1000:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_1001
    new $P104, "Undef"
  vivify_1001:
    repr_bind_attr_int $P103, $P104, "$!pos", -3
.annotate 'line', 498
    set $P103, $P1869
    unless_null $P103, vivify_1002
    new $P103, "Undef"
  vivify_1002:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_capture" :anon :subid("40_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1872
    .param pmc param_1873
    .param pmc param_1874
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 507
    .lex "self", param_1872
    .lex "$capture", param_1873
    .lex "$name", param_1874
.annotate 'line', 508
    null $P102
    set $P103, param_1872
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_bind_attr_obj $P104, $P105, "$!match", -1, $P102
.annotate 'line', 509
    set $P102, param_1872
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_1003
    new $P105, "Undef"
  vivify_1003:
    defined $I100, $P105
    if $I100, unless_1875_end
    new $P106, "ResizablePMCArray"
    set $P107, param_1872
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_bind_attr_obj $P108, $P109, "$!cstack", -1, $P106
  unless_1875_end:
.annotate 'line', 510
    set $P102, param_1872
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_1004
    new $P105, "Undef"
  vivify_1004:
    set $P106, param_1873
    unless_null $P106, vivify_1005
    new $P106, "Undef"
  vivify_1005:
    push $P105, $P106
.annotate 'line', 511
    set $P102, param_1873
    unless_null $P102, vivify_1006
    new $P102, "Undef"
  vivify_1006:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_1007
    new $P103, "Undef"
  vivify_1007:
    set $P104, param_1874
    unless_null $P104, vivify_1008
    new $P104, "Undef"
  vivify_1008:
    setattribute $P102, $P103, "$!name", $P104
.annotate 'line', 512
    set $P102, param_1872
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!bstack", -1
    unless_null $P105, vivify_1009
    new $P105, "Undef"
  vivify_1009:
    push $P105, 0
.annotate 'line', 513
    set $P102, param_1872
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!bstack", -1
    unless_null $P105, vivify_1010
    new $P105, "Undef"
  vivify_1010:
    set $P106, param_1872
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_int $I1876, $P107, $P108, "$!pos", -1
    push $P105, $I1876
.annotate 'line', 514
    set $P102, param_1872
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!bstack", -1
    unless_null $P105, vivify_1011
    new $P105, "Undef"
  vivify_1011:
    push $P105, 0
.annotate 'line', 515
    set $P102, param_1872
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!bstack", -1
    unless_null $P105, vivify_1012
    new $P105, "Undef"
  vivify_1012:
    set $P106, param_1872
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_obj $P109, $P107, $P108, "$!cstack", -1
    unless_null $P109, vivify_1013
    new $P109, "Undef"
  vivify_1013:
    elements $I100, $P109
    push $P105, $I100
.annotate 'line', 507
    set $P102, param_1872
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_1014
    new $P105, "Undef"
  vivify_1014:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_push_cstack" :anon :subid("41_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1878
    .param pmc param_1879
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 519
    .lex "self", param_1878
    .lex "$capture", param_1879
.annotate 'line', 520
    set $P102, param_1878
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_1015
    new $P105, "Undef"
  vivify_1015:
    defined $I100, $P105
    if $I100, unless_1880_end
    new $P106, "ResizablePMCArray"
    set $P107, param_1878
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_bind_attr_obj $P108, $P109, "$!cstack", -1, $P106
  unless_1880_end:
.annotate 'line', 521
    set $P102, param_1878
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_1016
    new $P105, "Undef"
  vivify_1016:
    set $P106, param_1879
    unless_null $P106, vivify_1017
    new $P106, "Undef"
  vivify_1017:
    push $P105, $P106
.annotate 'line', 519
    set $P102, param_1878
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_1018
    new $P105, "Undef"
  vivify_1018:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_pass" :anon :subid("42_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1882
    .param pmc param_1883
    .param pmc param_1884 :optional
    .param int has_param_1884 :opt_flag
    .param pmc param_1885 :optional :named("backtrack")
    .param int has_param_1885 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 526
    .lex "self", param_1882
    .lex "$pos", param_1883
    if has_param_1884, optparam_1019
    new $P102, "Undef"
    set param_1884, $P102
  optparam_1019:
    .lex "$name", param_1884
    if has_param_1885, optparam_1020
    new $P103, "Undef"
    set param_1885, $P103
  optparam_1020:
    .lex "$backtrack", param_1885
.annotate 'line', 527
    find_lex $P104, "$pass_mark"
    unless_null $P104, vivify_1021
    new $P104, "Undef"
  vivify_1021:
    set $P105, param_1882
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_bind_attr_obj $P106, $P107, "$!match", -1, $P104
.annotate 'line', 528
    set $P104, param_1883
    unless_null $P104, vivify_1022
    new $P104, "Undef"
  vivify_1022:
    set $I100, $P104
    set $P105, param_1882
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_bind_attr_int $P106, $P107, "$!pos", -1, $I100
.annotate 'line', 529
    set $P104, param_1885
    unless_null $P104, vivify_1023
    new $P104, "Undef"
  vivify_1023:
    unless $P104, if_1886_end
    set $P105, param_1882
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P108, $P106, $P107, "$!regexsub", -1
    unless_null $P108, vivify_1024
    new $P108, "Undef"
  vivify_1024:
    set $P109, param_1882
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_bind_attr_obj $P110, $P111, "$!restart", -1, $P108
  if_1886_end:
.annotate 'line', 531
    set $P104, param_1885
    unless_null $P104, vivify_1025
    new $P104, "Undef"
  vivify_1025:
    if $P104, unless_1887_end
    null $P105
    set $P106, param_1882
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_bind_attr_obj $P107, $P108, "$!bstack", -1, $P105
  unless_1887_end:
.annotate 'line', 533
    set $P105, param_1884
    unless_null $P105, vivify_1026
    new $P105, "Undef"
  vivify_1026:
    if $P105, if_1888
    set $P104, $P105
    goto if_1888_end
  if_1888:
    set $P106, param_1882
    nqp_decontainerize $P107, $P106
    set $P108, param_1884
    unless_null $P108, vivify_1027
    new $P108, "Undef"
  vivify_1027:
    $P109 = $P107."!reduce"($P108)
    set $P104, $P109
  if_1888_end:
.annotate 'line', 526
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_fail" :anon :subid("43_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1890
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 536
    .lex "self", param_1890
.annotate 'line', 537
    null $P102
    set $P103, param_1890
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_bind_attr_obj $P104, $P105, "$!match", -1, $P102
.annotate 'line', 538
    null $P102
    set $P103, param_1890
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_bind_attr_obj $P104, $P105, "$!bstack", -1, $P102
.annotate 'line', 539
    set $P102, param_1890
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_bind_attr_int $P103, $P104, "$!pos", -1, -3
.annotate 'line', 536
    .return (-3)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_next" :anon :subid("44_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1892
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 542
    .const 'Sub' $P1895 = "91_1340317675.197" 
    capture_lex $P1895
    .lex "self", param_1892
.annotate 'line', 543
    set $P103, param_1892
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_obj $P106, $P104, $P105, "$!restart", -1
    unless_null $P106, vivify_1028
    new $P106, "Undef"
  vivify_1028:
    if $P106, if_1893
.annotate 'line', 546
    .const 'Sub' $P1895 = "91_1340317675.197" 
    capture_lex $P1895
    $P109 = $P1895()
    set $P102, $P109
.annotate 'line', 543
    goto if_1893_end
  if_1893:
.annotate 'line', 544
    set $P107, param_1892
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_obj $P110, $P108, $P109, "$!restart", -1
    unless_null $P110, vivify_1031
    new $P110, "Undef"
  vivify_1031:
    set $P111, param_1892
    nqp_decontainerize $P112, $P111
    $P113 = $P110($P112)
.annotate 'line', 543
    set $P102, $P113
  if_1893_end:
.annotate 'line', 542
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1894"  :anon :subid("91_1340317675.197") :outer("44_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 547
    new $P107, "Undef"
    set $P1896, $P107
    .lex "$cur", $P1896
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    $P110 = $P109."!cursor_start"()
    set $P1896, $P110
.annotate 'line', 548
    set $P108, $P1896
    unless_null $P108, vivify_1029
    new $P108, "Undef"
  vivify_1029:
    $P108."!cursor_fail"()
.annotate 'line', 546
    set $P108, $P1896
    unless_null $P108, vivify_1030
    new $P108, "Undef"
  vivify_1030:
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!reduce" :anon :subid("45_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1898
    .param pmc param_1899
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 553
    .lex "self", param_1898
    .lex "$name", param_1899
.annotate 'line', 554
    new $P102, "Undef"
    set $P1900, $P102
    .lex "$actions", $P1900
    find_dynamic_lex $P103, "$*ACTIONS"
    set $P1900, $P103
.annotate 'line', 556
    set $P104, $P1900
    unless_null $P104, vivify_1032
    new $P104, "Undef"
  vivify_1032:
    set $P105, param_1899
    unless_null $P105, vivify_1033
    new $P105, "Undef"
  vivify_1033:
    set $S100, $P105
    can $I100, $P104, $S100
    if $I100, if_1901
    new $P103, 'Integer'
    set $P103, $I100
    goto if_1901_end
  if_1901:
.annotate 'line', 555
    set $P106, $P1900
    unless_null $P106, vivify_1034
    new $P106, "Undef"
  vivify_1034:
    set $P107, param_1899
    unless_null $P107, vivify_1035
    new $P107, "Undef"
  vivify_1035:
    set $S101, $P107
    find_method $P108, $P106, $S101
    set $P109, $P1900
    unless_null $P109, vivify_1036
    new $P109, "Undef"
  vivify_1036:
    set $P110, param_1898
    nqp_decontainerize $P111, $P110
    $P112 = $P111."MATCH"()
    $P113 = $P108($P109, $P112)
    set $P103, $P113
  if_1901_end:
.annotate 'line', 553
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!reduce_with_match" :anon :subid("46_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1903
    .param pmc param_1904
    .param pmc param_1905
    .param pmc param_1906
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 559
    .lex "self", param_1903
    .lex "$name", param_1904
    .lex "$key", param_1905
    .lex "$match", param_1906
.annotate 'line', 560
    new $P102, "Undef"
    set $P1907, $P102
    .lex "$actions", $P1907
    find_dynamic_lex $P103, "$*ACTIONS"
    set $P1907, $P103
.annotate 'line', 562
    set $P104, $P1907
    unless_null $P104, vivify_1037
    new $P104, "Undef"
  vivify_1037:
    set $P105, param_1904
    unless_null $P105, vivify_1038
    new $P105, "Undef"
  vivify_1038:
    set $S100, $P105
    can $I100, $P104, $S100
    if $I100, if_1908
    new $P103, 'Integer'
    set $P103, $I100
    goto if_1908_end
  if_1908:
.annotate 'line', 561
    set $P106, $P1907
    unless_null $P106, vivify_1039
    new $P106, "Undef"
  vivify_1039:
    set $P107, param_1904
    unless_null $P107, vivify_1040
    new $P107, "Undef"
  vivify_1040:
    set $S101, $P107
    find_method $P108, $P106, $S101
    set $P109, $P1907
    unless_null $P109, vivify_1041
    new $P109, "Undef"
  vivify_1041:
    set $P110, param_1906
    unless_null $P110, vivify_1042
    new $P110, "Undef"
  vivify_1042:
    set $P111, param_1905
    unless_null $P111, vivify_1043
    new $P111, "Undef"
  vivify_1043:
    $P112 = $P108($P109, $P110, $P111)
    set $P103, $P112
  if_1908_end:
.annotate 'line', 559
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!protoregex" :anon :subid("47_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1910
    .param pmc param_1911
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 565
    .const 'Sub' $P1920 = "92_1340317675.197" 
    capture_lex $P1920
    .lex "self", param_1910
    .lex "$name", param_1911
.annotate 'line', 567
    new $P102, "Undef"
    set $P1912, $P102
    .lex "$nfa", $P1912
.annotate 'line', 568
    $P1914 = root_new ['parrot';'ResizablePMCArray']
    set $P1913, $P1914
    .lex "@fates", $P1913
.annotate 'line', 571
    $P1916 = root_new ['parrot';'ResizablePMCArray']
    set $P1915, $P1916
    .lex "@rxfate", $P1915
.annotate 'line', 572
    new $P103, "Undef"
    set $P1917, $P103
    .lex "$cur", $P1917
.annotate 'line', 573
    new $P104, "Undef"
    set $P1918, $P104
    .lex "$rxname", $P1918
.annotate 'line', 567
    set $P105, param_1910
    nqp_decontainerize $P106, $P105
    get_how $P107, $P106
    set $P108, param_1910
    nqp_decontainerize $P109, $P108
    set $P110, param_1911
    unless_null $P110, vivify_1044
    new $P110, "Undef"
  vivify_1044:
    .const 'Sub' $P1920 = "92_1340317675.197" 
    newclosure $P1921, $P1920
    $P111 = $P107."cache"($P109, $P110, $P1921)
    set $P1912, $P111
.annotate 'line', 568
    set $P105, $P1912
    unless_null $P105, vivify_1046
    new $P105, "Undef"
  vivify_1046:
    set $P106, param_1910
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S1922, $P107, $P108, "$!target", -1
    set $P109, param_1910
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I1923, $P110, $P111, "$!pos", -1
    $P112 = $P105."run"($S1922, $I1923)
    set $P1913, $P112
.annotate 'line', 571
    set $P105, $P1912
    unless_null $P105, vivify_1047
    new $P105, "Undef"
  vivify_1047:
    $P106 = $P105."states"()
    set $P107, $P106[0]
    unless_null $P107, vivify_1048
    new $P107, "Undef"
  vivify_1048:
    set $P1915, $P107
.annotate 'line', 565
    set $P105, $P1917
    unless_null $P105, vivify_1049
    new $P105, "Undef"
  vivify_1049:
    set $P105, $P1918
    unless_null $P105, vivify_1050
    new $P105, "Undef"
  vivify_1050:
.annotate 'line', 574
    new $P105, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P105, loop1928_handler
    push_eh $P105
  loop1928_test:
    set $P1924, $P1913
    unless_null $P1924, vivify_1051
    $P1924 = root_new ['parrot';'ResizablePMCArray']
  vivify_1051:
    unless $P1924, loop1928_done
  loop1928_redo:
.annotate 'line', 575
    set $P1926, $P1913
    unless_null $P1926, vivify_1052
    $P1926 = root_new ['parrot';'ResizablePMCArray']
  vivify_1052:
    pop $I100, $P1926
    set $P1925, $P1915
    unless_null $P1925, vivify_1053
    $P1925 = root_new ['parrot';'ResizablePMCArray']
  vivify_1053:
    set $P105, $P1925[$I100]
    set $P1918, $P105
.annotate 'line', 577
    set $P105, param_1910
    nqp_decontainerize $P106, $P105
    set $P107, $P1918
    unless_null $P107, vivify_1054
    new $P107, "Undef"
  vivify_1054:
    set $S100, $P107
    $P108 = $P106.$S100()
    set $P1917, $P108
.annotate 'line', 578
    set $P105, $P1917
    unless_null $P105, vivify_1055
    new $P105, "Undef"
  vivify_1055:
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_1056
    new $P106, "Undef"
  vivify_1056:
    repr_get_attr_int $I100, $P105, $P106, "$!pos"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    unless $I101, if_1927_end
    die 0, .CONTROL_LOOP_LAST
  if_1927_end:
  loop1928_next:
.annotate 'line', 574
    goto loop1928_test
  loop1928_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P106, exception, 'type'
    eq $P106, .CONTROL_LOOP_NEXT, loop1928_next
    eq $P106, .CONTROL_LOOP_REDO, loop1928_redo
  loop1928_done:
    pop_eh 
.annotate 'line', 580
    set $P105, $P1917
    unless_null $P105, vivify_1057
    new $P105, "Undef"
  vivify_1057:
    set $P1929, $P105
    defined $I1931, $P1929
    if $I1931, default_1930
    set $P106, param_1910
    nqp_decontainerize $P107, $P106
    $P108 = $P107."!cursor_start"()
    set $P1929, $P108
  default_1930:
.annotate 'line', 565
    .return ($P1929)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1919"  :anon :subid("92_1340317675.197") :outer("47_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 567
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$name"
    unless_null $P113, vivify_1045
    new $P113, "Undef"
  vivify_1045:
    $P114 = $P112."!protoregex_nfa"($P113)
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!protoregex_nfa" :anon :subid("48_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1933
    .param pmc param_1934
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 583
    .const 'Sub' $P1949 = "94_1340317675.197" 
    capture_lex $P1949
    .const 'Sub' $P1943 = "93_1340317675.197" 
    capture_lex $P1943
    .lex "self", param_1933
    .lex "$name", param_1934
.annotate 'line', 584
    $P1936 = root_new ['parrot';'Hash']
    set $P1935, $P1936
    .lex "%protorx", $P1935
.annotate 'line', 585
    new $P102, "Undef"
    set $P1937, $P102
    .lex "$nfa", $P1937
.annotate 'line', 586
    $P1939 = root_new ['parrot';'ResizablePMCArray']
    set $P1938, $P1939
    .lex "@fates", $P1938
.annotate 'line', 587
    new $P103, "Undef"
    set $P1940, $P103
    .lex "$start", $P1940
.annotate 'line', 588
    new $P104, "Undef"
    set $P1941, $P104
    .lex "$fate", $P1941
.annotate 'line', 584
    set $P105, param_1933
    nqp_decontainerize $P106, $P105
    get_how $P107, $P106
    set $P108, param_1933
    nqp_decontainerize $P109, $P108
    .const 'Sub' $P1943 = "93_1340317675.197" 
    newclosure $P1944, $P1943
    $P110 = $P107."cache"($P109, "!protoregex_table", $P1944)
    set $P1935, $P110
.annotate 'line', 585
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "QRegex"
    get_who $P107, $P106
    set $P108, $P107["NFA"]
    $P109 = $P108."new"()
    set $P1937, $P109
.annotate 'line', 586
    set $P105, $P1937
    unless_null $P105, vivify_1058
    new $P105, "Undef"
  vivify_1058:
    $P106 = $P105."states"()
    set $P107, $P106[0]
    unless_null $P107, vivify_1059
    new $P107, "Undef"
  vivify_1059:
    set $P1938, $P107
.annotate 'line', 587
    new $P105, "Float"
    assign $P105, 1
    set $P1940, $P105
.annotate 'line', 588
    new $P105, "Float"
    assign $P105, 0
    set $P1941, $P105
.annotate 'line', 589
    set $P105, param_1934
    unless_null $P105, vivify_1060
    new $P105, "Undef"
  vivify_1060:
    set $S100, $P105
    set $P1946, $P1935
    unless_null $P1946, vivify_1061
    $P1946 = root_new ['parrot';'Hash']
  vivify_1061:
    exists $I100, $P1946[$S100]
    unless $I100, if_1945_end
.annotate 'line', 590
    set $P107, param_1934
    unless_null $P107, vivify_1062
    new $P107, "Undef"
  vivify_1062:
    set $P1947, $P1935
    unless_null $P1947, vivify_1063
    $P1947 = root_new ['parrot';'Hash']
  vivify_1063:
    set $P108, $P1947[$P107]
    unless_null $P108, vivify_1064
    new $P108, "Undef"
  vivify_1064:
    defined $I101, $P108
    unless $I101, for_undef_1065
    iter $P106, $P108
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1952_handler
    push_eh $P110
  loop1952_test:
    unless $P106, loop1952_done
    shift $P109, $P106
  loop1952_redo:
    .const 'Sub' $P1949 = "94_1340317675.197" 
    capture_lex $P1949
    $P1949($P109)
  loop1952_next:
    goto loop1952_test
  loop1952_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1952_next
    eq $P111, .CONTROL_LOOP_REDO, loop1952_redo
  loop1952_done:
    pop_eh 
  for_undef_1065:
  if_1945_end:
.annotate 'line', 583
    set $P105, $P1937
    unless_null $P105, vivify_1074
    new $P105, "Undef"
  vivify_1074:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1942"  :anon :subid("93_1340317675.197") :outer("48_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 584
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    $P112 = $P111."!protoregex_table"()
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1948"  :anon :subid("94_1340317675.197") :outer("48_1340317675.197")
    .param pmc param_1950
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 590
    .lex "$rxname", param_1950
.annotate 'line', 591
    find_lex $P110, "$fate"
    unless_null $P110, vivify_1066
    new $P110, "Undef"
  vivify_1066:
    add $P111, $P110, 1
    store_lex "$fate", $P111
.annotate 'line', 592
    set $P110, param_1950
    unless_null $P110, vivify_1067
    new $P110, "Undef"
  vivify_1067:
    find_lex $P111, "$fate"
    unless_null $P111, vivify_1068
    new $P111, "Undef"
  vivify_1068:
    set $I102, $P111
    find_lex $P1951, "@fates"
    unless_null $P1951, vivify_1069
    $P1951 = root_new ['parrot';'ResizablePMCArray']
    store_lex "@fates", $P1951
  vivify_1069:
    set $P1951[$I102], $P110
.annotate 'line', 593
    find_lex $P110, "$nfa"
    unless_null $P110, vivify_1070
    new $P110, "Undef"
  vivify_1070:
    find_lex $P111, "$start"
    unless_null $P111, vivify_1071
    new $P111, "Undef"
  vivify_1071:
    find_lex $P112, "$fate"
    unless_null $P112, vivify_1072
    new $P112, "Undef"
  vivify_1072:
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    set $P115, param_1950
    unless_null $P115, vivify_1073
    new $P115, "Undef"
  vivify_1073:
    $P116 = $P110."mergesubrule"($P111, 0, $P112, $P114, $P115)
.annotate 'line', 590
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!protoregex_table" :anon :subid("49_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1954
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 599
    .const 'Sub' $P1959 = "95_1340317675.197" 
    capture_lex $P1959
    .lex "self", param_1954
.annotate 'line', 600
    $P1956 = root_new ['parrot';'Hash']
    set $P1955, $P1956
    .lex "%protorx", $P1955
.annotate 'line', 599
    set $P1957, $P1955
    unless_null $P1957, vivify_1075
    $P1957 = root_new ['parrot';'Hash']
  vivify_1075:
.annotate 'line', 601
    set $P103, param_1954
    nqp_decontainerize $P104, $P103
    get_how $P105, $P104
    set $P106, param_1954
    nqp_decontainerize $P107, $P106
    $P108 = $P105."methods"($P107)
    defined $I100, $P108
    unless $I100, for_undef_1076
    iter $P102, $P108
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1971_handler
    push_eh $P113
  loop1971_test:
    unless $P102, loop1971_done
    shift $P109, $P102
  loop1971_redo:
    .const 'Sub' $P1959 = "95_1340317675.197" 
    capture_lex $P1959
    $P1959($P109)
  loop1971_next:
    goto loop1971_test
  loop1971_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1971_next
    eq $P114, .CONTROL_LOOP_REDO, loop1971_redo
  loop1971_done:
    pop_eh 
  for_undef_1076:
.annotate 'line', 599
    set $P1972, $P1955
    unless_null $P1972, vivify_1090
    $P1972 = root_new ['parrot';'Hash']
  vivify_1090:
    .return ($P1972)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1958"  :anon :subid("95_1340317675.197") :outer("49_1340317675.197")
    .param pmc param_1960
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 601
    .const 'Sub' $P1965 = "96_1340317675.197" 
    capture_lex $P1965
    .lex "$meth", param_1960
.annotate 'line', 602
    new $P110, "Undef"
    set $P1961, $P110
    .lex "$methname", $P1961
.annotate 'line', 603
    new $P111, "Undef"
    set $P1962, $P111
    .lex "$sympos", $P1962
.annotate 'line', 602
    set $P112, param_1960
    unless_null $P112, vivify_1077
    new $P112, "Undef"
  vivify_1077:
    set $S100, $P112
    new $P113, 'String'
    set $P113, $S100
    set $P1961, $P113
.annotate 'line', 603
    set $P112, $P1961
    unless_null $P112, vivify_1078
    new $P112, "Undef"
  vivify_1078:
    set $S100, $P112
    index $I101, $S100, ":sym<"
    new $P113, 'Integer'
    set $P113, $I101
    set $P1962, $P113
.annotate 'line', 604
    set $P113, $P1962
    unless_null $P113, vivify_1079
    new $P113, "Undef"
  vivify_1079:
    set $N100, $P113
    set $N101, 0
    isgt $I101, $N100, $N101
    if $I101, if_1963
    new $P112, 'Integer'
    set $P112, $I101
    goto if_1963_end
  if_1963:
    .const 'Sub' $P1965 = "96_1340317675.197" 
    capture_lex $P1965
    $P115 = $P1965()
    set $P112, $P115
  if_1963_end:
.annotate 'line', 601
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1964"  :anon :subid("96_1340317675.197") :outer("95_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 605
    new $P114, "Undef"
    set $P1966, $P114
    .lex "$prefix", $P1966
    find_lex $P115, "$methname"
    unless_null $P115, vivify_1080
    new $P115, "Undef"
  vivify_1080:
    set $S100, $P115
    find_lex $P116, "$sympos"
    unless_null $P116, vivify_1081
    new $P116, "Undef"
  vivify_1081:
    set $I102, $P116
    substr $S101, $S100, 0, $I102
    new $P117, 'String'
    set $P117, $S101
    set $P1966, $P117
.annotate 'line', 606
    set $P115, $P1966
    unless_null $P115, vivify_1082
    new $P115, "Undef"
  vivify_1082:
    set $S100, $P115
    find_lex $P1968, "%protorx"
    unless_null $P1968, vivify_1083
    $P1968 = root_new ['parrot';'Hash']
  vivify_1083:
    exists $I102, $P1968[$S100]
    if $I102, unless_1967_end
    new $P116, "ResizablePMCArray"
    set $P117, $P1966
    unless_null $P117, vivify_1084
    new $P117, "Undef"
  vivify_1084:
    find_lex $P1969, "%protorx"
    unless_null $P1969, vivify_1085
    $P1969 = root_new ['parrot';'Hash']
    store_lex "%protorx", $P1969
  vivify_1085:
    set $P1969[$P117], $P116
  unless_1967_end:
.annotate 'line', 607
    set $P115, $P1966
    unless_null $P115, vivify_1086
    new $P115, "Undef"
  vivify_1086:
    find_lex $P1970, "%protorx"
    unless_null $P1970, vivify_1087
    $P1970 = root_new ['parrot';'Hash']
  vivify_1087:
    set $P116, $P1970[$P115]
    unless_null $P116, vivify_1088
    new $P116, "Undef"
  vivify_1088:
    find_lex $P117, "$methname"
    unless_null $P117, vivify_1089
    new $P117, "Undef"
  vivify_1089:
    push $P116, $P117
.annotate 'line', 604
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!alt" :anon :subid("50_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1974
    .param pmc param_1975
    .param pmc param_1976
    .param pmc param_1977 :optional
    .param int has_param_1977 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 613
    .const 'Sub' $P1980 = "97_1340317675.197" 
    capture_lex $P1980
    .lex "self", param_1974
    .lex "$pos", param_1975
    .lex "$name", param_1976
    if has_param_1977, optparam_1091
    new $P102, "ResizablePMCArray"
    set param_1977, $P102
  optparam_1091:
    .lex "@labels", param_1977
.annotate 'line', 614
    new $P103, "Undef"
    set $P1978, $P103
    .lex "$nfa", $P1978
    set $P104, param_1974
    nqp_decontainerize $P105, $P104
    get_how $P106, $P105
    set $P107, param_1974
    nqp_decontainerize $P108, $P107
    set $P109, param_1976
    unless_null $P109, vivify_1092
    new $P109, "Undef"
  vivify_1092:
    .const 'Sub' $P1980 = "97_1340317675.197" 
    newclosure $P1982, $P1980
    $P110 = $P106."cache"($P108, $P109, $P1982)
    set $P1978, $P110
.annotate 'line', 615
    set $P104, $P1978
    unless_null $P104, vivify_1095
    new $P104, "Undef"
  vivify_1095:
    set $P105, param_1974
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S1983, $P106, $P107, "$!target", -1
    set $P108, param_1975
    unless_null $P108, vivify_1096
    new $P108, "Undef"
  vivify_1096:
    set $P109, param_1974
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_obj $P112, $P110, $P111, "$!bstack", -1
    unless_null $P112, vivify_1097
    new $P112, "Undef"
  vivify_1097:
    set $P113, param_1974
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_obj $P116, $P114, $P115, "$!cstack", -1
    unless_null $P116, vivify_1098
    new $P116, "Undef"
  vivify_1098:
    $P117 = $P104."run_alt"($S1983, $P108, $P112, $P116)
.annotate 'line', 613
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1979"  :anon :subid("97_1340317675.197") :outer("50_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 614
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$name"
    unless_null $P112, vivify_1093
    new $P112, "Undef"
  vivify_1093:
    find_lex $P1981, "@labels"
    unless_null $P1981, vivify_1094
    $P1981 = root_new ['parrot';'ResizablePMCArray']
  vivify_1094:
    $P113 = $P111."!alt_nfa"($P112, $P1981)
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!alt_nfa" :anon :subid("51_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_1985
    .param pmc param_1986
    .param pmc param_1987
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 618
    .const 'Sub' $P1994 = "98_1340317675.197" 
    capture_lex $P1994
    .lex "self", param_1985
    .lex "$name", param_1986
    .lex "@labels", param_1987
.annotate 'line', 619
    new $P102, "Undef"
    set $P1988, $P102
    .lex "$nfa", $P1988
.annotate 'line', 620
    $P1990 = root_new ['parrot';'ResizablePMCArray']
    set $P1989, $P1990
    .lex "@fates", $P1989
.annotate 'line', 621
    new $P103, "Undef"
    set $P1991, $P103
    .lex "$start", $P1991
.annotate 'line', 622
    new $P104, "Undef"
    set $P1992, $P104
    .lex "$fate", $P1992
.annotate 'line', 619
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "QRegex"
    get_who $P107, $P106
    set $P108, $P107["NFA"]
    $P109 = $P108."new"()
    set $P1988, $P109
.annotate 'line', 620
    set $P105, $P1988
    unless_null $P105, vivify_1099
    new $P105, "Undef"
  vivify_1099:
    $P106 = $P105."states"()
    set $P107, $P106[0]
    unless_null $P107, vivify_1100
    new $P107, "Undef"
  vivify_1100:
    set $P1989, $P107
.annotate 'line', 621
    new $P105, "Float"
    assign $P105, 1
    set $P1991, $P105
.annotate 'line', 622
    new $P105, "Float"
    assign $P105, 0
    set $P1992, $P105
.annotate 'line', 623
    set $P106, param_1985
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_obj $P109, $P107, $P108, "$!regexsub", -1
    unless_null $P109, vivify_1101
    new $P109, "Undef"
  vivify_1101:
    set $P110, param_1986
    unless_null $P110, vivify_1102
    new $P110, "Undef"
  vivify_1102:
    $P111 = $P109."nqpattr"($P110)
    defined $I100, $P111
    unless $I100, for_undef_1103
    iter $P105, $P111
    new $P114, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P114, loop1999_handler
    push_eh $P114
  loop1999_test:
    unless $P105, loop1999_done
    shift $P112, $P105
  loop1999_redo:
    .const 'Sub' $P1994 = "98_1340317675.197" 
    capture_lex $P1994
    $P1994($P112)
  loop1999_next:
    goto loop1999_test
  loop1999_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop1999_next
    eq $P115, .CONTROL_LOOP_REDO, loop1999_redo
  loop1999_done:
    pop_eh 
  for_undef_1103:
.annotate 'line', 618
    set $P105, $P1988
    unless_null $P105, vivify_1115
    new $P105, "Undef"
  vivify_1115:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1993"  :anon :subid("98_1340317675.197") :outer("51_1340317675.197")
    .param pmc param_1996
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 624
    new $P113, "Undef"
    set $P1995, $P113
    .lex "$label", $P1995
    .lex "$_", param_1996
    find_lex $P114, "$fate"
    unless_null $P114, vivify_1104
    new $P114, "Undef"
  vivify_1104:
    set $I101, $P114
    find_lex $P1997, "@labels"
    unless_null $P1997, vivify_1105
    $P1997 = root_new ['parrot';'ResizablePMCArray']
  vivify_1105:
    set $P115, $P1997[$I101]
    unless_null $P115, vivify_1106
    new $P115, "Undef"
  vivify_1106:
    set $P1995, $P115
.annotate 'line', 625
    find_lex $P114, "$fate"
    unless_null $P114, vivify_1107
    new $P114, "Undef"
  vivify_1107:
    add $P115, $P114, 1
    store_lex "$fate", $P115
.annotate 'line', 626
    set $P114, $P1995
    unless_null $P114, vivify_1108
    new $P114, "Undef"
  vivify_1108:
    find_lex $P115, "$fate"
    unless_null $P115, vivify_1109
    new $P115, "Undef"
  vivify_1109:
    set $I101, $P115
    find_lex $P1998, "@fates"
    unless_null $P1998, vivify_1110
    $P1998 = root_new ['parrot';'ResizablePMCArray']
    store_lex "@fates", $P1998
  vivify_1110:
    set $P1998[$I101], $P114
.annotate 'line', 627
    find_lex $P114, "$nfa"
    unless_null $P114, vivify_1111
    new $P114, "Undef"
  vivify_1111:
    find_lex $P115, "$start"
    unless_null $P115, vivify_1112
    new $P115, "Undef"
  vivify_1112:
    find_lex $P116, "$fate"
    unless_null $P116, vivify_1113
    new $P116, "Undef"
  vivify_1113:
    find_lex $P117, "$_"
    unless_null $P117, vivify_1114
    new $P117, "Undef"
  vivify_1114:
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    $P120 = $P114."mergesubstates"($P115, 0, $P116, $P117, $P119)
.annotate 'line', 623
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!BACKREF" :anon :subid("52_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2001
    .param pmc param_2002
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 632
    .const 'Sub' $P2014 = "99_1340317675.197" 
    capture_lex $P2014
    .lex "self", param_2001
    .lex "$name", param_2002
.annotate 'line', 633
    new $P102, "Undef"
    set $P2003, $P102
    .lex "$cur", $P2003
.annotate 'line', 634
    new $P103, "Undef"
    set $P2004, $P103
    .lex "$n", $P2004
.annotate 'line', 633
    set $P104, param_2001
    nqp_decontainerize $P105, $P104
    $P106 = $P105."!cursor_start"()
    set $P2003, $P106
.annotate 'line', 634
    set $P105, param_2001
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P108, $P106, $P107, "$!cstack", -1
    unless_null $P108, vivify_1116
    new $P108, "Undef"
  vivify_1116:
    if $P108, if_2005
    new $P115, "Float"
    assign $P115, -1
    set $P104, $P115
    goto if_2005_end
  if_2005:
    set $P109, param_2001
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_obj $P112, $P110, $P111, "$!cstack", -1
    unless_null $P112, vivify_1117
    new $P112, "Undef"
  vivify_1117:
    elements $I100, $P112
    new $P113, 'Integer'
    set $P113, $I100
    sub $P114, $P113, 1
    set $P104, $P114
  if_2005_end:
    set $P2004, $P104
.annotate 'line', 635
    new $P123, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P123, loop2011_handler
    push_eh $P123
  loop2011_test:
    set $P105, $P2004
    unless_null $P105, vivify_1118
    new $P105, "Undef"
  vivify_1118:
    set $N100, $P105
    set $N101, 0
    isge $I100, $N100, $N101
    if $I100, if_2006
    new $P104, 'Integer'
    set $P104, $I100
    goto if_2006_end
  if_2006:
    set $P107, $P2004
    unless_null $P107, vivify_1119
    new $P107, "Undef"
  vivify_1119:
    set $I101, $P107
    set $P108, param_2001
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P2008, $P109, $P110, "$!cstack", -1
    unless_null $P2008, vivify_1120
    $P2008 = root_new ['parrot';'ResizablePMCArray']
  vivify_1120:
    set $P111, $P2008[$I101]
    unless_null $P111, vivify_1121
    new $P111, "Undef"
  vivify_1121:
    find_lex $P112, "$?CLASS"
    unless_null $P112, vivify_1122
    new $P112, "Undef"
  vivify_1122:
    getattribute $P113, $P111, $P112, "$!name"
    isnull $I102, $P113
    unless $I102, unless_2007
    new $P106, 'Integer'
    set $P106, $I102
    goto unless_2007_end
  unless_2007:
.annotate 'line', 636
    set $P114, $P2004
    unless_null $P114, vivify_1123
    new $P114, "Undef"
  vivify_1123:
    set $I103, $P114
    set $P115, param_2001
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_obj $P2009, $P116, $P117, "$!cstack", -1
    unless_null $P2009, vivify_1124
    $P2009 = root_new ['parrot';'ResizablePMCArray']
  vivify_1124:
    set $P118, $P2009[$I103]
    unless_null $P118, vivify_1125
    new $P118, "Undef"
  vivify_1125:
    find_lex $P119, "$?CLASS"
    unless_null $P119, vivify_1126
    new $P119, "Undef"
  vivify_1126:
    getattribute $P120, $P118, $P119, "$!name"
    set $S100, $P120
    set $P121, param_2002
    unless_null $P121, vivify_1127
    new $P121, "Undef"
  vivify_1127:
    set $S101, $P121
    isne $I104, $S100, $S101
    new $P106, 'Integer'
    set $P106, $I104
  unless_2007_end:
.annotate 'line', 635
    set $P104, $P106
  if_2006_end:
    unless $P104, loop2011_done
  loop2011_redo:
    set $P122, $P2004
    unless_null $P122, vivify_1128
    new $P122, "Undef"
  vivify_1128:
    clone $P2010, $P122
    dec $P122
  loop2011_next:
    goto loop2011_test
  loop2011_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P124, exception, 'type'
    eq $P124, .CONTROL_LOOP_NEXT, loop2011_next
    eq $P124, .CONTROL_LOOP_REDO, loop2011_redo
  loop2011_done:
    pop_eh 
.annotate 'line', 637
    set $P104, $P2004
    unless_null $P104, vivify_1129
    new $P104, "Undef"
  vivify_1129:
    set $N100, $P104
    set $N101, 0
    isge $I100, $N100, $N101
    unless $I100, if_2012_end
    .const 'Sub' $P2014 = "99_1340317675.197" 
    capture_lex $P2014
    $P2014()
  if_2012_end:
.annotate 'line', 632
    set $P104, $P2003
    unless_null $P104, vivify_1140
    new $P104, "Undef"
  vivify_1140:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block2013"  :anon :subid("99_1340317675.197") :outer("52_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 638
    new $P105, "Undef"
    set $P2015, $P105
    .lex "$subcur", $P2015
.annotate 'line', 639
    new $P106, "Undef"
    set $P2016, $P106
    .lex "$litlen", $P2016
.annotate 'line', 638
    find_lex $P107, "$n"
    unless_null $P107, vivify_1130
    new $P107, "Undef"
  vivify_1130:
    set $I101, $P107
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P2017, $P109, $P110, "$!cstack", -1
    unless_null $P2017, vivify_1131
    $P2017 = root_new ['parrot';'ResizablePMCArray']
  vivify_1131:
    set $P111, $P2017[$I101]
    unless_null $P111, vivify_1132
    new $P111, "Undef"
  vivify_1132:
    set $P2015, $P111
.annotate 'line', 639
    set $P107, $P2015
    unless_null $P107, vivify_1133
    new $P107, "Undef"
  vivify_1133:
    $P108 = $P107."pos"()
    set $P109, $P2015
    unless_null $P109, vivify_1134
    new $P109, "Undef"
  vivify_1134:
    $N102 = $P109."from"()
    sub $P110, $P108, $N102
    set $P2016, $P110
.annotate 'line', 641
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_str $S2019, $P109, $P110, "$!target", -1
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_int $I2020, $P112, $P113, "$!pos", -1
    set $P114, $P2016
    unless_null $P114, vivify_1135
    new $P114, "Undef"
  vivify_1135:
    set $I101, $P114
    substr $S100, $S2019, $I2020, $I101
.annotate 'line', 642
    find_lex $P115, "self"
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_str $S2021, $P116, $P117, "$!target", -1
    set $P118, $P2015
    unless_null $P118, vivify_1136
    new $P118, "Undef"
  vivify_1136:
    $I102 = $P118."from"()
    set $P119, $P2016
    unless_null $P119, vivify_1137
    new $P119, "Undef"
  vivify_1137:
    set $I103, $P119
    substr $S101, $S2021, $I102, $I103
    iseq $I104, $S100, $S101
    if $I104, if_2018
    new $P107, 'Integer'
    set $P107, $I104
    goto if_2018_end
  if_2018:
.annotate 'line', 640
    find_lex $P120, "$cur"
    unless_null $P120, vivify_1138
    new $P120, "Undef"
  vivify_1138:
    find_lex $P121, "self"
    nqp_decontainerize $P122, $P121
    find_lex $P123, "$?CLASS"
    repr_get_attr_int $I2022, $P122, $P123, "$!pos", -1
    new $P124, 'Integer'
    set $P124, $I2022
    set $P125, $P2016
    unless_null $P125, vivify_1139
    new $P125, "Undef"
  vivify_1139:
    add $P126, $P124, $P125
    $P127 = $P120."!cursor_pass"($P126, "")
    set $P107, $P127
  if_2018_end:
.annotate 'line', 637
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!LITERAL" :anon :subid("53_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2024
    .param pmc param_2025
    .param pmc param_2026 :optional
    .param int has_param_2026 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 647
    .lex "self", param_2024
    .lex "$str", param_2025
    if has_param_2026, optparam_1141
    new $P102, "Float"
    assign $P102, 0
    set param_2026, $P102
  optparam_1141:
    .lex "$i", param_2026
.annotate 'line', 648
    new $P103, "Undef"
    set $P2027, $P103
    .lex "$cur", $P2027
.annotate 'line', 649
    new $P104, "Undef"
    set $P2028, $P104
    .lex "$litlen", $P2028
.annotate 'line', 648
    set $P105, param_2024
    nqp_decontainerize $P106, $P105
    $P107 = $P106."!cursor_start"()
    set $P2027, $P107
.annotate 'line', 649
    set $P105, param_2025
    unless_null $P105, vivify_1142
    new $P105, "Undef"
  vivify_1142:
    set $S100, $P105
    length $I100, $S100
    new $P106, 'Integer'
    set $P106, $I100
    set $P2028, $P106
.annotate 'line', 652
    set $P106, param_2026
    unless_null $P106, vivify_1143
    new $P106, "Undef"
  vivify_1143:
    if $P106, if_2030
.annotate 'line', 653
    set $P115, param_2024
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_str $S2033, $P116, $P117, "$!target", -1
    set $P118, param_2024
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$?CLASS"
    repr_get_attr_int $I2034, $P119, $P120, "$!pos", -1
    set $P121, $P2028
    unless_null $P121, vivify_1144
    new $P121, "Undef"
  vivify_1144:
    set $I102, $P121
    substr $S104, $S2033, $I2034, $I102
    set $P122, param_2025
    unless_null $P122, vivify_1145
    new $P122, "Undef"
  vivify_1145:
    set $S105, $P122
    iseq $I103, $S104, $S105
    new $P105, 'Integer'
    set $P105, $I103
.annotate 'line', 652
    goto if_2030_end
  if_2030:
    set $P107, param_2024
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2031, $P108, $P109, "$!target", -1
    set $P110, param_2024
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_int $I2032, $P111, $P112, "$!pos", -1
    set $P113, $P2028
    unless_null $P113, vivify_1146
    new $P113, "Undef"
  vivify_1146:
    set $I100, $P113
    substr $S100, $S2031, $I2032, $I100
    downcase $S101, $S100
    set $P114, param_2025
    unless_null $P114, vivify_1147
    new $P114, "Undef"
  vivify_1147:
    set $S102, $P114
    downcase $S103, $S102
    iseq $I101, $S101, $S103
    new $P105, 'Integer'
    set $P105, $I101
  if_2030_end:
    unless $P105, if_2029_end
.annotate 'line', 650
    set $P123, $P2027
    unless_null $P123, vivify_1148
    new $P123, "Undef"
  vivify_1148:
    set $P124, param_2024
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_int $I2035, $P125, $P126, "$!pos", -1
    new $P127, 'Integer'
    set $P127, $I2035
    set $P128, $P2028
    unless_null $P128, vivify_1149
    new $P128, "Undef"
  vivify_1149:
    add $P129, $P127, $P128
    $P123."!cursor_pass"($P129)
  if_2029_end:
.annotate 'line', 647
    set $P105, $P2027
    unless_null $P105, vivify_1150
    new $P105, "Undef"
  vivify_1150:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "at" :anon :subid("54_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2037
    .param pmc param_2038
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 657
    .lex "self", param_2037
    .lex "$pos", param_2038
.annotate 'line', 658
    new $P102, "Undef"
    set $P2039, $P102
    .lex "$cur", $P2039
    set $P103, param_2037
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2039, $P105
.annotate 'line', 659
    set $P103, param_2038
    unless_null $P103, vivify_1151
    new $P103, "Undef"
  vivify_1151:
    set $N100, $P103
    set $P104, param_2037
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2041, $P105, $P106, "$!pos", -1
    set $N101, $I2041
    iseq $I100, $N100, $N101
    unless $I100, if_2040_end
    set $P107, $P2039
    unless_null $P107, vivify_1152
    new $P107, "Undef"
  vivify_1152:
    set $P108, param_2037
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_int $I2042, $P109, $P110, "$!pos", -1
    $P107."!cursor_pass"($I2042)
  if_2040_end:
.annotate 'line', 657
    set $P103, $P2039
    unless_null $P103, vivify_1153
    new $P103, "Undef"
  vivify_1153:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "before" :anon :subid("55_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2044
    .param pmc param_2045
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 663
    .lex "self", param_2044
    .lex "$regex", param_2045
.annotate 'line', 664
    new $P102, "Undef"
    set $P2046, $P102
    .lex "$cur", $P2046
    set $P103, param_2044
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2046, $P105
.annotate 'line', 665
    set $P103, $P2046
    unless_null $P103, vivify_1154
    new $P103, "Undef"
  vivify_1154:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_1155
    new $P104, "Undef"
  vivify_1155:
    set $P105, param_2044
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_int $I2047, $P106, $P107, "$!pos", -1
    repr_bind_attr_int $P103, $P104, "$!pos", $I2047
.annotate 'line', 666
    set $P103, param_2045
    unless_null $P103, vivify_1156
    new $P103, "Undef"
  vivify_1156:
    set $P104, $P2046
    unless_null $P104, vivify_1157
    new $P104, "Undef"
  vivify_1157:
    $P105 = $P103($P104)
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_1158
    new $P106, "Undef"
  vivify_1158:
    repr_get_attr_int $I100, $P105, $P106, "$!pos"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    if $I101, if_2048
.annotate 'line', 668
    set $P111, $P2046
    unless_null $P111, vivify_1159
    new $P111, "Undef"
  vivify_1159:
    find_lex $P112, "$?CLASS"
    unless_null $P112, vivify_1160
    new $P112, "Undef"
  vivify_1160:
    repr_bind_attr_int $P111, $P112, "$!pos", -3
    goto if_2048_end
  if_2048:
.annotate 'line', 667
    set $P107, $P2046
    unless_null $P107, vivify_1161
    new $P107, "Undef"
  vivify_1161:
    set $P108, param_2044
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_int $I2049, $P109, $P110, "$!pos", -1
    $P107."!cursor_pass"($I2049, "before")
  if_2048_end:
.annotate 'line', 663
    set $P103, $P2046
    unless_null $P103, vivify_1162
    new $P103, "Undef"
  vivify_1162:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "after" :anon :subid("56_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2051
    .param pmc param_2052
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 674
    .lex "self", param_2051
    .lex "$regex", param_2052
.annotate 'line', 675
    new $P102, "Undef"
    set $P2053, $P102
    .lex "$cur", $P2053
    set $P103, param_2051
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2053, $P105
.annotate 'line', 676
    set $P103, $P2053
    unless_null $P103, vivify_1163
    new $P103, "Undef"
  vivify_1163:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_1164
    new $P104, "Undef"
  vivify_1164:
    set $P105, param_2051
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S2054, $P106, $P107, "$!target", -1
    new $P108, 'String'
    set $P108, $S2054
    $S100 = $P108."reverse"()
    repr_bind_attr_str $P103, $P104, "$!target", $S100
.annotate 'line', 677
    set $P103, $P2053
    unless_null $P103, vivify_1165
    new $P103, "Undef"
  vivify_1165:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_1166
    new $P104, "Undef"
  vivify_1166:
    set $P105, param_2051
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S2055, $P106, $P107, "$!target", -1
    length $I100, $S2055
    new $P108, 'Integer'
    set $P108, $I100
    set $P109, param_2051
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I2056, $P110, $P111, "$!pos", -1
    sub $P112, $P108, $I2056
    set $I101, $P112
    repr_bind_attr_int $P103, $P104, "$!from", $I101
.annotate 'line', 678
    set $P103, $P2053
    unless_null $P103, vivify_1167
    new $P103, "Undef"
  vivify_1167:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_1168
    new $P104, "Undef"
  vivify_1168:
    set $P105, param_2051
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S2057, $P106, $P107, "$!target", -1
    length $I100, $S2057
    new $P108, 'Integer'
    set $P108, $I100
    set $P109, param_2051
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I2058, $P110, $P111, "$!pos", -1
    sub $P112, $P108, $I2058
    set $I101, $P112
    repr_bind_attr_int $P103, $P104, "$!pos", $I101
.annotate 'line', 679
    set $P103, param_2052
    unless_null $P103, vivify_1169
    new $P103, "Undef"
  vivify_1169:
    set $P104, $P2053
    unless_null $P104, vivify_1170
    new $P104, "Undef"
  vivify_1170:
    $P105 = $P103($P104)
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_1171
    new $P106, "Undef"
  vivify_1171:
    repr_get_attr_int $I100, $P105, $P106, "$!pos"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    if $I101, if_2059
.annotate 'line', 681
    set $P111, $P2053
    unless_null $P111, vivify_1172
    new $P111, "Undef"
  vivify_1172:
    find_lex $P112, "$?CLASS"
    unless_null $P112, vivify_1173
    new $P112, "Undef"
  vivify_1173:
    repr_bind_attr_int $P111, $P112, "$!pos", -3
    goto if_2059_end
  if_2059:
.annotate 'line', 680
    set $P107, $P2053
    unless_null $P107, vivify_1174
    new $P107, "Undef"
  vivify_1174:
    set $P108, param_2051
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_int $I2060, $P109, $P110, "$!pos", -1
    $P107."!cursor_pass"($I2060, "after")
  if_2059_end:
.annotate 'line', 674
    set $P103, $P2053
    unless_null $P103, vivify_1175
    new $P103, "Undef"
  vivify_1175:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "ws" :anon :subid("57_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2062
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 685
    .lex "self", param_2062
.annotate 'line', 687
    new $P102, "Undef"
    set $P2063, $P102
    .lex "$cur", $P2063
    set $P103, param_2062
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2063, $P105
.annotate 'line', 688
    set $P103, param_2062
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2065, $P104, $P105, "$!pos", -1
    set $N100, $I2065
    set $P106, param_2062
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2066, $P107, $P108, "$!target", -1
    length $I100, $S2066
    set $N101, $I100
    isge $I101, $N100, $N101
    if $I101, if_2064
.annotate 'line', 690
    set $P115, param_2062
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_int $I2071, $P116, $P117, "$!pos", -1
    set $N102, $I2071
    set $N103, 1
    islt $I102, $N102, $N103
    unless $I102, unless_2070
    new $P114, 'Integer'
    set $P114, $I102
    goto unless_2070_end
  unless_2070:
.annotate 'line', 691
    set $P118, param_2062
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$?CLASS"
    repr_get_attr_str $S2072, $P119, $P120, "$!target", -1
    set $P121, param_2062
    nqp_decontainerize $P122, $P121
    find_lex $P123, "$?CLASS"
    repr_get_attr_int $I2073, $P122, $P123, "$!pos", -1
    is_cclass $I103, .CCLASS_WORD, $S2072, $I2073
    new $P124, 'Integer'
    set $P124, $I103
    isfalse $I104, $P124
    new $P114, 'Integer'
    set $P114, $I104
  unless_2070_end:
    unless $P114, unless_2069
    set $P113, $P114
    goto unless_2069_end
  unless_2069:
.annotate 'line', 692
    set $P125, param_2062
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$?CLASS"
    repr_get_attr_str $S2074, $P126, $P127, "$!target", -1
    set $P128, param_2062
    nqp_decontainerize $P129, $P128
    find_lex $P130, "$?CLASS"
    repr_get_attr_int $I2075, $P129, $P130, "$!pos", -1
    new $P131, 'Integer'
    set $P131, $I2075
    sub $P132, $P131, 1
    set $I105, $P132
    is_cclass $I106, .CCLASS_WORD, $S2074, $I105
    new $P133, 'Integer'
    set $P133, $I106
    isfalse $I107, $P133
    new $P113, 'Integer'
    set $P113, $I107
  unless_2069_end:
    unless $P113, if_2068_end
.annotate 'line', 693
    set $P134, $P2063
    unless_null $P134, vivify_1176
    new $P134, "Undef"
  vivify_1176:
.annotate 'line', 695
    set $P135, param_2062
    nqp_decontainerize $P136, $P135
    find_lex $P137, "$?CLASS"
    repr_get_attr_str $S2076, $P136, $P137, "$!target", -1
    set $P138, param_2062
    nqp_decontainerize $P139, $P138
    find_lex $P140, "$?CLASS"
    repr_get_attr_int $I2077, $P139, $P140, "$!pos", -1
    set $P141, param_2062
    nqp_decontainerize $P142, $P141
    find_lex $P143, "$?CLASS"
    repr_get_attr_str $S2078, $P142, $P143, "$!target", -1
    length $I108, $S2078
    find_not_cclass $I109, .CCLASS_WHITESPACE, $S2076, $I2077, $I108
.annotate 'line', 694
    $P134."!cursor_pass"($I109, "ws")
  if_2068_end:
.annotate 'line', 693
    goto if_2064_end
  if_2064:
.annotate 'line', 689
    set $P109, $P2063
    unless_null $P109, vivify_1177
    new $P109, "Undef"
  vivify_1177:
    set $P110, param_2062
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_int $I2067, $P111, $P112, "$!pos", -1
    $P109."!cursor_pass"($I2067, "ws")
  if_2064_end:
.annotate 'line', 685
    set $P103, $P2063
    unless_null $P103, vivify_1178
    new $P103, "Undef"
  vivify_1178:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "ww" :anon :subid("58_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2080
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 700
    .lex "self", param_2080
.annotate 'line', 701
    new $P102, "Undef"
    set $P2081, $P102
    .lex "$cur", $P2081
    set $P103, param_2080
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2081, $P105
.annotate 'line', 703
    set $P106, param_2080
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_int $I2086, $P107, $P108, "$!pos", -1
    set $N100, $I2086
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_2085
    new $P105, 'Integer'
    set $P105, $I100
    goto if_2085_end
  if_2085:
.annotate 'line', 704
    set $P109, param_2080
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I2087, $P110, $P111, "$!pos", -1
    set $N102, $I2087
    set $P112, param_2080
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_str $S2088, $P113, $P114, "$!target", -1
    length $I101, $S2088
    set $N103, $I101
    isne $I102, $N102, $N103
    new $P105, 'Integer'
    set $P105, $I102
  if_2085_end:
    if $P105, if_2084
    set $P104, $P105
    goto if_2084_end
  if_2084:
.annotate 'line', 705
    set $P115, param_2080
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_str $S2089, $P116, $P117, "$!target", -1
    set $P118, param_2080
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$?CLASS"
    repr_get_attr_int $I2090, $P119, $P120, "$!pos", -1
    is_cclass $I103, .CCLASS_WORD, $S2089, $I2090
    new $P104, 'Integer'
    set $P104, $I103
  if_2084_end:
    if $P104, if_2083
    set $P103, $P104
    goto if_2083_end
  if_2083:
.annotate 'line', 706
    set $P121, param_2080
    nqp_decontainerize $P122, $P121
    find_lex $P123, "$?CLASS"
    repr_get_attr_str $S2091, $P122, $P123, "$!target", -1
    set $P124, param_2080
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_int $I2092, $P125, $P126, "$!pos", -1
    new $P127, 'Integer'
    set $P127, $I2092
    sub $P128, $P127, 1
    set $I104, $P128
    is_cclass $I105, .CCLASS_WORD, $S2091, $I104
    new $P103, 'Integer'
    set $P103, $I105
  if_2083_end:
    unless $P103, if_2082_end
.annotate 'line', 702
    set $P129, $P2081
    unless_null $P129, vivify_1179
    new $P129, "Undef"
  vivify_1179:
    set $P130, param_2080
    nqp_decontainerize $P131, $P130
    find_lex $P132, "$?CLASS"
    repr_get_attr_int $I2093, $P131, $P132, "$!pos", -1
    $P129."!cursor_pass"($I2093, "ww")
  if_2082_end:
.annotate 'line', 700
    set $P103, $P2081
    unless_null $P103, vivify_1180
    new $P103, "Undef"
  vivify_1180:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "wb" :anon :subid("59_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2095
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 710
    .lex "self", param_2095
.annotate 'line', 711
    new $P102, "Undef"
    set $P2096, $P102
    .lex "$cur", $P2096
    set $P103, param_2095
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2096, $P105
.annotate 'line', 713
    set $P106, param_2095
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_int $I2101, $P107, $P108, "$!pos", -1
    set $N100, $I2101
    set $N101, 0
    iseq $I100, $N100, $N101
    if $I100, if_2100
    new $P105, 'Integer'
    set $P105, $I100
    goto if_2100_end
  if_2100:
    set $P109, param_2095
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S2102, $P110, $P111, "$!target", -1
    set $P112, param_2095
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I2103, $P113, $P114, "$!pos", -1
    is_cclass $I101, .CCLASS_WORD, $S2102, $I2103
    new $P105, 'Integer'
    set $P105, $I101
  if_2100_end:
    unless $P105, unless_2099
    set $P104, $P105
    goto unless_2099_end
  unless_2099:
.annotate 'line', 714
    set $P116, param_2095
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_int $I2105, $P117, $P118, "$!pos", -1
    set $N102, $I2105
    set $P119, param_2095
    nqp_decontainerize $P120, $P119
    find_lex $P121, "$?CLASS"
    repr_get_attr_str $S2106, $P120, $P121, "$!target", -1
    length $I102, $S2106
    set $N103, $I102
    iseq $I103, $N102, $N103
    if $I103, if_2104
    new $P115, 'Integer'
    set $P115, $I103
    goto if_2104_end
  if_2104:
.annotate 'line', 715
    set $P122, param_2095
    nqp_decontainerize $P123, $P122
    find_lex $P124, "$?CLASS"
    repr_get_attr_str $S2107, $P123, $P124, "$!target", -1
    set $P125, param_2095
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$?CLASS"
    repr_get_attr_int $I2108, $P126, $P127, "$!pos", -1
    new $P128, 'Integer'
    set $P128, $I2108
    sub $P129, $P128, 1
    set $I104, $P129
    is_cclass $I105, .CCLASS_WORD, $S2107, $I104
    new $P115, 'Integer'
    set $P115, $I105
  if_2104_end:
    set $P104, $P115
  unless_2099_end:
.annotate 'line', 714
    unless $P104, unless_2098
    set $P103, $P104
    goto unless_2098_end
  unless_2098:
.annotate 'line', 716
    set $P130, param_2095
    nqp_decontainerize $P131, $P130
    find_lex $P132, "$?CLASS"
    repr_get_attr_str $S2109, $P131, $P132, "$!target", -1
    set $P133, param_2095
    nqp_decontainerize $P134, $P133
    find_lex $P135, "$?CLASS"
    repr_get_attr_int $I2110, $P134, $P135, "$!pos", -1
    new $P136, 'Integer'
    set $P136, $I2110
    sub $P137, $P136, 1
    set $I106, $P137
    is_cclass $I107, .CCLASS_WORD, $S2109, $I106
    set $N104, $I107
.annotate 'line', 717
    set $P138, param_2095
    nqp_decontainerize $P139, $P138
    find_lex $P140, "$?CLASS"
    repr_get_attr_str $S2111, $P139, $P140, "$!target", -1
    set $P141, param_2095
    nqp_decontainerize $P142, $P141
    find_lex $P143, "$?CLASS"
    repr_get_attr_int $I2112, $P142, $P143, "$!pos", -1
    is_cclass $I108, .CCLASS_WORD, $S2111, $I2112
    set $N105, $I108
    isne $I109, $N104, $N105
    new $P103, 'Integer'
    set $P103, $I109
  unless_2098_end:
.annotate 'line', 716
    unless $P103, if_2097_end
.annotate 'line', 712
    set $P144, $P2096
    unless_null $P144, vivify_1181
    new $P144, "Undef"
  vivify_1181:
    set $P145, param_2095
    nqp_decontainerize $P146, $P145
    find_lex $P147, "$?CLASS"
    repr_get_attr_int $I2113, $P146, $P147, "$!pos", -1
    $P144."!cursor_pass"($I2113, "wb")
  if_2097_end:
.annotate 'line', 710
    set $P103, $P2096
    unless_null $P103, vivify_1182
    new $P103, "Undef"
  vivify_1182:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "ident" :anon :subid("60_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2115
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 721
    .lex "self", param_2115
.annotate 'line', 722
    new $P102, "Undef"
    set $P2116, $P102
    .lex "$cur", $P2116
    set $P103, param_2115
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2116, $P105
.annotate 'line', 727
    set $P104, param_2115
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2119, $P105, $P106, "$!pos", -1
    set $N100, $I2119
    set $P107, param_2115
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2120, $P108, $P109, "$!target", -1
    length $I100, $S2120
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2118
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2118_end
  if_2118:
.annotate 'line', 728
    set $P111, param_2115
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_str $S2122, $P112, $P113, "$!target", -1
    set $P114, param_2115
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_int $I2123, $P115, $P116, "$!pos", -1
    ord $I102, $S2122, $I2123
    set $N102, $I102
    set $N103, 95
    iseq $I103, $N102, $N103
    unless $I103, unless_2121
    new $P110, 'Integer'
    set $P110, $I103
    goto unless_2121_end
  unless_2121:
.annotate 'line', 729
    set $P117, param_2115
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_str $S2124, $P118, $P119, "$!target", -1
    set $P120, param_2115
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$?CLASS"
    repr_get_attr_int $I2125, $P121, $P122, "$!pos", -1
    is_cclass $I104, .CCLASS_ALPHABETIC, $S2124, $I2125
    new $P110, 'Integer'
    set $P110, $I104
  unless_2121_end:
    set $P103, $P110
  if_2118_end:
.annotate 'line', 727
    unless $P103, if_2117_end
.annotate 'line', 723
    set $P123, $P2116
    unless_null $P123, vivify_1183
    new $P123, "Undef"
  vivify_1183:
.annotate 'line', 725
    set $P124, param_2115
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_str $S2126, $P125, $P126, "$!target", -1
    set $P127, param_2115
    nqp_decontainerize $P128, $P127
    find_lex $P129, "$?CLASS"
    repr_get_attr_int $I2127, $P128, $P129, "$!pos", -1
.annotate 'line', 726
    set $P130, param_2115
    nqp_decontainerize $P131, $P130
    find_lex $P132, "$?CLASS"
    repr_get_attr_str $S2128, $P131, $P132, "$!target", -1
    length $I105, $S2128
    find_not_cclass $I106, .CCLASS_WORD, $S2126, $I2127, $I105
.annotate 'line', 724
    $P123."!cursor_pass"($I106)
  if_2117_end:
.annotate 'line', 721
    set $P103, $P2116
    unless_null $P103, vivify_1184
    new $P103, "Undef"
  vivify_1184:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "alpha" :anon :subid("61_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2130
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 733
    .lex "self", param_2130
.annotate 'line', 734
    new $P102, "Undef"
    set $P2131, $P102
    .lex "$cur", $P2131
    set $P103, param_2130
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2131, $P105
.annotate 'line', 736
    set $P104, param_2130
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2134, $P105, $P106, "$!pos", -1
    set $N100, $I2134
    set $P107, param_2130
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2135, $P108, $P109, "$!target", -1
    length $I100, $S2135
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2133
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2133_end
  if_2133:
.annotate 'line', 737
    set $P111, param_2130
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_str $S2137, $P112, $P113, "$!target", -1
    set $P114, param_2130
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_int $I2138, $P115, $P116, "$!pos", -1
    is_cclass $I102, .CCLASS_ALPHABETIC, $S2137, $I2138
    unless $I102, unless_2136
    new $P110, 'Integer'
    set $P110, $I102
    goto unless_2136_end
  unless_2136:
.annotate 'line', 738
    set $P117, param_2130
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_str $S2139, $P118, $P119, "$!target", -1
    set $P120, param_2130
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$?CLASS"
    repr_get_attr_int $I2140, $P121, $P122, "$!pos", -1
    ord $I103, $S2139, $I2140
    set $N102, $I103
    set $N103, 95
    iseq $I104, $N102, $N103
    new $P110, 'Integer'
    set $P110, $I104
  unless_2136_end:
    set $P103, $P110
  if_2133_end:
.annotate 'line', 737
    unless $P103, if_2132_end
.annotate 'line', 735
    set $P123, $P2131
    unless_null $P123, vivify_1185
    new $P123, "Undef"
  vivify_1185:
    set $P124, param_2130
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_int $I2141, $P125, $P126, "$!pos", -1
    new $P127, 'Integer'
    set $P127, $I2141
    add $P128, $P127, 1
    $P123."!cursor_pass"($P128, "alpha")
  if_2132_end:
.annotate 'line', 733
    set $P103, $P2131
    unless_null $P103, vivify_1186
    new $P103, "Undef"
  vivify_1186:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "alnum" :anon :subid("62_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2143
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 742
    .lex "self", param_2143
.annotate 'line', 743
    new $P102, "Undef"
    set $P2144, $P102
    .lex "$cur", $P2144
    set $P103, param_2143
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2144, $P105
.annotate 'line', 745
    set $P104, param_2143
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2147, $P105, $P106, "$!pos", -1
    set $N100, $I2147
    set $P107, param_2143
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2148, $P108, $P109, "$!target", -1
    length $I100, $S2148
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2146
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2146_end
  if_2146:
.annotate 'line', 746
    set $P111, param_2143
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_str $S2150, $P112, $P113, "$!target", -1
    set $P114, param_2143
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_int $I2151, $P115, $P116, "$!pos", -1
    is_cclass $I102, .CCLASS_ALPHANUMERIC, $S2150, $I2151
    unless $I102, unless_2149
    new $P110, 'Integer'
    set $P110, $I102
    goto unless_2149_end
  unless_2149:
.annotate 'line', 747
    set $P117, param_2143
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_str $S2152, $P118, $P119, "$!target", -1
    set $P120, param_2143
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$?CLASS"
    repr_get_attr_int $I2153, $P121, $P122, "$!pos", -1
    ord $I103, $S2152, $I2153
    set $N102, $I103
    set $N103, 95
    iseq $I104, $N102, $N103
    new $P110, 'Integer'
    set $P110, $I104
  unless_2149_end:
    set $P103, $P110
  if_2146_end:
.annotate 'line', 746
    unless $P103, if_2145_end
.annotate 'line', 744
    set $P123, $P2144
    unless_null $P123, vivify_1187
    new $P123, "Undef"
  vivify_1187:
    set $P124, param_2143
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_int $I2154, $P125, $P126, "$!pos", -1
    new $P127, 'Integer'
    set $P127, $I2154
    add $P128, $P127, 1
    $P123."!cursor_pass"($P128, "alnum")
  if_2145_end:
.annotate 'line', 742
    set $P103, $P2144
    unless_null $P103, vivify_1188
    new $P103, "Undef"
  vivify_1188:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "upper" :anon :subid("63_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2156
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 751
    .lex "self", param_2156
.annotate 'line', 752
    new $P102, "Undef"
    set $P2157, $P102
    .lex "$cur", $P2157
    set $P103, param_2156
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2157, $P105
.annotate 'line', 754
    set $P104, param_2156
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2160, $P105, $P106, "$!pos", -1
    set $N100, $I2160
    set $P107, param_2156
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2161, $P108, $P109, "$!target", -1
    length $I100, $S2161
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2159
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2159_end
  if_2159:
.annotate 'line', 755
    set $P110, param_2156
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2162, $P111, $P112, "$!target", -1
    set $P113, param_2156
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2163, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_UPPERCASE, $S2162, $I2163
    new $P103, 'Integer'
    set $P103, $I102
  if_2159_end:
    unless $P103, if_2158_end
.annotate 'line', 753
    set $P116, $P2157
    unless_null $P116, vivify_1189
    new $P116, "Undef"
  vivify_1189:
    set $P117, param_2156
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2164, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2164
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "upper")
  if_2158_end:
.annotate 'line', 751
    set $P103, $P2157
    unless_null $P103, vivify_1190
    new $P103, "Undef"
  vivify_1190:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "lower" :anon :subid("64_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2166
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 759
    .lex "self", param_2166
.annotate 'line', 760
    new $P102, "Undef"
    set $P2167, $P102
    .lex "$cur", $P2167
    set $P103, param_2166
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2167, $P105
.annotate 'line', 762
    set $P104, param_2166
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2170, $P105, $P106, "$!pos", -1
    set $N100, $I2170
    set $P107, param_2166
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2171, $P108, $P109, "$!target", -1
    length $I100, $S2171
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2169
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2169_end
  if_2169:
.annotate 'line', 763
    set $P110, param_2166
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2172, $P111, $P112, "$!target", -1
    set $P113, param_2166
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2173, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_LOWERCASE, $S2172, $I2173
    new $P103, 'Integer'
    set $P103, $I102
  if_2169_end:
    unless $P103, if_2168_end
.annotate 'line', 761
    set $P116, $P2167
    unless_null $P116, vivify_1191
    new $P116, "Undef"
  vivify_1191:
    set $P117, param_2166
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2174, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2174
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "lower")
  if_2168_end:
.annotate 'line', 759
    set $P103, $P2167
    unless_null $P103, vivify_1192
    new $P103, "Undef"
  vivify_1192:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "digit" :anon :subid("65_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2176
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 767
    .lex "self", param_2176
.annotate 'line', 768
    new $P102, "Undef"
    set $P2177, $P102
    .lex "$cur", $P2177
    set $P103, param_2176
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2177, $P105
.annotate 'line', 770
    set $P104, param_2176
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2180, $P105, $P106, "$!pos", -1
    set $N100, $I2180
    set $P107, param_2176
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2181, $P108, $P109, "$!target", -1
    length $I100, $S2181
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2179
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2179_end
  if_2179:
.annotate 'line', 771
    set $P110, param_2176
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2182, $P111, $P112, "$!target", -1
    set $P113, param_2176
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2183, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_NUMERIC, $S2182, $I2183
    new $P103, 'Integer'
    set $P103, $I102
  if_2179_end:
    unless $P103, if_2178_end
.annotate 'line', 769
    set $P116, $P2177
    unless_null $P116, vivify_1193
    new $P116, "Undef"
  vivify_1193:
    set $P117, param_2176
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2184, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2184
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "digit")
  if_2178_end:
.annotate 'line', 767
    set $P103, $P2177
    unless_null $P103, vivify_1194
    new $P103, "Undef"
  vivify_1194:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "xdigit" :anon :subid("66_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2186
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 775
    .lex "self", param_2186
.annotate 'line', 776
    new $P102, "Undef"
    set $P2187, $P102
    .lex "$cur", $P2187
    set $P103, param_2186
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2187, $P105
.annotate 'line', 778
    set $P104, param_2186
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2190, $P105, $P106, "$!pos", -1
    set $N100, $I2190
    set $P107, param_2186
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2191, $P108, $P109, "$!target", -1
    length $I100, $S2191
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2189
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2189_end
  if_2189:
.annotate 'line', 779
    set $P110, param_2186
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2192, $P111, $P112, "$!target", -1
    set $P113, param_2186
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2193, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_HEXADECIMAL, $S2192, $I2193
    new $P103, 'Integer'
    set $P103, $I102
  if_2189_end:
    unless $P103, if_2188_end
.annotate 'line', 777
    set $P116, $P2187
    unless_null $P116, vivify_1195
    new $P116, "Undef"
  vivify_1195:
    set $P117, param_2186
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2194, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2194
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "xdigit")
  if_2188_end:
.annotate 'line', 775
    set $P103, $P2187
    unless_null $P103, vivify_1196
    new $P103, "Undef"
  vivify_1196:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "space" :anon :subid("67_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2196
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 783
    .lex "self", param_2196
.annotate 'line', 784
    new $P102, "Undef"
    set $P2197, $P102
    .lex "$cur", $P2197
    set $P103, param_2196
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2197, $P105
.annotate 'line', 786
    set $P104, param_2196
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2200, $P105, $P106, "$!pos", -1
    set $N100, $I2200
    set $P107, param_2196
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2201, $P108, $P109, "$!target", -1
    length $I100, $S2201
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2199
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2199_end
  if_2199:
.annotate 'line', 787
    set $P110, param_2196
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2202, $P111, $P112, "$!target", -1
    set $P113, param_2196
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2203, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_WHITESPACE, $S2202, $I2203
    new $P103, 'Integer'
    set $P103, $I102
  if_2199_end:
    unless $P103, if_2198_end
.annotate 'line', 785
    set $P116, $P2197
    unless_null $P116, vivify_1197
    new $P116, "Undef"
  vivify_1197:
    set $P117, param_2196
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2204, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2204
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "space")
  if_2198_end:
.annotate 'line', 783
    set $P103, $P2197
    unless_null $P103, vivify_1198
    new $P103, "Undef"
  vivify_1198:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "blank" :anon :subid("68_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2206
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 791
    .lex "self", param_2206
.annotate 'line', 792
    new $P102, "Undef"
    set $P2207, $P102
    .lex "$cur", $P2207
    set $P103, param_2206
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2207, $P105
.annotate 'line', 794
    set $P104, param_2206
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2210, $P105, $P106, "$!pos", -1
    set $N100, $I2210
    set $P107, param_2206
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2211, $P108, $P109, "$!target", -1
    length $I100, $S2211
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2209
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2209_end
  if_2209:
.annotate 'line', 795
    set $P110, param_2206
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2212, $P111, $P112, "$!target", -1
    set $P113, param_2206
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2213, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_BLANK, $S2212, $I2213
    new $P103, 'Integer'
    set $P103, $I102
  if_2209_end:
    unless $P103, if_2208_end
.annotate 'line', 793
    set $P116, $P2207
    unless_null $P116, vivify_1199
    new $P116, "Undef"
  vivify_1199:
    set $P117, param_2206
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2214, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2214
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "blank")
  if_2208_end:
.annotate 'line', 791
    set $P103, $P2207
    unless_null $P103, vivify_1200
    new $P103, "Undef"
  vivify_1200:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "cntrl" :anon :subid("69_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2216
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 799
    .lex "self", param_2216
.annotate 'line', 800
    new $P102, "Undef"
    set $P2217, $P102
    .lex "$cur", $P2217
    set $P103, param_2216
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2217, $P105
.annotate 'line', 802
    set $P104, param_2216
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2220, $P105, $P106, "$!pos", -1
    set $N100, $I2220
    set $P107, param_2216
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2221, $P108, $P109, "$!target", -1
    length $I100, $S2221
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2219
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2219_end
  if_2219:
.annotate 'line', 803
    set $P110, param_2216
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2222, $P111, $P112, "$!target", -1
    set $P113, param_2216
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2223, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_CONTROL, $S2222, $I2223
    new $P103, 'Integer'
    set $P103, $I102
  if_2219_end:
    unless $P103, if_2218_end
.annotate 'line', 801
    set $P116, $P2217
    unless_null $P116, vivify_1201
    new $P116, "Undef"
  vivify_1201:
    set $P117, param_2216
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2224, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2224
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "cntrl")
  if_2218_end:
.annotate 'line', 799
    set $P103, $P2217
    unless_null $P103, vivify_1202
    new $P103, "Undef"
  vivify_1202:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "punct" :anon :subid("70_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2226
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 807
    .lex "self", param_2226
.annotate 'line', 808
    new $P102, "Undef"
    set $P2227, $P102
    .lex "$cur", $P2227
    set $P103, param_2226
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2227, $P105
.annotate 'line', 810
    set $P104, param_2226
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2230, $P105, $P106, "$!pos", -1
    set $N100, $I2230
    set $P107, param_2226
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2231, $P108, $P109, "$!target", -1
    length $I100, $S2231
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2229
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2229_end
  if_2229:
.annotate 'line', 811
    set $P110, param_2226
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2232, $P111, $P112, "$!target", -1
    set $P113, param_2226
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2233, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_PUNCTUATION, $S2232, $I2233
    new $P103, 'Integer'
    set $P103, $I102
  if_2229_end:
    unless $P103, if_2228_end
.annotate 'line', 809
    set $P116, $P2227
    unless_null $P116, vivify_1203
    new $P116, "Undef"
  vivify_1203:
    set $P117, param_2226
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2234, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2234
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "punct")
  if_2228_end:
.annotate 'line', 807
    set $P103, $P2227
    unless_null $P103, vivify_1204
    new $P103, "Undef"
  vivify_1204:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "FAILGOAL" :anon :subid("71_1340317675.197") :outer("72_1340317675.197")
    .param pmc param_2236
    .param pmc param_2237
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 815
    .lex "self", param_2236
    .lex "$goal", param_2237
.annotate 'line', 816
    new $P102, "Undef"
    set $P2238, $P102
    .lex "$sub", $P2238

            $P2239 = getinterp
            $P2239 = $P2239['sub';1]
        
    set $P2238, $P2239
.annotate 'line', 820
    new $P103, "String"
    assign $P103, "Unable to parse "
    set $P104, $P2238
    unless_null $P104, vivify_1205
    new $P104, "Undef"
  vivify_1205:
    set $S100, $P104
    concat $P105, $P103, $S100
    new $P106, 'String'
    set $P106, ", couldn't find final "
    set $P107, param_2237
    unless_null $P107, vivify_1206
    new $P107, "Undef"
  vivify_1206:
    concat $P108, $P106, $P107
    concat $P109, $P105, $P108
    die $P109
.annotate 'line', 815
    .return ()
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2241"  :subid("441_1340317675.197") :outer("421_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 825
    .const 'Sub' $P2282 = "84_1340317675.197" 
    capture_lex $P2282
    .const 'Sub' $P2280 = "83_1340317675.197" 
    capture_lex $P2280
    .const 'Sub' $P2277 = "82_1340317675.197" 
    capture_lex $P2277
    .const 'Sub' $P2270 = "81_1340317675.197" 
    capture_lex $P2270
    .const 'Sub' $P2266 = "80_1340317675.197" 
    capture_lex $P2266
    .const 'Sub' $P2264 = "79_1340317675.197" 
    capture_lex $P2264
    .const 'Sub' $P2261 = "78_1340317675.197" 
    capture_lex $P2261
    .const 'Sub' $P2255 = "77_1340317675.197" 
    capture_lex $P2255
    .const 'Sub' $P2253 = "76_1340317675.197" 
    capture_lex $P2253
    .const 'Sub' $P2250 = "75_1340317675.197" 
    capture_lex $P2250
    .const 'Sub' $P2248 = "74_1340317675.197" 
    capture_lex $P2248
    .const 'Sub' $P2245 = "73_1340317675.197" 
    capture_lex $P2245
    .lex "$?PACKAGE", $P2243
    .lex "$?CLASS", $P2244
.annotate 'line', 845
    .const 'Sub' $P2282 = "84_1340317675.197" 
    newclosure $P2305, $P2282
.annotate 'line', 825
    .return ($P2305)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "from" :anon :subid("73_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2246
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 832
    .lex "self", param_2246
    set $P100, param_2246
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2247, $P101, $P102, "$!from", 3
    .return ($I2247)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "orig" :anon :subid("74_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2249
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 833
    .lex "self", param_2249
    set $P100, param_2249
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_obj $P103, $P101, $P102, "$!orig", 2
    unless_null $P103, vivify_1207
    new $P103, "Undef"
  vivify_1207:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "to" :anon :subid("75_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2251
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 834
    .lex "self", param_2251
    set $P100, param_2251
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2252, $P101, $P102, "$!to", 4
    .return ($I2252)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "CURSOR" :anon :subid("76_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2254
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 835
    .lex "self", param_2254
    set $P100, param_2254
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_obj $P103, $P101, $P102, "$!cursor", 6
    unless_null $P103, vivify_1208
    new $P103, "Undef"
  vivify_1208:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "Str" :anon :subid("77_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2256
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 836
    .lex "self", param_2256
    set $P100, param_2256
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_obj $P103, $P101, $P102, "$!orig", 2
    unless_null $P103, vivify_1209
    new $P103, "Undef"
  vivify_1209:
    set $S100, $P103
    set $P104, param_2256
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2257, $P105, $P106, "$!from", 3
    set $P107, param_2256
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2258, $P108, $P109, "$!to", 4
    new $P110, 'Integer'
    set $P110, $I2258
    set $P111, param_2256
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2259, $P112, $P113, "$!from", 3
    sub $P114, $P110, $I2259
    set $I100, $P114
    substr $S101, $S100, $I2257, $I100
    .return ($S101)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2260"  :anon :subid("78_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2262
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 837
    .lex "self", param_2262
    set $P100, param_2262
    nqp_decontainerize $P101, $P100
    $P102 = $P101."Str"()
    set $N100, $P102
    .return ($N100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2263"  :anon :subid("79_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2265
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 838
    .lex "self", param_2265
    set $P100, param_2265
    nqp_decontainerize $P101, $P100
    $P102 = $P101."Str"()
    set $N100, $P102
    .return ($N100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "Bool" :anon :subid("80_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2267
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 839
    .lex "self", param_2267
    set $P100, param_2267
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2268, $P101, $P102, "$!to", 4
    set $N100, $I2268
    set $P103, param_2267
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2269, $P104, $P105, "$!from", 3
    set $N101, $I2269
    isge $I100, $N100, $N101
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "chars" :anon :subid("81_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2271
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 840
    .lex "self", param_2271
    set $P101, param_2271
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2273, $P102, $P103, "$!to", 4
    set $N100, $I2273
    set $P104, param_2271
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2274, $P105, $P106, "$!from", 3
    set $N101, $I2274
    isge $I100, $N100, $N101
    if $I100, if_2272
    new $P115, "Float"
    assign $P115, 0
    set $P100, $P115
    goto if_2272_end
  if_2272:
    set $P107, param_2271
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2275, $P108, $P109, "$!to", 4
    new $P110, 'Integer'
    set $P110, $I2275
    set $P111, param_2271
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_int $I2276, $P112, $P113, "$!from", 3
    sub $P114, $P110, $I2276
    set $P100, $P114
  if_2272_end:
    .return ($P100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "!make" :anon :subid("82_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2278
    .param pmc param_2279
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 842
    .lex "self", param_2278
    .lex "$ast", param_2279
    set $P100, param_2279
    unless_null $P100, vivify_1210
    new $P100, "Undef"
  vivify_1210:
    set $P101, param_2278
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_bind_attr_obj $P102, $P103, "$!ast", 5, $P100
    .return ($P100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "ast" :anon :subid("83_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2281
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 843
    .lex "self", param_2281
    set $P100, param_2281
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 66
    repr_get_attr_obj $P103, $P101, $P102, "$!ast", 5
    unless_null $P103, vivify_1211
    new $P103, "Undef"
  vivify_1211:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.include "except_types.pasm"
.sub "!dump_str" :anon :subid("84_1340317675.197") :outer("441_1340317675.197")
    .param pmc param_2283
    .param pmc param_2284
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 845
    .const 'Sub' $P2302 = "445_1340317675.197" 
    capture_lex $P2302
    .const 'Sub' $P2286 = "442_1340317675.197" 
    capture_lex $P2286
    .lex "self", param_2283
    .lex "$key", param_2284
.annotate 'line', 846
    .const 'Sub' $P2286 = "442_1340317675.197" 
    newclosure $P2299, $P2286
    set $P2285, $P2299
    .lex "dump_array", $P2285
.annotate 'line', 857
    new $P102, "Undef"
    set $P2300, $P102
    .lex "$str", $P2300
.annotate 'line', 845
    set $P103, $P2285
.annotate 'line', 857
    set $P103, param_2284
    unless_null $P103, vivify_1224
    new $P103, "Undef"
  vivify_1224:
    concat $P104, $P103, ": "
    set $P105, param_2283
    nqp_decontainerize $P106, $P105
    $S100 = $P106."Str"()
    escape $S101, $S100
    concat $P107, $P104, $S101
    concat $P108, $P107, " @ "
    set $P109, param_2283
    nqp_decontainerize $P110, $P109
    $S102 = $P110."from"()
    concat $P111, $P108, $S102
    concat $P112, $P111, "\n"
    set $P2300, $P112
.annotate 'line', 858
    set $P103, $P2300
    unless_null $P103, vivify_1225
    new $P103, "Undef"
  vivify_1225:
    set $P104, param_2284
    unless_null $P104, vivify_1226
    new $P104, "Undef"
  vivify_1226:
    set $P105, param_2283
    nqp_decontainerize $P106, $P105
    $P107 = $P106."list"()
    $S100 = "dump_array"($P104, $P107)
    concat $P108, $P103, $S100
    set $P2300, $P108
.annotate 'line', 859
    set $P104, param_2283
    nqp_decontainerize $P105, $P104
    $P106 = $P105."hash"()
    defined $I100, $P106
    unless $I100, for_undef_1227
    iter $P103, $P106
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2304_handler
    push_eh $P108
  loop2304_test:
    unless $P103, loop2304_done
    shift $P107, $P103
  loop2304_redo:
    .const 'Sub' $P2302 = "445_1340317675.197" 
    capture_lex $P2302
    $P2302($P107)
  loop2304_next:
    goto loop2304_test
  loop2304_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2304_next
    eq $P109, .CONTROL_LOOP_REDO, loop2304_redo
  loop2304_done:
    pop_eh 
  for_undef_1227:
.annotate 'line', 845
    set $P103, $P2300
    unless_null $P103, vivify_1232
    new $P103, "Undef"
  vivify_1232:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "dump_array"  :subid("442_1340317675.197") :outer("84_1340317675.197")
    .param pmc param_2287
    .param pmc param_2288
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 846
    .const 'Sub' $P2292 = "443_1340317675.197" 
    capture_lex $P2292
    .lex "$key", param_2287
    .lex "$item", param_2288
.annotate 'line', 847
    new $P100, "Undef"
    set $P2289, $P100
    .lex "$str", $P2289
    new $P101, "String"
    assign $P101, ""
    set $P2289, $P101
.annotate 'line', 848
    find_lex $P101, "NQPCapture"
    set $P102, param_2288
    unless_null $P102, vivify_1212
    new $P102, "Undef"
  vivify_1212:
    $P103 = $P101."ACCEPTS"($P102)
    if $P103, if_2290
.annotate 'line', 851
    .const 'Sub' $P2292 = "443_1340317675.197" 
    capture_lex $P2292
    $P2292()
    goto if_2290_end
  if_2290:
.annotate 'line', 849
    set $P104, $P2289
    unless_null $P104, vivify_1220
    new $P104, "Undef"
  vivify_1220:
    set $P105, param_2288
    unless_null $P105, vivify_1221
    new $P105, "Undef"
  vivify_1221:
    set $P106, param_2287
    unless_null $P106, vivify_1222
    new $P106, "Undef"
  vivify_1222:
    $S100 = $P105."!dump_str"($P106)
    concat $P107, $P104, $S100
    set $P2289, $P107
  if_2290_end:
.annotate 'line', 846
    set $P101, $P2289
    unless_null $P101, vivify_1223
    new $P101, "Undef"
  vivify_1223:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.include "except_types.pasm"
.sub "_block2291"  :anon :subid("443_1340317675.197") :outer("442_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 851
    .const 'Sub' $P2295 = "444_1340317675.197" 
    capture_lex $P2295
.annotate 'line', 852
    new $P104, "Undef"
    set $P2293, $P104
    .lex "$n", $P2293
    new $P105, "Float"
    assign $P105, 0
    set $P2293, $P105
.annotate 'line', 853
    find_lex $P106, "$item"
    unless_null $P106, vivify_1213
    new $P106, "Undef"
  vivify_1213:
    defined $I100, $P106
    unless $I100, for_undef_1214
    iter $P105, $P106
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2298_handler
    push_eh $P108
  loop2298_test:
    unless $P105, loop2298_done
    shift $P107, $P105
  loop2298_redo:
    .const 'Sub' $P2295 = "444_1340317675.197" 
    capture_lex $P2295
    $P2295($P107)
  loop2298_next:
    goto loop2298_test
  loop2298_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2298_next
    eq $P109, .CONTROL_LOOP_REDO, loop2298_redo
  loop2298_done:
    pop_eh 
  for_undef_1214:
.annotate 'line', 851
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2294"  :anon :subid("444_1340317675.197") :outer("443_1340317675.197")
    .param pmc param_2296
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 853
    .lex "$_", param_2296
    find_lex $P108, "$str"
    unless_null $P108, vivify_1215
    new $P108, "Undef"
  vivify_1215:
    find_lex $P109, "$key"
    unless_null $P109, vivify_1216
    new $P109, "Undef"
  vivify_1216:
    new $P110, 'String'
    set $P110, "["
    find_lex $P111, "$n"
    unless_null $P111, vivify_1217
    new $P111, "Undef"
  vivify_1217:
    concat $P112, $P110, $P111
    concat $P113, $P112, "]"
    concat $P114, $P109, $P113
    find_lex $P115, "$_"
    unless_null $P115, vivify_1218
    new $P115, "Undef"
  vivify_1218:
    $S100 = "dump_array"($P114, $P115)
    concat $P116, $P108, $S100
    store_lex "$str", $P116
    find_lex $P108, "$n"
    unless_null $P108, vivify_1219
    new $P108, "Undef"
  vivify_1219:
    clone $P2297, $P108
    inc $P108
    .return ($P2297)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2301"  :anon :subid("445_1340317675.197") :outer("84_1340317675.197")
    .param pmc param_2303
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 859
    .lex "$_", param_2303
    find_lex $P108, "$str"
    unless_null $P108, vivify_1228
    new $P108, "Undef"
  vivify_1228:
    find_lex $P109, "$key"
    unless_null $P109, vivify_1229
    new $P109, "Undef"
  vivify_1229:
    concat $P110, $P109, "<"
    find_lex $P111, "$_"
    unless_null $P111, vivify_1230
    new $P111, "Undef"
  vivify_1230:
    $S100 = $P111."key"()
    concat $P112, $P110, $S100
    concat $P113, $P112, ">"
    find_lex $P114, "$_"
    unless_null $P114, vivify_1231
    new $P114, "Undef"
  vivify_1231:
    $P115 = $P114."value"()
    $S101 = "dump_array"($P113, $P115)
    concat $P116, $P108, $S101
    store_lex "$str", $P116
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2306"  :subid("446_1340317675.197") :outer("421_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 864
    .const 'Sub' $P2388 = "89_1340317675.197" 
    capture_lex $P2388
    .const 'Sub' $P2345 = "88_1340317675.197" 
    capture_lex $P2345
    .const 'Sub' $P2335 = "87_1340317675.197" 
    capture_lex $P2335
    .const 'Sub' $P2332 = "86_1340317675.197" 
    capture_lex $P2332
    .const 'Sub' $P2312 = "85_1340317675.197" 
    capture_lex $P2312
.annotate 'line', 865
    new $P100, "Undef"
    set $P2308, $P100
    .lex "$EMPTY_MATCH_LIST", $P2308
.annotate 'line', 866
    new $P101, "Undef"
    set $P2309, $P101
    .lex "$EMPTY_MATCH_HASH", $P2309
    .lex "$?PACKAGE", $P2310
    .lex "$?CLASS", $P2311
.annotate 'line', 865
    new $P102, "ResizablePMCArray"
    set $P2308, $P102
.annotate 'line', 866
    new $P102, "Hash"
    set $P2309, $P102
.annotate 'line', 950
    .const 'Sub' $P2388 = "89_1340317675.197" 
    newclosure $P2407, $P2388
.annotate 'line', 864
    .return ($P2407)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "MATCH" :anon :subid("85_1340317675.197") :outer("446_1340317675.197")
    .param pmc param_2313
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 867
    .const 'Sub' $P2318 = "447_1340317675.197" 
    capture_lex $P2318
    .lex "self", param_2313
.annotate 'line', 868
    new $P102, "Undef"
    set $P2314, $P102
    .lex "$match", $P2314
    set $P103, param_2313
    nqp_decontainerize $P104, $P103
    find_lex $P105, "NQPCursor"
    getattribute $P106, $P104, $P105, "$!match"
    set $P2314, $P106
.annotate 'line', 869
    set $P104, $P2314
    unless_null $P104, vivify_1233
    new $P104, "Undef"
  vivify_1233:
    find_lex $P105, "NQPMatch"
    type_check $I100, $P104, $P105
    unless $I100, unless_2316
    new $P103, 'Integer'
    set $P103, $I100
    goto unless_2316_end
  unless_2316:
    set $P106, $P2314
    unless_null $P106, vivify_1234
    new $P106, "Undef"
  vivify_1234:
    isa $I101, $P106, "Hash"
    new $P103, 'Integer'
    set $P103, $I101
  unless_2316_end:
    if $P103, unless_2315_end
    .const 'Sub' $P2318 = "447_1340317675.197" 
    capture_lex $P2318
    $P2318()
  unless_2315_end:
.annotate 'line', 867
    set $P103, $P2314
    unless_null $P103, vivify_1263
    new $P103, "Undef"
  vivify_1263:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2317"  :anon :subid("447_1340317675.197") :outer("85_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 870
    new $P107, "Undef"
    set $P2319, $P107
    .lex "$list", $P2319
.annotate 'line', 871
    new $P108, "Undef"
    set $P2320, $P108
    .lex "$hash", $P2320
.annotate 'line', 878
    $P2322 = root_new ['parrot';'Hash']
    set $P2321, $P2322
    .lex "%ch", $P2321
.annotate 'line', 879
    new $P109, "Undef"
    set $P2323, $P109
    .lex "$key", $P2323
.annotate 'line', 880
    new $P110, "Undef"
    set $P2324, $P110
    .lex "$iter", $P2324
.annotate 'line', 870
    find_lex $P111, "$EMPTY_MATCH_LIST"
    unless_null $P111, vivify_1235
    new $P111, "Undef"
  vivify_1235:
    set $P2319, $P111
.annotate 'line', 871
    find_lex $P111, "$EMPTY_MATCH_HASH"
    unless_null $P111, vivify_1236
    new $P111, "Undef"
  vivify_1236:
    set $P2320, $P111
.annotate 'line', 872
    find_lex $P111, "NQPMatch"
    repr_instance_of $P112, $P111
    store_lex "$match", $P112
.annotate 'line', 873
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P113, "NQPCursor"
    find_lex $P114, "$match"
    unless_null $P114, vivify_1237
    new $P114, "Undef"
  vivify_1237:
    setattribute $P112, $P113, "$!match", $P114
.annotate 'line', 874
    find_lex $P111, "$match"
    unless_null $P111, vivify_1238
    new $P111, "Undef"
  vivify_1238:
    find_lex $P112, "NQPMatch"
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    setattribute $P111, $P112, "$!cursor", $P114
.annotate 'line', 875
    find_lex $P111, "$match"
    unless_null $P111, vivify_1239
    new $P111, "Undef"
  vivify_1239:
    find_lex $P112, "NQPMatch"
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    find_lex $P115, "NQPCursor"
    getattribute $P116, $P114, $P115, "$!orig"
    setattribute $P111, $P112, "$!orig", $P116
.annotate 'line', 876
    find_lex $P111, "$match"
    unless_null $P111, vivify_1240
    new $P111, "Undef"
  vivify_1240:
    find_lex $P112, "NQPMatch"
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    find_lex $P115, "NQPCursor"
    repr_get_attr_int $I102, $P114, $P115, "$!from"
    repr_bind_attr_int $P111, $P112, "$!from", $I102
.annotate 'line', 877
    find_lex $P111, "$match"
    unless_null $P111, vivify_1241
    new $P111, "Undef"
  vivify_1241:
    find_lex $P112, "NQPMatch"
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    find_lex $P115, "NQPCursor"
    repr_get_attr_int $I102, $P114, $P115, "$!pos"
    repr_bind_attr_int $P111, $P112, "$!to", $I102
.annotate 'line', 878
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."CAPHASH"()
    set $P2321, $P113
.annotate 'line', 869
    set $P111, $P2323
    unless_null $P111, vivify_1242
    new $P111, "Undef"
  vivify_1242:
.annotate 'line', 880
    set $P2325, $P2321
    unless_null $P2325, vivify_1243
    $P2325 = root_new ['parrot';'Hash']
  vivify_1243:
    iter $P111, $P2325
    set $P2324, $P111
.annotate 'line', 881
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop2331_handler
    push_eh $P112
  loop2331_test:
    set $P111, $P2324
    unless_null $P111, vivify_1244
    new $P111, "Undef"
  vivify_1244:
    unless $P111, loop2331_done
  loop2331_redo:
.annotate 'line', 882
    set $P112, $P2324
    unless_null $P112, vivify_1245
    new $P112, "Undef"
  vivify_1245:
    shift $P113, $P112
    set $S100, $P113
    new $P114, 'String'
    set $P114, $S100
    set $P2323, $P114
.annotate 'line', 883
    set $P112, $P2323
    unless_null $P112, vivify_1246
    new $P112, "Undef"
  vivify_1246:
    set $S100, $P112
    is_cclass $I102, .CCLASS_NUMERIC, $S100, 0
    if $I102, if_2326
.annotate 'line', 888
    set $P113, $P2320
    unless_null $P113, vivify_1247
    new $P113, "Undef"
  vivify_1247:
    if $P113, unless_2329_end
    new $P114, "Hash"
    set $P2320, $P114
  unless_2329_end:
.annotate 'line', 889
    set $P114, $P2323
    unless_null $P114, vivify_1248
    new $P114, "Undef"
  vivify_1248:
    set $S101, $P114
    set $P113, $P2320
    unless_null $P113, vivify_1249
    new $P113, "Undef"
  vivify_1249:
    set $P115, $P2323
    unless_null $P115, vivify_1250
    new $P115, "Undef"
  vivify_1250:
    set $P2330, $P2321
    unless_null $P2330, vivify_1251
    $P2330 = root_new ['parrot';'Hash']
  vivify_1251:
    set $P116, $P2330[$P115]
    unless_null $P116, vivify_1252
    new $P116, "Undef"
  vivify_1252:
    set $P113[$S101], $P116
.annotate 'line', 887
    goto if_2326_end
  if_2326:
.annotate 'line', 884
    set $P113, $P2319
    unless_null $P113, vivify_1253
    new $P113, "Undef"
  vivify_1253:
    if $P113, unless_2327_end
    new $P114, "ResizablePMCArray"
    set $P2319, $P114
  unless_2327_end:
.annotate 'line', 885
    set $P114, $P2323
    unless_null $P114, vivify_1254
    new $P114, "Undef"
  vivify_1254:
    set $I103, $P114
    set $P113, $P2319
    unless_null $P113, vivify_1255
    new $P113, "Undef"
  vivify_1255:
    set $P115, $P2323
    unless_null $P115, vivify_1256
    new $P115, "Undef"
  vivify_1256:
    set $P2328, $P2321
    unless_null $P2328, vivify_1257
    $P2328 = root_new ['parrot';'Hash']
  vivify_1257:
    set $P116, $P2328[$P115]
    unless_null $P116, vivify_1258
    new $P116, "Undef"
  vivify_1258:
    set $P113[$I103], $P116
  if_2326_end:
  loop2331_next:
.annotate 'line', 881
    goto loop2331_test
  loop2331_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop2331_next
    eq $P113, .CONTROL_LOOP_REDO, loop2331_redo
  loop2331_done:
    pop_eh 
.annotate 'line', 892
    find_lex $P111, "$match"
    unless_null $P111, vivify_1259
    new $P111, "Undef"
  vivify_1259:
    find_lex $P112, "NQPCapture"
    set $P113, $P2319
    unless_null $P113, vivify_1260
    new $P113, "Undef"
  vivify_1260:
    setattribute $P111, $P112, "@!array", $P113
.annotate 'line', 893
    find_lex $P111, "$match"
    unless_null $P111, vivify_1261
    new $P111, "Undef"
  vivify_1261:
    find_lex $P112, "NQPCapture"
    set $P113, $P2320
    unless_null $P113, vivify_1262
    new $P113, "Undef"
  vivify_1262:
    setattribute $P111, $P112, "%!hash", $P113
.annotate 'line', 869
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "Bool" :anon :subid("86_1340317675.197") :outer("446_1340317675.197")
    .param pmc param_2333
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 898
    .lex "self", param_2333
.annotate 'line', 899
    set $P103, param_2333
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    unless_null $P105, vivify_1264
    new $P105, "Undef"
  vivify_1264:
    getattribute $P106, $P104, $P105, "$!match"
    isnull $I100, $P106
    new $P107, 'Integer'
    set $P107, $I100
    isfalse $I101, $P107
    if $I101, if_2334
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2334_end
  if_2334:
.annotate 'line', 900
    set $P108, param_2333
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    unless_null $P110, vivify_1265
    new $P110, "Undef"
  vivify_1265:
    getattribute $P111, $P109, $P110, "$!match"
    istrue $I102, $P111
    new $P102, 'Integer'
    set $P102, $I102
  if_2334_end:
.annotate 'line', 898
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "parse" :anon :subid("87_1340317675.197") :outer("446_1340317675.197")
    .param pmc param_2336
    .param pmc param_2337
    .param pmc param_2338 :optional :named("rule")
    .param int has_param_2338 :opt_flag
    .param pmc param_2339 :optional :named("actions")
    .param int has_param_2339 :opt_flag
    .param pmc param_2340 :slurpy :named
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 903
    .lex "self", param_2336
    .lex "$target", param_2337
    if has_param_2338, optparam_1266
    new $P102, "String"
    assign $P102, "TOP"
    set param_2338, $P102
  optparam_1266:
    .lex "$rule", param_2338
    if has_param_2339, optparam_1267
    new $P103, "Undef"
    set param_2339, $P103
  optparam_1267:
    .lex "$actions", param_2339
    .lex "%options", param_2340
.annotate 'line', 904
    new $P104, "Undef"
    set $P2341, $P104
    .lex "$*ACTIONS", $P2341
.annotate 'line', 905
    new $P105, "Undef"
    set $P2342, $P105
    .lex "$cur", $P2342
.annotate 'line', 904
    set $P106, param_2339
    unless_null $P106, vivify_1268
    new $P106, "Undef"
  vivify_1268:
    set $P2341, $P106
.annotate 'line', 905
    set $P106, param_2336
    nqp_decontainerize $P107, $P106
    set $P108, param_2337
    unless_null $P108, vivify_1269
    new $P108, "Undef"
  vivify_1269:
    set $P2343, param_2340
    unless_null $P2343, vivify_1270
    $P2343 = root_new ['parrot';'Hash']
  vivify_1270:
    $P109 = $P107."!cursor_init"($P108, $P2343 :flat)
    set $P2342, $P109
.annotate 'line', 906
    set $P107, param_2338
    unless_null $P107, vivify_1271
    new $P107, "Undef"
  vivify_1271:
    is_invokable $I100, $P107
    if $I100, if_2344
.annotate 'line', 908
    set $P112, $P2342
    unless_null $P112, vivify_1272
    new $P112, "Undef"
  vivify_1272:
    set $P113, param_2338
    unless_null $P113, vivify_1273
    new $P113, "Undef"
  vivify_1273:
    set $S100, $P113
    find_method $P114, $P112, $S100
    set $P115, $P2342
    unless_null $P115, vivify_1274
    new $P115, "Undef"
  vivify_1274:
    $P116 = $P114($P115)
    $P117 = $P116."MATCH"()
    set $P106, $P117
.annotate 'line', 906
    goto if_2344_end
  if_2344:
.annotate 'line', 907
    set $P108, param_2338
    unless_null $P108, vivify_1275
    new $P108, "Undef"
  vivify_1275:
    set $P109, $P2342
    unless_null $P109, vivify_1276
    new $P109, "Undef"
  vivify_1276:
    $P110 = $P108($P109)
    $P111 = $P110."MATCH"()
    set $P106, $P111
  if_2344_end:
.annotate 'line', 903
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "!INTERPOLATE" :anon :subid("88_1340317675.197") :outer("446_1340317675.197")
    .param pmc param_2348
    .param pmc param_2349
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 911
    .const 'Sub' $P2379 = "453_1340317675.197" 
    capture_lex $P2379
    .const 'Sub' $P2352 = "448_1340317675.197" 
    capture_lex $P2352
    new $P2347, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2347, control_2346
    push_eh $P2347
    .lex "self", param_2348
    .lex "$var", param_2349
.annotate 'line', 912
    set $P103, param_2349
    unless_null $P103, vivify_1277
    new $P103, "Undef"
  vivify_1277:
    does $I100, $P103, "array"
    if $I100, if_2350
.annotate 'line', 936
    .const 'Sub' $P2379 = "453_1340317675.197" 
    capture_lex $P2379
    $P115 = $P2379()
    set $P102, $P115
.annotate 'line', 912
    goto if_2350_end
  if_2350:
    .const 'Sub' $P2352 = "448_1340317675.197" 
    capture_lex $P2352
    $P109 = $P2352()
    set $P102, $P109
  if_2350_end:
.annotate 'line', 911
    .return ($P102)
  control_2346:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P103, exception, "payload"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2378"  :anon :subid("453_1340317675.197") :outer("88_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 938
    new $P110, "Undef"
    set $P2380, $P110
    .lex "$cur", $P2380
.annotate 'line', 939
    new $P111, "Undef"
    set $P2381, $P111
    .lex "$pos", $P2381
.annotate 'line', 940
    new $P112, "Undef"
    set $P2382, $P112
    .lex "$tgt", $P2382
.annotate 'line', 941
    new $P113, "Undef"
    set $P2383, $P113
    .lex "$len", $P2383
.annotate 'line', 942
    new $P114, "Undef"
    set $P2384, $P114
    .lex "$adv", $P2384
.annotate 'line', 937
    find_lex $P115, "$var"
    unless_null $P115, vivify_1278
    new $P115, "Undef"
  vivify_1278:
    is_invokable $I101, $P115
    unless $I101, if_2385_end
    new $P116, "Exception"
    set $P116['type'], .CONTROL_RETURN
    find_lex $P117, "$var"
    unless_null $P117, vivify_1279
    new $P117, "Undef"
  vivify_1279:
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    $P120 = $P117($P119)
    setattribute $P116, 'payload', $P120
    throw $P116
  if_2385_end:
.annotate 'line', 938
    find_lex $P115, "self"
    nqp_decontainerize $P116, $P115
    $P117 = $P116."!cursor_start"()
    set $P2380, $P117
.annotate 'line', 939
    set $P115, $P2380
    unless_null $P115, vivify_1280
    new $P115, "Undef"
  vivify_1280:
    find_lex $P116, "$?CLASS"
    unless_null $P116, vivify_1281
    new $P116, "Undef"
  vivify_1281:
    repr_get_attr_int $I101, $P115, $P116, "$!from"
    new $P117, 'Integer'
    set $P117, $I101
    set $P2381, $P117
.annotate 'line', 940
    set $P115, $P2380
    unless_null $P115, vivify_1282
    new $P115, "Undef"
  vivify_1282:
    $P116 = $P115."target"()
    set $P2382, $P116
.annotate 'line', 941
    find_lex $P115, "$var"
    unless_null $P115, vivify_1283
    new $P115, "Undef"
  vivify_1283:
    set $S100, $P115
    length $I101, $S100
    new $P116, 'Integer'
    set $P116, $I101
    set $P2383, $P116
.annotate 'line', 942
    set $P115, $P2381
    unless_null $P115, vivify_1284
    new $P115, "Undef"
  vivify_1284:
    set $P116, $P2383
    unless_null $P116, vivify_1285
    new $P116, "Undef"
  vivify_1285:
    add $P117, $P115, $P116
    set $P2384, $P117
.annotate 'line', 943
    set $P116, $P2384
    unless_null $P116, vivify_1286
    new $P116, "Undef"
  vivify_1286:
    set $N100, $P116
    set $P117, $P2382
    unless_null $P117, vivify_1287
    new $P117, "Undef"
  vivify_1287:
    set $S100, $P117
    length $I101, $S100
    set $N101, $I101
    isgt $I102, $N100, $N101
    unless $I102, unless_2387
    new $P115, 'Integer'
    set $P115, $I102
    goto unless_2387_end
  unless_2387:
.annotate 'line', 944
    set $P118, $P2382
    unless_null $P118, vivify_1288
    new $P118, "Undef"
  vivify_1288:
    set $S101, $P118
    set $P119, $P2381
    unless_null $P119, vivify_1289
    new $P119, "Undef"
  vivify_1289:
    set $I103, $P119
    set $P120, $P2383
    unless_null $P120, vivify_1290
    new $P120, "Undef"
  vivify_1290:
    set $I104, $P120
    substr $S102, $S101, $I103, $I104
    find_lex $P121, "$var"
    unless_null $P121, vivify_1291
    new $P121, "Undef"
  vivify_1291:
    set $S103, $P121
    isne $I105, $S102, $S103
    new $P115, 'Integer'
    set $P115, $I105
  unless_2387_end:
    unless $P115, if_2386_end
.annotate 'line', 943
    new $P122, "Exception"
    set $P122['type'], .CONTROL_RETURN
    set $P123, $P2380
    unless_null $P123, vivify_1292
    new $P123, "Undef"
  vivify_1292:
    setattribute $P122, 'payload', $P123
    throw $P122
  if_2386_end:
.annotate 'line', 945
    set $P115, $P2380
    unless_null $P115, vivify_1293
    new $P115, "Undef"
  vivify_1293:
    set $P116, $P2384
    unless_null $P116, vivify_1294
    new $P116, "Undef"
  vivify_1294:
    $P115."!cursor_pass"($P116, "")
.annotate 'line', 946
    new $P115, "Exception"
    set $P115['type'], .CONTROL_RETURN
    set $P116, $P2380
    unless_null $P116, vivify_1295
    new $P116, "Undef"
  vivify_1295:
    setattribute $P115, 'payload', $P116
    throw $P115
.annotate 'line', 936
    .return ()
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2351"  :anon :subid("448_1340317675.197") :outer("88_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 912
    .const 'Sub' $P2359 = "449_1340317675.197" 
    capture_lex $P2359
.annotate 'line', 913
    new $P104, "Undef"
    set $P2353, $P104
    .lex "$maxlen", $P2353
.annotate 'line', 914
    new $P105, "Undef"
    set $P2354, $P105
    .lex "$cur", $P2354
.annotate 'line', 915
    new $P106, "Undef"
    set $P2355, $P106
    .lex "$pos", $P2355
.annotate 'line', 916
    new $P107, "Undef"
    set $P2356, $P107
    .lex "$tgt", $P2356
.annotate 'line', 917
    new $P108, "Undef"
    set $P2357, $P108
    .lex "$eos", $P2357
.annotate 'line', 913
    new $P109, "Float"
    assign $P109, -1
    set $P2353, $P109
.annotate 'line', 914
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    $P111 = $P110."!cursor_start"()
    set $P2354, $P111
.annotate 'line', 915
    set $P109, $P2354
    unless_null $P109, vivify_1296
    new $P109, "Undef"
  vivify_1296:
    find_lex $P110, "$?CLASS"
    unless_null $P110, vivify_1297
    new $P110, "Undef"
  vivify_1297:
    repr_get_attr_int $I101, $P109, $P110, "$!from"
    new $P111, 'Integer'
    set $P111, $I101
    set $P2355, $P111
.annotate 'line', 916
    set $P109, $P2354
    unless_null $P109, vivify_1298
    new $P109, "Undef"
  vivify_1298:
    $P110 = $P109."target"()
    set $P2356, $P110
.annotate 'line', 917
    set $P109, $P2356
    unless_null $P109, vivify_1299
    new $P109, "Undef"
  vivify_1299:
    set $S100, $P109
    length $I101, $S100
    new $P110, 'Integer'
    set $P110, $I101
    set $P2357, $P110
.annotate 'line', 918
    find_lex $P110, "$var"
    unless_null $P110, vivify_1300
    new $P110, "Undef"
  vivify_1300:
    defined $I101, $P110
    unless $I101, for_undef_1301
    iter $P109, $P110
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2376_handler
    push_eh $P113
  loop2376_test:
    unless $P109, loop2376_done
    shift $P111, $P109
  loop2376_redo:
    .const 'Sub' $P2359 = "449_1340317675.197" 
    capture_lex $P2359
    $P2359($P111)
  loop2376_next:
    goto loop2376_test
  loop2376_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop2376_next
    eq $P114, .CONTROL_LOOP_REDO, loop2376_redo
  loop2376_done:
    pop_eh 
  for_undef_1301:
.annotate 'line', 933
    set $P109, $P2353
    unless_null $P109, vivify_1323
    new $P109, "Undef"
  vivify_1323:
    set $N100, $P109
    set $N101, 0
    isge $I101, $N100, $N101
    unless $I101, if_2377_end
    set $P110, $P2354
    unless_null $P110, vivify_1324
    new $P110, "Undef"
  vivify_1324:
    set $P111, $P2355
    unless_null $P111, vivify_1325
    new $P111, "Undef"
  vivify_1325:
    set $P112, $P2353
    unless_null $P112, vivify_1326
    new $P112, "Undef"
  vivify_1326:
    add $P113, $P111, $P112
    $P110."!cursor_pass"($P113, "")
  if_2377_end:
.annotate 'line', 934
    new $P109, "Exception"
    set $P109['type'], .CONTROL_RETURN
    set $P110, $P2354
    unless_null $P110, vivify_1327
    new $P110, "Undef"
  vivify_1327:
    setattribute $P109, 'payload', $P110
    throw $P109
.annotate 'line', 912
    .return ()
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2358"  :anon :subid("449_1340317675.197") :outer("448_1340317675.197")
    .param pmc param_2360
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 918
    .const 'Sub' $P2371 = "452_1340317675.197" 
    capture_lex $P2371
    .const 'Sub' $P2363 = "450_1340317675.197" 
    capture_lex $P2363
    .lex "$_", param_2360
.annotate 'line', 919
    find_lex $P113, "$_"
    unless_null $P113, vivify_1302
    new $P113, "Undef"
  vivify_1302:
    is_invokable $I102, $P113
    if $I102, if_2361
.annotate 'line', 927
    .const 'Sub' $P2371 = "452_1340317675.197" 
    capture_lex $P2371
    $P119 = $P2371()
    set $P112, $P119
.annotate 'line', 919
    goto if_2361_end
  if_2361:
    .const 'Sub' $P2363 = "450_1340317675.197" 
    capture_lex $P2363
    $P116 = $P2363()
    set $P112, $P116
  if_2361_end:
.annotate 'line', 918
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2370"  :anon :subid("452_1340317675.197") :outer("449_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 928
    new $P117, "Undef"
    set $P2372, $P117
    .lex "$len", $P2372
    find_lex $P118, "$_"
    unless_null $P118, vivify_1303
    new $P118, "Undef"
  vivify_1303:
    set $S100, $P118
    length $I103, $S100
    new $P119, 'Integer'
    set $P119, $I103
    set $P2372, $P119
.annotate 'line', 929
    set $P121, $P2372
    unless_null $P121, vivify_1304
    new $P121, "Undef"
  vivify_1304:
    set $N100, $P121
    find_lex $P122, "$maxlen"
    unless_null $P122, vivify_1305
    new $P122, "Undef"
  vivify_1305:
    set $N101, $P122
    isgt $I103, $N100, $N101
    if $I103, if_2375
    new $P120, 'Integer'
    set $P120, $I103
    goto if_2375_end
  if_2375:
    find_lex $P123, "$pos"
    unless_null $P123, vivify_1306
    new $P123, "Undef"
  vivify_1306:
    set $P124, $P2372
    unless_null $P124, vivify_1307
    new $P124, "Undef"
  vivify_1307:
    add $P125, $P123, $P124
    set $N102, $P125
    find_lex $P126, "$eos"
    unless_null $P126, vivify_1308
    new $P126, "Undef"
  vivify_1308:
    set $N103, $P126
    isle $I104, $N102, $N103
    new $P120, 'Integer'
    set $P120, $I104
  if_2375_end:
    if $P120, if_2374
    set $P119, $P120
    goto if_2374_end
  if_2374:
.annotate 'line', 930
    find_lex $P127, "$tgt"
    unless_null $P127, vivify_1309
    new $P127, "Undef"
  vivify_1309:
    set $S100, $P127
    find_lex $P128, "$pos"
    unless_null $P128, vivify_1310
    new $P128, "Undef"
  vivify_1310:
    set $I105, $P128
    set $P129, $P2372
    unless_null $P129, vivify_1311
    new $P129, "Undef"
  vivify_1311:
    set $I106, $P129
    substr $S101, $S100, $I105, $I106
    find_lex $P130, "$_"
    unless_null $P130, vivify_1312
    new $P130, "Undef"
  vivify_1312:
    set $S102, $P130
    iseq $I107, $S101, $S102
    new $P119, 'Integer'
    set $P119, $I107
  if_2374_end:
    if $P119, if_2373
    set $P118, $P119
    goto if_2373_end
  if_2373:
.annotate 'line', 929
    set $P131, $P2372
    unless_null $P131, vivify_1313
    new $P131, "Undef"
  vivify_1313:
    store_lex "$maxlen", $P131
    set $P118, $P131
  if_2373_end:
.annotate 'line', 927
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2362"  :anon :subid("450_1340317675.197") :outer("449_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 919
    .const 'Sub' $P2367 = "451_1340317675.197" 
    capture_lex $P2367
.annotate 'line', 920
    new $P114, "Undef"
    set $P2364, $P114
    .lex "$res", $P2364
    find_lex $P115, "$_"
    unless_null $P115, vivify_1314
    new $P115, "Undef"
  vivify_1314:
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    $P118 = $P115($P117)
    set $P2364, $P118
.annotate 'line', 921
    set $P116, $P2364
    unless_null $P116, vivify_1315
    new $P116, "Undef"
  vivify_1315:
    if $P116, if_2365
    set $P115, $P116
    goto if_2365_end
  if_2365:
    .const 'Sub' $P2367 = "451_1340317675.197" 
    capture_lex $P2367
    $P119 = $P2367()
    set $P115, $P119
  if_2365_end:
.annotate 'line', 919
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2366"  :anon :subid("451_1340317675.197") :outer("450_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 922
    new $P117, "Undef"
    set $P2368, $P117
    .lex "$adv", $P2368
    find_lex $P118, "$res"
    unless_null $P118, vivify_1316
    new $P118, "Undef"
  vivify_1316:
    find_lex $P119, "$?CLASS"
    unless_null $P119, vivify_1317
    new $P119, "Undef"
  vivify_1317:
    repr_get_attr_int $I103, $P118, $P119, "$!pos"
    new $P120, 'Integer'
    set $P120, $I103
    set $P2368, $P120
.annotate 'line', 923
    set $P118, $P2368
    unless_null $P118, vivify_1318
    new $P118, "Undef"
  vivify_1318:
    find_lex $P119, "$pos"
    unless_null $P119, vivify_1319
    new $P119, "Undef"
  vivify_1319:
    sub $P120, $P118, $P119
    set $P2368, $P120
.annotate 'line', 924
    set $P119, $P2368
    unless_null $P119, vivify_1320
    new $P119, "Undef"
  vivify_1320:
    set $N100, $P119
    find_lex $P120, "$maxlen"
    unless_null $P120, vivify_1321
    new $P120, "Undef"
  vivify_1321:
    set $N101, $P120
    isgt $I103, $N100, $N101
    if $I103, if_2369
    new $P118, 'Integer'
    set $P118, $I103
    goto if_2369_end
  if_2369:
    set $P121, $P2368
    unless_null $P121, vivify_1322
    new $P121, "Undef"
  vivify_1322:
    store_lex "$maxlen", $P121
    set $P118, $P121
  if_2369_end:
.annotate 'line', 921
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "!INTERPOLATE_REGEX" :anon :subid("89_1340317675.197") :outer("446_1340317675.197")
    .param pmc param_2391
    .param pmc param_2392
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 950
    .const 'Sub' $P2395 = "454_1340317675.197" 
    capture_lex $P2395
    new $P2390, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2390, control_2389
    push_eh $P2390
    .lex "self", param_2391
    .lex "$var", param_2392
.annotate 'line', 951
    set $P102, param_2392
    unless_null $P102, vivify_1328
    new $P102, "Undef"
  vivify_1328:
    is_invokable $I100, $P102
    if $I100, unless_2393_end
    .const 'Sub' $P2395 = "454_1340317675.197" 
    capture_lex $P2395
    $P2395()
  unless_2393_end:
.annotate 'line', 966
    new $P102, "Exception"
    set $P102['type'], .CONTROL_RETURN
    set $P103, param_2391
    nqp_decontainerize $P104, $P103
    set $P105, param_2392
    unless_null $P105, vivify_1341
    new $P105, "Undef"
  vivify_1341:
    $P106 = $P104."!INTERPOLATE"($P105)
    setattribute $P102, 'payload', $P106
    throw $P102
.annotate 'line', 950
    .return ()
  control_2389:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P102, exception, "payload"
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2394"  :anon :subid("454_1340317675.197") :outer("89_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 951
    .const 'Sub' $P2399 = "455_1340317675.197" 
    capture_lex $P2399
.annotate 'line', 952
    new $P103, "Undef"
    set $P2396, $P103
    .lex "$rxcompiler", $P2396
    compreg $P104, "QRegex::P6Regex"
    set $P2396, $P104
.annotate 'line', 953
    find_lex $P105, "$var"
    unless_null $P105, vivify_1329
    new $P105, "Undef"
  vivify_1329:
    does $I101, $P105, "array"
    if $I101, if_2397
.annotate 'line', 963
    set $P109, $P2396
    unless_null $P109, vivify_1330
    new $P109, "Undef"
  vivify_1330:
    find_lex $P110, "$var"
    unless_null $P110, vivify_1331
    new $P110, "Undef"
  vivify_1331:
    $P111 = $P109."compile"($P110)
    store_lex "$var", $P111
.annotate 'line', 962
    set $P104, $P111
.annotate 'line', 953
    goto if_2397_end
  if_2397:
    .const 'Sub' $P2399 = "455_1340317675.197" 
    capture_lex $P2399
    $P108 = $P2399()
    set $P104, $P108
  if_2397_end:
.annotate 'line', 951
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2398"  :anon :subid("455_1340317675.197") :outer("454_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 953
    .const 'Sub' $P2402 = "456_1340317675.197" 
    capture_lex $P2402
.annotate 'line', 954
    new $P106, "Undef"
    set $P2400, $P106
    .lex "$res", $P2400
    new $P107, "ResizablePMCArray"
    set $P2400, $P107
.annotate 'line', 955
    find_lex $P108, "$var"
    unless_null $P108, vivify_1332
    new $P108, "Undef"
  vivify_1332:
    defined $I102, $P108
    unless $I102, for_undef_1333
    iter $P107, $P108
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop2406_handler
    push_eh $P112
  loop2406_test:
    unless $P107, loop2406_done
    shift $P109, $P107
  loop2406_redo:
    .const 'Sub' $P2402 = "456_1340317675.197" 
    capture_lex $P2402
    $P2402($P109)
  loop2406_next:
    goto loop2406_test
  loop2406_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop2406_next
    eq $P113, .CONTROL_LOOP_REDO, loop2406_redo
  loop2406_done:
    pop_eh 
  for_undef_1333:
.annotate 'line', 960
    set $P107, $P2400
    unless_null $P107, vivify_1340
    new $P107, "Undef"
  vivify_1340:
    store_lex "$var", $P107
.annotate 'line', 953
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2401"  :anon :subid("456_1340317675.197") :outer("455_1340317675.197")
    .param pmc param_2404
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 956
    new $P110, "Undef"
    set $P2403, $P110
    .lex "$elem", $P2403
    .lex "$_", param_2404
    find_lex $P111, "$_"
    unless_null $P111, vivify_1334
    new $P111, "Undef"
  vivify_1334:
    set $P2403, $P111
.annotate 'line', 957
    set $P111, $P2403
    unless_null $P111, vivify_1335
    new $P111, "Undef"
  vivify_1335:
    is_invokable $I103, $P111
    if $I103, unless_2405_end
    find_lex $P112, "$rxcompiler"
    unless_null $P112, vivify_1336
    new $P112, "Undef"
  vivify_1336:
    set $P113, $P2403
    unless_null $P113, vivify_1337
    new $P113, "Undef"
  vivify_1337:
    $P114 = $P112."compile"($P113)
    set $P2403, $P114
  unless_2405_end:
.annotate 'line', 958
    find_lex $P111, "$res"
    unless_null $P111, vivify_1338
    new $P111, "Undef"
  vivify_1338:
    set $P112, $P2403
    unless_null $P112, vivify_1339
    new $P112, "Undef"
  vivify_1339:
    push $P111, $P112
.annotate 'line', 955
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "_block2408"  :subid("457_1340317675.197") :outer("421_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 970
    .const 'Sub' $P2418 = "419_1340317675.197" 
    capture_lex $P2418
    .const 'Sub' $P2415 = "418_1340317675.197" 
    capture_lex $P2415
    .const 'Sub' $P2412 = "417_1340317675.197" 
    capture_lex $P2412
    .lex "$?PACKAGE", $P2410
    .lex "$?CLASS", $P2411
.annotate 'line', 978
    .const 'Sub' $P2418 = "419_1340317675.197" 
    newclosure $P2420, $P2418
.annotate 'line', 970
    .return ($P2420)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "new" :anon :subid("417_1340317675.197") :outer("457_1340317675.197")
    .param pmc param_2413
    .param pmc param_2414
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 972
    .lex "self", param_2413
    .lex "$code", param_2414
.annotate 'line', 973
    set $P100, param_2413
    nqp_decontainerize $P101, $P100
    set $P102, param_2414
    unless_null $P102, vivify_1342
    new $P102, "Undef"
  vivify_1342:
    $P103 = $P101."bless"($P102 :named("code"))
.annotate 'line', 972
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "ACCEPTS" :anon :subid("418_1340317675.197") :outer("457_1340317675.197")
    .param pmc param_2416
    .param pmc param_2417
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 975
    .lex "self", param_2416
    .lex "$target", param_2417
.annotate 'line', 976
    find_lex $P100, "NQPCursor"
    set $P101, param_2417
    unless_null $P101, vivify_1343
    new $P101, "Undef"
  vivify_1343:
    set $P102, param_2416
    nqp_decontainerize $P103, $P102
    $P104 = $P100."parse"($P101, $P103 :named("rule"))
.annotate 'line', 975
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "Str" :anon :subid("419_1340317675.197") :outer("457_1340317675.197")
    .param pmc param_2419
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 978
    .lex "self", param_2419
.annotate 'line', 979
    set $P100, param_2419
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107", 86
    repr_get_attr_obj $P103, $P101, $P102, "$!code", 0
    unless_null $P103, vivify_1344
    new $P103, "Undef"
  vivify_1344:
    set $S100, $P103
.annotate 'line', 978
    .return ($S100)
.end


.HLL "nqp"

.namespace ["NQPRegex"]
.sub "_block2421"  :subid("458_1340317675.197") :outer("421_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 983
    .const 'Sub' $P2425 = "420_1340317675.197" 
    capture_lex $P2425
    .lex "$?PACKAGE", $P2423
    .lex "$?CLASS", $P2424
.annotate 'line', 984
    .const 'Sub' $P2425 = "420_1340317675.197" 
    newclosure $P2428, $P2425
.annotate 'line', 983
    .return ($P2428)
.end


.HLL "nqp"

.namespace ["NQPRegex"]
.sub "ACCEPTS" :anon :subid("420_1340317675.197") :outer("458_1340317675.197")
    .param pmc param_2426
    .param pmc param_2427
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 984
    .lex "self", param_2426
    .lex "$target", param_2427
.annotate 'line', 985
    find_lex $P100, "NQPCursor"
    set $P101, param_2427
    unless_null $P101, vivify_1345
    new $P101, "Undef"
  vivify_1345:
    set $P102, param_2426
    nqp_decontainerize $P103, $P102
    $P104 = $P100."parse"($P101, $P103 :named("rule"), 0 :named("c"))
.annotate 'line', 984
    .return ($P104)
.end


.HLL "nqp"

.namespace []
.sub "_block2429"  :anon :subid("459_1340317675.197") :outer("421_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 989
    .const 'Sub' $P2435 = "460_1340317675.197" 
    capture_lex $P2435
    .lex "DEFAULT", $P2431
    .lex "$?PACKAGE", $P2432
    .lex "$?CLASS", $P2433
.annotate 'line', 990
    .const 'Sub' $P2435 = "460_1340317675.197" 
    capture_lex $P2435
    $P101 = $P2435()
.annotate 'line', 989
    .return ($P101)
.end


.HLL "nqp"

.namespace ["DEFAULT"]
.sub "_block2434"  :subid("460_1340317675.197") :outer("459_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 990
    .lex "$?PACKAGE", $P2436
    .lex "$?CLASS", $P2437
.annotate 'line', 991
    find_lex $P100, "NQPCursorRole"
    set $P101, $P2436
    unless_null $P101, vivify_1346
    new $P101, "Undef"
    set $P2436, $P101
  vivify_1346:
    get_who $P102, $P101
    set $P102["NQPCursorRole"], $P100
.annotate 'line', 990
    .return ($P100)
.end


.HLL "nqp"

.namespace []
.sub "_block2439" :load :anon :subid("461_1340317675.197")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 1
    .const '' $P2441 = "421_1340317675.197" 
    $P106 = $P2441()
    .return ($P106)
.end

