.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1000"  :anon :subid("181_1340317687.034")
    .param pmc param_1002 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 0
    .const 'Sub' $P2298 = "422_1340317687.034" 
    capture_lex $P2298
    .const 'Sub' $P2289 = "420_1340317687.034" 
    capture_lex $P2289
    .const 'Sub' $P1576 = "379_1340317687.034" 
    capture_lex $P1576
    .const 'Sub' $P1012 = "183_1340317687.034" 
    capture_lex $P1012
    .const 'Sub' $P1007 = "182_1340317687.034" 
    capture_lex $P1007
.annotate 'line', 1
    .lex "@ARGS", param_1002
    .lex "GLOBALish", $P1003
    .lex "$?PACKAGE", $P1004
.annotate 'line', 883
    new $P100, "Undef"
    set $P1005, $P100
    .lex "$p6regex", $P1005
.annotate 'line', 888
    .const 'Sub' $P1007 = "182_1340317687.034" 
    newclosure $P1010, $P1007
    set $P1006, $P1010
    .lex "MAIN", $P1006
.annotate 'line', 1
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 10
    .const 'Sub' $P1012 = "183_1340317687.034" 
    capture_lex $P1012
    $P1012()
.annotate 'line', 241
    .const 'Sub' $P1576 = "379_1340317687.034" 
    capture_lex $P1576
    $P1576()
.annotate 'line', 880
    .const 'Sub' $P2289 = "420_1340317687.034" 
    capture_lex $P2289
    $P2289()
.annotate 'line', 883
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P103, $P101, "QRegex"
    nqp_get_package_through_who $P104, $P103, "P6Regex"
    get_who $P105, $P104
    set $P106, $P105["Compiler"]
    $P107 = $P106."new"()
    set $P1005, $P107
.annotate 'line', 884
    set $P101, $P1005
    unless_null $P101, vivify_1174
    new $P101, "Undef"
  vivify_1174:
    $P101."language"("QRegex::P6Regex")
.annotate 'line', 885
    set $P101, $P1005
    unless_null $P101, vivify_1175
    new $P101, "Undef"
  vivify_1175:
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "QRegex"
    nqp_get_package_through_who $P105, $P104, "P6Regex"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P101."parsegrammar"($P107)
.annotate 'line', 886
    set $P101, $P1005
    unless_null $P101, vivify_1176
    new $P101, "Undef"
  vivify_1176:
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "QRegex"
    nqp_get_package_through_who $P105, $P104, "P6Regex"
    get_who $P106, $P105
    set $P107, $P106["Actions"]
    $P101."parseactions"($P107)
.annotate 'line', 1
    set $P101, $P1006
    set $P103, param_1002
    if $P103, if_2292
    set $P101, $P103
    goto if_2292_end
  if_2292:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P104, "ModuleLoader"
    getinterp $P105
    set $P106, $P105["context"]
    $P104."set_mainline_module"($P106)
    .const '' $P2293 = "182_1340317687.034" 
    set $P107, param_1002
    $P108 = $P2293($P107 :flat)
    set $P101, $P108
  if_2292_end:
    .return ($P101)
    .const 'Sub' $P2295 = "421_1340317687.034" 
    .return ($P2295)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post423") :outer("181_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 0
    .const 'Sub' $P1001 = "181_1340317687.034" 
    .local pmc block
    set block, $P1001
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P110
    get_class $P111, "LexPad"
    get_class $P112, "NQPLexPad"
    $P110."hll_map"($P111, $P112)
    nqp_create_sc $P113, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956"
    .local pmc cur_sc
    set cur_sc, $P113
    cur_sc."set_description"("src\\stage2\\gen\\NQPP6QRegex.pm")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P114, "ModuleLoader"
    $P115 = $P114."load_setting"("NQPCORE")
    block."set_outer_ctx"($P115)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P114, "ModuleLoader"
    $P114."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P114, "ModuleLoader"
    $P114."load_module"("NQPHLL")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P114, "ModuleLoader"
    $P114."load_module"("QAST")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P114, "ModuleLoader"
    $P114."load_module"("PASTRegex")
    set $S100, ""
    new $P114, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P114
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107"
    push string_heap, "src\\stage2\\QRegex.nqp"
    push string_heap, "NQPMatch"
    push string_heap, "NQPCursor"
    push string_heap, "NQPRegexMethod"
    push string_heap, "NQPRegex"
    push string_heap, "HLL"
    push string_heap, "QAST"
    push string_heap, "PAST"
    push string_heap, "__PAST_CORE_SC__"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "24B4A3E094679322365C61BEF17761CEF7D3E30E-1340317674.193"
    push string_heap, "src\\stage2\\NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!alt"
    push string_heap, "!alt_nfa"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547"
    push string_heap, "src\\stage2\\gen\\NQPHLL.pm"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "obs"
    push string_heap, "normspace"
    push string_heap, "identifier"
    push string_heap, "arg"
    push string_heap, "arglist"
    push string_heap, "TOP"
    push string_heap, "nibbler"
    push string_heap, "termaltseq"
    push string_heap, "termconjseq"
    push string_heap, "termalt"
    push string_heap, "termconj"
    push string_heap, "quantified_atom"
    push string_heap, "separator"
    push string_heap, "atom"
    push string_heap, "quantifier"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "quantifier:sym<{N,M}>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "backmod"
    push string_heap, "metachar"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "metachar:sym<:::>"
    push string_heap, "metachar:sym<::>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "metachar:sym<mod>"
    push string_heap, "metachar:sym<quantifier>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "metachar:sym<{*}>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "metachar:sym<PIR>"
    push string_heap, "backslash"
    push string_heap, "backslash:sym<s>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "backslash:sym<A>"
    push string_heap, "backslash:sym<z>"
    push string_heap, "backslash:sym<Z>"
    push string_heap, "backslash:sym<Q>"
    push string_heap, "backslash:sym<unrec>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "assertion"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<|>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "mod_ident"
    push string_heap, "mod_ident:sym<ignorecase>"
    push string_heap, "mod_ident:sym<ratchet>"
    push string_heap, "mod_ident:sym<sigspace>"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "TOP"
    push string_heap, "nibbler"
    push string_heap, "termaltseq"
    push string_heap, "termconjseq"
    push string_heap, "termalt"
    push string_heap, "termconj"
    push string_heap, "quantified_atom"
    push string_heap, "separator"
    push string_heap, "atom"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "backslash:sym<s>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<|>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "arg"
    push string_heap, "arglist"
    push string_heap, "cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "subrule_alias"
    push string_heap, "flip_ast"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "user-progname"
    push string_heap, "cli-options"
    push string_heap, "cli-arguments"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "$!user_progname"
    push string_heap, "@!cli-arguments"
    push string_heap, "%!cli-options"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "AEE56C4185E3F1A9434A478736F71908013C2160-1340317670.905"
    push string_heap, "src\\stage2\\gen\\nqp-mo.pm"
    push string_heap, "QRegex::P6Regex::Grammar"
    push string_heap, "obs"
    push string_heap, "ws"
    push string_heap, "normspace"
    push string_heap, "identifier"
    push string_heap, "arg"
    push string_heap, "arglist"
    push string_heap, "TOP"
    push string_heap, "nibbler"
    push string_heap, "termaltseq"
    push string_heap, "termconjseq"
    push string_heap, "termalt"
    push string_heap, "termconj"
    push string_heap, "termish"
    push string_heap, "quantified_atom"
    push string_heap, "separator"
    push string_heap, "atom"
    push string_heap, "quantifier"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "quantifier:sym<{N,M}>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "backmod"
    push string_heap, "metachar"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "metachar:sym<:::>"
    push string_heap, "metachar:sym<::>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "metachar:sym<mod>"
    push string_heap, "metachar:sym<quantifier>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "metachar:sym<{*}>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "metachar:sym<PIR>"
    push string_heap, "backslash"
    push string_heap, "backslash:sym<s>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "backslash:sym<A>"
    push string_heap, "backslash:sym<z>"
    push string_heap, "backslash:sym<Z>"
    push string_heap, "backslash:sym<Q>"
    push string_heap, "backslash:sym<unrec>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "assertion"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<|>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "mod_ident"
    push string_heap, "mod_ident:sym<ignorecase>"
    push string_heap, "mod_ident:sym<ratchet>"
    push string_heap, "mod_ident:sym<sigspace>"
    push string_heap, "QRegex::P6Regex::Actions"
    push string_heap, "TOP"
    push string_heap, "nibbler"
    push string_heap, "termaltseq"
    push string_heap, "termconjseq"
    push string_heap, "termalt"
    push string_heap, "termconj"
    push string_heap, "termish"
    push string_heap, "quantified_atom"
    push string_heap, "separator"
    push string_heap, "atom"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "backslash:sym<s>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<|>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "arg"
    push string_heap, "arglist"
    push string_heap, "cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "subrule_alias"
    push string_heap, "flip_ast"
    push string_heap, "QRegex::P6Regex::Compiler"
    push string_heap, "P6opaque"
    push string_heap, "NFA"
    push string_heap, "P6Regex"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "CommandLine"
    push string_heap, "World"
    push string_heap, "P6opaque"
    push string_heap, "Node"
    push string_heap, "ACE2E91864B45FF3CBDC7EABFB552F3CD7C9069E-1340317684.14"
    push string_heap, "src\\stage2\\QAST.nqp"
    push string_heap, "Regex"
    push string_heap, "Compiler"
    push string_heap, "QRegex"
    push string_heap, "HLL"
    push string_heap, "QAST"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "P6Regex"
    .const 'Sub' $P2298 = "422_1340317687.034" 
    capture_lex $P2298
    $P116 = $P2298()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P116
    .const 'LexInfo' $P2430 = "181_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 0
    $P2430."set_static_lexpad_value"("GLOBALish", $P117)
    .const 'LexInfo' $P2431 = "181_1340317687.034" 
    $P2431."finish_static_lexpad"()
    .const 'LexInfo' $P2432 = "181_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 0
    $P2432."set_static_lexpad_value"("$?PACKAGE", $P117)
    .const 'LexInfo' $P2433 = "181_1340317687.034" 
    $P2433."finish_static_lexpad"()
    .const '' $P2434 = "10_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 2
    set_sub_code_object $P2434, $P117
    .const '' $P2435 = "11_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 3
    set_sub_code_object $P2435, $P117
    .const '' $P2436 = "15_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 4
    set_sub_code_object $P2436, $P117
    .const '' $P2437 = "16_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 5
    set_sub_code_object $P2437, $P117
    .const '' $P2438 = "17_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 6
    set_sub_code_object $P2438, $P117
    .const '' $P2439 = "19_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 7
    set_sub_code_object $P2439, $P117
    .const '' $P2440 = "20_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 8
    set_sub_code_object $P2440, $P117
    .const '' $P2441 = "21_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 9
    set_sub_code_object $P2441, $P117
    .const '' $P2442 = "23_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 10
    set_sub_code_object $P2442, $P117
    .const '' $P2443 = "24_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 11
    set_sub_code_object $P2443, $P117
    .const '' $P2444 = "25_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 12
    set_sub_code_object $P2444, $P117
    .const '' $P2445 = "26_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 13
    set_sub_code_object $P2445, $P117
    .const '' $P2446 = "28_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 14
    set_sub_code_object $P2446, $P117
    .const '' $P2447 = "30_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 15
    set_sub_code_object $P2447, $P117
    .const '' $P2448 = "32_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 16
    set_sub_code_object $P2448, $P117
    .const '' $P2449 = "34_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 17
    set_sub_code_object $P2449, $P117
    .const '' $P2450 = "36_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 18
    set_sub_code_object $P2450, $P117
    .const '' $P2451 = "37_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 19
    set_sub_code_object $P2451, $P117
    .const '' $P2452 = "38_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 20
    set_sub_code_object $P2452, $P117
    .const '' $P2453 = "39_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 21
    set_sub_code_object $P2453, $P117
    .const '' $P2454 = "43_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 22
    set_sub_code_object $P2454, $P117
    .const '' $P2455 = "44_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 23
    set_sub_code_object $P2455, $P117
    .const '' $P2456 = "46_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 24
    set_sub_code_object $P2456, $P117
    .const '' $P2457 = "48_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 25
    set_sub_code_object $P2457, $P117
    .const '' $P2458 = "49_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 26
    set_sub_code_object $P2458, $P117
    .const '' $P2459 = "50_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 27
    set_sub_code_object $P2459, $P117
    .const '' $P2460 = "51_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 28
    set_sub_code_object $P2460, $P117
    .const '' $P2461 = "52_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 29
    set_sub_code_object $P2461, $P117
    .const '' $P2462 = "53_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 30
    set_sub_code_object $P2462, $P117
    .const '' $P2463 = "54_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 31
    set_sub_code_object $P2463, $P117
    .const '' $P2464 = "55_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 32
    set_sub_code_object $P2464, $P117
    .const '' $P2465 = "56_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 33
    set_sub_code_object $P2465, $P117
    .const '' $P2466 = "57_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 34
    set_sub_code_object $P2466, $P117
    .const '' $P2467 = "58_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 35
    set_sub_code_object $P2467, $P117
    .const '' $P2468 = "59_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 36
    set_sub_code_object $P2468, $P117
    .const '' $P2469 = "60_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 37
    set_sub_code_object $P2469, $P117
    .const '' $P2470 = "61_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 38
    set_sub_code_object $P2470, $P117
    .const '' $P2471 = "63_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 39
    set_sub_code_object $P2471, $P117
    .const '' $P2472 = "65_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 40
    set_sub_code_object $P2472, $P117
    .const '' $P2473 = "66_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 41
    set_sub_code_object $P2473, $P117
    .const '' $P2474 = "67_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 42
    set_sub_code_object $P2474, $P117
    .const '' $P2475 = "68_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 43
    set_sub_code_object $P2475, $P117
    .const '' $P2476 = "69_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 44
    set_sub_code_object $P2476, $P117
    .const '' $P2477 = "70_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 45
    set_sub_code_object $P2477, $P117
    .const '' $P2478 = "71_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 46
    set_sub_code_object $P2478, $P117
    .const '' $P2479 = "73_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 47
    set_sub_code_object $P2479, $P117
    .const '' $P2480 = "74_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 48
    set_sub_code_object $P2480, $P117
    .const '' $P2481 = "75_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 49
    set_sub_code_object $P2481, $P117
    .const '' $P2482 = "76_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 50
    set_sub_code_object $P2482, $P117
    .const '' $P2483 = "77_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 51
    set_sub_code_object $P2483, $P117
    .const '' $P2484 = "78_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 52
    set_sub_code_object $P2484, $P117
    .const '' $P2485 = "79_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 53
    set_sub_code_object $P2485, $P117
    .const '' $P2486 = "80_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 54
    set_sub_code_object $P2486, $P117
    .const '' $P2487 = "81_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 55
    set_sub_code_object $P2487, $P117
    .const '' $P2488 = "82_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 56
    set_sub_code_object $P2488, $P117
    .const '' $P2489 = "83_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 57
    set_sub_code_object $P2489, $P117
    .const '' $P2490 = "85_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 58
    set_sub_code_object $P2490, $P117
    .const '' $P2491 = "87_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 59
    set_sub_code_object $P2491, $P117
    .const '' $P2492 = "88_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 60
    set_sub_code_object $P2492, $P117
    .const '' $P2493 = "89_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 61
    set_sub_code_object $P2493, $P117
    .const '' $P2494 = "90_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 62
    set_sub_code_object $P2494, $P117
    .const '' $P2495 = "91_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 63
    set_sub_code_object $P2495, $P117
    .const '' $P2496 = "92_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 64
    set_sub_code_object $P2496, $P117
    .const '' $P2497 = "93_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 65
    set_sub_code_object $P2497, $P117
    .const '' $P2498 = "94_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 66
    set_sub_code_object $P2498, $P117
    .const '' $P2499 = "96_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 67
    set_sub_code_object $P2499, $P117
    .const '' $P2500 = "99_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 68
    set_sub_code_object $P2500, $P117
    .const '' $P2501 = "101_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 69
    set_sub_code_object $P2501, $P117
    .const '' $P2502 = "102_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 70
    set_sub_code_object $P2502, $P117
    .const '' $P2503 = "104_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 71
    set_sub_code_object $P2503, $P117
    .const '' $P2504 = "108_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 72
    set_sub_code_object $P2504, $P117
    .const '' $P2505 = "115_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 73
    set_sub_code_object $P2505, $P117
    .const '' $P2506 = "121_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 74
    set_sub_code_object $P2506, $P117
    .const '' $P2507 = "123_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 75
    set_sub_code_object $P2507, $P117
    .const '' $P2508 = "124_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 76
    set_sub_code_object $P2508, $P117
    .const '' $P2509 = "125_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 77
    set_sub_code_object $P2509, $P117
    .const '' $P2510 = "126_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 78
    set_sub_code_object $P2510, $P117
    .const 'LexInfo' $P2511 = "183_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 1
    $P2511."set_static_lexpad_value"("$?PACKAGE", $P117)
    .const 'LexInfo' $P2512 = "183_1340317687.034" 
    $P2512."finish_static_lexpad"()
    .const 'LexInfo' $P2513 = "183_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 1
    $P2513."set_static_lexpad_value"("$?CLASS", $P117)
    .const 'LexInfo' $P2514 = "183_1340317687.034" 
    $P2514."finish_static_lexpad"()
    .const '' $P2515 = "127_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 80
    set_sub_code_object $P2515, $P117
    .const '' $P2516 = "128_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 81
    set_sub_code_object $P2516, $P117
    .const '' $P2517 = "129_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 82
    set_sub_code_object $P2517, $P117
    .const '' $P2518 = "130_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 83
    set_sub_code_object $P2518, $P117
    .const '' $P2519 = "131_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 84
    set_sub_code_object $P2519, $P117
    .const '' $P2520 = "132_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 85
    set_sub_code_object $P2520, $P117
    .const '' $P2521 = "133_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 86
    set_sub_code_object $P2521, $P117
    .const '' $P2522 = "134_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 87
    set_sub_code_object $P2522, $P117
    .const '' $P2523 = "135_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 88
    set_sub_code_object $P2523, $P117
    .const '' $P2524 = "136_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 89
    set_sub_code_object $P2524, $P117
    .const '' $P2525 = "137_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 90
    set_sub_code_object $P2525, $P117
    .const '' $P2526 = "138_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 91
    set_sub_code_object $P2526, $P117
    .const '' $P2527 = "139_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 92
    set_sub_code_object $P2527, $P117
    .const '' $P2528 = "140_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 93
    set_sub_code_object $P2528, $P117
    .const '' $P2529 = "141_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 94
    set_sub_code_object $P2529, $P117
    .const '' $P2530 = "142_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 95
    set_sub_code_object $P2530, $P117
    .const '' $P2531 = "143_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 96
    set_sub_code_object $P2531, $P117
    .const '' $P2532 = "144_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 97
    set_sub_code_object $P2532, $P117
    .const '' $P2533 = "145_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 98
    set_sub_code_object $P2533, $P117
    .const '' $P2534 = "146_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 99
    set_sub_code_object $P2534, $P117
    .const '' $P2535 = "147_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 100
    set_sub_code_object $P2535, $P117
    .const '' $P2536 = "148_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 101
    set_sub_code_object $P2536, $P117
    .const '' $P2537 = "149_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 102
    set_sub_code_object $P2537, $P117
    .const '' $P2538 = "150_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 103
    set_sub_code_object $P2538, $P117
    .const '' $P2539 = "151_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 104
    set_sub_code_object $P2539, $P117
    .const '' $P2540 = "152_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 105
    set_sub_code_object $P2540, $P117
    .const '' $P2541 = "153_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 106
    set_sub_code_object $P2541, $P117
    .const '' $P2542 = "154_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 107
    set_sub_code_object $P2542, $P117
    .const '' $P2543 = "155_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 108
    set_sub_code_object $P2543, $P117
    .const '' $P2544 = "156_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 109
    set_sub_code_object $P2544, $P117
    .const '' $P2545 = "157_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 110
    set_sub_code_object $P2545, $P117
    .const '' $P2546 = "158_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 111
    set_sub_code_object $P2546, $P117
    .const '' $P2547 = "159_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 112
    set_sub_code_object $P2547, $P117
    .const '' $P2548 = "160_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 113
    set_sub_code_object $P2548, $P117
    .const '' $P2549 = "161_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 114
    set_sub_code_object $P2549, $P117
    .const '' $P2550 = "162_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 115
    set_sub_code_object $P2550, $P117
    .const '' $P2551 = "163_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 116
    set_sub_code_object $P2551, $P117
    .const '' $P2552 = "164_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 117
    set_sub_code_object $P2552, $P117
    .const '' $P2553 = "165_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 118
    set_sub_code_object $P2553, $P117
    .const '' $P2554 = "166_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 119
    set_sub_code_object $P2554, $P117
    .const '' $P2555 = "167_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 120
    set_sub_code_object $P2555, $P117
    .const '' $P2556 = "168_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 121
    set_sub_code_object $P2556, $P117
    .const '' $P2557 = "169_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 122
    set_sub_code_object $P2557, $P117
    .const '' $P2558 = "170_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 123
    set_sub_code_object $P2558, $P117
    .const '' $P2559 = "171_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 124
    set_sub_code_object $P2559, $P117
    .const '' $P2560 = "172_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 125
    set_sub_code_object $P2560, $P117
    .const '' $P2561 = "173_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 126
    set_sub_code_object $P2561, $P117
    .const '' $P2562 = "174_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 127
    set_sub_code_object $P2562, $P117
    .const '' $P2563 = "175_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 128
    set_sub_code_object $P2563, $P117
    .const '' $P2564 = "176_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 129
    set_sub_code_object $P2564, $P117
    .const '' $P2565 = "177_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 130
    set_sub_code_object $P2565, $P117
    .const '' $P2566 = "178_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 131
    set_sub_code_object $P2566, $P117
    .const '' $P2567 = "381_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 79
    get_who $P118, $P117
    set $P118["buildsub"], $P2567
    .const '' $P2568 = "179_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 132
    set_sub_code_object $P2568, $P117
    .const '' $P2569 = "180_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 133
    set_sub_code_object $P2569, $P117
    .const 'LexInfo' $P2570 = "379_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 79
    $P2570."set_static_lexpad_value"("$?PACKAGE", $P117)
    .const 'LexInfo' $P2571 = "379_1340317687.034" 
    $P2571."finish_static_lexpad"()
    .const 'LexInfo' $P2572 = "379_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 79
    $P2572."set_static_lexpad_value"("$?CLASS", $P117)
    .const 'LexInfo' $P2573 = "379_1340317687.034" 
    $P2573."finish_static_lexpad"()
    .const 'LexInfo' $P2574 = "420_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 134
    $P2574."set_static_lexpad_value"("$?PACKAGE", $P117)
    .const 'LexInfo' $P2575 = "420_1340317687.034" 
    $P2575."finish_static_lexpad"()
    .const 'LexInfo' $P2576 = "420_1340317687.034" 
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 134
    $P2576."set_static_lexpad_value"("$?CLASS", $P117)
    .const 'LexInfo' $P2577 = "420_1340317687.034" 
    $P2577."finish_static_lexpad"()
    nqp_get_sc_object $P117, "65CD0973E073B409340EAE2207D8A9C84DCBAFF8-1340317686.956", 0
    set_hll_global "GLOBAL", $P117
.end


.HLL "nqp"

.namespace []
.sub "_block2297"  :anon :subid("422_1340317687.034") :outer("181_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 0
    .const 'Sub' $P2299 = "10_1340317687.034" 
    .const 'Sub' $P2300 = "11_1340317687.034" 
    .const 'Sub' $P2301 = "15_1340317687.034" 
    .const 'Sub' $P2302 = "16_1340317687.034" 
    .const 'Sub' $P2303 = "17_1340317687.034" 
    .const 'Sub' $P2304 = "19_1340317687.034" 
    .const 'Sub' $P2305 = "20_1340317687.034" 
    .const 'Sub' $P2306 = "21_1340317687.034" 
    .const 'Sub' $P2307 = "23_1340317687.034" 
    .const 'Sub' $P2308 = "24_1340317687.034" 
    .const 'Sub' $P2309 = "25_1340317687.034" 
    .const 'Sub' $P2310 = "26_1340317687.034" 
    .const 'Sub' $P2311 = "28_1340317687.034" 
    .const 'Sub' $P2312 = "30_1340317687.034" 
    .const 'Sub' $P2313 = "32_1340317687.034" 
    .const 'Sub' $P2314 = "34_1340317687.034" 
    .const 'Sub' $P2315 = "36_1340317687.034" 
    .const 'Sub' $P2316 = "37_1340317687.034" 
    .const 'Sub' $P2317 = "38_1340317687.034" 
    .const 'Sub' $P2318 = "39_1340317687.034" 
    .const 'Sub' $P2319 = "43_1340317687.034" 
    .const 'Sub' $P2320 = "44_1340317687.034" 
    .const 'Sub' $P2321 = "46_1340317687.034" 
    .const 'Sub' $P2322 = "48_1340317687.034" 
    .const 'Sub' $P2323 = "49_1340317687.034" 
    .const 'Sub' $P2324 = "50_1340317687.034" 
    .const 'Sub' $P2325 = "51_1340317687.034" 
    .const 'Sub' $P2326 = "52_1340317687.034" 
    .const 'Sub' $P2327 = "53_1340317687.034" 
    .const 'Sub' $P2328 = "54_1340317687.034" 
    .const 'Sub' $P2329 = "55_1340317687.034" 
    .const 'Sub' $P2330 = "56_1340317687.034" 
    .const 'Sub' $P2331 = "57_1340317687.034" 
    .const 'Sub' $P2332 = "58_1340317687.034" 
    .const 'Sub' $P2333 = "59_1340317687.034" 
    .const 'Sub' $P2334 = "60_1340317687.034" 
    .const 'Sub' $P2335 = "61_1340317687.034" 
    .const 'Sub' $P2336 = "63_1340317687.034" 
    .const 'Sub' $P2337 = "65_1340317687.034" 
    .const 'Sub' $P2338 = "66_1340317687.034" 
    .const 'Sub' $P2339 = "67_1340317687.034" 
    .const 'Sub' $P2340 = "68_1340317687.034" 
    .const 'Sub' $P2341 = "69_1340317687.034" 
    .const 'Sub' $P2342 = "70_1340317687.034" 
    .const 'Sub' $P2343 = "71_1340317687.034" 
    .const 'Sub' $P2344 = "73_1340317687.034" 
    .const 'Sub' $P2345 = "74_1340317687.034" 
    .const 'Sub' $P2346 = "75_1340317687.034" 
    .const 'Sub' $P2347 = "76_1340317687.034" 
    .const 'Sub' $P2348 = "77_1340317687.034" 
    .const 'Sub' $P2349 = "78_1340317687.034" 
    .const 'Sub' $P2350 = "79_1340317687.034" 
    .const 'Sub' $P2351 = "80_1340317687.034" 
    .const 'Sub' $P2352 = "81_1340317687.034" 
    .const 'Sub' $P2353 = "82_1340317687.034" 
    .const 'Sub' $P2354 = "83_1340317687.034" 
    .const 'Sub' $P2355 = "85_1340317687.034" 
    .const 'Sub' $P2356 = "87_1340317687.034" 
    .const 'Sub' $P2357 = "88_1340317687.034" 
    .const 'Sub' $P2358 = "89_1340317687.034" 
    .const 'Sub' $P2359 = "90_1340317687.034" 
    .const 'Sub' $P2360 = "91_1340317687.034" 
    .const 'Sub' $P2361 = "92_1340317687.034" 
    .const 'Sub' $P2362 = "93_1340317687.034" 
    .const 'Sub' $P2363 = "94_1340317687.034" 
    .const 'Sub' $P2364 = "96_1340317687.034" 
    .const 'Sub' $P2365 = "99_1340317687.034" 
    .const 'Sub' $P2366 = "101_1340317687.034" 
    .const 'Sub' $P2367 = "102_1340317687.034" 
    .const 'Sub' $P2368 = "104_1340317687.034" 
    .const 'Sub' $P2369 = "108_1340317687.034" 
    .const 'Sub' $P2370 = "115_1340317687.034" 
    .const 'Sub' $P2371 = "121_1340317687.034" 
    .const 'Sub' $P2372 = "123_1340317687.034" 
    .const 'Sub' $P2373 = "124_1340317687.034" 
    .const 'Sub' $P2374 = "125_1340317687.034" 
    .const 'Sub' $P2375 = "126_1340317687.034" 
    .const 'Sub' $P2376 = "127_1340317687.034" 
    .const 'Sub' $P2377 = "128_1340317687.034" 
    .const 'Sub' $P2378 = "129_1340317687.034" 
    .const 'Sub' $P2379 = "130_1340317687.034" 
    .const 'Sub' $P2380 = "131_1340317687.034" 
    .const 'Sub' $P2381 = "132_1340317687.034" 
    .const 'Sub' $P2382 = "133_1340317687.034" 
    .const 'Sub' $P2383 = "134_1340317687.034" 
    .const 'Sub' $P2384 = "135_1340317687.034" 
    .const 'Sub' $P2385 = "136_1340317687.034" 
    .const 'Sub' $P2386 = "137_1340317687.034" 
    .const 'Sub' $P2387 = "138_1340317687.034" 
    .const 'Sub' $P2388 = "139_1340317687.034" 
    .const 'Sub' $P2389 = "140_1340317687.034" 
    .const 'Sub' $P2390 = "141_1340317687.034" 
    .const 'Sub' $P2391 = "142_1340317687.034" 
    .const 'Sub' $P2392 = "143_1340317687.034" 
    .const 'Sub' $P2393 = "144_1340317687.034" 
    .const 'Sub' $P2394 = "145_1340317687.034" 
    .const 'Sub' $P2395 = "146_1340317687.034" 
    .const 'Sub' $P2396 = "147_1340317687.034" 
    .const 'Sub' $P2397 = "148_1340317687.034" 
    .const 'Sub' $P2398 = "149_1340317687.034" 
    .const 'Sub' $P2399 = "150_1340317687.034" 
    .const 'Sub' $P2400 = "151_1340317687.034" 
    .const 'Sub' $P2401 = "152_1340317687.034" 
    .const 'Sub' $P2402 = "153_1340317687.034" 
    .const 'Sub' $P2403 = "154_1340317687.034" 
    .const 'Sub' $P2404 = "155_1340317687.034" 
    .const 'Sub' $P2405 = "156_1340317687.034" 
    .const 'Sub' $P2406 = "157_1340317687.034" 
    .const 'Sub' $P2407 = "158_1340317687.034" 
    .const 'Sub' $P2408 = "159_1340317687.034" 
    .const 'Sub' $P2409 = "160_1340317687.034" 
    .const 'Sub' $P2410 = "161_1340317687.034" 
    .const 'Sub' $P2411 = "162_1340317687.034" 
    .const 'Sub' $P2412 = "163_1340317687.034" 
    .const 'Sub' $P2413 = "164_1340317687.034" 
    .const 'Sub' $P2414 = "165_1340317687.034" 
    .const 'Sub' $P2415 = "166_1340317687.034" 
    .const 'Sub' $P2416 = "167_1340317687.034" 
    .const 'Sub' $P2417 = "168_1340317687.034" 
    .const 'Sub' $P2418 = "169_1340317687.034" 
    .const 'Sub' $P2419 = "170_1340317687.034" 
    .const 'Sub' $P2420 = "171_1340317687.034" 
    .const 'Sub' $P2421 = "172_1340317687.034" 
    .const 'Sub' $P2422 = "173_1340317687.034" 
    .const 'Sub' $P2423 = "174_1340317687.034" 
    .const 'Sub' $P2424 = "175_1340317687.034" 
    .const 'Sub' $P2425 = "176_1340317687.034" 
    .const 'Sub' $P2426 = "177_1340317687.034" 
    .const 'Sub' $P2427 = "178_1340317687.034" 
    .const 'Sub' $P2428 = "179_1340317687.034" 
    .const 'Sub' $P2429 = "180_1340317687.034" 
    new $P115, "ResizablePMCArray"
    push $P115, $P2299
    push $P115, $P2300
    push $P115, $P2301
    push $P115, $P2302
    push $P115, $P2303
    push $P115, $P2304
    push $P115, $P2305
    push $P115, $P2306
    push $P115, $P2307
    push $P115, $P2308
    push $P115, $P2309
    push $P115, $P2310
    push $P115, $P2311
    push $P115, $P2312
    push $P115, $P2313
    push $P115, $P2314
    push $P115, $P2315
    push $P115, $P2316
    push $P115, $P2317
    push $P115, $P2318
    push $P115, $P2319
    push $P115, $P2320
    push $P115, $P2321
    push $P115, $P2322
    push $P115, $P2323
    push $P115, $P2324
    push $P115, $P2325
    push $P115, $P2326
    push $P115, $P2327
    push $P115, $P2328
    push $P115, $P2329
    push $P115, $P2330
    push $P115, $P2331
    push $P115, $P2332
    push $P115, $P2333
    push $P115, $P2334
    push $P115, $P2335
    push $P115, $P2336
    push $P115, $P2337
    push $P115, $P2338
    push $P115, $P2339
    push $P115, $P2340
    push $P115, $P2341
    push $P115, $P2342
    push $P115, $P2343
    push $P115, $P2344
    push $P115, $P2345
    push $P115, $P2346
    push $P115, $P2347
    push $P115, $P2348
    push $P115, $P2349
    push $P115, $P2350
    push $P115, $P2351
    push $P115, $P2352
    push $P115, $P2353
    push $P115, $P2354
    push $P115, $P2355
    push $P115, $P2356
    push $P115, $P2357
    push $P115, $P2358
    push $P115, $P2359
    push $P115, $P2360
    push $P115, $P2361
    push $P115, $P2362
    push $P115, $P2363
    push $P115, $P2364
    push $P115, $P2365
    push $P115, $P2366
    push $P115, $P2367
    push $P115, $P2368
    push $P115, $P2369
    push $P115, $P2370
    push $P115, $P2371
    push $P115, $P2372
    push $P115, $P2373
    push $P115, $P2374
    push $P115, $P2375
    push $P115, $P2376
    push $P115, $P2377
    push $P115, $P2378
    push $P115, $P2379
    push $P115, $P2380
    push $P115, $P2381
    push $P115, $P2382
    push $P115, $P2383
    push $P115, $P2384
    push $P115, $P2385
    push $P115, $P2386
    push $P115, $P2387
    push $P115, $P2388
    push $P115, $P2389
    push $P115, $P2390
    push $P115, $P2391
    push $P115, $P2392
    push $P115, $P2393
    push $P115, $P2394
    push $P115, $P2395
    push $P115, $P2396
    push $P115, $P2397
    push $P115, $P2398
    push $P115, $P2399
    push $P115, $P2400
    push $P115, $P2401
    push $P115, $P2402
    push $P115, $P2403
    push $P115, $P2404
    push $P115, $P2405
    push $P115, $P2406
    push $P115, $P2407
    push $P115, $P2408
    push $P115, $P2409
    push $P115, $P2410
    push $P115, $P2411
    push $P115, $P2412
    push $P115, $P2413
    push $P115, $P2414
    push $P115, $P2415
    push $P115, $P2416
    push $P115, $P2417
    push $P115, $P2418
    push $P115, $P2419
    push $P115, $P2420
    push $P115, $P2421
    push $P115, $P2422
    push $P115, $P2423
    push $P115, $P2424
    push $P115, $P2425
    push $P115, $P2426
    push $P115, $P2427
    push $P115, $P2428
    push $P115, $P2429
    .return ($P115)
.end


.HLL "nqp"

.namespace []
.sub "MAIN"  :subid("182_1340317687.034") :outer("181_1340317687.034")
    .param pmc param_1008
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 888
    .lex "@ARGS", param_1008
.annotate 'line', 889
    find_lex $P101, "$p6regex"
    unless_null $P101, vivify_424
    new $P101, "Undef"
  vivify_424:
    set $P1009, param_1008
    unless_null $P1009, vivify_425
    $P1009 = root_new ['parrot';'ResizablePMCArray']
  vivify_425:
    $P102 = $P101."command_line"($P1009, "utf8" :named("encoding"), "ucs4" :named("transcode"))
.annotate 'line', 888
    .return ($P102)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1011"  :subid("183_1340317687.034") :outer("181_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 10
    .const 'Sub' $P1569 = "126_1340317687.034" 
    capture_lex $P1569
    .const 'Sub' $P1563 = "125_1340317687.034" 
    capture_lex $P1563
    .const 'Sub' $P1557 = "124_1340317687.034" 
    capture_lex $P1557
    .const 'Sub' $P1542 = "121_1340317687.034" 
    capture_lex $P1542
    .const 'Sub' $P1508 = "115_1340317687.034" 
    capture_lex $P1508
    .const 'Sub' $P1496 = "108_1340317687.034" 
    capture_lex $P1496
    .const 'Sub' $P1484 = "104_1340317687.034" 
    capture_lex $P1484
    .const 'Sub' $P1478 = "102_1340317687.034" 
    capture_lex $P1478
    .const 'Sub' $P1472 = "101_1340317687.034" 
    capture_lex $P1472
    .const 'Sub' $P1460 = "99_1340317687.034" 
    capture_lex $P1460
    .const 'Sub' $P1448 = "96_1340317687.034" 
    capture_lex $P1448
    .const 'Sub' $P1440 = "93_1340317687.034" 
    capture_lex $P1440
    .const 'Sub' $P1433 = "92_1340317687.034" 
    capture_lex $P1433
    .const 'Sub' $P1427 = "91_1340317687.034" 
    capture_lex $P1427
    .const 'Sub' $P1421 = "90_1340317687.034" 
    capture_lex $P1421
    .const 'Sub' $P1415 = "89_1340317687.034" 
    capture_lex $P1415
    .const 'Sub' $P1409 = "88_1340317687.034" 
    capture_lex $P1409
    .const 'Sub' $P1403 = "87_1340317687.034" 
    capture_lex $P1403
    .const 'Sub' $P1396 = "85_1340317687.034" 
    capture_lex $P1396
    .const 'Sub' $P1389 = "83_1340317687.034" 
    capture_lex $P1389
    .const 'Sub' $P1383 = "82_1340317687.034" 
    capture_lex $P1383
    .const 'Sub' $P1377 = "81_1340317687.034" 
    capture_lex $P1377
    .const 'Sub' $P1371 = "80_1340317687.034" 
    capture_lex $P1371
    .const 'Sub' $P1365 = "79_1340317687.034" 
    capture_lex $P1365
    .const 'Sub' $P1359 = "78_1340317687.034" 
    capture_lex $P1359
    .const 'Sub' $P1353 = "77_1340317687.034" 
    capture_lex $P1353
    .const 'Sub' $P1347 = "76_1340317687.034" 
    capture_lex $P1347
    .const 'Sub' $P1341 = "75_1340317687.034" 
    capture_lex $P1341
    .const 'Sub' $P1333 = "73_1340317687.034" 
    capture_lex $P1333
    .const 'Sub' $P1326 = "71_1340317687.034" 
    capture_lex $P1326
    .const 'Sub' $P1320 = "70_1340317687.034" 
    capture_lex $P1320
    .const 'Sub' $P1314 = "69_1340317687.034" 
    capture_lex $P1314
    .const 'Sub' $P1308 = "68_1340317687.034" 
    capture_lex $P1308
    .const 'Sub' $P1302 = "67_1340317687.034" 
    capture_lex $P1302
    .const 'Sub' $P1296 = "66_1340317687.034" 
    capture_lex $P1296
    .const 'Sub' $P1290 = "65_1340317687.034" 
    capture_lex $P1290
    .const 'Sub' $P1283 = "63_1340317687.034" 
    capture_lex $P1283
    .const 'Sub' $P1276 = "61_1340317687.034" 
    capture_lex $P1276
    .const 'Sub' $P1270 = "60_1340317687.034" 
    capture_lex $P1270
    .const 'Sub' $P1264 = "59_1340317687.034" 
    capture_lex $P1264
    .const 'Sub' $P1258 = "58_1340317687.034" 
    capture_lex $P1258
    .const 'Sub' $P1252 = "57_1340317687.034" 
    capture_lex $P1252
    .const 'Sub' $P1246 = "56_1340317687.034" 
    capture_lex $P1246
    .const 'Sub' $P1240 = "55_1340317687.034" 
    capture_lex $P1240
    .const 'Sub' $P1234 = "54_1340317687.034" 
    capture_lex $P1234
    .const 'Sub' $P1228 = "53_1340317687.034" 
    capture_lex $P1228
    .const 'Sub' $P1222 = "52_1340317687.034" 
    capture_lex $P1222
    .const 'Sub' $P1216 = "51_1340317687.034" 
    capture_lex $P1216
    .const 'Sub' $P1210 = "50_1340317687.034" 
    capture_lex $P1210
    .const 'Sub' $P1204 = "49_1340317687.034" 
    capture_lex $P1204
    .const 'Sub' $P1190 = "46_1340317687.034" 
    capture_lex $P1190
    .const 'Sub' $P1184 = "44_1340317687.034" 
    capture_lex $P1184
    .const 'Sub' $P1162 = "43_1340317687.034" 
    capture_lex $P1162
    .const 'Sub' $P1156 = "39_1340317687.034" 
    capture_lex $P1156
    .const 'Sub' $P1150 = "38_1340317687.034" 
    capture_lex $P1150
    .const 'Sub' $P1144 = "37_1340317687.034" 
    capture_lex $P1144
    .const 'Sub' $P1130 = "34_1340317687.034" 
    capture_lex $P1130
    .const 'Sub' $P1124 = "32_1340317687.034" 
    capture_lex $P1124
    .const 'Sub' $P1112 = "30_1340317687.034" 
    capture_lex $P1112
    .const 'Sub' $P1098 = "28_1340317687.034" 
    capture_lex $P1098
    .const 'Sub' $P1092 = "26_1340317687.034" 
    capture_lex $P1092
    .const 'Sub' $P1086 = "25_1340317687.034" 
    capture_lex $P1086
    .const 'Sub' $P1080 = "24_1340317687.034" 
    capture_lex $P1080
    .const 'Sub' $P1074 = "23_1340317687.034" 
    capture_lex $P1074
    .const 'Sub' $P1065 = "21_1340317687.034" 
    capture_lex $P1065
    .const 'Sub' $P1057 = "20_1340317687.034" 
    capture_lex $P1057
    .const 'Sub' $P1052 = "19_1340317687.034" 
    capture_lex $P1052
    .const 'Sub' $P1045 = "17_1340317687.034" 
    capture_lex $P1045
    .const 'Sub' $P1039 = "16_1340317687.034" 
    capture_lex $P1039
    .const 'Sub' $P1027 = "15_1340317687.034" 
    capture_lex $P1027
    .const 'Sub' $P1020 = "11_1340317687.034" 
    capture_lex $P1020
    .const 'Sub' $P1015 = "10_1340317687.034" 
    capture_lex $P1015
    .lex "$?PACKAGE", $P1013
    .lex "$?CLASS", $P1014
.annotate 'line', 237
    .const 'Sub' $P1569 = "126_1340317687.034" 
    capture_lex $P1569
.annotate 'line', 10
    .return ($P1569)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "obs" :anon :subid("10_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1016
    .param pmc param_1017
    .param pmc param_1018
    .param pmc param_1019 :optional
    .param int has_param_1019 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 12
    .lex "self", param_1016
    .lex "$old", param_1017
    .lex "$new", param_1018
    if has_param_1019, optparam_426
    new $P101, "String"
    assign $P101, " in Perl 6"
    set param_1019, $P101
  optparam_426:
    .lex "$when", param_1019
.annotate 'line', 13
    set $P103, param_1016
    nqp_decontainerize $P104, $P103
    new $P105, "String"
    assign $P105, "Unsupported use of "
    set $P106, param_1017
    unless_null $P106, vivify_427
    new $P106, "Undef"
  vivify_427:
    set $S100, $P106
    concat $P107, $P105, $S100
    concat $P108, $P107, ";"
.annotate 'line', 14
    set $P109, param_1019
    unless_null $P109, vivify_428
    new $P109, "Undef"
  vivify_428:
    set $S101, $P109
    concat $P110, $P108, $S101
    concat $P111, $P110, " please use "
    set $P112, param_1018
    unless_null $P112, vivify_429
    new $P112, "Undef"
  vivify_429:
    set $S102, $P112
    concat $P113, $P111, $S102
    $P114 = $P104."panic"($P113)
.annotate 'line', 12
    .return ($P114)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "ws"  :subid("11_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1021
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 17
    .lex "self", param_1021
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1022
    .lex "$/", $P1023
    .local string rx10_tgt
    .local int rx10_pos
    .local int rx10_off
    .local int rx10_eos
    .local int rx10_rep
    .local pmc rx10_cur
    .local pmc rx10_curclass
    .local pmc rx10_bstack
    .local pmc rx10_cstack
    (rx10_cur, rx10_tgt, rx10_pos, rx10_curclass, rx10_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx10_cur
    length rx10_eos, rx10_tgt
    eq $I19, 1, rx10_restart
    repr_get_attr_int $I11, self, rx10_curclass, "$!from"
    ne $I11, -1, rxscan11_done
    goto rxscan11_scan
  rxscan11_loop:
    inc rx10_pos
    gt rx10_pos, rx10_eos, rx10_fail
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!from", rx10_pos
  rxscan11_scan:
    nqp_rxmark rx10_bstack, rxscan11_loop, rx10_pos, 0
  rxscan11_done:
  # rx rxquantr12 ** 0..-1
    nqp_rxmark rx10_bstack, rxquantr12_done, rx10_pos, 0
  rxquantr12_loop:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt13_0
    nqp_push_label $P11, alt13_1
    nqp_rxmark rx10_bstack, alt13_end, -1, 0
    rx10_cur."!alt"(rx10_pos, ucs4:"alt_nfa_12_1340317687.112", $P11)
    goto rx10_fail
  alt13_0:
  # rx rxquantr14 ** 1..-1
    nqp_rxmark rx10_bstack, rxquantr14_done, -1, 0
  rxquantr14_loop:
    ge rx10_pos, rx10_eos, rx10_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx10_tgt, rx10_pos
    unless $I11, rx10_fail
    add rx10_pos, 1
    nqp_rxpeek $I19, rx10_bstack, rxquantr14_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr14_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr14_done, rx10_pos, rx10_rep
    goto rxquantr14_loop
  rxquantr14_done:
    goto alt13_end
  alt13_1:
    add $I11, rx10_pos, 1
    gt $I11, rx10_eos, rx10_fail
    substr $S10, rx10_tgt, rx10_pos, 1
    ne $S10, ucs4:"#", rx10_fail
    add rx10_pos, 1
  # rx rxquantr15 ** 0..-1
    nqp_rxmark rx10_bstack, rxquantr15_done, rx10_pos, 0
  rxquantr15_loop:
    ge rx10_pos, rx10_eos, rx10_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx10_tgt, rx10_pos
    if $I11, rx10_fail
    add rx10_pos, 1
    nqp_rxpeek $I19, rx10_bstack, rxquantr15_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr15_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr15_done, rx10_pos, rx10_rep
    goto rxquantr15_loop
  rxquantr15_done:
    goto alt13_end
  alt13_end:
    nqp_rxpeek $I19, rx10_bstack, rxquantr12_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr12_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr12_done, rx10_pos, rx10_rep
    goto rxquantr12_loop
  rxquantr12_done:
    rx10_cur."!cursor_pass"(rx10_pos, "ws", 'backtrack'=>1)
    .return (rx10_cur)
  rx10_restart:
    repr_get_attr_obj rx10_cstack, rx10_cur, rx10_curclass, "$!cstack"
  rx10_fail:
    unless rx10_bstack, rx10_done
    pop $I19, rx10_bstack
    if_null rx10_cstack, rx10_cstack_done
    unless rx10_cstack, rx10_cstack_done
    dec $I19
    set $P11, rx10_cstack[$I19]
  rx10_cstack_done:
    pop rx10_rep, rx10_bstack
    pop rx10_pos, rx10_bstack
    pop $I19, rx10_bstack
    lt rx10_pos, -1, rx10_done
    lt rx10_pos, 0, rx10_fail
    eq $I19, 0, rx10_fail
    if_null rx10_cstack, rx10_jump
    elements $I18, rx10_bstack
    le $I18, 0, rx10_cut
    dec $I18
    set $I18, rx10_bstack[$I18]
  rx10_cut:
    assign rx10_cstack, $I18
  rx10_jump:
    jump $I19
  rx10_done:
    rx10_cur."!cursor_fail"()
    .return (rx10_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "11_1340317687.034_caps"  :subid("184_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 17
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "11_1340317687.034_nfa"  :subid("185_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 17
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 1
    push $P104, 0
    push $P104, 2
    push $P104, 2
    push $P104, 35
    push $P104, 4
    push $P104, 1
    push $P104, 0
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, 4
    push $P105, 32
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 1
    new $P107, "ResizablePMCArray"
    push $P107, 5
    push $P107, 4096
    push $P107, 4
    push $P107, 1
    push $P107, 0
    push $P107, 1
    new $P108, "ResizablePMCArray"
    push $P108, $P103
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "11_1340317687.034_alt_nfa_12_1340317687.112"  :subid("186_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 17
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 1
    push $P104, 0
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 4
    push $P105, 32
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    new $P108, "ResizablePMCArray"
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 35
    push $P109, 2
    new $P110, "ResizablePMCArray"
    push $P110, 5
    push $P110, 4096
    push $P110, 2
    push $P110, 1
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    new $P112, "ResizablePMCArray"
    push $P112, $P107
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "normspace"  :subid("15_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1028
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 19
    .const 'Sub' $P1034 = "13_1340317687.034" 
    capture_lex $P1034
    .lex "self", param_1028
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1029
    .lex "$/", $P1030
    .local string rx16_tgt
    .local int rx16_pos
    .local int rx16_off
    .local int rx16_eos
    .local int rx16_rep
    .local pmc rx16_cur
    .local pmc rx16_curclass
    .local pmc rx16_bstack
    .local pmc rx16_cstack
    (rx16_cur, rx16_tgt, rx16_pos, rx16_curclass, rx16_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx16_cur
    length rx16_eos, rx16_tgt
    eq $I19, 1, rx16_restart
    repr_get_attr_int $I11, self, rx16_curclass, "$!from"
    ne $I11, -1, rxscan17_done
    goto rxscan17_scan
  rxscan17_loop:
    inc rx16_pos
    gt rx16_pos, rx16_eos, rx16_fail
    repr_bind_attr_int rx16_cur, rx16_curclass, "$!from", rx16_pos
  rxscan17_scan:
    nqp_rxmark rx16_bstack, rxscan17_loop, rx16_pos, 0
  rxscan17_done:
    .const 'Sub' $P1034 = "13_1340317687.034" 
    capture_lex $P1034
    repr_bind_attr_int rx16_cur, rx16_curclass, "$!pos", rx16_pos
    $P11 = rx16_cur."before"($P1034)
    repr_get_attr_int $I11, $P11, rx16_curclass, "$!pos"
    lt $I11, 0, rx16_fail
    repr_bind_attr_int rx16_cur, rx16_curclass, "$!pos", rx16_pos
    $P11 = rx16_cur."ws"()
    repr_get_attr_int $I11, $P11, rx16_curclass, "$!pos"
    lt $I11, 0, rx16_fail
    repr_get_attr_int rx16_pos, $P11, rx16_curclass, "$!pos"
    rx16_cur."!cursor_pass"(rx16_pos, "normspace", 'backtrack'=>1)
    .return (rx16_cur)
  rx16_restart:
    repr_get_attr_obj rx16_cstack, rx16_cur, rx16_curclass, "$!cstack"
  rx16_fail:
    unless rx16_bstack, rx16_done
    pop $I19, rx16_bstack
    if_null rx16_cstack, rx16_cstack_done
    unless rx16_cstack, rx16_cstack_done
    dec $I19
    set $P11, rx16_cstack[$I19]
  rx16_cstack_done:
    pop rx16_rep, rx16_bstack
    pop rx16_pos, rx16_bstack
    pop $I19, rx16_bstack
    lt rx16_pos, -1, rx16_done
    lt rx16_pos, 0, rx16_fail
    eq $I19, 0, rx16_fail
    if_null rx16_cstack, rx16_jump
    elements $I18, rx16_bstack
    le $I18, 0, rx16_cut
    dec $I18
    set $I18, rx16_bstack[$I18]
  rx16_cut:
    assign rx16_cstack, $I18
  rx16_jump:
    jump $I19
  rx16_done:
    rx16_cur."!cursor_fail"()
    .return (rx16_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "15_1340317687.034_caps"  :subid("187_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 19
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "15_1340317687.034_nfa"  :subid("188_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 19
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 4
    push $P104, 32
    push $P104, 2
    push $P104, 2
    push $P104, 35
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1033"  :anon :subid("13_1340317687.034") :method :outer("15_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 19
    .lex unicode:"$\x{a2}", $P1038
    .local string rx18_tgt
    .local int rx18_pos
    .local int rx18_off
    .local int rx18_eos
    .local int rx18_rep
    .local pmc rx18_cur
    .local pmc rx18_curclass
    .local pmc rx18_bstack
    .local pmc rx18_cstack
    (rx18_cur, rx18_tgt, rx18_pos, rx18_curclass, rx18_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx18_cur
    length rx18_eos, rx18_tgt
    eq $I19, 1, rx18_restart
    repr_get_attr_int $I11, self, rx18_curclass, "$!from"
    ne $I11, -1, rxscan19_done
    goto rxscan19_scan
  rxscan19_loop:
    inc rx18_pos
    gt rx18_pos, rx18_eos, rx18_fail
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!from", rx18_pos
  rxscan19_scan:
    nqp_rxmark rx18_bstack, rxscan19_loop, rx18_pos, 0
  rxscan19_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt20_0
    nqp_push_label $P11, alt20_1
    nqp_rxmark rx18_bstack, alt20_end, -1, 0
    rx18_cur."!alt"(rx18_pos, ucs4:"alt_nfa_14_1340317687.13", $P11)
    goto rx18_fail
  alt20_0:
    ge rx18_pos, rx18_eos, rx18_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx18_tgt, rx18_pos
    unless $I11, rx18_fail
    add rx18_pos, 1
    goto alt20_end
  alt20_1:
    add $I11, rx18_pos, 1
    gt $I11, rx18_eos, rx18_fail
    substr $S10, rx18_tgt, rx18_pos, 1
    ne $S10, ucs4:"#", rx18_fail
    add rx18_pos, 1
    goto alt20_end
  alt20_end:
    rx18_cur."!cursor_pass"(rx18_pos, 'backtrack'=>1)
    .return (rx18_cur)
  rx18_restart:
    repr_get_attr_obj rx18_cstack, rx18_cur, rx18_curclass, "$!cstack"
  rx18_fail:
    unless rx18_bstack, rx18_done
    pop $I19, rx18_bstack
    if_null rx18_cstack, rx18_cstack_done
    unless rx18_cstack, rx18_cstack_done
    dec $I19
    set $P11, rx18_cstack[$I19]
  rx18_cstack_done:
    pop rx18_rep, rx18_bstack
    pop rx18_pos, rx18_bstack
    pop $I19, rx18_bstack
    lt rx18_pos, -1, rx18_done
    lt rx18_pos, 0, rx18_fail
    eq $I19, 0, rx18_fail
    if_null rx18_cstack, rx18_jump
    elements $I18, rx18_bstack
    le $I18, 0, rx18_cut
    dec $I18
    set $I18, rx18_bstack[$I18]
  rx18_cut:
    assign rx18_cstack, $I18
  rx18_jump:
    jump $I19
  rx18_done:
    rx18_cur."!cursor_fail"()
    .return (rx18_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "13_1340317687.034_caps"  :subid("189_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 19
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "13_1340317687.034_nfa"  :subid("190_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 19
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 4
    push $P104, 32
    push $P104, 0
    push $P104, 2
    push $P104, 35
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "13_1340317687.034_alt_nfa_14_1340317687.13"  :subid("191_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 19
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 4
    push $P104, 32
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 35
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P106
    push $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, $P105
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "identifier"  :subid("16_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1040
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 21
    .lex "self", param_1040
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1041
    .lex "$/", $P1042
    .local string rx22_tgt
    .local int rx22_pos
    .local int rx22_off
    .local int rx22_eos
    .local int rx22_rep
    .local pmc rx22_cur
    .local pmc rx22_curclass
    .local pmc rx22_bstack
    .local pmc rx22_cstack
    (rx22_cur, rx22_tgt, rx22_pos, rx22_curclass, rx22_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx22_cur
    length rx22_eos, rx22_tgt
    eq $I19, 1, rx22_restart
    repr_get_attr_int $I11, self, rx22_curclass, "$!from"
    ne $I11, -1, rxscan23_done
    goto rxscan23_scan
  rxscan23_loop:
    inc rx22_pos
    gt rx22_pos, rx22_eos, rx22_fail
    repr_bind_attr_int rx22_cur, rx22_curclass, "$!from", rx22_pos
  rxscan23_scan:
    nqp_rxmark rx22_bstack, rxscan23_loop, rx22_pos, 0
  rxscan23_done:
    repr_bind_attr_int rx22_cur, rx22_curclass, "$!pos", rx22_pos
    $P11 = rx22_cur."ident"()
    repr_get_attr_int $I11, $P11, rx22_curclass, "$!pos"
    lt $I11, 0, rx22_fail
    repr_get_attr_int rx22_pos, $P11, rx22_curclass, "$!pos"
  # rx rxquantr25 ** 0..-1
    nqp_rxmark rx22_bstack, rxquantr25_done, rx22_pos, 0
  rxquantr25_loop:
  alt26_0:
    nqp_rxmark rx22_bstack, alt26_1, rx22_pos, 0
    add $I11, rx22_pos, 1
    gt $I11, rx22_eos, rx22_fail
    substr $S10, rx22_tgt, rx22_pos, 1
    ne $S10, ucs4:"-", rx22_fail
    add rx22_pos, 1
    goto alt26_end
  alt26_1:
    ge rx22_pos, rx22_eos, rx22_fail
    substr $S11, rx22_tgt, rx22_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx22_fail
    inc rx22_pos
  alt26_end:
    repr_bind_attr_int rx22_cur, rx22_curclass, "$!pos", rx22_pos
    $P11 = rx22_cur."ident"()
    repr_get_attr_int $I11, $P11, rx22_curclass, "$!pos"
    lt $I11, 0, rx22_fail
    repr_get_attr_int rx22_pos, $P11, rx22_curclass, "$!pos"
    nqp_rxpeek $I19, rx22_bstack, rxquantr25_done
    inc $I19
    inc $I19
    set rx22_rep, rx22_bstack[$I19]
    nqp_rxcommit rx22_bstack, rxquantr25_done
    inc rx22_rep
    nqp_rxmark rx22_bstack, rxquantr25_done, rx22_pos, rx22_rep
    goto rxquantr25_loop
  rxquantr25_done:
    rx22_cur."!cursor_pass"(rx22_pos, "identifier", 'backtrack'=>1)
    .return (rx22_cur)
  rx22_restart:
    repr_get_attr_obj rx22_cstack, rx22_cur, rx22_curclass, "$!cstack"
  rx22_fail:
    unless rx22_bstack, rx22_done
    pop $I19, rx22_bstack
    if_null rx22_cstack, rx22_cstack_done
    unless rx22_cstack, rx22_cstack_done
    dec $I19
    set $P11, rx22_cstack[$I19]
  rx22_cstack_done:
    pop rx22_rep, rx22_bstack
    pop rx22_pos, rx22_bstack
    pop $I19, rx22_bstack
    lt rx22_pos, -1, rx22_done
    lt rx22_pos, 0, rx22_fail
    eq $I19, 0, rx22_fail
    if_null rx22_cstack, rx22_jump
    elements $I18, rx22_bstack
    le $I18, 0, rx22_cut
    dec $I18
    set $I18, rx22_bstack[$I18]
  rx22_cut:
    assign rx22_cstack, $I18
  rx22_jump:
    jump $I19
  rx22_done:
    rx22_cur."!cursor_fail"()
    .return (rx22_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "16_1340317687.034_caps"  :subid("192_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 21
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "16_1340317687.034_nfa"  :subid("193_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 21
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "ident"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "arg"  :subid("17_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1046
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 23
    .lex "self", param_1046
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1047
    .lex "$/", $P1048
    .local string rx28_tgt
    .local int rx28_pos
    .local int rx28_off
    .local int rx28_eos
    .local int rx28_rep
    .local pmc rx28_cur
    .local pmc rx28_curclass
    .local pmc rx28_bstack
    .local pmc rx28_cstack
    (rx28_cur, rx28_tgt, rx28_pos, rx28_curclass, rx28_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx28_cur
    length rx28_eos, rx28_tgt
    eq $I19, 1, rx28_restart
    repr_get_attr_int $I11, self, rx28_curclass, "$!from"
    ne $I11, -1, rxscan29_done
    goto rxscan29_scan
  rxscan29_loop:
    inc rx28_pos
    gt rx28_pos, rx28_eos, rx28_fail
    repr_bind_attr_int rx28_cur, rx28_curclass, "$!from", rx28_pos
  rxscan29_scan:
    nqp_rxmark rx28_bstack, rxscan29_loop, rx28_pos, 0
  rxscan29_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt30_0
    nqp_push_label $P11, alt30_1
    nqp_push_label $P11, alt30_2
    nqp_rxmark rx28_bstack, alt30_end, -1, 0
    rx28_cur."!alt"(rx28_pos, ucs4:"alt_nfa_18_1340317687.155", $P11)
    goto rx28_fail
  alt30_0:
    ge rx28_pos, rx28_eos, rx28_fail
    substr $S11, rx28_tgt, rx28_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx28_fail
    repr_bind_attr_int rx28_cur, rx28_curclass, "$!pos", rx28_pos
    $P11 = rx28_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx28_curclass, "$!pos"
    lt $I11, 0, rx28_fail
    nqp_rxmark rx28_bstack, rxsubrule31_pass, -1, 0
  rxsubrule31_pass:
    rx28_cstack = rx28_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx28_pos, $P11, rx28_curclass, "$!pos"
    goto alt30_end
  alt30_1:
    ge rx28_pos, rx28_eos, rx28_fail
    substr $S11, rx28_tgt, rx28_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx28_fail
    repr_bind_attr_int rx28_cur, rx28_curclass, "$!pos", rx28_pos
    $P11 = rx28_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx28_curclass, "$!pos"
    lt $I11, 0, rx28_fail
    nqp_rxmark rx28_bstack, rxsubrule32_pass, -1, 0
  rxsubrule32_pass:
    rx28_cstack = rx28_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx28_pos, $P11, rx28_curclass, "$!pos"
    goto alt30_end
  alt30_2:
    nqp_rxmark rx28_bstack, rxcap33_fail, rx28_pos, 0
  # rx rxquantr34 ** 1..-1
    nqp_rxmark rx28_bstack, rxquantr34_done, -1, 0
  rxquantr34_loop:
    ge rx28_pos, rx28_eos, rx28_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx28_tgt, rx28_pos
    unless $I11, rx28_fail
    add rx28_pos, 1
    nqp_rxpeek $I19, rx28_bstack, rxquantr34_done
    inc $I19
    inc $I19
    set rx28_rep, rx28_bstack[$I19]
    nqp_rxcommit rx28_bstack, rxquantr34_done
    inc rx28_rep
    nqp_rxmark rx28_bstack, rxquantr34_done, rx28_pos, rx28_rep
    goto rxquantr34_loop
  rxquantr34_done:
    nqp_rxpeek $I19, rx28_bstack, rxcap33_fail
    inc $I19
    set $I11, rx28_bstack[$I19]
    $P11 = rx28_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx28_pos)
    rx28_cstack = rx28_cur."!cursor_capture"($P11, "val")
    goto rxcap33_done
  rxcap33_fail:
    goto rx28_fail
  rxcap33_done:
    goto alt30_end
  alt30_end:
    nqp_rxcommit rx28_bstack, alt30_end
    rx28_cur."!cursor_pass"(rx28_pos, "arg", 'backtrack'=>1)
    .return (rx28_cur)
  rx28_restart:
    repr_get_attr_obj rx28_cstack, rx28_cur, rx28_curclass, "$!cstack"
  rx28_fail:
    unless rx28_bstack, rx28_done
    pop $I19, rx28_bstack
    if_null rx28_cstack, rx28_cstack_done
    unless rx28_cstack, rx28_cstack_done
    dec $I19
    set $P11, rx28_cstack[$I19]
  rx28_cstack_done:
    pop rx28_rep, rx28_bstack
    pop rx28_pos, rx28_bstack
    pop $I19, rx28_bstack
    lt rx28_pos, -1, rx28_done
    lt rx28_pos, 0, rx28_fail
    eq $I19, 0, rx28_fail
    if_null rx28_cstack, rx28_jump
    elements $I18, rx28_bstack
    le $I18, 0, rx28_cut
    dec $I18
    set $I18, rx28_bstack[$I18]
  rx28_cut:
    assign rx28_cstack, $I18
  rx28_jump:
    jump $I19
  rx28_done:
    rx28_cur."!cursor_fail"()
    .return (rx28_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "17_1340317687.034_caps"  :subid("194_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 23
    new $P103, "Hash"
    set $P103["quote_EXPR"], 0
    set $P103["val"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "17_1340317687.034_nfa"  :subid("195_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 23
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "'"
    push $P104, 2
    push $P104, 6
    push $P104, "\""
    push $P104, 3
    push $P104, 1
    push $P104, 0
    push $P104, 4
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 4
    push $P107, 8
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 4
    push $P108, 1
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P103
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "17_1340317687.034_alt_nfa_18_1340317687.155"  :subid("196_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 23
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "'"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "\""
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    new $P111, "ResizablePMCArray"
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 2
    new $P113, "ResizablePMCArray"
    push $P113, 4
    push $P113, 8
    push $P113, 3
    new $P114, "ResizablePMCArray"
    push $P114, 1
    push $P114, 0
    push $P114, 2
    push $P114, 1
    push $P114, 0
    push $P114, 0
    new $P115, "ResizablePMCArray"
    push $P115, $P111
    push $P115, $P112
    push $P115, $P113
    push $P115, $P114
    new $P116, "ResizablePMCArray"
    push $P116, $P106
    push $P116, $P110
    push $P116, $P115
    .return ($P116)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "arglist"  :subid("19_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1053
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 31
    .lex "self", param_1053
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1054
    .lex "$/", $P1055
    .local string rx35_tgt
    .local int rx35_pos
    .local int rx35_off
    .local int rx35_eos
    .local int rx35_rep
    .local pmc rx35_cur
    .local pmc rx35_curclass
    .local pmc rx35_bstack
    .local pmc rx35_cstack
    (rx35_cur, rx35_tgt, rx35_pos, rx35_curclass, rx35_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx35_cur
    length rx35_eos, rx35_tgt
    eq $I19, 1, rx35_restart
    repr_get_attr_int $I11, self, rx35_curclass, "$!from"
    ne $I11, -1, rxscan36_done
    goto rxscan36_scan
  rxscan36_loop:
    inc rx35_pos
    gt rx35_pos, rx35_eos, rx35_fail
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!from", rx35_pos
  rxscan36_scan:
    nqp_rxmark rx35_bstack, rxscan36_loop, rx35_pos, 0
  rxscan36_done:
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!pos", rx35_pos
    $P11 = rx35_cur."ws"()
    repr_get_attr_int $I11, $P11, rx35_curclass, "$!pos"
    lt $I11, 0, rx35_fail
    repr_get_attr_int rx35_pos, $P11, rx35_curclass, "$!pos"
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!pos", rx35_pos
    $P11 = rx35_cur."arg"()
    repr_get_attr_int $I11, $P11, rx35_curclass, "$!pos"
    lt $I11, 0, rx35_fail
    nqp_rxmark rx35_bstack, rxsubrule38_pass, -1, 0
  rxsubrule38_pass:
    rx35_cstack = rx35_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx35_pos, $P11, rx35_curclass, "$!pos"
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!pos", rx35_pos
    $P11 = rx35_cur."ws"()
    repr_get_attr_int $I11, $P11, rx35_curclass, "$!pos"
    lt $I11, 0, rx35_fail
    repr_get_attr_int rx35_pos, $P11, rx35_curclass, "$!pos"
  # rx rxquantr40 ** 0..-1
    nqp_rxmark rx35_bstack, rxquantr40_done, rx35_pos, 0
  rxquantr40_loop:
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!pos", rx35_pos
    $P11 = rx35_cur."ws"()
    repr_get_attr_int $I11, $P11, rx35_curclass, "$!pos"
    lt $I11, 0, rx35_fail
    repr_get_attr_int rx35_pos, $P11, rx35_curclass, "$!pos"
    add $I11, rx35_pos, 1
    gt $I11, rx35_eos, rx35_fail
    substr $S10, rx35_tgt, rx35_pos, 1
    ne $S10, ucs4:",", rx35_fail
    add rx35_pos, 1
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!pos", rx35_pos
    $P11 = rx35_cur."ws"()
    repr_get_attr_int $I11, $P11, rx35_curclass, "$!pos"
    lt $I11, 0, rx35_fail
    repr_get_attr_int rx35_pos, $P11, rx35_curclass, "$!pos"
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!pos", rx35_pos
    $P11 = rx35_cur."arg"()
    repr_get_attr_int $I11, $P11, rx35_curclass, "$!pos"
    lt $I11, 0, rx35_fail
    nqp_rxmark rx35_bstack, rxsubrule43_pass, -1, 0
  rxsubrule43_pass:
    rx35_cstack = rx35_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx35_pos, $P11, rx35_curclass, "$!pos"
    nqp_rxpeek $I19, rx35_bstack, rxquantr40_done
    inc $I19
    inc $I19
    set rx35_rep, rx35_bstack[$I19]
    nqp_rxcommit rx35_bstack, rxquantr40_done
    inc rx35_rep
    nqp_rxmark rx35_bstack, rxquantr40_done, rx35_pos, rx35_rep
    goto rxquantr40_loop
  rxquantr40_done:
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!pos", rx35_pos
    $P11 = rx35_cur."ws"()
    repr_get_attr_int $I11, $P11, rx35_curclass, "$!pos"
    lt $I11, 0, rx35_fail
    repr_get_attr_int rx35_pos, $P11, rx35_curclass, "$!pos"
    rx35_cur."!cursor_pass"(rx35_pos, "arglist", 'backtrack'=>1)
    .return (rx35_cur)
  rx35_restart:
    repr_get_attr_obj rx35_cstack, rx35_cur, rx35_curclass, "$!cstack"
  rx35_fail:
    unless rx35_bstack, rx35_done
    pop $I19, rx35_bstack
    if_null rx35_cstack, rx35_cstack_done
    unless rx35_cstack, rx35_cstack_done
    dec $I19
    set $P11, rx35_cstack[$I19]
  rx35_cstack_done:
    pop rx35_rep, rx35_bstack
    pop rx35_pos, rx35_bstack
    pop $I19, rx35_bstack
    lt rx35_pos, -1, rx35_done
    lt rx35_pos, 0, rx35_fail
    eq $I19, 0, rx35_fail
    if_null rx35_cstack, rx35_jump
    elements $I18, rx35_bstack
    le $I18, 0, rx35_cut
    dec $I18
    set $I18, rx35_bstack[$I18]
  rx35_cut:
    assign rx35_cstack, $I18
  rx35_jump:
    jump $I19
  rx35_done:
    rx35_cur."!cursor_fail"()
    .return (rx35_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "19_1340317687.034_caps"  :subid("197_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 31
    new $P103, "Hash"
    set $P103["arg"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "TOP"  :subid("20_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1058
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 33
    .lex "self", param_1058
.annotate 'line', 34
    $P1060 = root_new ['parrot';'Hash']
    set $P1059, $P1060
    .lex "%*RX", $P1059
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1061
    .lex "$/", $P1062
.annotate 'line', 33
    .local string rx45_tgt
    .local int rx45_pos
    .local int rx45_off
    .local int rx45_eos
    .local int rx45_rep
    .local pmc rx45_cur
    .local pmc rx45_curclass
    .local pmc rx45_bstack
    .local pmc rx45_cstack
    (rx45_cur, rx45_tgt, rx45_pos, rx45_curclass, rx45_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx45_cur
    length rx45_eos, rx45_tgt
    eq $I19, 1, rx45_restart
    repr_get_attr_int $I11, self, rx45_curclass, "$!from"
    ne $I11, -1, rxscan46_done
    goto rxscan46_scan
  rxscan46_loop:
    inc rx45_pos
    gt rx45_pos, rx45_eos, rx45_fail
    repr_bind_attr_int rx45_cur, rx45_curclass, "$!from", rx45_pos
  rxscan46_scan:
    nqp_rxmark rx45_bstack, rxscan46_loop, rx45_pos, 0
  rxscan46_done:
    repr_bind_attr_int rx45_cur, rx45_curclass, "$!pos", rx45_pos
    store_lex unicode:"$\x{a2}", rx45_cur
    set $P105, $P1059
    unless_null $P105, vivify_430
    get_hll_global $P103, "GLOBAL"
    get_who $P104, $P103
    set $P105, $P104["%RX"]
    unless_null $P105, vivify_431
    die "Contextual %*RX not found"
  vivify_431:
  vivify_430:
    repr_bind_attr_int rx45_cur, rx45_curclass, "$!pos", rx45_pos
    $P11 = rx45_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx45_curclass, "$!pos"
    lt $I11, 0, rx45_fail
    nqp_rxmark rx45_bstack, rxsubrule47_pass, -1, 0
  rxsubrule47_pass:
    rx45_cstack = rx45_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx45_pos, $P11, rx45_curclass, "$!pos"
  alt48_0:
    nqp_rxmark rx45_bstack, alt48_1, rx45_pos, 0
    lt rx45_pos, rx45_eos, rx45_fail
    goto alt48_end
  alt48_1:
    repr_bind_attr_int rx45_cur, rx45_curclass, "$!pos", rx45_pos
    $P11 = rx45_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx45_curclass, "$!pos"
    lt $I11, 0, rx45_fail
    repr_get_attr_int rx45_pos, $P11, rx45_curclass, "$!pos"
  alt48_end:
    rx45_cur."!cursor_pass"(rx45_pos, "TOP", 'backtrack'=>1)
    .return (rx45_cur)
  rx45_restart:
    repr_get_attr_obj rx45_cstack, rx45_cur, rx45_curclass, "$!cstack"
  rx45_fail:
    unless rx45_bstack, rx45_done
    pop $I19, rx45_bstack
    if_null rx45_cstack, rx45_cstack_done
    unless rx45_cstack, rx45_cstack_done
    dec $I19
    set $P11, rx45_cstack[$I19]
  rx45_cstack_done:
    pop rx45_rep, rx45_bstack
    pop rx45_pos, rx45_bstack
    pop $I19, rx45_bstack
    lt rx45_pos, -1, rx45_done
    lt rx45_pos, 0, rx45_fail
    eq $I19, 0, rx45_fail
    if_null rx45_cstack, rx45_jump
    elements $I18, rx45_bstack
    le $I18, 0, rx45_cut
    dec $I18
    set $I18, rx45_bstack[$I18]
  rx45_cut:
    assign rx45_cstack, $I18
  rx45_jump:
    jump $I19
  rx45_done:
    rx45_cur."!cursor_fail"()
    .return (rx45_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "20_1340317687.034_caps"  :subid("198_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 33
    new $P103, "Hash"
    set $P103["nibbler"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "20_1340317687.034_nfa"  :subid("199_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 33
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 1
    push $P104, 0
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "nibbler"
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "nibbler"  :subid("21_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1066
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 39
    .lex "self", param_1066
.annotate 'line', 40
    $P1068 = root_new ['parrot';'Hash']
    set $P1067, $P1068
    .lex "%*RX", $P1067
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1069
    .lex "$/", $P1070
.annotate 'line', 39
    .local string rx51_tgt
    .local int rx51_pos
    .local int rx51_off
    .local int rx51_eos
    .local int rx51_rep
    .local pmc rx51_cur
    .local pmc rx51_curclass
    .local pmc rx51_bstack
    .local pmc rx51_cstack
    (rx51_cur, rx51_tgt, rx51_pos, rx51_curclass, rx51_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx51_cur
    length rx51_eos, rx51_tgt
    eq $I19, 1, rx51_restart
    repr_get_attr_int $I11, self, rx51_curclass, "$!from"
    ne $I11, -1, rxscan52_done
    goto rxscan52_scan
  rxscan52_loop:
    inc rx51_pos
    gt rx51_pos, rx51_eos, rx51_fail
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!from", rx51_pos
  rxscan52_scan:
    nqp_rxmark rx51_bstack, rxscan52_loop, rx51_pos, 0
  rxscan52_done:
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    store_lex unicode:"$\x{a2}", rx51_cur
.annotate 'line', 40
    find_dynamic_lex $P103, "%*RX"
    clone $P104, $P103
    set $P1067, $P104
.annotate 'line', 39
  # rx rxquantr53 ** 0..1
    nqp_rxmark rx51_bstack, rxquantr53_done, rx51_pos, 0
  rxquantr53_loop:
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur."ws"()
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail
    repr_get_attr_int rx51_pos, $P11, rx51_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt55_0
    nqp_push_label $P11, alt55_1
    nqp_push_label $P11, alt55_2
    nqp_push_label $P11, alt55_3
    nqp_rxmark rx51_bstack, alt55_end, -1, 0
    rx51_cur."!alt"(rx51_pos, ucs4:"alt_nfa_22_1340317687.192", $P11)
    goto rx51_fail
  alt55_0:
    add $I11, rx51_pos, 2
    gt $I11, rx51_eos, rx51_fail
    substr $S10, rx51_tgt, rx51_pos, 2
    ne $S10, ucs4:"||", rx51_fail
    add rx51_pos, 2
    goto alt55_end
  alt55_1:
    add $I11, rx51_pos, 1
    gt $I11, rx51_eos, rx51_fail
    substr $S10, rx51_tgt, rx51_pos, 1
    ne $S10, ucs4:"|", rx51_fail
    add rx51_pos, 1
    goto alt55_end
  alt55_2:
    add $I11, rx51_pos, 2
    gt $I11, rx51_eos, rx51_fail
    substr $S10, rx51_tgt, rx51_pos, 2
    ne $S10, ucs4:"&&", rx51_fail
    add rx51_pos, 2
    goto alt55_end
  alt55_3:
    add $I11, rx51_pos, 1
    gt $I11, rx51_eos, rx51_fail
    substr $S10, rx51_tgt, rx51_pos, 1
    ne $S10, ucs4:"&", rx51_fail
    add rx51_pos, 1
    goto alt55_end
  alt55_end:
    nqp_rxcommit rx51_bstack, alt55_end
    nqp_rxpeek $I19, rx51_bstack, rxquantr53_done
    inc $I19
    inc $I19
    set rx51_rep, rx51_bstack[$I19]
    nqp_rxcommit rx51_bstack, rxquantr53_done
    inc rx51_rep
  rxquantr53_done:
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur."termaltseq"()
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail
    nqp_rxmark rx51_bstack, rxsubrule56_pass, -1, 0
  rxsubrule56_pass:
    rx51_cstack = rx51_cur."!cursor_capture"($P11, "termaltseq")
    repr_get_attr_int rx51_pos, $P11, rx51_curclass, "$!pos"
    rx51_cur."!cursor_pass"(rx51_pos, "nibbler", 'backtrack'=>1)
    .return (rx51_cur)
  rx51_restart:
    repr_get_attr_obj rx51_cstack, rx51_cur, rx51_curclass, "$!cstack"
  rx51_fail:
    unless rx51_bstack, rx51_done
    pop $I19, rx51_bstack
    if_null rx51_cstack, rx51_cstack_done
    unless rx51_cstack, rx51_cstack_done
    dec $I19
    set $P11, rx51_cstack[$I19]
  rx51_cstack_done:
    pop rx51_rep, rx51_bstack
    pop rx51_pos, rx51_bstack
    pop $I19, rx51_bstack
    lt rx51_pos, -1, rx51_done
    lt rx51_pos, 0, rx51_fail
    eq $I19, 0, rx51_fail
    if_null rx51_cstack, rx51_jump
    elements $I18, rx51_bstack
    le $I18, 0, rx51_cut
    dec $I18
    set $I18, rx51_bstack[$I18]
  rx51_cut:
    assign rx51_cstack, $I18
  rx51_jump:
    jump $I19
  rx51_done:
    rx51_cur."!cursor_fail"()
    .return (rx51_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "21_1340317687.034_caps"  :subid("200_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 39
    new $P103, "Hash"
    set $P103["termaltseq"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "21_1340317687.034_nfa"  :subid("201_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 39
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 1
    push $P104, 0
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "ws"
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 5
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 124
    push $P106, 4
    push $P106, 2
    push $P106, 124
    push $P106, 5
    push $P106, 2
    push $P106, 38
    push $P106, 6
    push $P106, 2
    push $P106, 38
    push $P106, 5
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 124
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "termaltseq"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 38
    push $P109, 5
    new $P110, "ResizablePMCArray"
    push $P110, $P103
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "21_1340317687.034_alt_nfa_22_1340317687.192"  :subid("202_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 39
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 124
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 124
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 124
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P107
    push $P109, $P108
    new $P110, "ResizablePMCArray"
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 38
    push $P111, 2
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 38
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    new $P114, "ResizablePMCArray"
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 38
    push $P115, 0
    new $P116, "ResizablePMCArray"
    push $P116, $P114
    push $P116, $P115
    new $P117, "ResizablePMCArray"
    push $P117, $P106
    push $P117, $P109
    push $P117, $P113
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "termaltseq"  :subid("23_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1075
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 45
    .lex "self", param_1075
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1076
    .lex "$/", $P1077
    .local string rx57_tgt
    .local int rx57_pos
    .local int rx57_off
    .local int rx57_eos
    .local int rx57_rep
    .local pmc rx57_cur
    .local pmc rx57_curclass
    .local pmc rx57_bstack
    .local pmc rx57_cstack
    (rx57_cur, rx57_tgt, rx57_pos, rx57_curclass, rx57_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx57_cur
    length rx57_eos, rx57_tgt
    eq $I19, 1, rx57_restart
    repr_get_attr_int $I11, self, rx57_curclass, "$!from"
    ne $I11, -1, rxscan58_done
    goto rxscan58_scan
  rxscan58_loop:
    inc rx57_pos
    gt rx57_pos, rx57_eos, rx57_fail
    repr_bind_attr_int rx57_cur, rx57_curclass, "$!from", rx57_pos
  rxscan58_scan:
    nqp_rxmark rx57_bstack, rxscan58_loop, rx57_pos, 0
  rxscan58_done:
    repr_bind_attr_int rx57_cur, rx57_curclass, "$!pos", rx57_pos
    $P11 = rx57_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx57_curclass, "$!pos"
    lt $I11, 0, rx57_fail
    nqp_rxmark rx57_bstack, rxsubrule59_pass, -1, 0
  rxsubrule59_pass:
    rx57_cstack = rx57_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx57_pos, $P11, rx57_curclass, "$!pos"
  # rx rxquantr60 ** 0..-1
    nqp_rxmark rx57_bstack, rxquantr60_done, rx57_pos, 0
  rxquantr60_loop:
    add $I11, rx57_pos, 2
    gt $I11, rx57_eos, rx57_fail
    substr $S10, rx57_tgt, rx57_pos, 2
    ne $S10, ucs4:"||", rx57_fail
    add rx57_pos, 2
  alt61_0:
    nqp_rxmark rx57_bstack, alt61_1, rx57_pos, 0
    repr_bind_attr_int rx57_cur, rx57_curclass, "$!pos", rx57_pos
    $P11 = rx57_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx57_curclass, "$!pos"
    lt $I11, 0, rx57_fail
    nqp_rxmark rx57_bstack, rxsubrule62_pass, -1, 0
  rxsubrule62_pass:
    rx57_cstack = rx57_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx57_pos, $P11, rx57_curclass, "$!pos"
    goto alt61_end
  alt61_1:
    repr_bind_attr_int rx57_cur, rx57_curclass, "$!pos", rx57_pos
    $P11 = rx57_cur."panic"("Null pattern not allowed")
    repr_get_attr_int $I11, $P11, rx57_curclass, "$!pos"
    lt $I11, 0, rx57_fail
    repr_get_attr_int rx57_pos, $P11, rx57_curclass, "$!pos"
  alt61_end:
    nqp_rxpeek $I19, rx57_bstack, rxquantr60_done
    inc $I19
    inc $I19
    set rx57_rep, rx57_bstack[$I19]
    nqp_rxcommit rx57_bstack, rxquantr60_done
    inc rx57_rep
    nqp_rxmark rx57_bstack, rxquantr60_done, rx57_pos, rx57_rep
    goto rxquantr60_loop
  rxquantr60_done:
    rx57_cur."!cursor_pass"(rx57_pos, "termaltseq", 'backtrack'=>1)
    .return (rx57_cur)
  rx57_restart:
    repr_get_attr_obj rx57_cstack, rx57_cur, rx57_curclass, "$!cstack"
  rx57_fail:
    unless rx57_bstack, rx57_done
    pop $I19, rx57_bstack
    if_null rx57_cstack, rx57_cstack_done
    unless rx57_cstack, rx57_cstack_done
    dec $I19
    set $P11, rx57_cstack[$I19]
  rx57_cstack_done:
    pop rx57_rep, rx57_bstack
    pop rx57_pos, rx57_bstack
    pop $I19, rx57_bstack
    lt rx57_pos, -1, rx57_done
    lt rx57_pos, 0, rx57_fail
    eq $I19, 0, rx57_fail
    if_null rx57_cstack, rx57_jump
    elements $I18, rx57_bstack
    le $I18, 0, rx57_cut
    dec $I18
    set $I18, rx57_bstack[$I18]
  rx57_cut:
    assign rx57_cstack, $I18
  rx57_jump:
    jump $I19
  rx57_done:
    rx57_cur."!cursor_fail"()
    .return (rx57_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "23_1340317687.034_caps"  :subid("203_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 45
    new $P103, "Hash"
    set $P103["termconjseq"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "23_1340317687.034_nfa"  :subid("204_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 45
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "termconjseq"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 124
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 124
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P103
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "termconjseq"  :subid("24_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1081
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 50
    .lex "self", param_1081
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1082
    .lex "$/", $P1083
    .local string rx64_tgt
    .local int rx64_pos
    .local int rx64_off
    .local int rx64_eos
    .local int rx64_rep
    .local pmc rx64_cur
    .local pmc rx64_curclass
    .local pmc rx64_bstack
    .local pmc rx64_cstack
    (rx64_cur, rx64_tgt, rx64_pos, rx64_curclass, rx64_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx64_cur
    length rx64_eos, rx64_tgt
    eq $I19, 1, rx64_restart
    repr_get_attr_int $I11, self, rx64_curclass, "$!from"
    ne $I11, -1, rxscan65_done
    goto rxscan65_scan
  rxscan65_loop:
    inc rx64_pos
    gt rx64_pos, rx64_eos, rx64_fail
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!from", rx64_pos
  rxscan65_scan:
    nqp_rxmark rx64_bstack, rxscan65_loop, rx64_pos, 0
  rxscan65_done:
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!pos", rx64_pos
    $P11 = rx64_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx64_curclass, "$!pos"
    lt $I11, 0, rx64_fail
    nqp_rxmark rx64_bstack, rxsubrule66_pass, -1, 0
  rxsubrule66_pass:
    rx64_cstack = rx64_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx64_pos, $P11, rx64_curclass, "$!pos"
  # rx rxquantr67 ** 0..-1
    nqp_rxmark rx64_bstack, rxquantr67_done, rx64_pos, 0
  rxquantr67_loop:
    add $I11, rx64_pos, 2
    gt $I11, rx64_eos, rx64_fail
    substr $S10, rx64_tgt, rx64_pos, 2
    ne $S10, ucs4:"&&", rx64_fail
    add rx64_pos, 2
  alt68_0:
    nqp_rxmark rx64_bstack, alt68_1, rx64_pos, 0
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!pos", rx64_pos
    $P11 = rx64_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx64_curclass, "$!pos"
    lt $I11, 0, rx64_fail
    nqp_rxmark rx64_bstack, rxsubrule69_pass, -1, 0
  rxsubrule69_pass:
    rx64_cstack = rx64_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx64_pos, $P11, rx64_curclass, "$!pos"
    goto alt68_end
  alt68_1:
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!pos", rx64_pos
    $P11 = rx64_cur."panic"("Null pattern not allowed")
    repr_get_attr_int $I11, $P11, rx64_curclass, "$!pos"
    lt $I11, 0, rx64_fail
    repr_get_attr_int rx64_pos, $P11, rx64_curclass, "$!pos"
  alt68_end:
    nqp_rxpeek $I19, rx64_bstack, rxquantr67_done
    inc $I19
    inc $I19
    set rx64_rep, rx64_bstack[$I19]
    nqp_rxcommit rx64_bstack, rxquantr67_done
    inc rx64_rep
    nqp_rxmark rx64_bstack, rxquantr67_done, rx64_pos, rx64_rep
    goto rxquantr67_loop
  rxquantr67_done:
    rx64_cur."!cursor_pass"(rx64_pos, "termconjseq", 'backtrack'=>1)
    .return (rx64_cur)
  rx64_restart:
    repr_get_attr_obj rx64_cstack, rx64_cur, rx64_curclass, "$!cstack"
  rx64_fail:
    unless rx64_bstack, rx64_done
    pop $I19, rx64_bstack
    if_null rx64_cstack, rx64_cstack_done
    unless rx64_cstack, rx64_cstack_done
    dec $I19
    set $P11, rx64_cstack[$I19]
  rx64_cstack_done:
    pop rx64_rep, rx64_bstack
    pop rx64_pos, rx64_bstack
    pop $I19, rx64_bstack
    lt rx64_pos, -1, rx64_done
    lt rx64_pos, 0, rx64_fail
    eq $I19, 0, rx64_fail
    if_null rx64_cstack, rx64_jump
    elements $I18, rx64_bstack
    le $I18, 0, rx64_cut
    dec $I18
    set $I18, rx64_bstack[$I18]
  rx64_cut:
    assign rx64_cstack, $I18
  rx64_jump:
    jump $I19
  rx64_done:
    rx64_cur."!cursor_fail"()
    .return (rx64_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "24_1340317687.034_caps"  :subid("205_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 50
    new $P103, "Hash"
    set $P103["termalt"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "24_1340317687.034_nfa"  :subid("206_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 50
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "termalt"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 38
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 38
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P103
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "termalt"  :subid("25_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1087
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 55
    .lex "self", param_1087
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1088
    .lex "$/", $P1089
    .local string rx71_tgt
    .local int rx71_pos
    .local int rx71_off
    .local int rx71_eos
    .local int rx71_rep
    .local pmc rx71_cur
    .local pmc rx71_curclass
    .local pmc rx71_bstack
    .local pmc rx71_cstack
    (rx71_cur, rx71_tgt, rx71_pos, rx71_curclass, rx71_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx71_cur
    length rx71_eos, rx71_tgt
    eq $I19, 1, rx71_restart
    repr_get_attr_int $I11, self, rx71_curclass, "$!from"
    ne $I11, -1, rxscan72_done
    goto rxscan72_scan
  rxscan72_loop:
    inc rx71_pos
    gt rx71_pos, rx71_eos, rx71_fail
    repr_bind_attr_int rx71_cur, rx71_curclass, "$!from", rx71_pos
  rxscan72_scan:
    nqp_rxmark rx71_bstack, rxscan72_loop, rx71_pos, 0
  rxscan72_done:
    repr_bind_attr_int rx71_cur, rx71_curclass, "$!pos", rx71_pos
    $P11 = rx71_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx71_curclass, "$!pos"
    lt $I11, 0, rx71_fail
    nqp_rxmark rx71_bstack, rxsubrule73_pass, -1, 0
  rxsubrule73_pass:
    rx71_cstack = rx71_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx71_pos, $P11, rx71_curclass, "$!pos"
  # rx rxquantr74 ** 0..-1
    nqp_rxmark rx71_bstack, rxquantr74_done, rx71_pos, 0
  rxquantr74_loop:
    add $I11, rx71_pos, 1
    gt $I11, rx71_eos, rx71_fail
    substr $S10, rx71_tgt, rx71_pos, 1
    ne $S10, ucs4:"|", rx71_fail
    add rx71_pos, 1
    ge rx71_pos, rx71_eos, rx71_fail
    substr $S11, rx71_tgt, rx71_pos, 1
    index $I11, ucs4:"|", $S11
    ge $I11, 0, rx71_fail
  alt75_0:
    nqp_rxmark rx71_bstack, alt75_1, rx71_pos, 0
    repr_bind_attr_int rx71_cur, rx71_curclass, "$!pos", rx71_pos
    $P11 = rx71_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx71_curclass, "$!pos"
    lt $I11, 0, rx71_fail
    nqp_rxmark rx71_bstack, rxsubrule76_pass, -1, 0
  rxsubrule76_pass:
    rx71_cstack = rx71_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx71_pos, $P11, rx71_curclass, "$!pos"
    goto alt75_end
  alt75_1:
    repr_bind_attr_int rx71_cur, rx71_curclass, "$!pos", rx71_pos
    $P11 = rx71_cur."panic"("Null pattern not allowed")
    repr_get_attr_int $I11, $P11, rx71_curclass, "$!pos"
    lt $I11, 0, rx71_fail
    repr_get_attr_int rx71_pos, $P11, rx71_curclass, "$!pos"
  alt75_end:
    nqp_rxpeek $I19, rx71_bstack, rxquantr74_done
    inc $I19
    inc $I19
    set rx71_rep, rx71_bstack[$I19]
    nqp_rxcommit rx71_bstack, rxquantr74_done
    inc rx71_rep
    nqp_rxmark rx71_bstack, rxquantr74_done, rx71_pos, rx71_rep
    goto rxquantr74_loop
  rxquantr74_done:
    rx71_cur."!cursor_pass"(rx71_pos, "termalt", 'backtrack'=>1)
    .return (rx71_cur)
  rx71_restart:
    repr_get_attr_obj rx71_cstack, rx71_cur, rx71_curclass, "$!cstack"
  rx71_fail:
    unless rx71_bstack, rx71_done
    pop $I19, rx71_bstack
    if_null rx71_cstack, rx71_cstack_done
    unless rx71_cstack, rx71_cstack_done
    dec $I19
    set $P11, rx71_cstack[$I19]
  rx71_cstack_done:
    pop rx71_rep, rx71_bstack
    pop rx71_pos, rx71_bstack
    pop $I19, rx71_bstack
    lt rx71_pos, -1, rx71_done
    lt rx71_pos, 0, rx71_fail
    eq $I19, 0, rx71_fail
    if_null rx71_cstack, rx71_jump
    elements $I18, rx71_bstack
    le $I18, 0, rx71_cut
    dec $I18
    set $I18, rx71_bstack[$I18]
  rx71_cut:
    assign rx71_cstack, $I18
  rx71_jump:
    jump $I19
  rx71_done:
    rx71_cur."!cursor_fail"()
    .return (rx71_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "25_1340317687.034_caps"  :subid("207_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 55
    new $P103, "Hash"
    set $P103["termconj"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "25_1340317687.034_nfa"  :subid("208_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 55
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "termconj"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 124
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 7
    push $P106, "|"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P103
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "termconj"  :subid("26_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1093
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 60
    .lex "self", param_1093
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1094
    .lex "$/", $P1095
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    (rx78_cur, rx78_tgt, rx78_pos, rx78_curclass, rx78_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done
    goto rxscan79_scan
  rxscan79_loop:
    inc rx78_pos
    gt rx78_pos, rx78_eos, rx78_fail
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan:
    nqp_rxmark rx78_bstack, rxscan79_loop, rx78_pos, 0
  rxscan79_done:
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."termish"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail
    nqp_rxmark rx78_bstack, rxsubrule80_pass, -1, 0
  rxsubrule80_pass:
    rx78_cstack = rx78_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
  # rx rxquantr81 ** 0..-1
    nqp_rxmark rx78_bstack, rxquantr81_done, rx78_pos, 0
  rxquantr81_loop:
    add $I11, rx78_pos, 1
    gt $I11, rx78_eos, rx78_fail
    substr $S10, rx78_tgt, rx78_pos, 1
    ne $S10, ucs4:"&", rx78_fail
    add rx78_pos, 1
    ge rx78_pos, rx78_eos, rx78_fail
    substr $S11, rx78_tgt, rx78_pos, 1
    index $I11, ucs4:"&", $S11
    ge $I11, 0, rx78_fail
  alt82_0:
    nqp_rxmark rx78_bstack, alt82_1, rx78_pos, 0
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."termish"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail
    nqp_rxmark rx78_bstack, rxsubrule83_pass, -1, 0
  rxsubrule83_pass:
    rx78_cstack = rx78_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
    goto alt82_end
  alt82_1:
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."panic"("Null pattern not allowed")
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
  alt82_end:
    nqp_rxpeek $I19, rx78_bstack, rxquantr81_done
    inc $I19
    inc $I19
    set rx78_rep, rx78_bstack[$I19]
    nqp_rxcommit rx78_bstack, rxquantr81_done
    inc rx78_rep
    nqp_rxmark rx78_bstack, rxquantr81_done, rx78_pos, rx78_rep
    goto rxquantr81_loop
  rxquantr81_done:
    rx78_cur."!cursor_pass"(rx78_pos, "termconj", 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail:
    unless rx78_bstack, rx78_done
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done
    unless rx78_cstack, rx78_cstack_done
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done
    lt rx78_pos, 0, rx78_fail
    eq $I19, 0, rx78_fail
    if_null rx78_cstack, rx78_jump
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut:
    assign rx78_cstack, $I18
  rx78_jump:
    jump $I19
  rx78_done:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "26_1340317687.034_caps"  :subid("209_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 60
    new $P103, "Hash"
    set $P103["termish"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "26_1340317687.034_nfa"  :subid("210_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 60
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "termish"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 38
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 7
    push $P106, "&"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P103
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "termish"  :subid("28_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1099
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 65
    .const 'Sub' $P1109 = "214_1340317687.034" 
    capture_lex $P1109
    .const 'Sub' $P1104 = "27_1340317687.034" 
    capture_lex $P1104
    .lex "self", param_1099
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1100
    .lex "$/", $P1101
    .local string rx85_tgt
    .local int rx85_pos
    .local int rx85_off
    .local int rx85_eos
    .local int rx85_rep
    .local pmc rx85_cur
    .local pmc rx85_curclass
    .local pmc rx85_bstack
    .local pmc rx85_cstack
    (rx85_cur, rx85_tgt, rx85_pos, rx85_curclass, rx85_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx85_cur
    length rx85_eos, rx85_tgt
    eq $I19, 1, rx85_restart
    repr_get_attr_int $I11, self, rx85_curclass, "$!from"
    ne $I11, -1, rxscan86_done
    goto rxscan86_scan
  rxscan86_loop:
    inc rx85_pos
    gt rx85_pos, rx85_eos, rx85_fail
    repr_bind_attr_int rx85_cur, rx85_curclass, "$!from", rx85_pos
  rxscan86_scan:
    nqp_rxmark rx85_bstack, rxscan86_loop, rx85_pos, 0
  rxscan86_done:
  alt87_0:
    nqp_rxmark rx85_bstack, alt87_1, rx85_pos, 0
  # rx rxquantr88 ** 1..-1
    nqp_rxmark rx85_bstack, rxquantr88_done, -1, 0
  rxquantr88_loop:
    repr_bind_attr_int rx85_cur, rx85_curclass, "$!pos", rx85_pos
    $P11 = rx85_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx85_curclass, "$!pos"
    lt $I11, 0, rx85_fail
    goto rxsubrule89_pass
  rxsubrule89_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx85_curclass, "$!pos"
    lt $I11, 0, rx85_fail
  rxsubrule89_pass:
    rx85_cstack = rx85_cur."!cursor_capture"($P11, "noun")
    set_addr $I11, rxsubrule89_back
    push rx85_bstack, $I11
    push rx85_bstack, 0
    push rx85_bstack, rx85_pos
    elements $I11, rx85_cstack
    push rx85_bstack, $I11
    repr_get_attr_int rx85_pos, $P11, rx85_curclass, "$!pos"
    nqp_rxpeek $I19, rx85_bstack, rxquantr88_done
    inc $I19
    inc $I19
    set rx85_rep, rx85_bstack[$I19]
    nqp_rxcommit rx85_bstack, rxquantr88_done
    inc rx85_rep
    nqp_rxmark rx85_bstack, rxquantr88_done, rx85_pos, rx85_rep
    goto rxquantr88_loop
  rxquantr88_done:
    goto alt87_end
  alt87_1:
    .const 'Sub' $P1104 = "27_1340317687.034" 
    capture_lex $P1104
    repr_bind_attr_int rx85_cur, rx85_curclass, "$!pos", rx85_pos
    $P11 = rx85_cur.$P1104()
    repr_get_attr_int $I11, $P11, rx85_curclass, "$!pos"
    lt $I11, 0, rx85_fail
    nqp_rxmark rx85_bstack, rxsubrule92_pass, -1, 0
  rxsubrule92_pass:
    rx85_cstack = rx85_cur."!cursor_capture"($P11, 0)
    repr_get_attr_int rx85_pos, $P11, rx85_curclass, "$!pos"
    repr_bind_attr_int rx85_cur, rx85_curclass, "$!pos", rx85_pos
    store_lex unicode:"$\x{a2}", rx85_cur
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
.annotate 'line', 67
    .const 'Sub' $P1109 = "214_1340317687.034" 
    capture_lex $P1109
    $P106 = $P1109()
  alt87_end:
.annotate 'line', 65
    rx85_cur."!cursor_pass"(rx85_pos, "termish", 'backtrack'=>1)
    .return (rx85_cur)
  rx85_restart:
    repr_get_attr_obj rx85_cstack, rx85_cur, rx85_curclass, "$!cstack"
  rx85_fail:
    unless rx85_bstack, rx85_done
    pop $I19, rx85_bstack
    if_null rx85_cstack, rx85_cstack_done
    unless rx85_cstack, rx85_cstack_done
    dec $I19
    set $P11, rx85_cstack[$I19]
  rx85_cstack_done:
    pop rx85_rep, rx85_bstack
    pop rx85_pos, rx85_bstack
    pop $I19, rx85_bstack
    lt rx85_pos, -1, rx85_done
    lt rx85_pos, 0, rx85_fail
    eq $I19, 0, rx85_fail
    if_null rx85_cstack, rx85_jump
    elements $I18, rx85_bstack
    le $I18, 0, rx85_cut
    dec $I18
    set $I18, rx85_bstack[$I18]
  rx85_cut:
    assign rx85_cstack, $I18
  rx85_jump:
    jump $I19
  rx85_done:
    rx85_cur."!cursor_fail"()
    .return (rx85_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "28_1340317687.034_caps"  :subid("211_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 65
    new $P103, "Hash"
    set $P103["noun"], 2
    set $P103["0"], 1
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1103"  :anon :subid("27_1340317687.034") :method :outer("28_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 65
    .lex unicode:"$\x{a2}", $P1107
    .local string rx90_tgt
    .local int rx90_pos
    .local int rx90_off
    .local int rx90_eos
    .local int rx90_rep
    .local pmc rx90_cur
    .local pmc rx90_curclass
    .local pmc rx90_bstack
    .local pmc rx90_cstack
    (rx90_cur, rx90_tgt, rx90_pos, rx90_curclass, rx90_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx90_cur
    length rx90_eos, rx90_tgt
    eq $I19, 1, rx90_restart
    repr_get_attr_int $I11, self, rx90_curclass, "$!from"
    ne $I11, -1, rxscan91_done
    goto rxscan91_scan
  rxscan91_loop:
    inc rx90_pos
    gt rx90_pos, rx90_eos, rx90_fail
    repr_bind_attr_int rx90_cur, rx90_curclass, "$!from", rx90_pos
  rxscan91_scan:
    nqp_rxmark rx90_bstack, rxscan91_loop, rx90_pos, 0
  rxscan91_done:
    ge rx90_pos, rx90_eos, rx90_fail
    is_cclass $I11, .CCLASS_WORD, rx90_tgt, rx90_pos
    if $I11, rx90_fail
    add rx90_pos, 1
    rx90_cur."!cursor_pass"(rx90_pos, 'backtrack'=>1)
    .return (rx90_cur)
  rx90_restart:
    repr_get_attr_obj rx90_cstack, rx90_cur, rx90_curclass, "$!cstack"
  rx90_fail:
    unless rx90_bstack, rx90_done
    pop $I19, rx90_bstack
    if_null rx90_cstack, rx90_cstack_done
    unless rx90_cstack, rx90_cstack_done
    dec $I19
    set $P11, rx90_cstack[$I19]
  rx90_cstack_done:
    pop rx90_rep, rx90_bstack
    pop rx90_pos, rx90_bstack
    pop $I19, rx90_bstack
    lt rx90_pos, -1, rx90_done
    lt rx90_pos, 0, rx90_fail
    eq $I19, 0, rx90_fail
    if_null rx90_cstack, rx90_jump
    elements $I18, rx90_bstack
    le $I18, 0, rx90_cut
    dec $I18
    set $I18, rx90_bstack[$I18]
  rx90_cut:
    assign rx90_cstack, $I18
  rx90_jump:
    jump $I19
  rx90_done:
    rx90_cur."!cursor_fail"()
    .return (rx90_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "27_1340317687.034_caps"  :subid("212_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 65
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "27_1340317687.034_nfa"  :subid("213_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 65
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 5
    push $P104, 8192
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1108"  :anon :subid("214_1340317687.034") :outer("28_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 68
    new $P105, "Undef"
    set $P1110, $P105
    .lex "$char", $P1110
    find_lex $P1111, "$/"
    unless_null $P1111, vivify_432
    $P1111 = root_new ['parrot';'ResizablePMCArray']
  vivify_432:
    set $P106, $P1111[0]
    unless_null $P106, vivify_433
    new $P106, "Undef"
  vivify_433:
    set $S100, $P106
    new $P107, 'String'
    set $P107, $S100
    set $P1110, $P107
.annotate 'line', 69
    find_lex $P106, "$/"
    unless_null $P106, vivify_434
    new $P106, "Undef"
  vivify_434:
    $P107 = $P106."CURSOR"()
    new $P108, 'String'
    set $P108, "Unrecognized regex metacharacter "
    set $P109, $P1110
    unless_null $P109, vivify_435
    new $P109, "Undef"
  vivify_435:
    concat $P110, $P108, $P109
    concat $P111, $P110, " (must be quoted to match literally)"
    $P112 = $P107."panic"($P111)
.annotate 'line', 67
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "quantified_atom"  :subid("30_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1113
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 73
    .const 'Sub' $P1120 = "29_1340317687.034" 
    capture_lex $P1120
    .lex "self", param_1113
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1114
    .lex "$/", $P1115
    .local string rx93_tgt
    .local int rx93_pos
    .local int rx93_off
    .local int rx93_eos
    .local int rx93_rep
    .local pmc rx93_cur
    .local pmc rx93_curclass
    .local pmc rx93_bstack
    .local pmc rx93_cstack
    (rx93_cur, rx93_tgt, rx93_pos, rx93_curclass, rx93_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx93_cur
    length rx93_eos, rx93_tgt
    eq $I19, 1, rx93_restart
    repr_get_attr_int $I11, self, rx93_curclass, "$!from"
    ne $I11, -1, rxscan94_done
    goto rxscan94_scan
  rxscan94_loop:
    inc rx93_pos
    gt rx93_pos, rx93_eos, rx93_fail
    repr_bind_attr_int rx93_cur, rx93_curclass, "$!from", rx93_pos
  rxscan94_scan:
    nqp_rxmark rx93_bstack, rxscan94_loop, rx93_pos, 0
  rxscan94_done:
    repr_bind_attr_int rx93_cur, rx93_curclass, "$!pos", rx93_pos
    $P11 = rx93_cur."atom"()
    repr_get_attr_int $I11, $P11, rx93_curclass, "$!pos"
    lt $I11, 0, rx93_fail
    nqp_rxmark rx93_bstack, rxsubrule95_pass, -1, 0
  rxsubrule95_pass:
    rx93_cstack = rx93_cur."!cursor_capture"($P11, "atom")
    repr_get_attr_int rx93_pos, $P11, rx93_curclass, "$!pos"
  # rx rxquantr96 ** 0..1
    nqp_rxmark rx93_bstack, rxquantr96_done, rx93_pos, 0
  rxquantr96_loop:
    repr_bind_attr_int rx93_cur, rx93_curclass, "$!pos", rx93_pos
    $P11 = rx93_cur."ws"()
    repr_get_attr_int $I11, $P11, rx93_curclass, "$!pos"
    lt $I11, 0, rx93_fail
    repr_get_attr_int rx93_pos, $P11, rx93_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt98_0
    nqp_push_label $P11, alt98_1
    nqp_rxmark rx93_bstack, alt98_end, -1, 0
    rx93_cur."!alt"(rx93_pos, ucs4:"alt_nfa_31_1340317687.287", $P11)
    goto rx93_fail
  alt98_0:
    repr_bind_attr_int rx93_cur, rx93_curclass, "$!pos", rx93_pos
    $P11 = rx93_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx93_curclass, "$!pos"
    lt $I11, 0, rx93_fail
    nqp_rxmark rx93_bstack, rxsubrule99_pass, -1, 0
  rxsubrule99_pass:
    rx93_cstack = rx93_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx93_pos, $P11, rx93_curclass, "$!pos"
    goto alt98_end
  alt98_1:
    .const 'Sub' $P1120 = "29_1340317687.034" 
    capture_lex $P1120
    repr_bind_attr_int rx93_cur, rx93_curclass, "$!pos", rx93_pos
    $P11 = rx93_cur."before"($P1120)
    repr_get_attr_int $I11, $P11, rx93_curclass, "$!pos"
    lt $I11, 0, rx93_fail
    repr_bind_attr_int rx93_cur, rx93_curclass, "$!pos", rx93_pos
    $P11 = rx93_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx93_curclass, "$!pos"
    lt $I11, 0, rx93_fail
    nqp_rxmark rx93_bstack, rxsubrule102_pass, -1, 0
  rxsubrule102_pass:
    rx93_cstack = rx93_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx93_pos, $P11, rx93_curclass, "$!pos"
    repr_bind_attr_int rx93_cur, rx93_curclass, "$!pos", rx93_pos
    $P11 = rx93_cur."alpha"()
    repr_get_attr_int $I11, $P11, rx93_curclass, "$!pos"
    ge $I11, 0, rx93_fail
    goto alt98_end
  alt98_end:
    nqp_rxcommit rx93_bstack, alt98_end
  # rx rxquantr103 ** 0..1
    nqp_rxmark rx93_bstack, rxquantr103_done, rx93_pos, 0
  rxquantr103_loop:
    repr_bind_attr_int rx93_cur, rx93_curclass, "$!pos", rx93_pos
    $P11 = rx93_cur."ws"()
    repr_get_attr_int $I11, $P11, rx93_curclass, "$!pos"
    lt $I11, 0, rx93_fail
    repr_get_attr_int rx93_pos, $P11, rx93_curclass, "$!pos"
    repr_bind_attr_int rx93_cur, rx93_curclass, "$!pos", rx93_pos
    $P11 = rx93_cur."separator"()
    repr_get_attr_int $I11, $P11, rx93_curclass, "$!pos"
    lt $I11, 0, rx93_fail
    nqp_rxmark rx93_bstack, rxsubrule105_pass, -1, 0
  rxsubrule105_pass:
    rx93_cstack = rx93_cur."!cursor_capture"($P11, "separator")
    repr_get_attr_int rx93_pos, $P11, rx93_curclass, "$!pos"
    nqp_rxpeek $I19, rx93_bstack, rxquantr103_done
    inc $I19
    inc $I19
    set rx93_rep, rx93_bstack[$I19]
    nqp_rxcommit rx93_bstack, rxquantr103_done
    inc rx93_rep
  rxquantr103_done:
    nqp_rxpeek $I19, rx93_bstack, rxquantr96_done
    inc $I19
    inc $I19
    set rx93_rep, rx93_bstack[$I19]
    nqp_rxcommit rx93_bstack, rxquantr96_done
    inc rx93_rep
  rxquantr96_done:
    rx93_cur."!cursor_pass"(rx93_pos, "quantified_atom", 'backtrack'=>1)
    .return (rx93_cur)
  rx93_restart:
    repr_get_attr_obj rx93_cstack, rx93_cur, rx93_curclass, "$!cstack"
  rx93_fail:
    unless rx93_bstack, rx93_done
    pop $I19, rx93_bstack
    if_null rx93_cstack, rx93_cstack_done
    unless rx93_cstack, rx93_cstack_done
    dec $I19
    set $P11, rx93_cstack[$I19]
  rx93_cstack_done:
    pop rx93_rep, rx93_bstack
    pop rx93_pos, rx93_bstack
    pop $I19, rx93_bstack
    lt rx93_pos, -1, rx93_done
    lt rx93_pos, 0, rx93_fail
    eq $I19, 0, rx93_fail
    if_null rx93_cstack, rx93_jump
    elements $I18, rx93_bstack
    le $I18, 0, rx93_cut
    dec $I18
    set $I18, rx93_bstack[$I18]
  rx93_cut:
    assign rx93_cstack, $I18
  rx93_jump:
    jump $I19
  rx93_done:
    rx93_cur."!cursor_fail"()
    .return (rx93_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "30_1340317687.034_caps"  :subid("215_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 73
    new $P103, "Hash"
    set $P103["atom"], 0
    set $P103["quantifier"], 2
    set $P103["backmod"], 2
    set $P103["separator"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "30_1340317687.034_nfa"  :subid("216_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 73
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "atom"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "ws"
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "quantifier"
    push $P106, 4
    push $P106, 2
    push $P106, 58
    push $P106, 5
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ws"
    push $P107, 6
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "separator"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P103
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "30_1340317687.034_alt_nfa_31_1340317687.287"  :subid("217_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 73
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "quantifier"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 58
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    new $P110, "ResizablePMCArray"
    push $P110, $P105
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1119"  :anon :subid("29_1340317687.034") :method :outer("30_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 73
    .lex unicode:"$\x{a2}", $P1123
    .local string rx100_tgt
    .local int rx100_pos
    .local int rx100_off
    .local int rx100_eos
    .local int rx100_rep
    .local pmc rx100_cur
    .local pmc rx100_curclass
    .local pmc rx100_bstack
    .local pmc rx100_cstack
    (rx100_cur, rx100_tgt, rx100_pos, rx100_curclass, rx100_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx100_cur
    length rx100_eos, rx100_tgt
    eq $I19, 1, rx100_restart
    repr_get_attr_int $I11, self, rx100_curclass, "$!from"
    ne $I11, -1, rxscan101_done
    goto rxscan101_scan
  rxscan101_loop:
    inc rx100_pos
    gt rx100_pos, rx100_eos, rx100_fail
    repr_bind_attr_int rx100_cur, rx100_curclass, "$!from", rx100_pos
  rxscan101_scan:
    nqp_rxmark rx100_bstack, rxscan101_loop, rx100_pos, 0
  rxscan101_done:
    add $I11, rx100_pos, 1
    gt $I11, rx100_eos, rx100_fail
    substr $S10, rx100_tgt, rx100_pos, 1
    ne $S10, ucs4:":", rx100_fail
    add rx100_pos, 1
    rx100_cur."!cursor_pass"(rx100_pos, 'backtrack'=>1)
    .return (rx100_cur)
  rx100_restart:
    repr_get_attr_obj rx100_cstack, rx100_cur, rx100_curclass, "$!cstack"
  rx100_fail:
    unless rx100_bstack, rx100_done
    pop $I19, rx100_bstack
    if_null rx100_cstack, rx100_cstack_done
    unless rx100_cstack, rx100_cstack_done
    dec $I19
    set $P11, rx100_cstack[$I19]
  rx100_cstack_done:
    pop rx100_rep, rx100_bstack
    pop rx100_pos, rx100_bstack
    pop $I19, rx100_bstack
    lt rx100_pos, -1, rx100_done
    lt rx100_pos, 0, rx100_fail
    eq $I19, 0, rx100_fail
    if_null rx100_cstack, rx100_jump
    elements $I18, rx100_bstack
    le $I18, 0, rx100_cut
    dec $I18
    set $I18, rx100_bstack[$I18]
  rx100_cut:
    assign rx100_cstack, $I18
  rx100_jump:
    jump $I19
  rx100_done:
    rx100_cur."!cursor_fail"()
    .return (rx100_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "29_1340317687.034_caps"  :subid("218_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 73
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "29_1340317687.034_nfa"  :subid("219_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 73
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 58
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "separator"  :subid("32_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1125
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 81
    .lex "self", param_1125
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1126
    .lex "$/", $P1127
    .local string rx106_tgt
    .local int rx106_pos
    .local int rx106_off
    .local int rx106_eos
    .local int rx106_rep
    .local pmc rx106_cur
    .local pmc rx106_curclass
    .local pmc rx106_bstack
    .local pmc rx106_cstack
    (rx106_cur, rx106_tgt, rx106_pos, rx106_curclass, rx106_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx106_cur
    length rx106_eos, rx106_tgt
    eq $I19, 1, rx106_restart
    repr_get_attr_int $I11, self, rx106_curclass, "$!from"
    ne $I11, -1, rxscan107_done
    goto rxscan107_scan
  rxscan107_loop:
    inc rx106_pos
    gt rx106_pos, rx106_eos, rx106_fail
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!from", rx106_pos
  rxscan107_scan:
    nqp_rxmark rx106_bstack, rxscan107_loop, rx106_pos, 0
  rxscan107_done:
    nqp_rxmark rx106_bstack, rxcap108_fail, rx106_pos, 0
    add $I11, rx106_pos, 1
    gt $I11, rx106_eos, rx106_fail
    substr $S10, rx106_tgt, rx106_pos, 1
    ne $S10, ucs4:"%", rx106_fail
    add rx106_pos, 1
  # rx rxquantr109 ** 0..1
    nqp_rxmark rx106_bstack, rxquantr109_done, rx106_pos, 0
  rxquantr109_loop:
    add $I11, rx106_pos, 1
    gt $I11, rx106_eos, rx106_fail
    substr $S10, rx106_tgt, rx106_pos, 1
    ne $S10, ucs4:"%", rx106_fail
    add rx106_pos, 1
    nqp_rxpeek $I19, rx106_bstack, rxquantr109_done
    inc $I19
    inc $I19
    set rx106_rep, rx106_bstack[$I19]
    nqp_rxcommit rx106_bstack, rxquantr109_done
    inc rx106_rep
  rxquantr109_done:
    nqp_rxpeek $I19, rx106_bstack, rxcap108_fail
    inc $I19
    set $I11, rx106_bstack[$I19]
    $P11 = rx106_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx106_pos)
    rx106_cstack = rx106_cur."!cursor_capture"($P11, "septype")
    goto rxcap108_done
  rxcap108_fail:
    goto rx106_fail
  rxcap108_done:
  # rx rxquantr110 ** 0..1
    nqp_rxmark rx106_bstack, rxquantr110_done, rx106_pos, 0
  rxquantr110_loop:
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail
    goto rxsubrule111_pass
  rxsubrule111_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail
  rxsubrule111_pass:
    rx106_cstack = rx106_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule111_back
    push rx106_bstack, $I11
    push rx106_bstack, 0
    push rx106_bstack, rx106_pos
    elements $I11, rx106_cstack
    push rx106_bstack, $I11
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
    nqp_rxpeek $I19, rx106_bstack, rxquantr110_done
    inc $I19
    inc $I19
    set rx106_rep, rx106_bstack[$I19]
    nqp_rxcommit rx106_bstack, rxquantr110_done
    inc rx106_rep
  rxquantr110_done:
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail
    nqp_rxmark rx106_bstack, rxsubrule112_pass, -1, 0
  rxsubrule112_pass:
    rx106_cstack = rx106_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
    rx106_cur."!cursor_pass"(rx106_pos, "separator", 'backtrack'=>1)
    .return (rx106_cur)
  rx106_restart:
    repr_get_attr_obj rx106_cstack, rx106_cur, rx106_curclass, "$!cstack"
  rx106_fail:
    unless rx106_bstack, rx106_done
    pop $I19, rx106_bstack
    if_null rx106_cstack, rx106_cstack_done
    unless rx106_cstack, rx106_cstack_done
    dec $I19
    set $P11, rx106_cstack[$I19]
  rx106_cstack_done:
    pop rx106_rep, rx106_bstack
    pop rx106_pos, rx106_bstack
    pop $I19, rx106_bstack
    lt rx106_pos, -1, rx106_done
    lt rx106_pos, 0, rx106_fail
    eq $I19, 0, rx106_fail
    if_null rx106_cstack, rx106_jump
    elements $I18, rx106_bstack
    le $I18, 0, rx106_cut
    dec $I18
    set $I18, rx106_bstack[$I18]
  rx106_cut:
    assign rx106_cstack, $I18
  rx106_jump:
    jump $I19
  rx106_done:
    rx106_cur."!cursor_fail"()
    .return (rx106_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "32_1340317687.034_caps"  :subid("220_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 81
    new $P103, "Hash"
    set $P103["septype"], 0
    set $P103["normspace"], 2
    set $P103["quantified_atom"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "32_1340317687.034_nfa"  :subid("221_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 81
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 37
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 37
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "normspace"
    push $P106, 4
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quantified_atom"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P103
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "atom"  :subid("34_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1131
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 85
    .const 'Sub' $P1138 = "33_1340317687.034" 
    capture_lex $P1138
    .lex "self", param_1131
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1132
    .lex "$/", $P1133
    .local string rx113_tgt
    .local int rx113_pos
    .local int rx113_off
    .local int rx113_eos
    .local int rx113_rep
    .local pmc rx113_cur
    .local pmc rx113_curclass
    .local pmc rx113_bstack
    .local pmc rx113_cstack
    (rx113_cur, rx113_tgt, rx113_pos, rx113_curclass, rx113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx113_cur
    length rx113_eos, rx113_tgt
    eq $I19, 1, rx113_restart
    repr_get_attr_int $I11, self, rx113_curclass, "$!from"
    ne $I11, -1, rxscan114_done
    goto rxscan114_scan
  rxscan114_loop:
    inc rx113_pos
    gt rx113_pos, rx113_eos, rx113_fail
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!from", rx113_pos
  rxscan114_scan:
    nqp_rxmark rx113_bstack, rxscan114_loop, rx113_pos, 0
  rxscan114_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt115_0
    nqp_push_label $P11, alt115_1
    nqp_rxmark rx113_bstack, alt115_end, -1, 0
    rx113_cur."!alt"(rx113_pos, ucs4:"alt_nfa_35_1340317687.308", $P11)
    goto rx113_fail
  alt115_0:
    ge rx113_pos, rx113_eos, rx113_fail
    is_cclass $I11, .CCLASS_WORD, rx113_tgt, rx113_pos
    unless $I11, rx113_fail
    add rx113_pos, 1
  # rx rxquantr116 ** 0..1
    nqp_rxmark rx113_bstack, rxquantr116_done, rx113_pos, 0
  rxquantr116_loop:
  # rx rxquantg117 ** 1..-1
  rxquantg117_loop:
    ge rx113_pos, rx113_eos, rx113_fail
    is_cclass $I11, .CCLASS_WORD, rx113_tgt, rx113_pos
    unless $I11, rx113_fail
    add rx113_pos, 1
    nqp_rxmark rx113_bstack, rxquantg117_done, rx113_pos, rx113_rep
    goto rxquantg117_loop
  rxquantg117_done:
    .const 'Sub' $P1138 = "33_1340317687.034" 
    capture_lex $P1138
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."before"($P1138)
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail
    nqp_rxpeek $I19, rx113_bstack, rxquantr116_done
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr116_done
    inc rx113_rep
  rxquantr116_done:
    goto alt115_end
  alt115_1:
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."metachar"()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail
    nqp_rxmark rx113_bstack, rxsubrule120_pass, -1, 0
  rxsubrule120_pass:
    rx113_cstack = rx113_cur."!cursor_capture"($P11, "metachar")
    repr_get_attr_int rx113_pos, $P11, rx113_curclass, "$!pos"
    goto alt115_end
  alt115_end:
    nqp_rxcommit rx113_bstack, alt115_end
    rx113_cur."!cursor_pass"(rx113_pos, "atom", 'backtrack'=>1)
    .return (rx113_cur)
  rx113_restart:
    repr_get_attr_obj rx113_cstack, rx113_cur, rx113_curclass, "$!cstack"
  rx113_fail:
    unless rx113_bstack, rx113_done
    pop $I19, rx113_bstack
    if_null rx113_cstack, rx113_cstack_done
    unless rx113_cstack, rx113_cstack_done
    dec $I19
    set $P11, rx113_cstack[$I19]
  rx113_cstack_done:
    pop rx113_rep, rx113_bstack
    pop rx113_pos, rx113_bstack
    pop $I19, rx113_bstack
    lt rx113_pos, -1, rx113_done
    lt rx113_pos, 0, rx113_fail
    eq $I19, 0, rx113_fail
    if_null rx113_cstack, rx113_jump
    elements $I18, rx113_bstack
    le $I18, 0, rx113_cut
    dec $I18
    set $I18, rx113_bstack[$I18]
  rx113_cut:
    assign rx113_cstack, $I18
  rx113_jump:
    jump $I19
  rx113_done:
    rx113_cur."!cursor_fail"()
    .return (rx113_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "34_1340317687.034_caps"  :subid("222_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 85
    new $P103, "Hash"
    set $P103["metachar"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "34_1340317687.034_nfa"  :subid("223_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 85
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 4
    push $P104, 8192
    push $P104, 2
    push $P104, 8
    push $P104, "metachar"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 4
    push $P106, 8192
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 3
    push $P107, 1
    push $P107, 0
    push $P107, 5
    push $P107, 4
    push $P107, 8192
    push $P107, 6
    new $P108, "ResizablePMCArray"
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P103
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "34_1340317687.034_alt_nfa_35_1340317687.308"  :subid("224_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 85
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 4
    push $P104, 8192
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 4
    push $P106, 8192
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 3
    push $P107, 1
    push $P107, 0
    push $P107, 5
    push $P107, 4
    push $P107, 8192
    push $P107, 6
    new $P108, "ResizablePMCArray"
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P103
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    new $P111, "ResizablePMCArray"
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "metachar"
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P111
    push $P113, $P112
    new $P114, "ResizablePMCArray"
    push $P114, $P110
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1137"  :anon :subid("33_1340317687.034") :method :outer("34_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 85
    .lex unicode:"$\x{a2}", $P1141
    .local string rx118_tgt
    .local int rx118_pos
    .local int rx118_off
    .local int rx118_eos
    .local int rx118_rep
    .local pmc rx118_cur
    .local pmc rx118_curclass
    .local pmc rx118_bstack
    .local pmc rx118_cstack
    (rx118_cur, rx118_tgt, rx118_pos, rx118_curclass, rx118_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx118_cur
    length rx118_eos, rx118_tgt
    eq $I19, 1, rx118_restart
    repr_get_attr_int $I11, self, rx118_curclass, "$!from"
    ne $I11, -1, rxscan119_done
    goto rxscan119_scan
  rxscan119_loop:
    inc rx118_pos
    gt rx118_pos, rx118_eos, rx118_fail
    repr_bind_attr_int rx118_cur, rx118_curclass, "$!from", rx118_pos
  rxscan119_scan:
    nqp_rxmark rx118_bstack, rxscan119_loop, rx118_pos, 0
  rxscan119_done:
    ge rx118_pos, rx118_eos, rx118_fail
    is_cclass $I11, .CCLASS_WORD, rx118_tgt, rx118_pos
    unless $I11, rx118_fail
    add rx118_pos, 1
    rx118_cur."!cursor_pass"(rx118_pos, 'backtrack'=>1)
    .return (rx118_cur)
  rx118_restart:
    repr_get_attr_obj rx118_cstack, rx118_cur, rx118_curclass, "$!cstack"
  rx118_fail:
    unless rx118_bstack, rx118_done
    pop $I19, rx118_bstack
    if_null rx118_cstack, rx118_cstack_done
    unless rx118_cstack, rx118_cstack_done
    dec $I19
    set $P11, rx118_cstack[$I19]
  rx118_cstack_done:
    pop rx118_rep, rx118_bstack
    pop rx118_pos, rx118_bstack
    pop $I19, rx118_bstack
    lt rx118_pos, -1, rx118_done
    lt rx118_pos, 0, rx118_fail
    eq $I19, 0, rx118_fail
    if_null rx118_cstack, rx118_jump
    elements $I18, rx118_bstack
    le $I18, 0, rx118_cut
    dec $I18
    set $I18, rx118_bstack[$I18]
  rx118_cut:
    assign rx118_cstack, $I18
  rx118_jump:
    jump $I19
  rx118_done:
    rx118_cur."!cursor_fail"()
    .return (rx118_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "33_1340317687.034_caps"  :subid("225_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 85
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "33_1340317687.034_nfa"  :subid("226_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 85
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 4
    push $P104, 8192
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "quantifier"  :subid("36_1340317687.034")
    .param pmc param_1143
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 93
    .lex "self", param_1143
    $P101 = param_1143."!protoregex"("quantifier")
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "quantifier:sym<*>"  :subid("37_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1145
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 94
    .lex "self", param_1145
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1146
    .lex "$/", $P1147
    .local string rx121_tgt
    .local int rx121_pos
    .local int rx121_off
    .local int rx121_eos
    .local int rx121_rep
    .local pmc rx121_cur
    .local pmc rx121_curclass
    .local pmc rx121_bstack
    .local pmc rx121_cstack
    (rx121_cur, rx121_tgt, rx121_pos, rx121_curclass, rx121_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx121_cur
    length rx121_eos, rx121_tgt
    eq $I19, 1, rx121_restart
    repr_get_attr_int $I11, self, rx121_curclass, "$!from"
    ne $I11, -1, rxscan122_done
    goto rxscan122_scan
  rxscan122_loop:
    inc rx121_pos
    gt rx121_pos, rx121_eos, rx121_fail
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!from", rx121_pos
  rxscan122_scan:
    nqp_rxmark rx121_bstack, rxscan122_loop, rx121_pos, 0
  rxscan122_done:
    nqp_rxmark rx121_bstack, rxcap123_fail, rx121_pos, 0
    add $I11, rx121_pos, 1
    gt $I11, rx121_eos, rx121_fail
    substr $S10, rx121_tgt, rx121_pos, 1
    ne $S10, ucs4:"*", rx121_fail
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxcap123_fail
    inc $I19
    set $I11, rx121_bstack[$I19]
    $P11 = rx121_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx121_pos)
    rx121_cstack = rx121_cur."!cursor_capture"($P11, "sym")
    goto rxcap123_done
  rxcap123_fail:
    goto rx121_fail
  rxcap123_done:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail
    nqp_rxmark rx121_bstack, rxsubrule124_pass, -1, 0
  rxsubrule124_pass:
    rx121_cstack = rx121_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
    rx121_cur."!cursor_pass"(rx121_pos, "quantifier:sym<*>", 'backtrack'=>1)
    .return (rx121_cur)
  rx121_restart:
    repr_get_attr_obj rx121_cstack, rx121_cur, rx121_curclass, "$!cstack"
  rx121_fail:
    unless rx121_bstack, rx121_done
    pop $I19, rx121_bstack
    if_null rx121_cstack, rx121_cstack_done
    unless rx121_cstack, rx121_cstack_done
    dec $I19
    set $P11, rx121_cstack[$I19]
  rx121_cstack_done:
    pop rx121_rep, rx121_bstack
    pop rx121_pos, rx121_bstack
    pop $I19, rx121_bstack
    lt rx121_pos, -1, rx121_done
    lt rx121_pos, 0, rx121_fail
    eq $I19, 0, rx121_fail
    if_null rx121_cstack, rx121_jump
    elements $I18, rx121_bstack
    le $I18, 0, rx121_cut
    dec $I18
    set $I18, rx121_bstack[$I18]
  rx121_cut:
    assign rx121_cstack, $I18
  rx121_jump:
    jump $I19
  rx121_done:
    rx121_cur."!cursor_fail"()
    .return (rx121_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "37_1340317687.034_caps"  :subid("227_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 94
    new $P103, "Hash"
    set $P103["sym"], 0
    set $P103["backmod"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "37_1340317687.034_nfa"  :subid("228_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 94
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 42
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "backmod"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "quantifier:sym<+>"  :subid("38_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1151
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 95
    .lex "self", param_1151
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1152
    .lex "$/", $P1153
    .local string rx125_tgt
    .local int rx125_pos
    .local int rx125_off
    .local int rx125_eos
    .local int rx125_rep
    .local pmc rx125_cur
    .local pmc rx125_curclass
    .local pmc rx125_bstack
    .local pmc rx125_cstack
    (rx125_cur, rx125_tgt, rx125_pos, rx125_curclass, rx125_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx125_cur
    length rx125_eos, rx125_tgt
    eq $I19, 1, rx125_restart
    repr_get_attr_int $I11, self, rx125_curclass, "$!from"
    ne $I11, -1, rxscan126_done
    goto rxscan126_scan
  rxscan126_loop:
    inc rx125_pos
    gt rx125_pos, rx125_eos, rx125_fail
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!from", rx125_pos
  rxscan126_scan:
    nqp_rxmark rx125_bstack, rxscan126_loop, rx125_pos, 0
  rxscan126_done:
    nqp_rxmark rx125_bstack, rxcap127_fail, rx125_pos, 0
    add $I11, rx125_pos, 1
    gt $I11, rx125_eos, rx125_fail
    substr $S10, rx125_tgt, rx125_pos, 1
    ne $S10, ucs4:"+", rx125_fail
    add rx125_pos, 1
    nqp_rxpeek $I19, rx125_bstack, rxcap127_fail
    inc $I19
    set $I11, rx125_bstack[$I19]
    $P11 = rx125_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx125_pos)
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "sym")
    goto rxcap127_done
  rxcap127_fail:
    goto rx125_fail
  rxcap127_done:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail
    nqp_rxmark rx125_bstack, rxsubrule128_pass, -1, 0
  rxsubrule128_pass:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    rx125_cur."!cursor_pass"(rx125_pos, "quantifier:sym<+>", 'backtrack'=>1)
    .return (rx125_cur)
  rx125_restart:
    repr_get_attr_obj rx125_cstack, rx125_cur, rx125_curclass, "$!cstack"
  rx125_fail:
    unless rx125_bstack, rx125_done
    pop $I19, rx125_bstack
    if_null rx125_cstack, rx125_cstack_done
    unless rx125_cstack, rx125_cstack_done
    dec $I19
    set $P11, rx125_cstack[$I19]
  rx125_cstack_done:
    pop rx125_rep, rx125_bstack
    pop rx125_pos, rx125_bstack
    pop $I19, rx125_bstack
    lt rx125_pos, -1, rx125_done
    lt rx125_pos, 0, rx125_fail
    eq $I19, 0, rx125_fail
    if_null rx125_cstack, rx125_jump
    elements $I18, rx125_bstack
    le $I18, 0, rx125_cut
    dec $I18
    set $I18, rx125_bstack[$I18]
  rx125_cut:
    assign rx125_cstack, $I18
  rx125_jump:
    jump $I19
  rx125_done:
    rx125_cur."!cursor_fail"()
    .return (rx125_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "38_1340317687.034_caps"  :subid("229_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 95
    new $P103, "Hash"
    set $P103["sym"], 0
    set $P103["backmod"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "38_1340317687.034_nfa"  :subid("230_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 95
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 43
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "backmod"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "quantifier:sym<?>"  :subid("39_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1157
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 96
    .lex "self", param_1157
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1158
    .lex "$/", $P1159
    .local string rx129_tgt
    .local int rx129_pos
    .local int rx129_off
    .local int rx129_eos
    .local int rx129_rep
    .local pmc rx129_cur
    .local pmc rx129_curclass
    .local pmc rx129_bstack
    .local pmc rx129_cstack
    (rx129_cur, rx129_tgt, rx129_pos, rx129_curclass, rx129_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx129_cur
    length rx129_eos, rx129_tgt
    eq $I19, 1, rx129_restart
    repr_get_attr_int $I11, self, rx129_curclass, "$!from"
    ne $I11, -1, rxscan130_done
    goto rxscan130_scan
  rxscan130_loop:
    inc rx129_pos
    gt rx129_pos, rx129_eos, rx129_fail
    repr_bind_attr_int rx129_cur, rx129_curclass, "$!from", rx129_pos
  rxscan130_scan:
    nqp_rxmark rx129_bstack, rxscan130_loop, rx129_pos, 0
  rxscan130_done:
    nqp_rxmark rx129_bstack, rxcap131_fail, rx129_pos, 0
    add $I11, rx129_pos, 1
    gt $I11, rx129_eos, rx129_fail
    substr $S10, rx129_tgt, rx129_pos, 1
    ne $S10, ucs4:"?", rx129_fail
    add rx129_pos, 1
    nqp_rxpeek $I19, rx129_bstack, rxcap131_fail
    inc $I19
    set $I11, rx129_bstack[$I19]
    $P11 = rx129_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx129_pos)
    rx129_cstack = rx129_cur."!cursor_capture"($P11, "sym")
    goto rxcap131_done
  rxcap131_fail:
    goto rx129_fail
  rxcap131_done:
    repr_bind_attr_int rx129_cur, rx129_curclass, "$!pos", rx129_pos
    $P11 = rx129_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx129_curclass, "$!pos"
    lt $I11, 0, rx129_fail
    nqp_rxmark rx129_bstack, rxsubrule132_pass, -1, 0
  rxsubrule132_pass:
    rx129_cstack = rx129_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx129_pos, $P11, rx129_curclass, "$!pos"
    rx129_cur."!cursor_pass"(rx129_pos, "quantifier:sym<?>", 'backtrack'=>1)
    .return (rx129_cur)
  rx129_restart:
    repr_get_attr_obj rx129_cstack, rx129_cur, rx129_curclass, "$!cstack"
  rx129_fail:
    unless rx129_bstack, rx129_done
    pop $I19, rx129_bstack
    if_null rx129_cstack, rx129_cstack_done
    unless rx129_cstack, rx129_cstack_done
    dec $I19
    set $P11, rx129_cstack[$I19]
  rx129_cstack_done:
    pop rx129_rep, rx129_bstack
    pop rx129_pos, rx129_bstack
    pop $I19, rx129_bstack
    lt rx129_pos, -1, rx129_done
    lt rx129_pos, 0, rx129_fail
    eq $I19, 0, rx129_fail
    if_null rx129_cstack, rx129_jump
    elements $I18, rx129_bstack
    le $I18, 0, rx129_cut
    dec $I18
    set $I18, rx129_bstack[$I18]
  rx129_cut:
    assign rx129_cstack, $I18
  rx129_jump:
    jump $I19
  rx129_done:
    rx129_cur."!cursor_fail"()
    .return (rx129_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "39_1340317687.034_caps"  :subid("231_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 96
    new $P103, "Hash"
    set $P103["sym"], 0
    set $P103["backmod"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "39_1340317687.034_nfa"  :subid("232_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 96
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 63
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "backmod"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "quantifier:sym<{N,M}>"  :subid("43_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1163
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    .const 'Sub' $P1180 = "42_1340317687.034" 
    capture_lex $P1180
    .const 'Sub' $P1175 = "41_1340317687.034" 
    capture_lex $P1175
    .const 'Sub' $P1170 = "40_1340317687.034" 
    capture_lex $P1170
    .const 'Sub' $P1168 = "234_1340317687.034" 
    capture_lex $P1168
    .lex "self", param_1163
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1164
    .lex "$/", $P1165
    .local string rx133_tgt
    .local int rx133_pos
    .local int rx133_off
    .local int rx133_eos
    .local int rx133_rep
    .local pmc rx133_cur
    .local pmc rx133_curclass
    .local pmc rx133_bstack
    .local pmc rx133_cstack
    (rx133_cur, rx133_tgt, rx133_pos, rx133_curclass, rx133_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx133_cur
    length rx133_eos, rx133_tgt
    eq $I19, 1, rx133_restart
    repr_get_attr_int $I11, self, rx133_curclass, "$!from"
    ne $I11, -1, rxscan134_done
    goto rxscan134_scan
  rxscan134_loop:
    inc rx133_pos
    gt rx133_pos, rx133_eos, rx133_fail
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!from", rx133_pos
  rxscan134_scan:
    nqp_rxmark rx133_bstack, rxscan134_loop, rx133_pos, 0
  rxscan134_done:
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!pos", rx133_pos
    store_lex unicode:"$\x{a2}", rx133_cur
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P1168 = "234_1340317687.034" 
    capture_lex $P1168
    $P105 = $P1168()
    add $I11, rx133_pos, 1
    gt $I11, rx133_eos, rx133_fail
    substr $S10, rx133_tgt, rx133_pos, 1
    ne $S10, ucs4:"{", rx133_fail
    add rx133_pos, 1
    .const 'Sub' $P1170 = "40_1340317687.034" 
    capture_lex $P1170
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!pos", rx133_pos
    $P11 = rx133_cur.$P1170()
    repr_get_attr_int $I11, $P11, rx133_curclass, "$!pos"
    lt $I11, 0, rx133_fail
    nqp_rxmark rx133_bstack, rxsubrule138_pass, -1, 0
  rxsubrule138_pass:
    rx133_cstack = rx133_cur."!cursor_capture"($P11, 0)
    repr_get_attr_int rx133_pos, $P11, rx133_curclass, "$!pos"
    .const 'Sub' $P1175 = "41_1340317687.034" 
    capture_lex $P1175
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!pos", rx133_pos
    $P11 = rx133_cur.$P1175()
    repr_get_attr_int $I11, $P11, rx133_curclass, "$!pos"
    lt $I11, 0, rx133_fail
    nqp_rxmark rx133_bstack, rxsubrule142_pass, -1, 0
  rxsubrule142_pass:
    rx133_cstack = rx133_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx133_pos, $P11, rx133_curclass, "$!pos"
    .const 'Sub' $P1180 = "42_1340317687.034" 
    capture_lex $P1180
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!pos", rx133_pos
    $P11 = rx133_cur.$P1180()
    repr_get_attr_int $I11, $P11, rx133_curclass, "$!pos"
    lt $I11, 0, rx133_fail
    nqp_rxmark rx133_bstack, rxsubrule146_pass, -1, 0
  rxsubrule146_pass:
    rx133_cstack = rx133_cur."!cursor_capture"($P11, "2")
    repr_get_attr_int rx133_pos, $P11, rx133_curclass, "$!pos"
    add $I11, rx133_pos, 1
    gt $I11, rx133_eos, rx133_fail
    substr $S10, rx133_tgt, rx133_pos, 1
    ne $S10, ucs4:"}", rx133_fail
    add rx133_pos, 1
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!pos", rx133_pos
    $P11 = rx133_cur."obs"("{N,M} as general quantifier", "** N..M (or ** N..*)")
    repr_get_attr_int $I11, $P11, rx133_curclass, "$!pos"
    lt $I11, 0, rx133_fail
    repr_get_attr_int rx133_pos, $P11, rx133_curclass, "$!pos"
    rx133_cur."!cursor_pass"(rx133_pos, "quantifier:sym<{N,M}>", 'backtrack'=>1)
    .return (rx133_cur)
  rx133_restart:
    repr_get_attr_obj rx133_cstack, rx133_cur, rx133_curclass, "$!cstack"
  rx133_fail:
    unless rx133_bstack, rx133_done
    pop $I19, rx133_bstack
    if_null rx133_cstack, rx133_cstack_done
    unless rx133_cstack, rx133_cstack_done
    dec $I19
    set $P11, rx133_cstack[$I19]
  rx133_cstack_done:
    pop rx133_rep, rx133_bstack
    pop rx133_pos, rx133_bstack
    pop $I19, rx133_bstack
    lt rx133_pos, -1, rx133_done
    lt rx133_pos, 0, rx133_fail
    eq $I19, 0, rx133_fail
    if_null rx133_cstack, rx133_jump
    elements $I18, rx133_bstack
    le $I18, 0, rx133_cut
    dec $I18
    set $I18, rx133_bstack[$I18]
  rx133_cut:
    assign rx133_cstack, $I18
  rx133_jump:
    jump $I19
  rx133_done:
    rx133_cur."!cursor_fail"()
    .return (rx133_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1340317687.034_caps"  :subid("233_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    new $P103, "Hash"
    set $P103["0"], 1
    set $P103["1"], 1
    set $P103["2"], 1
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1167"  :anon :subid("234_1340317687.034") :outer("43_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    .return ()
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1169"  :anon :subid("40_1340317687.034") :method :outer("43_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    .lex unicode:"$\x{a2}", $P1173
    .local string rx135_tgt
    .local int rx135_pos
    .local int rx135_off
    .local int rx135_eos
    .local int rx135_rep
    .local pmc rx135_cur
    .local pmc rx135_curclass
    .local pmc rx135_bstack
    .local pmc rx135_cstack
    (rx135_cur, rx135_tgt, rx135_pos, rx135_curclass, rx135_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx135_cur
    length rx135_eos, rx135_tgt
    eq $I19, 1, rx135_restart
    repr_get_attr_int $I11, self, rx135_curclass, "$!from"
    ne $I11, -1, rxscan136_done
    goto rxscan136_scan
  rxscan136_loop:
    inc rx135_pos
    gt rx135_pos, rx135_eos, rx135_fail
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!from", rx135_pos
  rxscan136_scan:
    nqp_rxmark rx135_bstack, rxscan136_loop, rx135_pos, 0
  rxscan136_done:
  # rx rxquantr137 ** 1..-1
    nqp_rxmark rx135_bstack, rxquantr137_done, -1, 0
  rxquantr137_loop:
    ge rx135_pos, rx135_eos, rx135_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx135_tgt, rx135_pos
    unless $I11, rx135_fail
    add rx135_pos, 1
    nqp_rxpeek $I19, rx135_bstack, rxquantr137_done
    inc $I19
    inc $I19
    set rx135_rep, rx135_bstack[$I19]
    nqp_rxcommit rx135_bstack, rxquantr137_done
    inc rx135_rep
    nqp_rxmark rx135_bstack, rxquantr137_done, rx135_pos, rx135_rep
    goto rxquantr137_loop
  rxquantr137_done:
    rx135_cur."!cursor_pass"(rx135_pos, 'backtrack'=>1)
    .return (rx135_cur)
  rx135_restart:
    repr_get_attr_obj rx135_cstack, rx135_cur, rx135_curclass, "$!cstack"
  rx135_fail:
    unless rx135_bstack, rx135_done
    pop $I19, rx135_bstack
    if_null rx135_cstack, rx135_cstack_done
    unless rx135_cstack, rx135_cstack_done
    dec $I19
    set $P11, rx135_cstack[$I19]
  rx135_cstack_done:
    pop rx135_rep, rx135_bstack
    pop rx135_pos, rx135_bstack
    pop $I19, rx135_bstack
    lt rx135_pos, -1, rx135_done
    lt rx135_pos, 0, rx135_fail
    eq $I19, 0, rx135_fail
    if_null rx135_cstack, rx135_jump
    elements $I18, rx135_bstack
    le $I18, 0, rx135_cut
    dec $I18
    set $I18, rx135_bstack[$I18]
  rx135_cut:
    assign rx135_cstack, $I18
  rx135_jump:
    jump $I19
  rx135_done:
    rx135_cur."!cursor_fail"()
    .return (rx135_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "40_1340317687.034_caps"  :subid("235_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    new $P106, "Hash"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "40_1340317687.034_nfa"  :subid("236_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 2
    push $P109, 1
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1174"  :anon :subid("41_1340317687.034") :method :outer("43_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    .lex unicode:"$\x{a2}", $P1178
    .local string rx139_tgt
    .local int rx139_pos
    .local int rx139_off
    .local int rx139_eos
    .local int rx139_rep
    .local pmc rx139_cur
    .local pmc rx139_curclass
    .local pmc rx139_bstack
    .local pmc rx139_cstack
    (rx139_cur, rx139_tgt, rx139_pos, rx139_curclass, rx139_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx139_cur
    length rx139_eos, rx139_tgt
    eq $I19, 1, rx139_restart
    repr_get_attr_int $I11, self, rx139_curclass, "$!from"
    ne $I11, -1, rxscan140_done
    goto rxscan140_scan
  rxscan140_loop:
    inc rx139_pos
    gt rx139_pos, rx139_eos, rx139_fail
    repr_bind_attr_int rx139_cur, rx139_curclass, "$!from", rx139_pos
  rxscan140_scan:
    nqp_rxmark rx139_bstack, rxscan140_loop, rx139_pos, 0
  rxscan140_done:
  # rx rxquantr141 ** 0..1
    nqp_rxmark rx139_bstack, rxquantr141_done, rx139_pos, 0
  rxquantr141_loop:
    add $I11, rx139_pos, 1
    gt $I11, rx139_eos, rx139_fail
    substr $S10, rx139_tgt, rx139_pos, 1
    ne $S10, ucs4:",", rx139_fail
    add rx139_pos, 1
    nqp_rxpeek $I19, rx139_bstack, rxquantr141_done
    inc $I19
    inc $I19
    set rx139_rep, rx139_bstack[$I19]
    nqp_rxcommit rx139_bstack, rxquantr141_done
    inc rx139_rep
  rxquantr141_done:
    rx139_cur."!cursor_pass"(rx139_pos, 'backtrack'=>1)
    .return (rx139_cur)
  rx139_restart:
    repr_get_attr_obj rx139_cstack, rx139_cur, rx139_curclass, "$!cstack"
  rx139_fail:
    unless rx139_bstack, rx139_done
    pop $I19, rx139_bstack
    if_null rx139_cstack, rx139_cstack_done
    unless rx139_cstack, rx139_cstack_done
    dec $I19
    set $P11, rx139_cstack[$I19]
  rx139_cstack_done:
    pop rx139_rep, rx139_bstack
    pop rx139_pos, rx139_bstack
    pop $I19, rx139_bstack
    lt rx139_pos, -1, rx139_done
    lt rx139_pos, 0, rx139_fail
    eq $I19, 0, rx139_fail
    if_null rx139_cstack, rx139_jump
    elements $I18, rx139_bstack
    le $I18, 0, rx139_cut
    dec $I18
    set $I18, rx139_bstack[$I18]
  rx139_cut:
    assign rx139_cstack, $I18
  rx139_jump:
    jump $I19
  rx139_done:
    rx139_cur."!cursor_fail"()
    .return (rx139_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1340317687.034_caps"  :subid("237_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    new $P106, "Hash"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1340317687.034_nfa"  :subid("238_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 44
    push $P107, 0
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1179"  :anon :subid("42_1340317687.034") :method :outer("43_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    .lex unicode:"$\x{a2}", $P1183
    .local string rx143_tgt
    .local int rx143_pos
    .local int rx143_off
    .local int rx143_eos
    .local int rx143_rep
    .local pmc rx143_cur
    .local pmc rx143_curclass
    .local pmc rx143_bstack
    .local pmc rx143_cstack
    (rx143_cur, rx143_tgt, rx143_pos, rx143_curclass, rx143_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx143_cur
    length rx143_eos, rx143_tgt
    eq $I19, 1, rx143_restart
    repr_get_attr_int $I11, self, rx143_curclass, "$!from"
    ne $I11, -1, rxscan144_done
    goto rxscan144_scan
  rxscan144_loop:
    inc rx143_pos
    gt rx143_pos, rx143_eos, rx143_fail
    repr_bind_attr_int rx143_cur, rx143_curclass, "$!from", rx143_pos
  rxscan144_scan:
    nqp_rxmark rx143_bstack, rxscan144_loop, rx143_pos, 0
  rxscan144_done:
  # rx rxquantr145 ** 0..-1
    nqp_rxmark rx143_bstack, rxquantr145_done, rx143_pos, 0
  rxquantr145_loop:
    ge rx143_pos, rx143_eos, rx143_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx143_tgt, rx143_pos
    unless $I11, rx143_fail
    add rx143_pos, 1
    nqp_rxpeek $I19, rx143_bstack, rxquantr145_done
    inc $I19
    inc $I19
    set rx143_rep, rx143_bstack[$I19]
    nqp_rxcommit rx143_bstack, rxquantr145_done
    inc rx143_rep
    nqp_rxmark rx143_bstack, rxquantr145_done, rx143_pos, rx143_rep
    goto rxquantr145_loop
  rxquantr145_done:
    rx143_cur."!cursor_pass"(rx143_pos, 'backtrack'=>1)
    .return (rx143_cur)
  rx143_restart:
    repr_get_attr_obj rx143_cstack, rx143_cur, rx143_curclass, "$!cstack"
  rx143_fail:
    unless rx143_bstack, rx143_done
    pop $I19, rx143_bstack
    if_null rx143_cstack, rx143_cstack_done
    unless rx143_cstack, rx143_cstack_done
    dec $I19
    set $P11, rx143_cstack[$I19]
  rx143_cstack_done:
    pop rx143_rep, rx143_bstack
    pop rx143_pos, rx143_bstack
    pop $I19, rx143_bstack
    lt rx143_pos, -1, rx143_done
    lt rx143_pos, 0, rx143_fail
    eq $I19, 0, rx143_fail
    if_null rx143_cstack, rx143_jump
    elements $I18, rx143_bstack
    le $I18, 0, rx143_cut
    dec $I18
    set $I18, rx143_bstack[$I18]
  rx143_cut:
    assign rx143_cstack, $I18
  rx143_jump:
    jump $I19
  rx143_done:
    rx143_cur."!cursor_fail"()
    .return (rx143_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "42_1340317687.034_caps"  :subid("239_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    new $P106, "Hash"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "42_1340317687.034_nfa"  :subid("240_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 97
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 4
    push $P107, 8
    push $P107, 1
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "quantifier:sym<**>"  :subid("44_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1185
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 100
    .lex "self", param_1185
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1186
    .lex "$/", $P1187
    .local string rx148_tgt
    .local int rx148_pos
    .local int rx148_off
    .local int rx148_eos
    .local int rx148_rep
    .local pmc rx148_cur
    .local pmc rx148_curclass
    .local pmc rx148_bstack
    .local pmc rx148_cstack
    (rx148_cur, rx148_tgt, rx148_pos, rx148_curclass, rx148_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx148_cur
    length rx148_eos, rx148_tgt
    eq $I19, 1, rx148_restart
    repr_get_attr_int $I11, self, rx148_curclass, "$!from"
    ne $I11, -1, rxscan149_done
    goto rxscan149_scan
  rxscan149_loop:
    inc rx148_pos
    gt rx148_pos, rx148_eos, rx148_fail
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!from", rx148_pos
  rxscan149_scan:
    nqp_rxmark rx148_bstack, rxscan149_loop, rx148_pos, 0
  rxscan149_done:
    nqp_rxmark rx148_bstack, rxcap150_fail, rx148_pos, 0
    add $I11, rx148_pos, 2
    gt $I11, rx148_eos, rx148_fail
    substr $S10, rx148_tgt, rx148_pos, 2
    ne $S10, ucs4:"**", rx148_fail
    add rx148_pos, 2
    nqp_rxpeek $I19, rx148_bstack, rxcap150_fail
    inc $I19
    set $I11, rx148_bstack[$I19]
    $P11 = rx148_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx148_pos)
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "sym")
    goto rxcap150_done
  rxcap150_fail:
    goto rx148_fail
  rxcap150_done:
  # rx rxquantr151 ** 0..1
    nqp_rxmark rx148_bstack, rxquantr151_done, rx148_pos, 0
  rxquantr151_loop:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail
    goto rxsubrule152_pass
  rxsubrule152_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail
  rxsubrule152_pass:
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule152_back
    push rx148_bstack, $I11
    push rx148_bstack, 0
    push rx148_bstack, rx148_pos
    elements $I11, rx148_cstack
    push rx148_bstack, $I11
    repr_get_attr_int rx148_pos, $P11, rx148_curclass, "$!pos"
    nqp_rxpeek $I19, rx148_bstack, rxquantr151_done
    inc $I19
    inc $I19
    set rx148_rep, rx148_bstack[$I19]
    nqp_rxcommit rx148_bstack, rxquantr151_done
    inc rx148_rep
  rxquantr151_done:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail
    nqp_rxmark rx148_bstack, rxsubrule153_pass, -1, 0
  rxsubrule153_pass:
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx148_pos, $P11, rx148_curclass, "$!pos"
  # rx rxquantr154 ** 0..1
    nqp_rxmark rx148_bstack, rxquantr154_done, rx148_pos, 0
  rxquantr154_loop:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail
    goto rxsubrule155_pass
  rxsubrule155_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail
  rxsubrule155_pass:
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule155_back
    push rx148_bstack, $I11
    push rx148_bstack, 0
    push rx148_bstack, rx148_pos
    elements $I11, rx148_cstack
    push rx148_bstack, $I11
    repr_get_attr_int rx148_pos, $P11, rx148_curclass, "$!pos"
    nqp_rxpeek $I19, rx148_bstack, rxquantr154_done
    inc $I19
    inc $I19
    set rx148_rep, rx148_bstack[$I19]
    nqp_rxcommit rx148_bstack, rxquantr154_done
    inc rx148_rep
  rxquantr154_done:
    nqp_rxmark rx148_bstack, rxcap156_fail, rx148_pos, 0
  # rx rxquantr157 ** 1..-1
    nqp_rxmark rx148_bstack, rxquantr157_done, -1, 0
  rxquantr157_loop:
    ge rx148_pos, rx148_eos, rx148_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx148_tgt, rx148_pos
    unless $I11, rx148_fail
    add rx148_pos, 1
    nqp_rxpeek $I19, rx148_bstack, rxquantr157_done
    inc $I19
    inc $I19
    set rx148_rep, rx148_bstack[$I19]
    nqp_rxcommit rx148_bstack, rxquantr157_done
    inc rx148_rep
    nqp_rxmark rx148_bstack, rxquantr157_done, rx148_pos, rx148_rep
    goto rxquantr157_loop
  rxquantr157_done:
    nqp_rxpeek $I19, rx148_bstack, rxcap156_fail
    inc $I19
    set $I11, rx148_bstack[$I19]
    $P11 = rx148_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx148_pos)
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "min")
    goto rxcap156_done
  rxcap156_fail:
    goto rx148_fail
  rxcap156_done:
  # rx rxquantr158 ** 0..1
    nqp_rxmark rx148_bstack, rxquantr158_done, rx148_pos, 0
  rxquantr158_loop:
    add $I11, rx148_pos, 2
    gt $I11, rx148_eos, rx148_fail
    substr $S10, rx148_tgt, rx148_pos, 2
    ne $S10, ucs4:"..", rx148_fail
    add rx148_pos, 2
    nqp_rxmark rx148_bstack, rxcap159_fail, rx148_pos, 0
  alt160_0:
    nqp_rxmark rx148_bstack, alt160_1, rx148_pos, 0
  # rx rxquantr161 ** 1..-1
    nqp_rxmark rx148_bstack, rxquantr161_done, -1, 0
  rxquantr161_loop:
    ge rx148_pos, rx148_eos, rx148_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx148_tgt, rx148_pos
    unless $I11, rx148_fail
    add rx148_pos, 1
    nqp_rxpeek $I19, rx148_bstack, rxquantr161_done
    inc $I19
    inc $I19
    set rx148_rep, rx148_bstack[$I19]
    nqp_rxcommit rx148_bstack, rxquantr161_done
    inc rx148_rep
    nqp_rxmark rx148_bstack, rxquantr161_done, rx148_pos, rx148_rep
    goto rxquantr161_loop
  rxquantr161_done:
    goto alt160_end
  alt160_1:
    nqp_rxmark rx148_bstack, alt160_2, rx148_pos, 0
    add $I11, rx148_pos, 1
    gt $I11, rx148_eos, rx148_fail
    substr $S10, rx148_tgt, rx148_pos, 1
    ne $S10, ucs4:"*", rx148_fail
    add rx148_pos, 1
    goto alt160_end
  alt160_2:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."panic"("Only integers or '*' allowed as range quantifier endpoint")
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail
    repr_get_attr_int rx148_pos, $P11, rx148_curclass, "$!pos"
  alt160_end:
    nqp_rxpeek $I19, rx148_bstack, rxcap159_fail
    inc $I19
    set $I11, rx148_bstack[$I19]
    $P11 = rx148_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx148_pos)
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "max")
    goto rxcap159_done
  rxcap159_fail:
    goto rx148_fail
  rxcap159_done:
    nqp_rxpeek $I19, rx148_bstack, rxquantr158_done
    inc $I19
    inc $I19
    set rx148_rep, rx148_bstack[$I19]
    nqp_rxcommit rx148_bstack, rxquantr158_done
    inc rx148_rep
  rxquantr158_done:
    rx148_cur."!cursor_pass"(rx148_pos, "quantifier:sym<**>", 'backtrack'=>1)
    .return (rx148_cur)
  rx148_restart:
    repr_get_attr_obj rx148_cstack, rx148_cur, rx148_curclass, "$!cstack"
  rx148_fail:
    unless rx148_bstack, rx148_done
    pop $I19, rx148_bstack
    if_null rx148_cstack, rx148_cstack_done
    unless rx148_cstack, rx148_cstack_done
    dec $I19
    set $P11, rx148_cstack[$I19]
  rx148_cstack_done:
    pop rx148_rep, rx148_bstack
    pop rx148_pos, rx148_bstack
    pop $I19, rx148_bstack
    lt rx148_pos, -1, rx148_done
    lt rx148_pos, 0, rx148_fail
    eq $I19, 0, rx148_fail
    if_null rx148_cstack, rx148_jump
    elements $I18, rx148_bstack
    le $I18, 0, rx148_cut
    dec $I18
    set $I18, rx148_bstack[$I18]
  rx148_cut:
    assign rx148_cstack, $I18
  rx148_jump:
    jump $I19
  rx148_done:
    rx148_cur."!cursor_fail"()
    .return (rx148_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1340317687.034_caps"  :subid("241_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 100
    new $P103, "Hash"
    set $P103["sym"], 0
    set $P103["normspace"], 2
    set $P103["backmod"], 0
    set $P103["min"], 0
    set $P103["max"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1340317687.034_nfa"  :subid("242_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 100
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 42
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 42
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "normspace"
    push $P106, 4
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "backmod"
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "normspace"
    push $P108, 6
    push $P108, 1
    push $P108, 0
    push $P108, 6
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 7
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 8
    push $P110, 8
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 7
    push $P111, 1
    push $P111, 0
    push $P111, 9
    push $P111, 2
    push $P111, 46
    push $P111, 10
    push $P111, 1
    push $P111, 0
    push $P111, 0
    new $P112, "ResizablePMCArray"
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 46
    push $P113, 11
    new $P114, "ResizablePMCArray"
    push $P114, 0
    push $P114, 0
    push $P114, 0
    new $P115, "ResizablePMCArray"
    push $P115, $P103
    push $P115, $P104
    push $P115, $P105
    push $P115, $P106
    push $P115, $P107
    push $P115, $P108
    push $P115, $P109
    push $P115, $P110
    push $P115, $P111
    push $P115, $P112
    push $P115, $P113
    push $P115, $P114
    .return ($P115)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backmod"  :subid("46_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1191
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 114
    .const 'Sub' $P1198 = "45_1340317687.034" 
    capture_lex $P1198
    .lex "self", param_1191
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1192
    .lex "$/", $P1193
    .local string rx163_tgt
    .local int rx163_pos
    .local int rx163_off
    .local int rx163_eos
    .local int rx163_rep
    .local pmc rx163_cur
    .local pmc rx163_curclass
    .local pmc rx163_bstack
    .local pmc rx163_cstack
    (rx163_cur, rx163_tgt, rx163_pos, rx163_curclass, rx163_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx163_cur
    length rx163_eos, rx163_tgt
    eq $I19, 1, rx163_restart
    repr_get_attr_int $I11, self, rx163_curclass, "$!from"
    ne $I11, -1, rxscan164_done
    goto rxscan164_scan
  rxscan164_loop:
    inc rx163_pos
    gt rx163_pos, rx163_eos, rx163_fail
    repr_bind_attr_int rx163_cur, rx163_curclass, "$!from", rx163_pos
  rxscan164_scan:
    nqp_rxmark rx163_bstack, rxscan164_loop, rx163_pos, 0
  rxscan164_done:
  # rx rxquantr165 ** 0..1
    nqp_rxmark rx163_bstack, rxquantr165_done, rx163_pos, 0
  rxquantr165_loop:
    add $I11, rx163_pos, 1
    gt $I11, rx163_eos, rx163_fail
    substr $S10, rx163_tgt, rx163_pos, 1
    ne $S10, ucs4:":", rx163_fail
    add rx163_pos, 1
    nqp_rxpeek $I19, rx163_bstack, rxquantr165_done
    inc $I19
    inc $I19
    set rx163_rep, rx163_bstack[$I19]
    nqp_rxcommit rx163_bstack, rxquantr165_done
    inc rx163_rep
  rxquantr165_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt166_0
    nqp_push_label $P11, alt166_1
    nqp_push_label $P11, alt166_2
    nqp_rxmark rx163_bstack, alt166_end, -1, 0
    rx163_cur."!alt"(rx163_pos, ucs4:"alt_nfa_47_1340317687.384", $P11)
    goto rx163_fail
  alt166_0:
    add $I11, rx163_pos, 1
    gt $I11, rx163_eos, rx163_fail
    substr $S10, rx163_tgt, rx163_pos, 1
    ne $S10, ucs4:"?", rx163_fail
    add rx163_pos, 1
    goto alt166_end
  alt166_1:
    add $I11, rx163_pos, 1
    gt $I11, rx163_eos, rx163_fail
    substr $S10, rx163_tgt, rx163_pos, 1
    ne $S10, ucs4:"!", rx163_fail
    add rx163_pos, 1
    goto alt166_end
  alt166_2:
    .const 'Sub' $P1198 = "45_1340317687.034" 
    capture_lex $P1198
    repr_bind_attr_int rx163_cur, rx163_curclass, "$!pos", rx163_pos
    $P11 = rx163_cur."before"($P1198)
    repr_get_attr_int $I11, $P11, rx163_curclass, "$!pos"
    ge $I11, 0, rx163_fail
    goto alt166_end
  alt166_end:
    nqp_rxcommit rx163_bstack, alt166_end
    rx163_cur."!cursor_pass"(rx163_pos, "backmod", 'backtrack'=>1)
    .return (rx163_cur)
  rx163_restart:
    repr_get_attr_obj rx163_cstack, rx163_cur, rx163_curclass, "$!cstack"
  rx163_fail:
    unless rx163_bstack, rx163_done
    pop $I19, rx163_bstack
    if_null rx163_cstack, rx163_cstack_done
    unless rx163_cstack, rx163_cstack_done
    dec $I19
    set $P11, rx163_cstack[$I19]
  rx163_cstack_done:
    pop rx163_rep, rx163_bstack
    pop rx163_pos, rx163_bstack
    pop $I19, rx163_bstack
    lt rx163_pos, -1, rx163_done
    lt rx163_pos, 0, rx163_fail
    eq $I19, 0, rx163_fail
    if_null rx163_cstack, rx163_jump
    elements $I18, rx163_bstack
    le $I18, 0, rx163_cut
    dec $I18
    set $I18, rx163_bstack[$I18]
  rx163_cut:
    assign rx163_cstack, $I18
  rx163_jump:
    jump $I19
  rx163_done:
    rx163_cur."!cursor_fail"()
    .return (rx163_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1340317687.034_caps"  :subid("243_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 114
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1340317687.034_nfa"  :subid("244_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 114
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 58
    push $P104, 2
    push $P104, 1
    push $P104, 0
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 63
    push $P105, 0
    push $P105, 2
    push $P105, 33
    push $P105, 0
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1340317687.034_alt_nfa_47_1340317687.384"  :subid("245_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 114
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 63
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 33
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P106
    push $P108, $P107
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 0
    push $P110, 0
    push $P110, 0
    push $P110, 0
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P109
    push $P111, $P110
    new $P112, "ResizablePMCArray"
    push $P112, $P105
    push $P112, $P108
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1197"  :anon :subid("45_1340317687.034") :method :outer("46_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 114
    .lex unicode:"$\x{a2}", $P1201
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done
    goto rxscan168_scan
  rxscan168_loop:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan:
    nqp_rxmark rx167_bstack, rxscan168_loop, rx167_pos, 0
  rxscan168_done:
    add $I11, rx167_pos, 1
    gt $I11, rx167_eos, rx167_fail
    substr $S10, rx167_tgt, rx167_pos, 1
    ne $S10, ucs4:":", rx167_fail
    add rx167_pos, 1
    rx167_cur."!cursor_pass"(rx167_pos, 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail:
    unless rx167_bstack, rx167_done
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done
    unless rx167_cstack, rx167_cstack_done
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done
    lt rx167_pos, 0, rx167_fail
    eq $I19, 0, rx167_fail
    if_null rx167_cstack, rx167_jump
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut:
    assign rx167_cstack, $I18
  rx167_jump:
    jump $I19
  rx167_done:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "45_1340317687.034_caps"  :subid("246_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 114
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "45_1340317687.034_nfa"  :subid("247_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 114
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 58
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar"  :subid("48_1340317687.034")
    .param pmc param_1203
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 116
    .lex "self", param_1203
    $P101 = param_1203."!protoregex"("metachar")
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<ws>"  :subid("49_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1205
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 117
    .lex "self", param_1205
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1206
    .lex "$/", $P1207
    .local string rx169_tgt
    .local int rx169_pos
    .local int rx169_off
    .local int rx169_eos
    .local int rx169_rep
    .local pmc rx169_cur
    .local pmc rx169_curclass
    .local pmc rx169_bstack
    .local pmc rx169_cstack
    (rx169_cur, rx169_tgt, rx169_pos, rx169_curclass, rx169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx169_cur
    length rx169_eos, rx169_tgt
    eq $I19, 1, rx169_restart
    repr_get_attr_int $I11, self, rx169_curclass, "$!from"
    ne $I11, -1, rxscan170_done
    goto rxscan170_scan
  rxscan170_loop:
    inc rx169_pos
    gt rx169_pos, rx169_eos, rx169_fail
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!from", rx169_pos
  rxscan170_scan:
    nqp_rxmark rx169_bstack, rxscan170_loop, rx169_pos, 0
  rxscan170_done:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
    rx169_cur."!cursor_pass"(rx169_pos, "metachar:sym<ws>", 'backtrack'=>1)
    .return (rx169_cur)
  rx169_restart:
    repr_get_attr_obj rx169_cstack, rx169_cur, rx169_curclass, "$!cstack"
  rx169_fail:
    unless rx169_bstack, rx169_done
    pop $I19, rx169_bstack
    if_null rx169_cstack, rx169_cstack_done
    unless rx169_cstack, rx169_cstack_done
    dec $I19
    set $P11, rx169_cstack[$I19]
  rx169_cstack_done:
    pop rx169_rep, rx169_bstack
    pop rx169_pos, rx169_bstack
    pop $I19, rx169_bstack
    lt rx169_pos, -1, rx169_done
    lt rx169_pos, 0, rx169_fail
    eq $I19, 0, rx169_fail
    if_null rx169_cstack, rx169_jump
    elements $I18, rx169_bstack
    le $I18, 0, rx169_cut
    dec $I18
    set $I18, rx169_bstack[$I18]
  rx169_cut:
    assign rx169_cstack, $I18
  rx169_jump:
    jump $I19
  rx169_done:
    rx169_cur."!cursor_fail"()
    .return (rx169_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1340317687.034_caps"  :subid("248_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 117
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1340317687.034_nfa"  :subid("249_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 117
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "normspace"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<[ ]>"  :subid("50_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1211
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 118
    .lex "self", param_1211
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1212
    .lex "$/", $P1213
    .local string rx172_tgt
    .local int rx172_pos
    .local int rx172_off
    .local int rx172_eos
    .local int rx172_rep
    .local pmc rx172_cur
    .local pmc rx172_curclass
    .local pmc rx172_bstack
    .local pmc rx172_cstack
    (rx172_cur, rx172_tgt, rx172_pos, rx172_curclass, rx172_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx172_cur
    length rx172_eos, rx172_tgt
    eq $I19, 1, rx172_restart
    repr_get_attr_int $I11, self, rx172_curclass, "$!from"
    ne $I11, -1, rxscan173_done
    goto rxscan173_scan
  rxscan173_loop:
    inc rx172_pos
    gt rx172_pos, rx172_eos, rx172_fail
    repr_bind_attr_int rx172_cur, rx172_curclass, "$!from", rx172_pos
  rxscan173_scan:
    nqp_rxmark rx172_bstack, rxscan173_loop, rx172_pos, 0
  rxscan173_done:
    add $I11, rx172_pos, 1
    gt $I11, rx172_eos, rx172_fail
    substr $S10, rx172_tgt, rx172_pos, 1
    ne $S10, ucs4:"[", rx172_fail
    add rx172_pos, 1
    repr_bind_attr_int rx172_cur, rx172_curclass, "$!pos", rx172_pos
    $P11 = rx172_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx172_curclass, "$!pos"
    lt $I11, 0, rx172_fail
    nqp_rxmark rx172_bstack, rxsubrule174_pass, -1, 0
  rxsubrule174_pass:
    rx172_cstack = rx172_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx172_pos, $P11, rx172_curclass, "$!pos"
    add $I11, rx172_pos, 1
    gt $I11, rx172_eos, rx172_fail
    substr $S10, rx172_tgt, rx172_pos, 1
    ne $S10, ucs4:"]", rx172_fail
    add rx172_pos, 1
    rx172_cur."!cursor_pass"(rx172_pos, "metachar:sym<[ ]>", 'backtrack'=>1)
    .return (rx172_cur)
  rx172_restart:
    repr_get_attr_obj rx172_cstack, rx172_cur, rx172_curclass, "$!cstack"
  rx172_fail:
    unless rx172_bstack, rx172_done
    pop $I19, rx172_bstack
    if_null rx172_cstack, rx172_cstack_done
    unless rx172_cstack, rx172_cstack_done
    dec $I19
    set $P11, rx172_cstack[$I19]
  rx172_cstack_done:
    pop rx172_rep, rx172_bstack
    pop rx172_pos, rx172_bstack
    pop $I19, rx172_bstack
    lt rx172_pos, -1, rx172_done
    lt rx172_pos, 0, rx172_fail
    eq $I19, 0, rx172_fail
    if_null rx172_cstack, rx172_jump
    elements $I18, rx172_bstack
    le $I18, 0, rx172_cut
    dec $I18
    set $I18, rx172_bstack[$I18]
  rx172_cut:
    assign rx172_cstack, $I18
  rx172_jump:
    jump $I19
  rx172_done:
    rx172_cur."!cursor_fail"()
    .return (rx172_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1340317687.034_caps"  :subid("250_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 118
    new $P103, "Hash"
    set $P103["nibbler"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1340317687.034_nfa"  :subid("251_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 118
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 91
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "nibbler"
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 93
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<( )>"  :subid("51_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1217
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 119
    .lex "self", param_1217
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1218
    .lex "$/", $P1219
    .local string rx175_tgt
    .local int rx175_pos
    .local int rx175_off
    .local int rx175_eos
    .local int rx175_rep
    .local pmc rx175_cur
    .local pmc rx175_curclass
    .local pmc rx175_bstack
    .local pmc rx175_cstack
    (rx175_cur, rx175_tgt, rx175_pos, rx175_curclass, rx175_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx175_cur
    length rx175_eos, rx175_tgt
    eq $I19, 1, rx175_restart
    repr_get_attr_int $I11, self, rx175_curclass, "$!from"
    ne $I11, -1, rxscan176_done
    goto rxscan176_scan
  rxscan176_loop:
    inc rx175_pos
    gt rx175_pos, rx175_eos, rx175_fail
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!from", rx175_pos
  rxscan176_scan:
    nqp_rxmark rx175_bstack, rxscan176_loop, rx175_pos, 0
  rxscan176_done:
    add $I11, rx175_pos, 1
    gt $I11, rx175_eos, rx175_fail
    substr $S10, rx175_tgt, rx175_pos, 1
    ne $S10, ucs4:"(", rx175_fail
    add rx175_pos, 1
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail
    nqp_rxmark rx175_bstack, rxsubrule177_pass, -1, 0
  rxsubrule177_pass:
    rx175_cstack = rx175_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    add $I11, rx175_pos, 1
    gt $I11, rx175_eos, rx175_fail
    substr $S10, rx175_tgt, rx175_pos, 1
    ne $S10, ucs4:")", rx175_fail
    add rx175_pos, 1
    rx175_cur."!cursor_pass"(rx175_pos, "metachar:sym<( )>", 'backtrack'=>1)
    .return (rx175_cur)
  rx175_restart:
    repr_get_attr_obj rx175_cstack, rx175_cur, rx175_curclass, "$!cstack"
  rx175_fail:
    unless rx175_bstack, rx175_done
    pop $I19, rx175_bstack
    if_null rx175_cstack, rx175_cstack_done
    unless rx175_cstack, rx175_cstack_done
    dec $I19
    set $P11, rx175_cstack[$I19]
  rx175_cstack_done:
    pop rx175_rep, rx175_bstack
    pop rx175_pos, rx175_bstack
    pop $I19, rx175_bstack
    lt rx175_pos, -1, rx175_done
    lt rx175_pos, 0, rx175_fail
    eq $I19, 0, rx175_fail
    if_null rx175_cstack, rx175_jump
    elements $I18, rx175_bstack
    le $I18, 0, rx175_cut
    dec $I18
    set $I18, rx175_bstack[$I18]
  rx175_cut:
    assign rx175_cstack, $I18
  rx175_jump:
    jump $I19
  rx175_done:
    rx175_cur."!cursor_fail"()
    .return (rx175_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "51_1340317687.034_caps"  :subid("252_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 119
    new $P103, "Hash"
    set $P103["nibbler"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "51_1340317687.034_nfa"  :subid("253_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 119
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 40
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "nibbler"
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 41
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<'>"  :subid("52_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1223
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 120
    .lex "self", param_1223
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1224
    .lex "$/", $P1225
    .local string rx178_tgt
    .local int rx178_pos
    .local int rx178_off
    .local int rx178_eos
    .local int rx178_rep
    .local pmc rx178_cur
    .local pmc rx178_curclass
    .local pmc rx178_bstack
    .local pmc rx178_cstack
    (rx178_cur, rx178_tgt, rx178_pos, rx178_curclass, rx178_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx178_cur
    length rx178_eos, rx178_tgt
    eq $I19, 1, rx178_restart
    repr_get_attr_int $I11, self, rx178_curclass, "$!from"
    ne $I11, -1, rxscan179_done
    goto rxscan179_scan
  rxscan179_loop:
    inc rx178_pos
    gt rx178_pos, rx178_eos, rx178_fail
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!from", rx178_pos
  rxscan179_scan:
    nqp_rxmark rx178_bstack, rxscan179_loop, rx178_pos, 0
  rxscan179_done:
    ge rx178_pos, rx178_eos, rx178_fail
    substr $S11, rx178_tgt, rx178_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx178_fail
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!pos", rx178_pos
    $P11 = rx178_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx178_curclass, "$!pos"
    lt $I11, 0, rx178_fail
    nqp_rxmark rx178_bstack, rxsubrule180_pass, -1, 0
  rxsubrule180_pass:
    rx178_cstack = rx178_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx178_pos, $P11, rx178_curclass, "$!pos"
    rx178_cur."!cursor_pass"(rx178_pos, "metachar:sym<'>", 'backtrack'=>1)
    .return (rx178_cur)
  rx178_restart:
    repr_get_attr_obj rx178_cstack, rx178_cur, rx178_curclass, "$!cstack"
  rx178_fail:
    unless rx178_bstack, rx178_done
    pop $I19, rx178_bstack
    if_null rx178_cstack, rx178_cstack_done
    unless rx178_cstack, rx178_cstack_done
    dec $I19
    set $P11, rx178_cstack[$I19]
  rx178_cstack_done:
    pop rx178_rep, rx178_bstack
    pop rx178_pos, rx178_bstack
    pop $I19, rx178_bstack
    lt rx178_pos, -1, rx178_done
    lt rx178_pos, 0, rx178_fail
    eq $I19, 0, rx178_fail
    if_null rx178_cstack, rx178_jump
    elements $I18, rx178_bstack
    le $I18, 0, rx178_cut
    dec $I18
    set $I18, rx178_bstack[$I18]
  rx178_cut:
    assign rx178_cstack, $I18
  rx178_jump:
    jump $I19
  rx178_done:
    rx178_cur."!cursor_fail"()
    .return (rx178_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "52_1340317687.034_caps"  :subid("254_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 120
    new $P103, "Hash"
    set $P103["quote_EXPR"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "52_1340317687.034_nfa"  :subid("255_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 120
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "'"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<\">"  :subid("53_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1229
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 121
    .lex "self", param_1229
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1230
    .lex "$/", $P1231
    .local string rx181_tgt
    .local int rx181_pos
    .local int rx181_off
    .local int rx181_eos
    .local int rx181_rep
    .local pmc rx181_cur
    .local pmc rx181_curclass
    .local pmc rx181_bstack
    .local pmc rx181_cstack
    (rx181_cur, rx181_tgt, rx181_pos, rx181_curclass, rx181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx181_cur
    length rx181_eos, rx181_tgt
    eq $I19, 1, rx181_restart
    repr_get_attr_int $I11, self, rx181_curclass, "$!from"
    ne $I11, -1, rxscan182_done
    goto rxscan182_scan
  rxscan182_loop:
    inc rx181_pos
    gt rx181_pos, rx181_eos, rx181_fail
    repr_bind_attr_int rx181_cur, rx181_curclass, "$!from", rx181_pos
  rxscan182_scan:
    nqp_rxmark rx181_bstack, rxscan182_loop, rx181_pos, 0
  rxscan182_done:
    ge rx181_pos, rx181_eos, rx181_fail
    substr $S11, rx181_tgt, rx181_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx181_fail
    repr_bind_attr_int rx181_cur, rx181_curclass, "$!pos", rx181_pos
    $P11 = rx181_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx181_curclass, "$!pos"
    lt $I11, 0, rx181_fail
    nqp_rxmark rx181_bstack, rxsubrule183_pass, -1, 0
  rxsubrule183_pass:
    rx181_cstack = rx181_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx181_pos, $P11, rx181_curclass, "$!pos"
    rx181_cur."!cursor_pass"(rx181_pos, "metachar:sym<\">", 'backtrack'=>1)
    .return (rx181_cur)
  rx181_restart:
    repr_get_attr_obj rx181_cstack, rx181_cur, rx181_curclass, "$!cstack"
  rx181_fail:
    unless rx181_bstack, rx181_done
    pop $I19, rx181_bstack
    if_null rx181_cstack, rx181_cstack_done
    unless rx181_cstack, rx181_cstack_done
    dec $I19
    set $P11, rx181_cstack[$I19]
  rx181_cstack_done:
    pop rx181_rep, rx181_bstack
    pop rx181_pos, rx181_bstack
    pop $I19, rx181_bstack
    lt rx181_pos, -1, rx181_done
    lt rx181_pos, 0, rx181_fail
    eq $I19, 0, rx181_fail
    if_null rx181_cstack, rx181_jump
    elements $I18, rx181_bstack
    le $I18, 0, rx181_cut
    dec $I18
    set $I18, rx181_bstack[$I18]
  rx181_cut:
    assign rx181_cstack, $I18
  rx181_jump:
    jump $I19
  rx181_done:
    rx181_cur."!cursor_fail"()
    .return (rx181_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "53_1340317687.034_caps"  :subid("256_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 121
    new $P103, "Hash"
    set $P103["quote_EXPR"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "53_1340317687.034_nfa"  :subid("257_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 121
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "\""
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<.>"  :subid("54_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1235
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 122
    .lex "self", param_1235
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1236
    .lex "$/", $P1237
    .local string rx184_tgt
    .local int rx184_pos
    .local int rx184_off
    .local int rx184_eos
    .local int rx184_rep
    .local pmc rx184_cur
    .local pmc rx184_curclass
    .local pmc rx184_bstack
    .local pmc rx184_cstack
    (rx184_cur, rx184_tgt, rx184_pos, rx184_curclass, rx184_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx184_cur
    length rx184_eos, rx184_tgt
    eq $I19, 1, rx184_restart
    repr_get_attr_int $I11, self, rx184_curclass, "$!from"
    ne $I11, -1, rxscan185_done
    goto rxscan185_scan
  rxscan185_loop:
    inc rx184_pos
    gt rx184_pos, rx184_eos, rx184_fail
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!from", rx184_pos
  rxscan185_scan:
    nqp_rxmark rx184_bstack, rxscan185_loop, rx184_pos, 0
  rxscan185_done:
    nqp_rxmark rx184_bstack, rxcap186_fail, rx184_pos, 0
    add $I11, rx184_pos, 1
    gt $I11, rx184_eos, rx184_fail
    substr $S10, rx184_tgt, rx184_pos, 1
    ne $S10, ucs4:".", rx184_fail
    add rx184_pos, 1
    nqp_rxpeek $I19, rx184_bstack, rxcap186_fail
    inc $I19
    set $I11, rx184_bstack[$I19]
    $P11 = rx184_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx184_pos)
    rx184_cstack = rx184_cur."!cursor_capture"($P11, "sym")
    goto rxcap186_done
  rxcap186_fail:
    goto rx184_fail
  rxcap186_done:
    rx184_cur."!cursor_pass"(rx184_pos, "metachar:sym<.>", 'backtrack'=>1)
    .return (rx184_cur)
  rx184_restart:
    repr_get_attr_obj rx184_cstack, rx184_cur, rx184_curclass, "$!cstack"
  rx184_fail:
    unless rx184_bstack, rx184_done
    pop $I19, rx184_bstack
    if_null rx184_cstack, rx184_cstack_done
    unless rx184_cstack, rx184_cstack_done
    dec $I19
    set $P11, rx184_cstack[$I19]
  rx184_cstack_done:
    pop rx184_rep, rx184_bstack
    pop rx184_pos, rx184_bstack
    pop $I19, rx184_bstack
    lt rx184_pos, -1, rx184_done
    lt rx184_pos, 0, rx184_fail
    eq $I19, 0, rx184_fail
    if_null rx184_cstack, rx184_jump
    elements $I18, rx184_bstack
    le $I18, 0, rx184_cut
    dec $I18
    set $I18, rx184_bstack[$I18]
  rx184_cut:
    assign rx184_cstack, $I18
  rx184_jump:
    jump $I19
  rx184_done:
    rx184_cur."!cursor_fail"()
    .return (rx184_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "54_1340317687.034_caps"  :subid("258_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 122
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "54_1340317687.034_nfa"  :subid("259_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 122
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 46
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<^>"  :subid("55_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1241
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 123
    .lex "self", param_1241
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1242
    .lex "$/", $P1243
    .local string rx187_tgt
    .local int rx187_pos
    .local int rx187_off
    .local int rx187_eos
    .local int rx187_rep
    .local pmc rx187_cur
    .local pmc rx187_curclass
    .local pmc rx187_bstack
    .local pmc rx187_cstack
    (rx187_cur, rx187_tgt, rx187_pos, rx187_curclass, rx187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx187_cur
    length rx187_eos, rx187_tgt
    eq $I19, 1, rx187_restart
    repr_get_attr_int $I11, self, rx187_curclass, "$!from"
    ne $I11, -1, rxscan188_done
    goto rxscan188_scan
  rxscan188_loop:
    inc rx187_pos
    gt rx187_pos, rx187_eos, rx187_fail
    repr_bind_attr_int rx187_cur, rx187_curclass, "$!from", rx187_pos
  rxscan188_scan:
    nqp_rxmark rx187_bstack, rxscan188_loop, rx187_pos, 0
  rxscan188_done:
    nqp_rxmark rx187_bstack, rxcap189_fail, rx187_pos, 0
    add $I11, rx187_pos, 1
    gt $I11, rx187_eos, rx187_fail
    substr $S10, rx187_tgt, rx187_pos, 1
    ne $S10, ucs4:"^", rx187_fail
    add rx187_pos, 1
    nqp_rxpeek $I19, rx187_bstack, rxcap189_fail
    inc $I19
    set $I11, rx187_bstack[$I19]
    $P11 = rx187_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx187_pos)
    rx187_cstack = rx187_cur."!cursor_capture"($P11, "sym")
    goto rxcap189_done
  rxcap189_fail:
    goto rx187_fail
  rxcap189_done:
    rx187_cur."!cursor_pass"(rx187_pos, "metachar:sym<^>", 'backtrack'=>1)
    .return (rx187_cur)
  rx187_restart:
    repr_get_attr_obj rx187_cstack, rx187_cur, rx187_curclass, "$!cstack"
  rx187_fail:
    unless rx187_bstack, rx187_done
    pop $I19, rx187_bstack
    if_null rx187_cstack, rx187_cstack_done
    unless rx187_cstack, rx187_cstack_done
    dec $I19
    set $P11, rx187_cstack[$I19]
  rx187_cstack_done:
    pop rx187_rep, rx187_bstack
    pop rx187_pos, rx187_bstack
    pop $I19, rx187_bstack
    lt rx187_pos, -1, rx187_done
    lt rx187_pos, 0, rx187_fail
    eq $I19, 0, rx187_fail
    if_null rx187_cstack, rx187_jump
    elements $I18, rx187_bstack
    le $I18, 0, rx187_cut
    dec $I18
    set $I18, rx187_bstack[$I18]
  rx187_cut:
    assign rx187_cstack, $I18
  rx187_jump:
    jump $I19
  rx187_done:
    rx187_cur."!cursor_fail"()
    .return (rx187_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1340317687.034_caps"  :subid("260_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 123
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1340317687.034_nfa"  :subid("261_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 123
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 94
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<^^>"  :subid("56_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1247
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 124
    .lex "self", param_1247
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1248
    .lex "$/", $P1249
    .local string rx190_tgt
    .local int rx190_pos
    .local int rx190_off
    .local int rx190_eos
    .local int rx190_rep
    .local pmc rx190_cur
    .local pmc rx190_curclass
    .local pmc rx190_bstack
    .local pmc rx190_cstack
    (rx190_cur, rx190_tgt, rx190_pos, rx190_curclass, rx190_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx190_cur
    length rx190_eos, rx190_tgt
    eq $I19, 1, rx190_restart
    repr_get_attr_int $I11, self, rx190_curclass, "$!from"
    ne $I11, -1, rxscan191_done
    goto rxscan191_scan
  rxscan191_loop:
    inc rx190_pos
    gt rx190_pos, rx190_eos, rx190_fail
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!from", rx190_pos
  rxscan191_scan:
    nqp_rxmark rx190_bstack, rxscan191_loop, rx190_pos, 0
  rxscan191_done:
    nqp_rxmark rx190_bstack, rxcap192_fail, rx190_pos, 0
    add $I11, rx190_pos, 2
    gt $I11, rx190_eos, rx190_fail
    substr $S10, rx190_tgt, rx190_pos, 2
    ne $S10, ucs4:"^^", rx190_fail
    add rx190_pos, 2
    nqp_rxpeek $I19, rx190_bstack, rxcap192_fail
    inc $I19
    set $I11, rx190_bstack[$I19]
    $P11 = rx190_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx190_pos)
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "sym")
    goto rxcap192_done
  rxcap192_fail:
    goto rx190_fail
  rxcap192_done:
    rx190_cur."!cursor_pass"(rx190_pos, "metachar:sym<^^>", 'backtrack'=>1)
    .return (rx190_cur)
  rx190_restart:
    repr_get_attr_obj rx190_cstack, rx190_cur, rx190_curclass, "$!cstack"
  rx190_fail:
    unless rx190_bstack, rx190_done
    pop $I19, rx190_bstack
    if_null rx190_cstack, rx190_cstack_done
    unless rx190_cstack, rx190_cstack_done
    dec $I19
    set $P11, rx190_cstack[$I19]
  rx190_cstack_done:
    pop rx190_rep, rx190_bstack
    pop rx190_pos, rx190_bstack
    pop $I19, rx190_bstack
    lt rx190_pos, -1, rx190_done
    lt rx190_pos, 0, rx190_fail
    eq $I19, 0, rx190_fail
    if_null rx190_cstack, rx190_jump
    elements $I18, rx190_bstack
    le $I18, 0, rx190_cut
    dec $I18
    set $I18, rx190_bstack[$I18]
  rx190_cut:
    assign rx190_cstack, $I18
  rx190_jump:
    jump $I19
  rx190_done:
    rx190_cur."!cursor_fail"()
    .return (rx190_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "56_1340317687.034_caps"  :subid("262_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 124
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "56_1340317687.034_nfa"  :subid("263_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 124
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 94
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 94
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<$>"  :subid("57_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1253
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 125
    .lex "self", param_1253
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1254
    .lex "$/", $P1255
    .local string rx193_tgt
    .local int rx193_pos
    .local int rx193_off
    .local int rx193_eos
    .local int rx193_rep
    .local pmc rx193_cur
    .local pmc rx193_curclass
    .local pmc rx193_bstack
    .local pmc rx193_cstack
    (rx193_cur, rx193_tgt, rx193_pos, rx193_curclass, rx193_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx193_cur
    length rx193_eos, rx193_tgt
    eq $I19, 1, rx193_restart
    repr_get_attr_int $I11, self, rx193_curclass, "$!from"
    ne $I11, -1, rxscan194_done
    goto rxscan194_scan
  rxscan194_loop:
    inc rx193_pos
    gt rx193_pos, rx193_eos, rx193_fail
    repr_bind_attr_int rx193_cur, rx193_curclass, "$!from", rx193_pos
  rxscan194_scan:
    nqp_rxmark rx193_bstack, rxscan194_loop, rx193_pos, 0
  rxscan194_done:
    nqp_rxmark rx193_bstack, rxcap195_fail, rx193_pos, 0
    add $I11, rx193_pos, 1
    gt $I11, rx193_eos, rx193_fail
    substr $S10, rx193_tgt, rx193_pos, 1
    ne $S10, ucs4:"$", rx193_fail
    add rx193_pos, 1
    nqp_rxpeek $I19, rx193_bstack, rxcap195_fail
    inc $I19
    set $I11, rx193_bstack[$I19]
    $P11 = rx193_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx193_pos)
    rx193_cstack = rx193_cur."!cursor_capture"($P11, "sym")
    goto rxcap195_done
  rxcap195_fail:
    goto rx193_fail
  rxcap195_done:
    rx193_cur."!cursor_pass"(rx193_pos, "metachar:sym<$>", 'backtrack'=>1)
    .return (rx193_cur)
  rx193_restart:
    repr_get_attr_obj rx193_cstack, rx193_cur, rx193_curclass, "$!cstack"
  rx193_fail:
    unless rx193_bstack, rx193_done
    pop $I19, rx193_bstack
    if_null rx193_cstack, rx193_cstack_done
    unless rx193_cstack, rx193_cstack_done
    dec $I19
    set $P11, rx193_cstack[$I19]
  rx193_cstack_done:
    pop rx193_rep, rx193_bstack
    pop rx193_pos, rx193_bstack
    pop $I19, rx193_bstack
    lt rx193_pos, -1, rx193_done
    lt rx193_pos, 0, rx193_fail
    eq $I19, 0, rx193_fail
    if_null rx193_cstack, rx193_jump
    elements $I18, rx193_bstack
    le $I18, 0, rx193_cut
    dec $I18
    set $I18, rx193_bstack[$I18]
  rx193_cut:
    assign rx193_cstack, $I18
  rx193_jump:
    jump $I19
  rx193_done:
    rx193_cur."!cursor_fail"()
    .return (rx193_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "57_1340317687.034_caps"  :subid("264_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 125
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "57_1340317687.034_nfa"  :subid("265_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 125
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 36
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<$$>"  :subid("58_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1259
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 126
    .lex "self", param_1259
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1260
    .lex "$/", $P1261
    .local string rx196_tgt
    .local int rx196_pos
    .local int rx196_off
    .local int rx196_eos
    .local int rx196_rep
    .local pmc rx196_cur
    .local pmc rx196_curclass
    .local pmc rx196_bstack
    .local pmc rx196_cstack
    (rx196_cur, rx196_tgt, rx196_pos, rx196_curclass, rx196_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx196_cur
    length rx196_eos, rx196_tgt
    eq $I19, 1, rx196_restart
    repr_get_attr_int $I11, self, rx196_curclass, "$!from"
    ne $I11, -1, rxscan197_done
    goto rxscan197_scan
  rxscan197_loop:
    inc rx196_pos
    gt rx196_pos, rx196_eos, rx196_fail
    repr_bind_attr_int rx196_cur, rx196_curclass, "$!from", rx196_pos
  rxscan197_scan:
    nqp_rxmark rx196_bstack, rxscan197_loop, rx196_pos, 0
  rxscan197_done:
    nqp_rxmark rx196_bstack, rxcap198_fail, rx196_pos, 0
    add $I11, rx196_pos, 2
    gt $I11, rx196_eos, rx196_fail
    substr $S10, rx196_tgt, rx196_pos, 2
    ne $S10, ucs4:"$$", rx196_fail
    add rx196_pos, 2
    nqp_rxpeek $I19, rx196_bstack, rxcap198_fail
    inc $I19
    set $I11, rx196_bstack[$I19]
    $P11 = rx196_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx196_pos)
    rx196_cstack = rx196_cur."!cursor_capture"($P11, "sym")
    goto rxcap198_done
  rxcap198_fail:
    goto rx196_fail
  rxcap198_done:
    rx196_cur."!cursor_pass"(rx196_pos, "metachar:sym<$$>", 'backtrack'=>1)
    .return (rx196_cur)
  rx196_restart:
    repr_get_attr_obj rx196_cstack, rx196_cur, rx196_curclass, "$!cstack"
  rx196_fail:
    unless rx196_bstack, rx196_done
    pop $I19, rx196_bstack
    if_null rx196_cstack, rx196_cstack_done
    unless rx196_cstack, rx196_cstack_done
    dec $I19
    set $P11, rx196_cstack[$I19]
  rx196_cstack_done:
    pop rx196_rep, rx196_bstack
    pop rx196_pos, rx196_bstack
    pop $I19, rx196_bstack
    lt rx196_pos, -1, rx196_done
    lt rx196_pos, 0, rx196_fail
    eq $I19, 0, rx196_fail
    if_null rx196_cstack, rx196_jump
    elements $I18, rx196_bstack
    le $I18, 0, rx196_cut
    dec $I18
    set $I18, rx196_bstack[$I18]
  rx196_cut:
    assign rx196_cstack, $I18
  rx196_jump:
    jump $I19
  rx196_done:
    rx196_cur."!cursor_fail"()
    .return (rx196_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "58_1340317687.034_caps"  :subid("266_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 126
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "58_1340317687.034_nfa"  :subid("267_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 126
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 36
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 36
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<:::>"  :subid("59_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1265
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 127
    .lex "self", param_1265
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1266
    .lex "$/", $P1267
    .local string rx199_tgt
    .local int rx199_pos
    .local int rx199_off
    .local int rx199_eos
    .local int rx199_rep
    .local pmc rx199_cur
    .local pmc rx199_curclass
    .local pmc rx199_bstack
    .local pmc rx199_cstack
    (rx199_cur, rx199_tgt, rx199_pos, rx199_curclass, rx199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx199_cur
    length rx199_eos, rx199_tgt
    eq $I19, 1, rx199_restart
    repr_get_attr_int $I11, self, rx199_curclass, "$!from"
    ne $I11, -1, rxscan200_done
    goto rxscan200_scan
  rxscan200_loop:
    inc rx199_pos
    gt rx199_pos, rx199_eos, rx199_fail
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!from", rx199_pos
  rxscan200_scan:
    nqp_rxmark rx199_bstack, rxscan200_loop, rx199_pos, 0
  rxscan200_done:
    nqp_rxmark rx199_bstack, rxcap201_fail, rx199_pos, 0
    add $I11, rx199_pos, 3
    gt $I11, rx199_eos, rx199_fail
    substr $S10, rx199_tgt, rx199_pos, 3
    ne $S10, ucs4:":::", rx199_fail
    add rx199_pos, 3
    nqp_rxpeek $I19, rx199_bstack, rxcap201_fail
    inc $I19
    set $I11, rx199_bstack[$I19]
    $P11 = rx199_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx199_pos)
    rx199_cstack = rx199_cur."!cursor_capture"($P11, "sym")
    goto rxcap201_done
  rxcap201_fail:
    goto rx199_fail
  rxcap201_done:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."panic"("::: not yet implemented")
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    rx199_cur."!cursor_pass"(rx199_pos, "metachar:sym<:::>", 'backtrack'=>1)
    .return (rx199_cur)
  rx199_restart:
    repr_get_attr_obj rx199_cstack, rx199_cur, rx199_curclass, "$!cstack"
  rx199_fail:
    unless rx199_bstack, rx199_done
    pop $I19, rx199_bstack
    if_null rx199_cstack, rx199_cstack_done
    unless rx199_cstack, rx199_cstack_done
    dec $I19
    set $P11, rx199_cstack[$I19]
  rx199_cstack_done:
    pop rx199_rep, rx199_bstack
    pop rx199_pos, rx199_bstack
    pop $I19, rx199_bstack
    lt rx199_pos, -1, rx199_done
    lt rx199_pos, 0, rx199_fail
    eq $I19, 0, rx199_fail
    if_null rx199_cstack, rx199_jump
    elements $I18, rx199_bstack
    le $I18, 0, rx199_cut
    dec $I18
    set $I18, rx199_bstack[$I18]
  rx199_cut:
    assign rx199_cstack, $I18
  rx199_jump:
    jump $I19
  rx199_done:
    rx199_cur."!cursor_fail"()
    .return (rx199_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "59_1340317687.034_caps"  :subid("268_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 127
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "59_1340317687.034_nfa"  :subid("269_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 127
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 58
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "panic"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P103
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<::>"  :subid("60_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1271
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 128
    .lex "self", param_1271
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1272
    .lex "$/", $P1273
    .local string rx203_tgt
    .local int rx203_pos
    .local int rx203_off
    .local int rx203_eos
    .local int rx203_rep
    .local pmc rx203_cur
    .local pmc rx203_curclass
    .local pmc rx203_bstack
    .local pmc rx203_cstack
    (rx203_cur, rx203_tgt, rx203_pos, rx203_curclass, rx203_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx203_cur
    length rx203_eos, rx203_tgt
    eq $I19, 1, rx203_restart
    repr_get_attr_int $I11, self, rx203_curclass, "$!from"
    ne $I11, -1, rxscan204_done
    goto rxscan204_scan
  rxscan204_loop:
    inc rx203_pos
    gt rx203_pos, rx203_eos, rx203_fail
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!from", rx203_pos
  rxscan204_scan:
    nqp_rxmark rx203_bstack, rxscan204_loop, rx203_pos, 0
  rxscan204_done:
    nqp_rxmark rx203_bstack, rxcap205_fail, rx203_pos, 0
    add $I11, rx203_pos, 2
    gt $I11, rx203_eos, rx203_fail
    substr $S10, rx203_tgt, rx203_pos, 2
    ne $S10, ucs4:"::", rx203_fail
    add rx203_pos, 2
    nqp_rxpeek $I19, rx203_bstack, rxcap205_fail
    inc $I19
    set $I11, rx203_bstack[$I19]
    $P11 = rx203_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx203_pos)
    rx203_cstack = rx203_cur."!cursor_capture"($P11, "sym")
    goto rxcap205_done
  rxcap205_fail:
    goto rx203_fail
  rxcap205_done:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."panic"(":: not yet implemented")
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    rx203_cur."!cursor_pass"(rx203_pos, "metachar:sym<::>", 'backtrack'=>1)
    .return (rx203_cur)
  rx203_restart:
    repr_get_attr_obj rx203_cstack, rx203_cur, rx203_curclass, "$!cstack"
  rx203_fail:
    unless rx203_bstack, rx203_done
    pop $I19, rx203_bstack
    if_null rx203_cstack, rx203_cstack_done
    unless rx203_cstack, rx203_cstack_done
    dec $I19
    set $P11, rx203_cstack[$I19]
  rx203_cstack_done:
    pop rx203_rep, rx203_bstack
    pop rx203_pos, rx203_bstack
    pop $I19, rx203_bstack
    lt rx203_pos, -1, rx203_done
    lt rx203_pos, 0, rx203_fail
    eq $I19, 0, rx203_fail
    if_null rx203_cstack, rx203_jump
    elements $I18, rx203_bstack
    le $I18, 0, rx203_cut
    dec $I18
    set $I18, rx203_bstack[$I18]
  rx203_cut:
    assign rx203_cstack, $I18
  rx203_jump:
    jump $I19
  rx203_done:
    rx203_cur."!cursor_fail"()
    .return (rx203_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1340317687.034_caps"  :subid("270_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 128
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1340317687.034_nfa"  :subid("271_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 128
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 58
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "panic"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<lwb>"  :subid("61_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1277
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 129
    .lex "self", param_1277
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1278
    .lex "$/", $P1279
    .local string rx207_tgt
    .local int rx207_pos
    .local int rx207_off
    .local int rx207_eos
    .local int rx207_rep
    .local pmc rx207_cur
    .local pmc rx207_curclass
    .local pmc rx207_bstack
    .local pmc rx207_cstack
    (rx207_cur, rx207_tgt, rx207_pos, rx207_curclass, rx207_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx207_cur
    length rx207_eos, rx207_tgt
    eq $I19, 1, rx207_restart
    repr_get_attr_int $I11, self, rx207_curclass, "$!from"
    ne $I11, -1, rxscan208_done
    goto rxscan208_scan
  rxscan208_loop:
    inc rx207_pos
    gt rx207_pos, rx207_eos, rx207_fail
    repr_bind_attr_int rx207_cur, rx207_curclass, "$!from", rx207_pos
  rxscan208_scan:
    nqp_rxmark rx207_bstack, rxscan208_loop, rx207_pos, 0
  rxscan208_done:
    nqp_rxmark rx207_bstack, rxcap209_fail, rx207_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt210_0
    nqp_push_label $P11, alt210_1
    nqp_rxmark rx207_bstack, alt210_end, -1, 0
    rx207_cur."!alt"(rx207_pos, ucs4:"alt_nfa_62_1340317687.46", $P11)
    goto rx207_fail
  alt210_0:
    add $I11, rx207_pos, 2
    gt $I11, rx207_eos, rx207_fail
    substr $S10, rx207_tgt, rx207_pos, 2
    ne $S10, ucs4:"<<", rx207_fail
    add rx207_pos, 2
    goto alt210_end
  alt210_1:
    add $I11, rx207_pos, 1
    gt $I11, rx207_eos, rx207_fail
    substr $S10, rx207_tgt, rx207_pos, 1
    ne $S10, ucs4:"\x{ab}", rx207_fail
    add rx207_pos, 1
    goto alt210_end
  alt210_end:
    nqp_rxcommit rx207_bstack, alt210_end
    nqp_rxpeek $I19, rx207_bstack, rxcap209_fail
    inc $I19
    set $I11, rx207_bstack[$I19]
    $P11 = rx207_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx207_pos)
    rx207_cstack = rx207_cur."!cursor_capture"($P11, "sym")
    goto rxcap209_done
  rxcap209_fail:
    goto rx207_fail
  rxcap209_done:
    rx207_cur."!cursor_pass"(rx207_pos, "metachar:sym<lwb>", 'backtrack'=>1)
    .return (rx207_cur)
  rx207_restart:
    repr_get_attr_obj rx207_cstack, rx207_cur, rx207_curclass, "$!cstack"
  rx207_fail:
    unless rx207_bstack, rx207_done
    pop $I19, rx207_bstack
    if_null rx207_cstack, rx207_cstack_done
    unless rx207_cstack, rx207_cstack_done
    dec $I19
    set $P11, rx207_cstack[$I19]
  rx207_cstack_done:
    pop rx207_rep, rx207_bstack
    pop rx207_pos, rx207_bstack
    pop $I19, rx207_bstack
    lt rx207_pos, -1, rx207_done
    lt rx207_pos, 0, rx207_fail
    eq $I19, 0, rx207_fail
    if_null rx207_cstack, rx207_jump
    elements $I18, rx207_bstack
    le $I18, 0, rx207_cut
    dec $I18
    set $I18, rx207_bstack[$I18]
  rx207_cut:
    assign rx207_cstack, $I18
  rx207_jump:
    jump $I19
  rx207_done:
    rx207_cur."!cursor_fail"()
    .return (rx207_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "61_1340317687.034_caps"  :subid("272_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 129
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "61_1340317687.034_nfa"  :subid("273_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 129
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 60
    push $P104, 2
    push $P104, 2
    push $P104, 171
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 60
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "61_1340317687.034_alt_nfa_62_1340317687.46"  :subid("274_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 129
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 60
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 60
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 171
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P107
    push $P109, $P108
    new $P110, "ResizablePMCArray"
    push $P110, $P106
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<rwb>"  :subid("63_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1284
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 130
    .lex "self", param_1284
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1285
    .lex "$/", $P1286
    .local string rx211_tgt
    .local int rx211_pos
    .local int rx211_off
    .local int rx211_eos
    .local int rx211_rep
    .local pmc rx211_cur
    .local pmc rx211_curclass
    .local pmc rx211_bstack
    .local pmc rx211_cstack
    (rx211_cur, rx211_tgt, rx211_pos, rx211_curclass, rx211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx211_cur
    length rx211_eos, rx211_tgt
    eq $I19, 1, rx211_restart
    repr_get_attr_int $I11, self, rx211_curclass, "$!from"
    ne $I11, -1, rxscan212_done
    goto rxscan212_scan
  rxscan212_loop:
    inc rx211_pos
    gt rx211_pos, rx211_eos, rx211_fail
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!from", rx211_pos
  rxscan212_scan:
    nqp_rxmark rx211_bstack, rxscan212_loop, rx211_pos, 0
  rxscan212_done:
    nqp_rxmark rx211_bstack, rxcap213_fail, rx211_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt214_0
    nqp_push_label $P11, alt214_1
    nqp_rxmark rx211_bstack, alt214_end, -1, 0
    rx211_cur."!alt"(rx211_pos, ucs4:"alt_nfa_64_1340317687.468", $P11)
    goto rx211_fail
  alt214_0:
    add $I11, rx211_pos, 2
    gt $I11, rx211_eos, rx211_fail
    substr $S10, rx211_tgt, rx211_pos, 2
    ne $S10, ucs4:">>", rx211_fail
    add rx211_pos, 2
    goto alt214_end
  alt214_1:
    add $I11, rx211_pos, 1
    gt $I11, rx211_eos, rx211_fail
    substr $S10, rx211_tgt, rx211_pos, 1
    ne $S10, ucs4:"\x{bb}", rx211_fail
    add rx211_pos, 1
    goto alt214_end
  alt214_end:
    nqp_rxcommit rx211_bstack, alt214_end
    nqp_rxpeek $I19, rx211_bstack, rxcap213_fail
    inc $I19
    set $I11, rx211_bstack[$I19]
    $P11 = rx211_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx211_pos)
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "sym")
    goto rxcap213_done
  rxcap213_fail:
    goto rx211_fail
  rxcap213_done:
    rx211_cur."!cursor_pass"(rx211_pos, "metachar:sym<rwb>", 'backtrack'=>1)
    .return (rx211_cur)
  rx211_restart:
    repr_get_attr_obj rx211_cstack, rx211_cur, rx211_curclass, "$!cstack"
  rx211_fail:
    unless rx211_bstack, rx211_done
    pop $I19, rx211_bstack
    if_null rx211_cstack, rx211_cstack_done
    unless rx211_cstack, rx211_cstack_done
    dec $I19
    set $P11, rx211_cstack[$I19]
  rx211_cstack_done:
    pop rx211_rep, rx211_bstack
    pop rx211_pos, rx211_bstack
    pop $I19, rx211_bstack
    lt rx211_pos, -1, rx211_done
    lt rx211_pos, 0, rx211_fail
    eq $I19, 0, rx211_fail
    if_null rx211_cstack, rx211_jump
    elements $I18, rx211_bstack
    le $I18, 0, rx211_cut
    dec $I18
    set $I18, rx211_bstack[$I18]
  rx211_cut:
    assign rx211_cstack, $I18
  rx211_jump:
    jump $I19
  rx211_done:
    rx211_cur."!cursor_fail"()
    .return (rx211_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "63_1340317687.034_caps"  :subid("275_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 130
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "63_1340317687.034_nfa"  :subid("276_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 130
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 62
    push $P104, 2
    push $P104, 2
    push $P104, 187
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "63_1340317687.034_alt_nfa_64_1340317687.468"  :subid("277_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 130
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 62
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 187
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P107
    push $P109, $P108
    new $P110, "ResizablePMCArray"
    push $P110, $P106
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<bs>"  :subid("65_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1291
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 131
    .lex "self", param_1291
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1292
    .lex "$/", $P1293
    .local string rx215_tgt
    .local int rx215_pos
    .local int rx215_off
    .local int rx215_eos
    .local int rx215_rep
    .local pmc rx215_cur
    .local pmc rx215_curclass
    .local pmc rx215_bstack
    .local pmc rx215_cstack
    (rx215_cur, rx215_tgt, rx215_pos, rx215_curclass, rx215_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx215_cur
    length rx215_eos, rx215_tgt
    eq $I19, 1, rx215_restart
    repr_get_attr_int $I11, self, rx215_curclass, "$!from"
    ne $I11, -1, rxscan216_done
    goto rxscan216_scan
  rxscan216_loop:
    inc rx215_pos
    gt rx215_pos, rx215_eos, rx215_fail
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!from", rx215_pos
  rxscan216_scan:
    nqp_rxmark rx215_bstack, rxscan216_loop, rx215_pos, 0
  rxscan216_done:
    add $I11, rx215_pos, 1
    gt $I11, rx215_eos, rx215_fail
    substr $S10, rx215_tgt, rx215_pos, 1
    ne $S10, ucs4:"\\", rx215_fail
    add rx215_pos, 1
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail
    nqp_rxmark rx215_bstack, rxsubrule217_pass, -1, 0
  rxsubrule217_pass:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    rx215_cur."!cursor_pass"(rx215_pos, "metachar:sym<bs>", 'backtrack'=>1)
    .return (rx215_cur)
  rx215_restart:
    repr_get_attr_obj rx215_cstack, rx215_cur, rx215_curclass, "$!cstack"
  rx215_fail:
    unless rx215_bstack, rx215_done
    pop $I19, rx215_bstack
    if_null rx215_cstack, rx215_cstack_done
    unless rx215_cstack, rx215_cstack_done
    dec $I19
    set $P11, rx215_cstack[$I19]
  rx215_cstack_done:
    pop rx215_rep, rx215_bstack
    pop rx215_pos, rx215_bstack
    pop $I19, rx215_bstack
    lt rx215_pos, -1, rx215_done
    lt rx215_pos, 0, rx215_fail
    eq $I19, 0, rx215_fail
    if_null rx215_cstack, rx215_jump
    elements $I18, rx215_bstack
    le $I18, 0, rx215_cut
    dec $I18
    set $I18, rx215_bstack[$I18]
  rx215_cut:
    assign rx215_cstack, $I18
  rx215_jump:
    jump $I19
  rx215_done:
    rx215_cur."!cursor_fail"()
    .return (rx215_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "65_1340317687.034_caps"  :subid("278_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 131
    new $P103, "Hash"
    set $P103["backslash"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "65_1340317687.034_nfa"  :subid("279_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 131
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 92
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "backslash"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<mod>"  :subid("66_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1297
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 132
    .lex "self", param_1297
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1298
    .lex "$/", $P1299
    .local string rx218_tgt
    .local int rx218_pos
    .local int rx218_off
    .local int rx218_eos
    .local int rx218_rep
    .local pmc rx218_cur
    .local pmc rx218_curclass
    .local pmc rx218_bstack
    .local pmc rx218_cstack
    (rx218_cur, rx218_tgt, rx218_pos, rx218_curclass, rx218_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx218_cur
    length rx218_eos, rx218_tgt
    eq $I19, 1, rx218_restart
    repr_get_attr_int $I11, self, rx218_curclass, "$!from"
    ne $I11, -1, rxscan219_done
    goto rxscan219_scan
  rxscan219_loop:
    inc rx218_pos
    gt rx218_pos, rx218_eos, rx218_fail
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!from", rx218_pos
  rxscan219_scan:
    nqp_rxmark rx218_bstack, rxscan219_loop, rx218_pos, 0
  rxscan219_done:
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."mod_internal"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail
    nqp_rxmark rx218_bstack, rxsubrule220_pass, -1, 0
  rxsubrule220_pass:
    rx218_cstack = rx218_cur."!cursor_capture"($P11, "mod_internal")
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    rx218_cur."!cursor_pass"(rx218_pos, "metachar:sym<mod>", 'backtrack'=>1)
    .return (rx218_cur)
  rx218_restart:
    repr_get_attr_obj rx218_cstack, rx218_cur, rx218_curclass, "$!cstack"
  rx218_fail:
    unless rx218_bstack, rx218_done
    pop $I19, rx218_bstack
    if_null rx218_cstack, rx218_cstack_done
    unless rx218_cstack, rx218_cstack_done
    dec $I19
    set $P11, rx218_cstack[$I19]
  rx218_cstack_done:
    pop rx218_rep, rx218_bstack
    pop rx218_pos, rx218_bstack
    pop $I19, rx218_bstack
    lt rx218_pos, -1, rx218_done
    lt rx218_pos, 0, rx218_fail
    eq $I19, 0, rx218_fail
    if_null rx218_cstack, rx218_jump
    elements $I18, rx218_bstack
    le $I18, 0, rx218_cut
    dec $I18
    set $I18, rx218_bstack[$I18]
  rx218_cut:
    assign rx218_cstack, $I18
  rx218_jump:
    jump $I19
  rx218_done:
    rx218_cur."!cursor_fail"()
    .return (rx218_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "66_1340317687.034_caps"  :subid("280_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 132
    new $P103, "Hash"
    set $P103["mod_internal"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "66_1340317687.034_nfa"  :subid("281_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 132
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "mod_internal"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<quantifier>"  :subid("67_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1303
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 133
    .lex "self", param_1303
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1304
    .lex "$/", $P1305
    .local string rx221_tgt
    .local int rx221_pos
    .local int rx221_off
    .local int rx221_eos
    .local int rx221_rep
    .local pmc rx221_cur
    .local pmc rx221_curclass
    .local pmc rx221_bstack
    .local pmc rx221_cstack
    (rx221_cur, rx221_tgt, rx221_pos, rx221_curclass, rx221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx221_cur
    length rx221_eos, rx221_tgt
    eq $I19, 1, rx221_restart
    repr_get_attr_int $I11, self, rx221_curclass, "$!from"
    ne $I11, -1, rxscan222_done
    goto rxscan222_scan
  rxscan222_loop:
    inc rx221_pos
    gt rx221_pos, rx221_eos, rx221_fail
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!from", rx221_pos
  rxscan222_scan:
    nqp_rxmark rx221_bstack, rxscan222_loop, rx221_pos, 0
  rxscan222_done:
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!pos", rx221_pos
    $P11 = rx221_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx221_curclass, "$!pos"
    lt $I11, 0, rx221_fail
    nqp_rxmark rx221_bstack, rxsubrule223_pass, -1, 0
  rxsubrule223_pass:
    rx221_cstack = rx221_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx221_pos, $P11, rx221_curclass, "$!pos"
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!pos", rx221_pos
    $P11 = rx221_cur."panic"("Quantifier quantifies nothing")
    repr_get_attr_int $I11, $P11, rx221_curclass, "$!pos"
    lt $I11, 0, rx221_fail
    repr_get_attr_int rx221_pos, $P11, rx221_curclass, "$!pos"
    rx221_cur."!cursor_pass"(rx221_pos, "metachar:sym<quantifier>", 'backtrack'=>1)
    .return (rx221_cur)
  rx221_restart:
    repr_get_attr_obj rx221_cstack, rx221_cur, rx221_curclass, "$!cstack"
  rx221_fail:
    unless rx221_bstack, rx221_done
    pop $I19, rx221_bstack
    if_null rx221_cstack, rx221_cstack_done
    unless rx221_cstack, rx221_cstack_done
    dec $I19
    set $P11, rx221_cstack[$I19]
  rx221_cstack_done:
    pop rx221_rep, rx221_bstack
    pop rx221_pos, rx221_bstack
    pop $I19, rx221_bstack
    lt rx221_pos, -1, rx221_done
    lt rx221_pos, 0, rx221_fail
    eq $I19, 0, rx221_fail
    if_null rx221_cstack, rx221_jump
    elements $I18, rx221_bstack
    le $I18, 0, rx221_cut
    dec $I18
    set $I18, rx221_bstack[$I18]
  rx221_cut:
    assign rx221_cstack, $I18
  rx221_jump:
    jump $I19
  rx221_done:
    rx221_cur."!cursor_fail"()
    .return (rx221_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "67_1340317687.034_caps"  :subid("282_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 133
    new $P103, "Hash"
    set $P103["quantifier"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "67_1340317687.034_nfa"  :subid("283_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 133
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "quantifier"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "panic"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<~>"  :subid("68_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1309
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 138
    .lex "self", param_1309
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1310
    .lex "$/", $P1311
    .local string rx225_tgt
    .local int rx225_pos
    .local int rx225_off
    .local int rx225_eos
    .local int rx225_rep
    .local pmc rx225_cur
    .local pmc rx225_curclass
    .local pmc rx225_bstack
    .local pmc rx225_cstack
    (rx225_cur, rx225_tgt, rx225_pos, rx225_curclass, rx225_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx225_cur
    length rx225_eos, rx225_tgt
    eq $I19, 1, rx225_restart
    repr_get_attr_int $I11, self, rx225_curclass, "$!from"
    ne $I11, -1, rxscan226_done
    goto rxscan226_scan
  rxscan226_loop:
    inc rx225_pos
    gt rx225_pos, rx225_eos, rx225_fail
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!from", rx225_pos
  rxscan226_scan:
    nqp_rxmark rx225_bstack, rxscan226_loop, rx225_pos, 0
  rxscan226_done:
    nqp_rxmark rx225_bstack, rxcap227_fail, rx225_pos, 0
    add $I11, rx225_pos, 1
    gt $I11, rx225_eos, rx225_fail
    substr $S10, rx225_tgt, rx225_pos, 1
    ne $S10, ucs4:"~", rx225_fail
    add rx225_pos, 1
    nqp_rxpeek $I19, rx225_bstack, rxcap227_fail
    inc $I19
    set $I11, rx225_bstack[$I19]
    $P11 = rx225_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx225_pos)
    rx225_cstack = rx225_cur."!cursor_capture"($P11, "sym")
    goto rxcap227_done
  rxcap227_fail:
    goto rx225_fail
  rxcap227_done:
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!pos", rx225_pos
    $P11 = rx225_cur."ws"()
    repr_get_attr_int $I11, $P11, rx225_curclass, "$!pos"
    lt $I11, 0, rx225_fail
    repr_get_attr_int rx225_pos, $P11, rx225_curclass, "$!pos"
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!pos", rx225_pos
    $P11 = rx225_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx225_curclass, "$!pos"
    lt $I11, 0, rx225_fail
    nqp_rxmark rx225_bstack, rxsubrule229_pass, -1, 0
  rxsubrule229_pass:
    rx225_cstack = rx225_cur."!cursor_capture"($P11, "GOAL")
    repr_get_attr_int rx225_pos, $P11, rx225_curclass, "$!pos"
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!pos", rx225_pos
    $P11 = rx225_cur."ws"()
    repr_get_attr_int $I11, $P11, rx225_curclass, "$!pos"
    lt $I11, 0, rx225_fail
    repr_get_attr_int rx225_pos, $P11, rx225_curclass, "$!pos"
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!pos", rx225_pos
    $P11 = rx225_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx225_curclass, "$!pos"
    lt $I11, 0, rx225_fail
    nqp_rxmark rx225_bstack, rxsubrule231_pass, -1, 0
  rxsubrule231_pass:
    rx225_cstack = rx225_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx225_pos, $P11, rx225_curclass, "$!pos"
    rx225_cur."!cursor_pass"(rx225_pos, "metachar:sym<~>", 'backtrack'=>1)
    .return (rx225_cur)
  rx225_restart:
    repr_get_attr_obj rx225_cstack, rx225_cur, rx225_curclass, "$!cstack"
  rx225_fail:
    unless rx225_bstack, rx225_done
    pop $I19, rx225_bstack
    if_null rx225_cstack, rx225_cstack_done
    unless rx225_cstack, rx225_cstack_done
    dec $I19
    set $P11, rx225_cstack[$I19]
  rx225_cstack_done:
    pop rx225_rep, rx225_bstack
    pop rx225_pos, rx225_bstack
    pop $I19, rx225_bstack
    lt rx225_pos, -1, rx225_done
    lt rx225_pos, 0, rx225_fail
    eq $I19, 0, rx225_fail
    if_null rx225_cstack, rx225_jump
    elements $I18, rx225_bstack
    le $I18, 0, rx225_cut
    dec $I18
    set $I18, rx225_bstack[$I18]
  rx225_cut:
    assign rx225_cstack, $I18
  rx225_jump:
    jump $I19
  rx225_done:
    rx225_cur."!cursor_fail"()
    .return (rx225_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "68_1340317687.034_caps"  :subid("284_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 138
    new $P103, "Hash"
    set $P103["sym"], 0
    set $P103["GOAL"], 0
    set $P103["EXPR"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "68_1340317687.034_nfa"  :subid("285_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 138
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 126
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "ws"
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "quantified_atom"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ws"
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "quantified_atom"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P103
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<{*}>"  :subid("69_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1315
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 144
    .lex "self", param_1315
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1316
    .lex "$/", $P1317
    .local string rx232_tgt
    .local int rx232_pos
    .local int rx232_off
    .local int rx232_eos
    .local int rx232_rep
    .local pmc rx232_cur
    .local pmc rx232_curclass
    .local pmc rx232_bstack
    .local pmc rx232_cstack
    (rx232_cur, rx232_tgt, rx232_pos, rx232_curclass, rx232_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx232_cur
    length rx232_eos, rx232_tgt
    eq $I19, 1, rx232_restart
    repr_get_attr_int $I11, self, rx232_curclass, "$!from"
    ne $I11, -1, rxscan233_done
    goto rxscan233_scan
  rxscan233_loop:
    inc rx232_pos
    gt rx232_pos, rx232_eos, rx232_fail
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!from", rx232_pos
  rxscan233_scan:
    nqp_rxmark rx232_bstack, rxscan233_loop, rx232_pos, 0
  rxscan233_done:
    nqp_rxmark rx232_bstack, rxcap234_fail, rx232_pos, 0
    add $I11, rx232_pos, 3
    gt $I11, rx232_eos, rx232_fail
    substr $S10, rx232_tgt, rx232_pos, 3
    ne $S10, ucs4:"{*}", rx232_fail
    add rx232_pos, 3
    nqp_rxpeek $I19, rx232_bstack, rxcap234_fail
    inc $I19
    set $I11, rx232_bstack[$I19]
    $P11 = rx232_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx232_pos)
    rx232_cstack = rx232_cur."!cursor_capture"($P11, "sym")
    goto rxcap234_done
  rxcap234_fail:
    goto rx232_fail
  rxcap234_done:
  # rx rxquantr235 ** 0..1
    nqp_rxmark rx232_bstack, rxquantr235_done, rx232_pos, 0
  rxquantr235_loop:
  # rx rxquantr236 ** 0..-1
    nqp_rxmark rx232_bstack, rxquantr236_done, rx232_pos, 0
  rxquantr236_loop:
    ge rx232_pos, rx232_eos, rx232_fail
    substr $S11, rx232_tgt, rx232_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx232_fail
    inc rx232_pos
    nqp_rxpeek $I19, rx232_bstack, rxquantr236_done
    inc $I19
    inc $I19
    set rx232_rep, rx232_bstack[$I19]
    nqp_rxcommit rx232_bstack, rxquantr236_done
    inc rx232_rep
    nqp_rxmark rx232_bstack, rxquantr236_done, rx232_pos, rx232_rep
    goto rxquantr236_loop
  rxquantr236_done:
    add $I11, rx232_pos, 3
    gt $I11, rx232_eos, rx232_fail
    substr $S10, rx232_tgt, rx232_pos, 3
    ne $S10, ucs4:"#= ", rx232_fail
    add rx232_pos, 3
  # rx rxquantr237 ** 0..-1
    nqp_rxmark rx232_bstack, rxquantr237_done, rx232_pos, 0
  rxquantr237_loop:
    ge rx232_pos, rx232_eos, rx232_fail
    substr $S11, rx232_tgt, rx232_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx232_fail
    inc rx232_pos
    nqp_rxpeek $I19, rx232_bstack, rxquantr237_done
    inc $I19
    inc $I19
    set rx232_rep, rx232_bstack[$I19]
    nqp_rxcommit rx232_bstack, rxquantr237_done
    inc rx232_rep
    nqp_rxmark rx232_bstack, rxquantr237_done, rx232_pos, rx232_rep
    goto rxquantr237_loop
  rxquantr237_done:
    nqp_rxmark rx232_bstack, rxcap238_fail, rx232_pos, 0
  # rx rxquantr239 ** 1..-1
    nqp_rxmark rx232_bstack, rxquantr239_done, -1, 0
  rxquantr239_loop:
    ge rx232_pos, rx232_eos, rx232_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx232_tgt, rx232_pos
    if $I11, rx232_fail
    add rx232_pos, 1
    nqp_rxpeek $I19, rx232_bstack, rxquantr239_done
    inc $I19
    inc $I19
    set rx232_rep, rx232_bstack[$I19]
    nqp_rxcommit rx232_bstack, rxquantr239_done
    inc rx232_rep
    nqp_rxmark rx232_bstack, rxquantr239_done, rx232_pos, rx232_rep
    goto rxquantr239_loop
  rxquantr239_done:
  # rx rxquantr240 ** 0..-1
    nqp_rxmark rx232_bstack, rxquantr240_done, rx232_pos, 0
  rxquantr240_loop:
  # rx rxquantr241 ** 1..-1
    nqp_rxmark rx232_bstack, rxquantr241_done, -1, 0
  rxquantr241_loop:
    ge rx232_pos, rx232_eos, rx232_fail
    substr $S11, rx232_tgt, rx232_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx232_fail
    inc rx232_pos
    nqp_rxpeek $I19, rx232_bstack, rxquantr241_done
    inc $I19
    inc $I19
    set rx232_rep, rx232_bstack[$I19]
    nqp_rxcommit rx232_bstack, rxquantr241_done
    inc rx232_rep
    nqp_rxmark rx232_bstack, rxquantr241_done, rx232_pos, rx232_rep
    goto rxquantr241_loop
  rxquantr241_done:
  # rx rxquantr242 ** 1..-1
    nqp_rxmark rx232_bstack, rxquantr242_done, -1, 0
  rxquantr242_loop:
    ge rx232_pos, rx232_eos, rx232_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx232_tgt, rx232_pos
    if $I11, rx232_fail
    add rx232_pos, 1
    nqp_rxpeek $I19, rx232_bstack, rxquantr242_done
    inc $I19
    inc $I19
    set rx232_rep, rx232_bstack[$I19]
    nqp_rxcommit rx232_bstack, rxquantr242_done
    inc rx232_rep
    nqp_rxmark rx232_bstack, rxquantr242_done, rx232_pos, rx232_rep
    goto rxquantr242_loop
  rxquantr242_done:
    nqp_rxpeek $I19, rx232_bstack, rxquantr240_done
    inc $I19
    inc $I19
    set rx232_rep, rx232_bstack[$I19]
    nqp_rxcommit rx232_bstack, rxquantr240_done
    inc rx232_rep
    nqp_rxmark rx232_bstack, rxquantr240_done, rx232_pos, rx232_rep
    goto rxquantr240_loop
  rxquantr240_done:
    nqp_rxpeek $I19, rx232_bstack, rxcap238_fail
    inc $I19
    set $I11, rx232_bstack[$I19]
    $P11 = rx232_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx232_pos)
    rx232_cstack = rx232_cur."!cursor_capture"($P11, "key")
    goto rxcap238_done
  rxcap238_fail:
    goto rx232_fail
  rxcap238_done:
    nqp_rxpeek $I19, rx232_bstack, rxquantr235_done
    inc $I19
    inc $I19
    set rx232_rep, rx232_bstack[$I19]
    nqp_rxcommit rx232_bstack, rxquantr235_done
    inc rx232_rep
  rxquantr235_done:
    rx232_cur."!cursor_pass"(rx232_pos, "metachar:sym<{*}>", 'backtrack'=>1)
    .return (rx232_cur)
  rx232_restart:
    repr_get_attr_obj rx232_cstack, rx232_cur, rx232_curclass, "$!cstack"
  rx232_fail:
    unless rx232_bstack, rx232_done
    pop $I19, rx232_bstack
    if_null rx232_cstack, rx232_cstack_done
    unless rx232_cstack, rx232_cstack_done
    dec $I19
    set $P11, rx232_cstack[$I19]
  rx232_cstack_done:
    pop rx232_rep, rx232_bstack
    pop rx232_pos, rx232_bstack
    pop $I19, rx232_bstack
    lt rx232_pos, -1, rx232_done
    lt rx232_pos, 0, rx232_fail
    eq $I19, 0, rx232_fail
    if_null rx232_cstack, rx232_jump
    elements $I18, rx232_bstack
    le $I18, 0, rx232_cut
    dec $I18
    set $I18, rx232_bstack[$I18]
  rx232_cut:
    assign rx232_cstack, $I18
  rx232_jump:
    jump $I19
  rx232_done:
    rx232_cur."!cursor_fail"()
    .return (rx232_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "69_1340317687.034_caps"  :subid("286_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 144
    new $P103, "Hash"
    set $P103["sym"], 0
    set $P103["key"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "69_1340317687.034_nfa"  :subid("287_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 144
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 123
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 42
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 125
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 6
    push $P107, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P107, 4
    push $P107, 1
    push $P107, 0
    push $P107, 5
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 35
    push $P108, 6
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 61
    push $P109, 7
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 32
    push $P110, 8
    new $P111, "ResizablePMCArray"
    push $P111, 6
    push $P111, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P111, 8
    push $P111, 1
    push $P111, 0
    push $P111, 9
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 10
    new $P113, "ResizablePMCArray"
    push $P113, 5
    push $P113, 32
    push $P113, 11
    new $P114, "ResizablePMCArray"
    push $P114, 1
    push $P114, 0
    push $P114, 10
    push $P114, 1
    push $P114, 0
    push $P114, 12
    push $P114, 1
    push $P114, 0
    push $P114, 13
    push $P114, 1
    push $P114, 0
    push $P114, 0
    new $P115, "ResizablePMCArray"
    new $P116, "ResizablePMCArray"
    push $P116, 6
    push $P116, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P116, 14
    new $P117, "ResizablePMCArray"
    push $P117, 1
    push $P117, 0
    push $P117, 13
    push $P117, 1
    push $P117, 0
    push $P117, 15
    push $P117, 1
    push $P117, 0
    push $P117, 16
    new $P118, "ResizablePMCArray"
    new $P119, "ResizablePMCArray"
    push $P119, 5
    push $P119, 32
    push $P119, 17
    new $P120, "ResizablePMCArray"
    push $P120, 1
    push $P120, 0
    push $P120, 16
    push $P120, 1
    push $P120, 0
    push $P120, 11
    new $P121, "ResizablePMCArray"
    push $P121, $P103
    push $P121, $P104
    push $P121, $P105
    push $P121, $P106
    push $P121, $P107
    push $P121, $P108
    push $P121, $P109
    push $P121, $P110
    push $P121, $P111
    push $P121, $P112
    push $P121, $P113
    push $P121, $P114
    push $P121, $P115
    push $P121, $P116
    push $P121, $P117
    push $P121, $P118
    push $P121, $P119
    push $P121, $P120
    .return ($P121)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<assert>"  :subid("70_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1321
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 148
    .lex "self", param_1321
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1322
    .lex "$/", $P1323
    .local string rx243_tgt
    .local int rx243_pos
    .local int rx243_off
    .local int rx243_eos
    .local int rx243_rep
    .local pmc rx243_cur
    .local pmc rx243_curclass
    .local pmc rx243_bstack
    .local pmc rx243_cstack
    (rx243_cur, rx243_tgt, rx243_pos, rx243_curclass, rx243_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx243_cur
    length rx243_eos, rx243_tgt
    eq $I19, 1, rx243_restart
    repr_get_attr_int $I11, self, rx243_curclass, "$!from"
    ne $I11, -1, rxscan244_done
    goto rxscan244_scan
  rxscan244_loop:
    inc rx243_pos
    gt rx243_pos, rx243_eos, rx243_fail
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!from", rx243_pos
  rxscan244_scan:
    nqp_rxmark rx243_bstack, rxscan244_loop, rx243_pos, 0
  rxscan244_done:
    add $I11, rx243_pos, 1
    gt $I11, rx243_eos, rx243_fail
    substr $S10, rx243_tgt, rx243_pos, 1
    ne $S10, ucs4:"<", rx243_fail
    add rx243_pos, 1
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!pos", rx243_pos
    $P11 = rx243_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx243_curclass, "$!pos"
    lt $I11, 0, rx243_fail
    nqp_rxmark rx243_bstack, rxsubrule245_pass, -1, 0
  rxsubrule245_pass:
    rx243_cstack = rx243_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx243_pos, $P11, rx243_curclass, "$!pos"
  alt246_0:
    nqp_rxmark rx243_bstack, alt246_1, rx243_pos, 0
    add $I11, rx243_pos, 1
    gt $I11, rx243_eos, rx243_fail
    substr $S10, rx243_tgt, rx243_pos, 1
    ne $S10, ucs4:">", rx243_fail
    add rx243_pos, 1
    goto alt246_end
  alt246_1:
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!pos", rx243_pos
    $P11 = rx243_cur."panic"("regex assertion not terminated by angle bracket")
    repr_get_attr_int $I11, $P11, rx243_curclass, "$!pos"
    lt $I11, 0, rx243_fail
    repr_get_attr_int rx243_pos, $P11, rx243_curclass, "$!pos"
  alt246_end:
    rx243_cur."!cursor_pass"(rx243_pos, "metachar:sym<assert>", 'backtrack'=>1)
    .return (rx243_cur)
  rx243_restart:
    repr_get_attr_obj rx243_cstack, rx243_cur, rx243_curclass, "$!cstack"
  rx243_fail:
    unless rx243_bstack, rx243_done
    pop $I19, rx243_bstack
    if_null rx243_cstack, rx243_cstack_done
    unless rx243_cstack, rx243_cstack_done
    dec $I19
    set $P11, rx243_cstack[$I19]
  rx243_cstack_done:
    pop rx243_rep, rx243_bstack
    pop rx243_pos, rx243_bstack
    pop $I19, rx243_bstack
    lt rx243_pos, -1, rx243_done
    lt rx243_pos, 0, rx243_fail
    eq $I19, 0, rx243_fail
    if_null rx243_cstack, rx243_jump
    elements $I18, rx243_bstack
    le $I18, 0, rx243_cut
    dec $I18
    set $I18, rx243_bstack[$I18]
  rx243_cut:
    assign rx243_cstack, $I18
  rx243_jump:
    jump $I19
  rx243_done:
    rx243_cur."!cursor_fail"()
    .return (rx243_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "70_1340317687.034_caps"  :subid("288_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 148
    new $P103, "Hash"
    set $P103["assertion"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "70_1340317687.034_nfa"  :subid("289_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 148
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 60
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "assertion"
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<var>"  :subid("71_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1327
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 153
    .lex "self", param_1327
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1328
    .lex "$/", $P1329
    .local string rx248_tgt
    .local int rx248_pos
    .local int rx248_off
    .local int rx248_eos
    .local int rx248_rep
    .local pmc rx248_cur
    .local pmc rx248_curclass
    .local pmc rx248_bstack
    .local pmc rx248_cstack
    (rx248_cur, rx248_tgt, rx248_pos, rx248_curclass, rx248_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx248_cur
    length rx248_eos, rx248_tgt
    eq $I19, 1, rx248_restart
    repr_get_attr_int $I11, self, rx248_curclass, "$!from"
    ne $I11, -1, rxscan249_done
    goto rxscan249_scan
  rxscan249_loop:
    inc rx248_pos
    gt rx248_pos, rx248_eos, rx248_fail
    repr_bind_attr_int rx248_cur, rx248_curclass, "$!from", rx248_pos
  rxscan249_scan:
    nqp_rxmark rx248_bstack, rxscan249_loop, rx248_pos, 0
  rxscan249_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt250_0
    nqp_push_label $P11, alt250_1
    nqp_rxmark rx248_bstack, alt250_end, -1, 0
    rx248_cur."!alt"(rx248_pos, ucs4:"alt_nfa_72_1340317687.542", $P11)
    goto rx248_fail
  alt250_0:
    add $I11, rx248_pos, 2
    gt $I11, rx248_eos, rx248_fail
    substr $S10, rx248_tgt, rx248_pos, 2
    ne $S10, ucs4:"$<", rx248_fail
    add rx248_pos, 2
    nqp_rxmark rx248_bstack, rxcap251_fail, rx248_pos, 0
  # rx rxquantr252 ** 1..-1
    nqp_rxmark rx248_bstack, rxquantr252_done, -1, 0
  rxquantr252_loop:
    ge rx248_pos, rx248_eos, rx248_fail
    substr $S11, rx248_tgt, rx248_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx248_fail
    inc rx248_pos
    nqp_rxpeek $I19, rx248_bstack, rxquantr252_done
    inc $I19
    inc $I19
    set rx248_rep, rx248_bstack[$I19]
    nqp_rxcommit rx248_bstack, rxquantr252_done
    inc rx248_rep
    nqp_rxmark rx248_bstack, rxquantr252_done, rx248_pos, rx248_rep
    goto rxquantr252_loop
  rxquantr252_done:
    nqp_rxpeek $I19, rx248_bstack, rxcap251_fail
    inc $I19
    set $I11, rx248_bstack[$I19]
    $P11 = rx248_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx248_pos)
    rx248_cstack = rx248_cur."!cursor_capture"($P11, "name")
    goto rxcap251_done
  rxcap251_fail:
    goto rx248_fail
  rxcap251_done:
    add $I11, rx248_pos, 1
    gt $I11, rx248_eos, rx248_fail
    substr $S10, rx248_tgt, rx248_pos, 1
    ne $S10, ucs4:">", rx248_fail
    add rx248_pos, 1
    goto alt250_end
  alt250_1:
    add $I11, rx248_pos, 1
    gt $I11, rx248_eos, rx248_fail
    substr $S10, rx248_tgt, rx248_pos, 1
    ne $S10, ucs4:"$", rx248_fail
    add rx248_pos, 1
    nqp_rxmark rx248_bstack, rxcap253_fail, rx248_pos, 0
  # rx rxquantr254 ** 1..-1
    nqp_rxmark rx248_bstack, rxquantr254_done, -1, 0
  rxquantr254_loop:
    ge rx248_pos, rx248_eos, rx248_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx248_tgt, rx248_pos
    unless $I11, rx248_fail
    add rx248_pos, 1
    nqp_rxpeek $I19, rx248_bstack, rxquantr254_done
    inc $I19
    inc $I19
    set rx248_rep, rx248_bstack[$I19]
    nqp_rxcommit rx248_bstack, rxquantr254_done
    inc rx248_rep
    nqp_rxmark rx248_bstack, rxquantr254_done, rx248_pos, rx248_rep
    goto rxquantr254_loop
  rxquantr254_done:
    nqp_rxpeek $I19, rx248_bstack, rxcap253_fail
    inc $I19
    set $I11, rx248_bstack[$I19]
    $P11 = rx248_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx248_pos)
    rx248_cstack = rx248_cur."!cursor_capture"($P11, "pos")
    goto rxcap253_done
  rxcap253_fail:
    goto rx248_fail
  rxcap253_done:
    goto alt250_end
  alt250_end:
    nqp_rxcommit rx248_bstack, alt250_end
  # rx rxquantr255 ** 0..1
    nqp_rxmark rx248_bstack, rxquantr255_done, rx248_pos, 0
  rxquantr255_loop:
    repr_bind_attr_int rx248_cur, rx248_curclass, "$!pos", rx248_pos
    $P11 = rx248_cur."ws"()
    repr_get_attr_int $I11, $P11, rx248_curclass, "$!pos"
    lt $I11, 0, rx248_fail
    repr_get_attr_int rx248_pos, $P11, rx248_curclass, "$!pos"
    add $I11, rx248_pos, 1
    gt $I11, rx248_eos, rx248_fail
    substr $S10, rx248_tgt, rx248_pos, 1
    ne $S10, ucs4:"=", rx248_fail
    add rx248_pos, 1
    repr_bind_attr_int rx248_cur, rx248_curclass, "$!pos", rx248_pos
    $P11 = rx248_cur."ws"()
    repr_get_attr_int $I11, $P11, rx248_curclass, "$!pos"
    lt $I11, 0, rx248_fail
    repr_get_attr_int rx248_pos, $P11, rx248_curclass, "$!pos"
    repr_bind_attr_int rx248_cur, rx248_curclass, "$!pos", rx248_pos
    $P11 = rx248_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx248_curclass, "$!pos"
    lt $I11, 0, rx248_fail
    nqp_rxmark rx248_bstack, rxsubrule258_pass, -1, 0
  rxsubrule258_pass:
    rx248_cstack = rx248_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx248_pos, $P11, rx248_curclass, "$!pos"
    nqp_rxpeek $I19, rx248_bstack, rxquantr255_done
    inc $I19
    inc $I19
    set rx248_rep, rx248_bstack[$I19]
    nqp_rxcommit rx248_bstack, rxquantr255_done
    inc rx248_rep
  rxquantr255_done:
    rx248_cur."!cursor_pass"(rx248_pos, "metachar:sym<var>", 'backtrack'=>1)
    .return (rx248_cur)
  rx248_restart:
    repr_get_attr_obj rx248_cstack, rx248_cur, rx248_curclass, "$!cstack"
  rx248_fail:
    unless rx248_bstack, rx248_done
    pop $I19, rx248_bstack
    if_null rx248_cstack, rx248_cstack_done
    unless rx248_cstack, rx248_cstack_done
    dec $I19
    set $P11, rx248_cstack[$I19]
  rx248_cstack_done:
    pop rx248_rep, rx248_bstack
    pop rx248_pos, rx248_bstack
    pop $I19, rx248_bstack
    lt rx248_pos, -1, rx248_done
    lt rx248_pos, 0, rx248_fail
    eq $I19, 0, rx248_fail
    if_null rx248_cstack, rx248_jump
    elements $I18, rx248_bstack
    le $I18, 0, rx248_cut
    dec $I18
    set $I18, rx248_bstack[$I18]
  rx248_cut:
    assign rx248_cstack, $I18
  rx248_jump:
    jump $I19
  rx248_done:
    rx248_cur."!cursor_fail"()
    .return (rx248_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "71_1340317687.034_caps"  :subid("290_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 153
    new $P103, "Hash"
    set $P103["name"], 0
    set $P103["pos"], 0
    set $P103["quantified_atom"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "71_1340317687.034_nfa"  :subid("291_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 153
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 36
    push $P104, 2
    push $P104, 2
    push $P104, 36
    push $P104, 8
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 60
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 7
    push $P107, ">"
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 4
    push $P108, 1
    push $P108, 0
    push $P108, 6
    push $P108, 2
    push $P108, 62
    push $P108, 7
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "ws"
    push $P110, 11
    push $P110, 1
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 9
    new $P112, "ResizablePMCArray"
    push $P112, 4
    push $P112, 8
    push $P112, 10
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 9
    push $P113, 1
    push $P113, 0
    push $P113, 7
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 61
    push $P114, 12
    new $P115, "ResizablePMCArray"
    push $P115, 8
    push $P115, "ws"
    push $P115, 13
    new $P116, "ResizablePMCArray"
    push $P116, 8
    push $P116, "quantified_atom"
    push $P116, 0
    new $P117, "ResizablePMCArray"
    push $P117, $P103
    push $P117, $P104
    push $P117, $P105
    push $P117, $P106
    push $P117, $P107
    push $P117, $P108
    push $P117, $P109
    push $P117, $P110
    push $P117, $P111
    push $P117, $P112
    push $P117, $P113
    push $P117, $P114
    push $P117, $P115
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "71_1340317687.034_alt_nfa_72_1340317687.542"  :subid("292_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 153
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 36
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 60
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 7
    push $P107, ">"
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 4
    push $P108, 1
    push $P108, 0
    push $P108, 6
    push $P108, 2
    push $P108, 62
    push $P108, 0
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, $P103
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    new $P111, "ResizablePMCArray"
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 36
    push $P112, 2
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 3
    new $P114, "ResizablePMCArray"
    push $P114, 4
    push $P114, 8
    push $P114, 4
    new $P115, "ResizablePMCArray"
    push $P115, 1
    push $P115, 0
    push $P115, 3
    push $P115, 1
    push $P115, 0
    push $P115, 0
    new $P116, "ResizablePMCArray"
    push $P116, $P111
    push $P116, $P112
    push $P116, $P113
    push $P116, $P114
    push $P116, $P115
    new $P117, "ResizablePMCArray"
    push $P117, $P110
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "metachar:sym<PIR>"  :subid("73_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1334
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 162
    .lex "self", param_1334
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1335
    .lex "$/", $P1336
    .local string rx259_tgt
    .local int rx259_pos
    .local int rx259_off
    .local int rx259_eos
    .local int rx259_rep
    .local pmc rx259_cur
    .local pmc rx259_curclass
    .local pmc rx259_bstack
    .local pmc rx259_cstack
    (rx259_cur, rx259_tgt, rx259_pos, rx259_curclass, rx259_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx259_cur
    length rx259_eos, rx259_tgt
    eq $I19, 1, rx259_restart
    repr_get_attr_int $I11, self, rx259_curclass, "$!from"
    ne $I11, -1, rxscan260_done
    goto rxscan260_scan
  rxscan260_loop:
    inc rx259_pos
    gt rx259_pos, rx259_eos, rx259_fail
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!from", rx259_pos
  rxscan260_scan:
    nqp_rxmark rx259_bstack, rxscan260_loop, rx259_pos, 0
  rxscan260_done:
    add $I11, rx259_pos, 6
    gt $I11, rx259_eos, rx259_fail
    substr $S10, rx259_tgt, rx259_pos, 6
    ne $S10, ucs4:":PIR{{", rx259_fail
    add rx259_pos, 6
    nqp_rxmark rx259_bstack, rxcap261_fail, rx259_pos, 0
  # rx rxquantf262 ** 0..-1
    set rx259_rep, 0
    nqp_rxmark rx259_bstack, rxquantf262_loop, rx259_pos, rx259_rep
    goto rxquantf262_done
  rxquantf262_loop:
    set $I12, rx259_rep
    ge rx259_pos, rx259_eos, rx259_fail
    add rx259_pos, 1
    set rx259_rep, $I12
    inc rx259_rep
    nqp_rxmark rx259_bstack, rxquantf262_loop, rx259_pos, rx259_rep
  rxquantf262_done:
    nqp_rxpeek $I19, rx259_bstack, rxcap261_fail
    inc $I19
    set $I11, rx259_bstack[$I19]
    $P11 = rx259_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx259_pos)
    rx259_cstack = rx259_cur."!cursor_capture"($P11, "pir")
    goto rxcap261_done
  rxcap261_fail:
    goto rx259_fail
  rxcap261_done:
    add $I11, rx259_pos, 2
    gt $I11, rx259_eos, rx259_fail
    substr $S10, rx259_tgt, rx259_pos, 2
    ne $S10, ucs4:"}}", rx259_fail
    add rx259_pos, 2
    rx259_cur."!cursor_pass"(rx259_pos, "metachar:sym<PIR>", 'backtrack'=>1)
    .return (rx259_cur)
  rx259_restart:
    repr_get_attr_obj rx259_cstack, rx259_cur, rx259_curclass, "$!cstack"
  rx259_fail:
    unless rx259_bstack, rx259_done
    pop $I19, rx259_bstack
    if_null rx259_cstack, rx259_cstack_done
    unless rx259_cstack, rx259_cstack_done
    dec $I19
    set $P11, rx259_cstack[$I19]
  rx259_cstack_done:
    pop rx259_rep, rx259_bstack
    pop rx259_pos, rx259_bstack
    pop $I19, rx259_bstack
    lt rx259_pos, -1, rx259_done
    lt rx259_pos, 0, rx259_fail
    eq $I19, 0, rx259_fail
    if_null rx259_cstack, rx259_jump
    elements $I18, rx259_bstack
    le $I18, 0, rx259_cut
    dec $I18
    set $I18, rx259_bstack[$I18]
  rx259_cut:
    assign rx259_cstack, $I18
  rx259_jump:
    jump $I19
  rx259_done:
    rx259_cur."!cursor_fail"()
    .return (rx259_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "73_1340317687.034_caps"  :subid("293_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 162
    new $P103, "Hash"
    set $P103["pir"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "73_1340317687.034_nfa"  :subid("294_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 162
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 58
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 80
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 73
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 82
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 123
    push $P108, 6
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 123
    push $P109, 7
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 65535
    push $P110, 7
    push $P110, 1
    push $P110, 0
    push $P110, 8
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 125
    push $P111, 9
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 125
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P103
    push $P113, $P104
    push $P113, $P105
    push $P113, $P106
    push $P113, $P107
    push $P113, $P108
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash"  :subid("74_1340317687.034")
    .param pmc param_1340
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 166
    .lex "self", param_1340
    $P101 = param_1340."!protoregex"("backslash")
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<s>"  :subid("75_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1342
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 167
    .lex "self", param_1342
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1343
    .lex "$/", $P1344
    .local string rx263_tgt
    .local int rx263_pos
    .local int rx263_off
    .local int rx263_eos
    .local int rx263_rep
    .local pmc rx263_cur
    .local pmc rx263_curclass
    .local pmc rx263_bstack
    .local pmc rx263_cstack
    (rx263_cur, rx263_tgt, rx263_pos, rx263_curclass, rx263_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx263_cur
    length rx263_eos, rx263_tgt
    eq $I19, 1, rx263_restart
    repr_get_attr_int $I11, self, rx263_curclass, "$!from"
    ne $I11, -1, rxscan264_done
    goto rxscan264_scan
  rxscan264_loop:
    inc rx263_pos
    gt rx263_pos, rx263_eos, rx263_fail
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!from", rx263_pos
  rxscan264_scan:
    nqp_rxmark rx263_bstack, rxscan264_loop, rx263_pos, 0
  rxscan264_done:
    nqp_rxmark rx263_bstack, rxcap265_fail, rx263_pos, 0
    ge rx263_pos, rx263_eos, rx263_fail
    substr $S11, rx263_tgt, rx263_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx263_fail
    inc rx263_pos
    nqp_rxpeek $I19, rx263_bstack, rxcap265_fail
    inc $I19
    set $I11, rx263_bstack[$I19]
    $P11 = rx263_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx263_pos)
    rx263_cstack = rx263_cur."!cursor_capture"($P11, "sym")
    goto rxcap265_done
  rxcap265_fail:
    goto rx263_fail
  rxcap265_done:
    rx263_cur."!cursor_pass"(rx263_pos, "backslash:sym<s>", 'backtrack'=>1)
    .return (rx263_cur)
  rx263_restart:
    repr_get_attr_obj rx263_cstack, rx263_cur, rx263_curclass, "$!cstack"
  rx263_fail:
    unless rx263_bstack, rx263_done
    pop $I19, rx263_bstack
    if_null rx263_cstack, rx263_cstack_done
    unless rx263_cstack, rx263_cstack_done
    dec $I19
    set $P11, rx263_cstack[$I19]
  rx263_cstack_done:
    pop rx263_rep, rx263_bstack
    pop rx263_pos, rx263_bstack
    pop $I19, rx263_bstack
    lt rx263_pos, -1, rx263_done
    lt rx263_pos, 0, rx263_fail
    eq $I19, 0, rx263_fail
    if_null rx263_cstack, rx263_jump
    elements $I18, rx263_bstack
    le $I18, 0, rx263_cut
    dec $I18
    set $I18, rx263_bstack[$I18]
  rx263_cut:
    assign rx263_cstack, $I18
  rx263_jump:
    jump $I19
  rx263_done:
    rx263_cur."!cursor_fail"()
    .return (rx263_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "75_1340317687.034_caps"  :subid("295_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 167
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "75_1340317687.034_nfa"  :subid("296_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 167
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "dDnNsSwW"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<b>"  :subid("76_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1348
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 168
    .lex "self", param_1348
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1349
    .lex "$/", $P1350
    .local string rx266_tgt
    .local int rx266_pos
    .local int rx266_off
    .local int rx266_eos
    .local int rx266_rep
    .local pmc rx266_cur
    .local pmc rx266_curclass
    .local pmc rx266_bstack
    .local pmc rx266_cstack
    (rx266_cur, rx266_tgt, rx266_pos, rx266_curclass, rx266_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx266_cur
    length rx266_eos, rx266_tgt
    eq $I19, 1, rx266_restart
    repr_get_attr_int $I11, self, rx266_curclass, "$!from"
    ne $I11, -1, rxscan267_done
    goto rxscan267_scan
  rxscan267_loop:
    inc rx266_pos
    gt rx266_pos, rx266_eos, rx266_fail
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!from", rx266_pos
  rxscan267_scan:
    nqp_rxmark rx266_bstack, rxscan267_loop, rx266_pos, 0
  rxscan267_done:
    nqp_rxmark rx266_bstack, rxcap268_fail, rx266_pos, 0
    ge rx266_pos, rx266_eos, rx266_fail
    substr $S11, rx266_tgt, rx266_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx266_fail
    inc rx266_pos
    nqp_rxpeek $I19, rx266_bstack, rxcap268_fail
    inc $I19
    set $I11, rx266_bstack[$I19]
    $P11 = rx266_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx266_pos)
    rx266_cstack = rx266_cur."!cursor_capture"($P11, "sym")
    goto rxcap268_done
  rxcap268_fail:
    goto rx266_fail
  rxcap268_done:
    rx266_cur."!cursor_pass"(rx266_pos, "backslash:sym<b>", 'backtrack'=>1)
    .return (rx266_cur)
  rx266_restart:
    repr_get_attr_obj rx266_cstack, rx266_cur, rx266_curclass, "$!cstack"
  rx266_fail:
    unless rx266_bstack, rx266_done
    pop $I19, rx266_bstack
    if_null rx266_cstack, rx266_cstack_done
    unless rx266_cstack, rx266_cstack_done
    dec $I19
    set $P11, rx266_cstack[$I19]
  rx266_cstack_done:
    pop rx266_rep, rx266_bstack
    pop rx266_pos, rx266_bstack
    pop $I19, rx266_bstack
    lt rx266_pos, -1, rx266_done
    lt rx266_pos, 0, rx266_fail
    eq $I19, 0, rx266_fail
    if_null rx266_cstack, rx266_jump
    elements $I18, rx266_bstack
    le $I18, 0, rx266_cut
    dec $I18
    set $I18, rx266_bstack[$I18]
  rx266_cut:
    assign rx266_cstack, $I18
  rx266_jump:
    jump $I19
  rx266_done:
    rx266_cur."!cursor_fail"()
    .return (rx266_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "76_1340317687.034_caps"  :subid("297_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 168
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "76_1340317687.034_nfa"  :subid("298_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 168
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "bB"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<e>"  :subid("77_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1354
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 169
    .lex "self", param_1354
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1355
    .lex "$/", $P1356
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_curclass
    .local pmc rx269_bstack
    .local pmc rx269_cstack
    (rx269_cur, rx269_tgt, rx269_pos, rx269_curclass, rx269_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx269_cur
    length rx269_eos, rx269_tgt
    eq $I19, 1, rx269_restart
    repr_get_attr_int $I11, self, rx269_curclass, "$!from"
    ne $I11, -1, rxscan270_done
    goto rxscan270_scan
  rxscan270_loop:
    inc rx269_pos
    gt rx269_pos, rx269_eos, rx269_fail
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!from", rx269_pos
  rxscan270_scan:
    nqp_rxmark rx269_bstack, rxscan270_loop, rx269_pos, 0
  rxscan270_done:
    nqp_rxmark rx269_bstack, rxcap271_fail, rx269_pos, 0
    ge rx269_pos, rx269_eos, rx269_fail
    substr $S11, rx269_tgt, rx269_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx269_fail
    inc rx269_pos
    nqp_rxpeek $I19, rx269_bstack, rxcap271_fail
    inc $I19
    set $I11, rx269_bstack[$I19]
    $P11 = rx269_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx269_pos)
    rx269_cstack = rx269_cur."!cursor_capture"($P11, "sym")
    goto rxcap271_done
  rxcap271_fail:
    goto rx269_fail
  rxcap271_done:
    rx269_cur."!cursor_pass"(rx269_pos, "backslash:sym<e>", 'backtrack'=>1)
    .return (rx269_cur)
  rx269_restart:
    repr_get_attr_obj rx269_cstack, rx269_cur, rx269_curclass, "$!cstack"
  rx269_fail:
    unless rx269_bstack, rx269_done
    pop $I19, rx269_bstack
    if_null rx269_cstack, rx269_cstack_done
    unless rx269_cstack, rx269_cstack_done
    dec $I19
    set $P11, rx269_cstack[$I19]
  rx269_cstack_done:
    pop rx269_rep, rx269_bstack
    pop rx269_pos, rx269_bstack
    pop $I19, rx269_bstack
    lt rx269_pos, -1, rx269_done
    lt rx269_pos, 0, rx269_fail
    eq $I19, 0, rx269_fail
    if_null rx269_cstack, rx269_jump
    elements $I18, rx269_bstack
    le $I18, 0, rx269_cut
    dec $I18
    set $I18, rx269_bstack[$I18]
  rx269_cut:
    assign rx269_cstack, $I18
  rx269_jump:
    jump $I19
  rx269_done:
    rx269_cur."!cursor_fail"()
    .return (rx269_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "77_1340317687.034_caps"  :subid("299_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 169
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "77_1340317687.034_nfa"  :subid("300_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 169
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "eE"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<f>"  :subid("78_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1360
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 170
    .lex "self", param_1360
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1361
    .lex "$/", $P1362
    .local string rx272_tgt
    .local int rx272_pos
    .local int rx272_off
    .local int rx272_eos
    .local int rx272_rep
    .local pmc rx272_cur
    .local pmc rx272_curclass
    .local pmc rx272_bstack
    .local pmc rx272_cstack
    (rx272_cur, rx272_tgt, rx272_pos, rx272_curclass, rx272_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx272_cur
    length rx272_eos, rx272_tgt
    eq $I19, 1, rx272_restart
    repr_get_attr_int $I11, self, rx272_curclass, "$!from"
    ne $I11, -1, rxscan273_done
    goto rxscan273_scan
  rxscan273_loop:
    inc rx272_pos
    gt rx272_pos, rx272_eos, rx272_fail
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!from", rx272_pos
  rxscan273_scan:
    nqp_rxmark rx272_bstack, rxscan273_loop, rx272_pos, 0
  rxscan273_done:
    nqp_rxmark rx272_bstack, rxcap274_fail, rx272_pos, 0
    ge rx272_pos, rx272_eos, rx272_fail
    substr $S11, rx272_tgt, rx272_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx272_fail
    inc rx272_pos
    nqp_rxpeek $I19, rx272_bstack, rxcap274_fail
    inc $I19
    set $I11, rx272_bstack[$I19]
    $P11 = rx272_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx272_pos)
    rx272_cstack = rx272_cur."!cursor_capture"($P11, "sym")
    goto rxcap274_done
  rxcap274_fail:
    goto rx272_fail
  rxcap274_done:
    rx272_cur."!cursor_pass"(rx272_pos, "backslash:sym<f>", 'backtrack'=>1)
    .return (rx272_cur)
  rx272_restart:
    repr_get_attr_obj rx272_cstack, rx272_cur, rx272_curclass, "$!cstack"
  rx272_fail:
    unless rx272_bstack, rx272_done
    pop $I19, rx272_bstack
    if_null rx272_cstack, rx272_cstack_done
    unless rx272_cstack, rx272_cstack_done
    dec $I19
    set $P11, rx272_cstack[$I19]
  rx272_cstack_done:
    pop rx272_rep, rx272_bstack
    pop rx272_pos, rx272_bstack
    pop $I19, rx272_bstack
    lt rx272_pos, -1, rx272_done
    lt rx272_pos, 0, rx272_fail
    eq $I19, 0, rx272_fail
    if_null rx272_cstack, rx272_jump
    elements $I18, rx272_bstack
    le $I18, 0, rx272_cut
    dec $I18
    set $I18, rx272_bstack[$I18]
  rx272_cut:
    assign rx272_cstack, $I18
  rx272_jump:
    jump $I19
  rx272_done:
    rx272_cur."!cursor_fail"()
    .return (rx272_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "78_1340317687.034_caps"  :subid("301_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 170
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "78_1340317687.034_nfa"  :subid("302_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 170
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "fF"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<h>"  :subid("79_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1366
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 171
    .lex "self", param_1366
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1367
    .lex "$/", $P1368
    .local string rx275_tgt
    .local int rx275_pos
    .local int rx275_off
    .local int rx275_eos
    .local int rx275_rep
    .local pmc rx275_cur
    .local pmc rx275_curclass
    .local pmc rx275_bstack
    .local pmc rx275_cstack
    (rx275_cur, rx275_tgt, rx275_pos, rx275_curclass, rx275_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx275_cur
    length rx275_eos, rx275_tgt
    eq $I19, 1, rx275_restart
    repr_get_attr_int $I11, self, rx275_curclass, "$!from"
    ne $I11, -1, rxscan276_done
    goto rxscan276_scan
  rxscan276_loop:
    inc rx275_pos
    gt rx275_pos, rx275_eos, rx275_fail
    repr_bind_attr_int rx275_cur, rx275_curclass, "$!from", rx275_pos
  rxscan276_scan:
    nqp_rxmark rx275_bstack, rxscan276_loop, rx275_pos, 0
  rxscan276_done:
    nqp_rxmark rx275_bstack, rxcap277_fail, rx275_pos, 0
    ge rx275_pos, rx275_eos, rx275_fail
    substr $S11, rx275_tgt, rx275_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx275_fail
    inc rx275_pos
    nqp_rxpeek $I19, rx275_bstack, rxcap277_fail
    inc $I19
    set $I11, rx275_bstack[$I19]
    $P11 = rx275_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx275_pos)
    rx275_cstack = rx275_cur."!cursor_capture"($P11, "sym")
    goto rxcap277_done
  rxcap277_fail:
    goto rx275_fail
  rxcap277_done:
    rx275_cur."!cursor_pass"(rx275_pos, "backslash:sym<h>", 'backtrack'=>1)
    .return (rx275_cur)
  rx275_restart:
    repr_get_attr_obj rx275_cstack, rx275_cur, rx275_curclass, "$!cstack"
  rx275_fail:
    unless rx275_bstack, rx275_done
    pop $I19, rx275_bstack
    if_null rx275_cstack, rx275_cstack_done
    unless rx275_cstack, rx275_cstack_done
    dec $I19
    set $P11, rx275_cstack[$I19]
  rx275_cstack_done:
    pop rx275_rep, rx275_bstack
    pop rx275_pos, rx275_bstack
    pop $I19, rx275_bstack
    lt rx275_pos, -1, rx275_done
    lt rx275_pos, 0, rx275_fail
    eq $I19, 0, rx275_fail
    if_null rx275_cstack, rx275_jump
    elements $I18, rx275_bstack
    le $I18, 0, rx275_cut
    dec $I18
    set $I18, rx275_bstack[$I18]
  rx275_cut:
    assign rx275_cstack, $I18
  rx275_jump:
    jump $I19
  rx275_done:
    rx275_cur."!cursor_fail"()
    .return (rx275_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "79_1340317687.034_caps"  :subid("303_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 171
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "79_1340317687.034_nfa"  :subid("304_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 171
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "hH"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<r>"  :subid("80_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1372
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 172
    .lex "self", param_1372
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1373
    .lex "$/", $P1374
    .local string rx278_tgt
    .local int rx278_pos
    .local int rx278_off
    .local int rx278_eos
    .local int rx278_rep
    .local pmc rx278_cur
    .local pmc rx278_curclass
    .local pmc rx278_bstack
    .local pmc rx278_cstack
    (rx278_cur, rx278_tgt, rx278_pos, rx278_curclass, rx278_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx278_cur
    length rx278_eos, rx278_tgt
    eq $I19, 1, rx278_restart
    repr_get_attr_int $I11, self, rx278_curclass, "$!from"
    ne $I11, -1, rxscan279_done
    goto rxscan279_scan
  rxscan279_loop:
    inc rx278_pos
    gt rx278_pos, rx278_eos, rx278_fail
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!from", rx278_pos
  rxscan279_scan:
    nqp_rxmark rx278_bstack, rxscan279_loop, rx278_pos, 0
  rxscan279_done:
    nqp_rxmark rx278_bstack, rxcap280_fail, rx278_pos, 0
    ge rx278_pos, rx278_eos, rx278_fail
    substr $S11, rx278_tgt, rx278_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx278_fail
    inc rx278_pos
    nqp_rxpeek $I19, rx278_bstack, rxcap280_fail
    inc $I19
    set $I11, rx278_bstack[$I19]
    $P11 = rx278_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx278_pos)
    rx278_cstack = rx278_cur."!cursor_capture"($P11, "sym")
    goto rxcap280_done
  rxcap280_fail:
    goto rx278_fail
  rxcap280_done:
    rx278_cur."!cursor_pass"(rx278_pos, "backslash:sym<r>", 'backtrack'=>1)
    .return (rx278_cur)
  rx278_restart:
    repr_get_attr_obj rx278_cstack, rx278_cur, rx278_curclass, "$!cstack"
  rx278_fail:
    unless rx278_bstack, rx278_done
    pop $I19, rx278_bstack
    if_null rx278_cstack, rx278_cstack_done
    unless rx278_cstack, rx278_cstack_done
    dec $I19
    set $P11, rx278_cstack[$I19]
  rx278_cstack_done:
    pop rx278_rep, rx278_bstack
    pop rx278_pos, rx278_bstack
    pop $I19, rx278_bstack
    lt rx278_pos, -1, rx278_done
    lt rx278_pos, 0, rx278_fail
    eq $I19, 0, rx278_fail
    if_null rx278_cstack, rx278_jump
    elements $I18, rx278_bstack
    le $I18, 0, rx278_cut
    dec $I18
    set $I18, rx278_bstack[$I18]
  rx278_cut:
    assign rx278_cstack, $I18
  rx278_jump:
    jump $I19
  rx278_done:
    rx278_cur."!cursor_fail"()
    .return (rx278_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "80_1340317687.034_caps"  :subid("305_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 172
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "80_1340317687.034_nfa"  :subid("306_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 172
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "rR"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<t>"  :subid("81_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1378
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 173
    .lex "self", param_1378
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1379
    .lex "$/", $P1380
    .local string rx281_tgt
    .local int rx281_pos
    .local int rx281_off
    .local int rx281_eos
    .local int rx281_rep
    .local pmc rx281_cur
    .local pmc rx281_curclass
    .local pmc rx281_bstack
    .local pmc rx281_cstack
    (rx281_cur, rx281_tgt, rx281_pos, rx281_curclass, rx281_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx281_cur
    length rx281_eos, rx281_tgt
    eq $I19, 1, rx281_restart
    repr_get_attr_int $I11, self, rx281_curclass, "$!from"
    ne $I11, -1, rxscan282_done
    goto rxscan282_scan
  rxscan282_loop:
    inc rx281_pos
    gt rx281_pos, rx281_eos, rx281_fail
    repr_bind_attr_int rx281_cur, rx281_curclass, "$!from", rx281_pos
  rxscan282_scan:
    nqp_rxmark rx281_bstack, rxscan282_loop, rx281_pos, 0
  rxscan282_done:
    nqp_rxmark rx281_bstack, rxcap283_fail, rx281_pos, 0
    ge rx281_pos, rx281_eos, rx281_fail
    substr $S11, rx281_tgt, rx281_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx281_fail
    inc rx281_pos
    nqp_rxpeek $I19, rx281_bstack, rxcap283_fail
    inc $I19
    set $I11, rx281_bstack[$I19]
    $P11 = rx281_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx281_pos)
    rx281_cstack = rx281_cur."!cursor_capture"($P11, "sym")
    goto rxcap283_done
  rxcap283_fail:
    goto rx281_fail
  rxcap283_done:
    rx281_cur."!cursor_pass"(rx281_pos, "backslash:sym<t>", 'backtrack'=>1)
    .return (rx281_cur)
  rx281_restart:
    repr_get_attr_obj rx281_cstack, rx281_cur, rx281_curclass, "$!cstack"
  rx281_fail:
    unless rx281_bstack, rx281_done
    pop $I19, rx281_bstack
    if_null rx281_cstack, rx281_cstack_done
    unless rx281_cstack, rx281_cstack_done
    dec $I19
    set $P11, rx281_cstack[$I19]
  rx281_cstack_done:
    pop rx281_rep, rx281_bstack
    pop rx281_pos, rx281_bstack
    pop $I19, rx281_bstack
    lt rx281_pos, -1, rx281_done
    lt rx281_pos, 0, rx281_fail
    eq $I19, 0, rx281_fail
    if_null rx281_cstack, rx281_jump
    elements $I18, rx281_bstack
    le $I18, 0, rx281_cut
    dec $I18
    set $I18, rx281_bstack[$I18]
  rx281_cut:
    assign rx281_cstack, $I18
  rx281_jump:
    jump $I19
  rx281_done:
    rx281_cur."!cursor_fail"()
    .return (rx281_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "81_1340317687.034_caps"  :subid("307_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 173
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "81_1340317687.034_nfa"  :subid("308_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 173
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "tT"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<v>"  :subid("82_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1384
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 174
    .lex "self", param_1384
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1385
    .lex "$/", $P1386
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    (rx284_cur, rx284_tgt, rx284_pos, rx284_curclass, rx284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done
    goto rxscan285_scan
  rxscan285_loop:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan:
    nqp_rxmark rx284_bstack, rxscan285_loop, rx284_pos, 0
  rxscan285_done:
    nqp_rxmark rx284_bstack, rxcap286_fail, rx284_pos, 0
    ge rx284_pos, rx284_eos, rx284_fail
    substr $S11, rx284_tgt, rx284_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx284_fail
    inc rx284_pos
    nqp_rxpeek $I19, rx284_bstack, rxcap286_fail
    inc $I19
    set $I11, rx284_bstack[$I19]
    $P11 = rx284_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx284_pos)
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "sym")
    goto rxcap286_done
  rxcap286_fail:
    goto rx284_fail
  rxcap286_done:
    rx284_cur."!cursor_pass"(rx284_pos, "backslash:sym<v>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail:
    unless rx284_bstack, rx284_done
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done
    unless rx284_cstack, rx284_cstack_done
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done
    lt rx284_pos, 0, rx284_fail
    eq $I19, 0, rx284_fail
    if_null rx284_cstack, rx284_jump
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut:
    assign rx284_cstack, $I18
  rx284_jump:
    jump $I19
  rx284_done:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "82_1340317687.034_caps"  :subid("309_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 174
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "82_1340317687.034_nfa"  :subid("310_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 174
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "vV"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<o>"  :subid("83_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1390
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 175
    .lex "self", param_1390
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1391
    .lex "$/", $P1392
    .local string rx287_tgt
    .local int rx287_pos
    .local int rx287_off
    .local int rx287_eos
    .local int rx287_rep
    .local pmc rx287_cur
    .local pmc rx287_curclass
    .local pmc rx287_bstack
    .local pmc rx287_cstack
    (rx287_cur, rx287_tgt, rx287_pos, rx287_curclass, rx287_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx287_cur
    length rx287_eos, rx287_tgt
    eq $I19, 1, rx287_restart
    repr_get_attr_int $I11, self, rx287_curclass, "$!from"
    ne $I11, -1, rxscan288_done
    goto rxscan288_scan
  rxscan288_loop:
    inc rx287_pos
    gt rx287_pos, rx287_eos, rx287_fail
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!from", rx287_pos
  rxscan288_scan:
    nqp_rxmark rx287_bstack, rxscan288_loop, rx287_pos, 0
  rxscan288_done:
    nqp_rxmark rx287_bstack, rxcap289_fail, rx287_pos, 0
    ge rx287_pos, rx287_eos, rx287_fail
    substr $S11, rx287_tgt, rx287_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx287_fail
    inc rx287_pos
    nqp_rxpeek $I19, rx287_bstack, rxcap289_fail
    inc $I19
    set $I11, rx287_bstack[$I19]
    $P11 = rx287_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx287_pos)
    rx287_cstack = rx287_cur."!cursor_capture"($P11, "sym")
    goto rxcap289_done
  rxcap289_fail:
    goto rx287_fail
  rxcap289_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt290_0
    nqp_push_label $P11, alt290_1
    nqp_rxmark rx287_bstack, alt290_end, -1, 0
    rx287_cur."!alt"(rx287_pos, ucs4:"alt_nfa_84_1340317687.613", $P11)
    goto rx287_fail
  alt290_0:
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."octint"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail
    nqp_rxmark rx287_bstack, rxsubrule291_pass, -1, 0
  rxsubrule291_pass:
    rx287_cstack = rx287_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    goto alt290_end
  alt290_1:
    add $I11, rx287_pos, 1
    gt $I11, rx287_eos, rx287_fail
    substr $S10, rx287_tgt, rx287_pos, 1
    ne $S10, ucs4:"[", rx287_fail
    add rx287_pos, 1
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."octints"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail
    nqp_rxmark rx287_bstack, rxsubrule292_pass, -1, 0
  rxsubrule292_pass:
    rx287_cstack = rx287_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    add $I11, rx287_pos, 1
    gt $I11, rx287_eos, rx287_fail
    substr $S10, rx287_tgt, rx287_pos, 1
    ne $S10, ucs4:"]", rx287_fail
    add rx287_pos, 1
    goto alt290_end
  alt290_end:
    nqp_rxcommit rx287_bstack, alt290_end
    rx287_cur."!cursor_pass"(rx287_pos, "backslash:sym<o>", 'backtrack'=>1)
    .return (rx287_cur)
  rx287_restart:
    repr_get_attr_obj rx287_cstack, rx287_cur, rx287_curclass, "$!cstack"
  rx287_fail:
    unless rx287_bstack, rx287_done
    pop $I19, rx287_bstack
    if_null rx287_cstack, rx287_cstack_done
    unless rx287_cstack, rx287_cstack_done
    dec $I19
    set $P11, rx287_cstack[$I19]
  rx287_cstack_done:
    pop rx287_rep, rx287_bstack
    pop rx287_pos, rx287_bstack
    pop $I19, rx287_bstack
    lt rx287_pos, -1, rx287_done
    lt rx287_pos, 0, rx287_fail
    eq $I19, 0, rx287_fail
    if_null rx287_cstack, rx287_jump
    elements $I18, rx287_bstack
    le $I18, 0, rx287_cut
    dec $I18
    set $I18, rx287_bstack[$I18]
  rx287_cut:
    assign rx287_cstack, $I18
  rx287_jump:
    jump $I19
  rx287_done:
    rx287_cur."!cursor_fail"()
    .return (rx287_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "83_1340317687.034_caps"  :subid("311_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 175
    new $P103, "Hash"
    set $P103["sym"], 0
    set $P103["octint"], 0
    set $P103["octints"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "83_1340317687.034_nfa"  :subid("312_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 175
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "oO"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "octint"
    push $P105, 0
    push $P105, 2
    push $P105, 91
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "octints"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 93
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P103
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "83_1340317687.034_alt_nfa_84_1340317687.613"  :subid("313_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 175
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "octint"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 91
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "octints"
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 93
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    new $P111, "ResizablePMCArray"
    push $P111, $P105
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<x>"  :subid("85_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1397
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 176
    .lex "self", param_1397
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1398
    .lex "$/", $P1399
    .local string rx293_tgt
    .local int rx293_pos
    .local int rx293_off
    .local int rx293_eos
    .local int rx293_rep
    .local pmc rx293_cur
    .local pmc rx293_curclass
    .local pmc rx293_bstack
    .local pmc rx293_cstack
    (rx293_cur, rx293_tgt, rx293_pos, rx293_curclass, rx293_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx293_cur
    length rx293_eos, rx293_tgt
    eq $I19, 1, rx293_restart
    repr_get_attr_int $I11, self, rx293_curclass, "$!from"
    ne $I11, -1, rxscan294_done
    goto rxscan294_scan
  rxscan294_loop:
    inc rx293_pos
    gt rx293_pos, rx293_eos, rx293_fail
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!from", rx293_pos
  rxscan294_scan:
    nqp_rxmark rx293_bstack, rxscan294_loop, rx293_pos, 0
  rxscan294_done:
    nqp_rxmark rx293_bstack, rxcap295_fail, rx293_pos, 0
    ge rx293_pos, rx293_eos, rx293_fail
    substr $S11, rx293_tgt, rx293_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx293_fail
    inc rx293_pos
    nqp_rxpeek $I19, rx293_bstack, rxcap295_fail
    inc $I19
    set $I11, rx293_bstack[$I19]
    $P11 = rx293_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx293_pos)
    rx293_cstack = rx293_cur."!cursor_capture"($P11, "sym")
    goto rxcap295_done
  rxcap295_fail:
    goto rx293_fail
  rxcap295_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt296_0
    nqp_push_label $P11, alt296_1
    nqp_rxmark rx293_bstack, alt296_end, -1, 0
    rx293_cur."!alt"(rx293_pos, ucs4:"alt_nfa_86_1340317687.626", $P11)
    goto rx293_fail
  alt296_0:
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail
    nqp_rxmark rx293_bstack, rxsubrule297_pass, -1, 0
  rxsubrule297_pass:
    rx293_cstack = rx293_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    goto alt296_end
  alt296_1:
    add $I11, rx293_pos, 1
    gt $I11, rx293_eos, rx293_fail
    substr $S10, rx293_tgt, rx293_pos, 1
    ne $S10, ucs4:"[", rx293_fail
    add rx293_pos, 1
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail
    nqp_rxmark rx293_bstack, rxsubrule298_pass, -1, 0
  rxsubrule298_pass:
    rx293_cstack = rx293_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    add $I11, rx293_pos, 1
    gt $I11, rx293_eos, rx293_fail
    substr $S10, rx293_tgt, rx293_pos, 1
    ne $S10, ucs4:"]", rx293_fail
    add rx293_pos, 1
    goto alt296_end
  alt296_end:
    nqp_rxcommit rx293_bstack, alt296_end
    rx293_cur."!cursor_pass"(rx293_pos, "backslash:sym<x>", 'backtrack'=>1)
    .return (rx293_cur)
  rx293_restart:
    repr_get_attr_obj rx293_cstack, rx293_cur, rx293_curclass, "$!cstack"
  rx293_fail:
    unless rx293_bstack, rx293_done
    pop $I19, rx293_bstack
    if_null rx293_cstack, rx293_cstack_done
    unless rx293_cstack, rx293_cstack_done
    dec $I19
    set $P11, rx293_cstack[$I19]
  rx293_cstack_done:
    pop rx293_rep, rx293_bstack
    pop rx293_pos, rx293_bstack
    pop $I19, rx293_bstack
    lt rx293_pos, -1, rx293_done
    lt rx293_pos, 0, rx293_fail
    eq $I19, 0, rx293_fail
    if_null rx293_cstack, rx293_jump
    elements $I18, rx293_bstack
    le $I18, 0, rx293_cut
    dec $I18
    set $I18, rx293_bstack[$I18]
  rx293_cut:
    assign rx293_cstack, $I18
  rx293_jump:
    jump $I19
  rx293_done:
    rx293_cur."!cursor_fail"()
    .return (rx293_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "85_1340317687.034_caps"  :subid("314_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 176
    new $P103, "Hash"
    set $P103["sym"], 0
    set $P103["hexint"], 0
    set $P103["hexints"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "85_1340317687.034_nfa"  :subid("315_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 176
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "xX"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "hexint"
    push $P105, 0
    push $P105, 2
    push $P105, 91
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "hexints"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 93
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P103
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "85_1340317687.034_alt_nfa_86_1340317687.626"  :subid("316_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 176
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "hexint"
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 91
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "hexints"
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 93
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    new $P111, "ResizablePMCArray"
    push $P111, $P105
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<c>"  :subid("87_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1404
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 177
    .lex "self", param_1404
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1405
    .lex "$/", $P1406
    .local string rx299_tgt
    .local int rx299_pos
    .local int rx299_off
    .local int rx299_eos
    .local int rx299_rep
    .local pmc rx299_cur
    .local pmc rx299_curclass
    .local pmc rx299_bstack
    .local pmc rx299_cstack
    (rx299_cur, rx299_tgt, rx299_pos, rx299_curclass, rx299_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx299_cur
    length rx299_eos, rx299_tgt
    eq $I19, 1, rx299_restart
    repr_get_attr_int $I11, self, rx299_curclass, "$!from"
    ne $I11, -1, rxscan300_done
    goto rxscan300_scan
  rxscan300_loop:
    inc rx299_pos
    gt rx299_pos, rx299_eos, rx299_fail
    repr_bind_attr_int rx299_cur, rx299_curclass, "$!from", rx299_pos
  rxscan300_scan:
    nqp_rxmark rx299_bstack, rxscan300_loop, rx299_pos, 0
  rxscan300_done:
    nqp_rxmark rx299_bstack, rxcap301_fail, rx299_pos, 0
    ge rx299_pos, rx299_eos, rx299_fail
    substr $S11, rx299_tgt, rx299_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx299_fail
    inc rx299_pos
    nqp_rxpeek $I19, rx299_bstack, rxcap301_fail
    inc $I19
    set $I11, rx299_bstack[$I19]
    $P11 = rx299_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx299_pos)
    rx299_cstack = rx299_cur."!cursor_capture"($P11, "sym")
    goto rxcap301_done
  rxcap301_fail:
    goto rx299_fail
  rxcap301_done:
    repr_bind_attr_int rx299_cur, rx299_curclass, "$!pos", rx299_pos
    $P11 = rx299_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx299_curclass, "$!pos"
    lt $I11, 0, rx299_fail
    nqp_rxmark rx299_bstack, rxsubrule302_pass, -1, 0
  rxsubrule302_pass:
    rx299_cstack = rx299_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx299_pos, $P11, rx299_curclass, "$!pos"
    rx299_cur."!cursor_pass"(rx299_pos, "backslash:sym<c>", 'backtrack'=>1)
    .return (rx299_cur)
  rx299_restart:
    repr_get_attr_obj rx299_cstack, rx299_cur, rx299_curclass, "$!cstack"
  rx299_fail:
    unless rx299_bstack, rx299_done
    pop $I19, rx299_bstack
    if_null rx299_cstack, rx299_cstack_done
    unless rx299_cstack, rx299_cstack_done
    dec $I19
    set $P11, rx299_cstack[$I19]
  rx299_cstack_done:
    pop rx299_rep, rx299_bstack
    pop rx299_pos, rx299_bstack
    pop $I19, rx299_bstack
    lt rx299_pos, -1, rx299_done
    lt rx299_pos, 0, rx299_fail
    eq $I19, 0, rx299_fail
    if_null rx299_cstack, rx299_jump
    elements $I18, rx299_bstack
    le $I18, 0, rx299_cut
    dec $I18
    set $I18, rx299_bstack[$I18]
  rx299_cut:
    assign rx299_cstack, $I18
  rx299_jump:
    jump $I19
  rx299_done:
    rx299_cur."!cursor_fail"()
    .return (rx299_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "87_1340317687.034_caps"  :subid("317_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 177
    new $P103, "Hash"
    set $P103["sym"], 0
    set $P103["charspec"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "87_1340317687.034_nfa"  :subid("318_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 177
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 6
    push $P104, "cC"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "charspec"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<A>"  :subid("88_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1410
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 178
    .lex "self", param_1410
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1411
    .lex "$/", $P1412
    .local string rx303_tgt
    .local int rx303_pos
    .local int rx303_off
    .local int rx303_eos
    .local int rx303_rep
    .local pmc rx303_cur
    .local pmc rx303_curclass
    .local pmc rx303_bstack
    .local pmc rx303_cstack
    (rx303_cur, rx303_tgt, rx303_pos, rx303_curclass, rx303_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx303_cur
    length rx303_eos, rx303_tgt
    eq $I19, 1, rx303_restart
    repr_get_attr_int $I11, self, rx303_curclass, "$!from"
    ne $I11, -1, rxscan304_done
    goto rxscan304_scan
  rxscan304_loop:
    inc rx303_pos
    gt rx303_pos, rx303_eos, rx303_fail
    repr_bind_attr_int rx303_cur, rx303_curclass, "$!from", rx303_pos
  rxscan304_scan:
    nqp_rxmark rx303_bstack, rxscan304_loop, rx303_pos, 0
  rxscan304_done:
    add $I11, rx303_pos, 1
    gt $I11, rx303_eos, rx303_fail
    substr $S10, rx303_tgt, rx303_pos, 1
    ne $S10, ucs4:"A", rx303_fail
    add rx303_pos, 1
    repr_bind_attr_int rx303_cur, rx303_curclass, "$!pos", rx303_pos
    $P11 = rx303_cur."obs"("\\A as beginning-of-string matcher", "^")
    repr_get_attr_int $I11, $P11, rx303_curclass, "$!pos"
    lt $I11, 0, rx303_fail
    repr_get_attr_int rx303_pos, $P11, rx303_curclass, "$!pos"
    rx303_cur."!cursor_pass"(rx303_pos, "backslash:sym<A>", 'backtrack'=>1)
    .return (rx303_cur)
  rx303_restart:
    repr_get_attr_obj rx303_cstack, rx303_cur, rx303_curclass, "$!cstack"
  rx303_fail:
    unless rx303_bstack, rx303_done
    pop $I19, rx303_bstack
    if_null rx303_cstack, rx303_cstack_done
    unless rx303_cstack, rx303_cstack_done
    dec $I19
    set $P11, rx303_cstack[$I19]
  rx303_cstack_done:
    pop rx303_rep, rx303_bstack
    pop rx303_pos, rx303_bstack
    pop $I19, rx303_bstack
    lt rx303_pos, -1, rx303_done
    lt rx303_pos, 0, rx303_fail
    eq $I19, 0, rx303_fail
    if_null rx303_cstack, rx303_jump
    elements $I18, rx303_bstack
    le $I18, 0, rx303_cut
    dec $I18
    set $I18, rx303_bstack[$I18]
  rx303_cut:
    assign rx303_cstack, $I18
  rx303_jump:
    jump $I19
  rx303_done:
    rx303_cur."!cursor_fail"()
    .return (rx303_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "88_1340317687.034_caps"  :subid("319_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 178
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "88_1340317687.034_nfa"  :subid("320_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 178
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 65
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "obs"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<z>"  :subid("89_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1416
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 179
    .lex "self", param_1416
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1417
    .lex "$/", $P1418
    .local string rx306_tgt
    .local int rx306_pos
    .local int rx306_off
    .local int rx306_eos
    .local int rx306_rep
    .local pmc rx306_cur
    .local pmc rx306_curclass
    .local pmc rx306_bstack
    .local pmc rx306_cstack
    (rx306_cur, rx306_tgt, rx306_pos, rx306_curclass, rx306_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx306_cur
    length rx306_eos, rx306_tgt
    eq $I19, 1, rx306_restart
    repr_get_attr_int $I11, self, rx306_curclass, "$!from"
    ne $I11, -1, rxscan307_done
    goto rxscan307_scan
  rxscan307_loop:
    inc rx306_pos
    gt rx306_pos, rx306_eos, rx306_fail
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!from", rx306_pos
  rxscan307_scan:
    nqp_rxmark rx306_bstack, rxscan307_loop, rx306_pos, 0
  rxscan307_done:
    add $I11, rx306_pos, 1
    gt $I11, rx306_eos, rx306_fail
    substr $S10, rx306_tgt, rx306_pos, 1
    ne $S10, ucs4:"z", rx306_fail
    add rx306_pos, 1
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."obs"("\\z as end-of-string matcher", "$")
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    rx306_cur."!cursor_pass"(rx306_pos, "backslash:sym<z>", 'backtrack'=>1)
    .return (rx306_cur)
  rx306_restart:
    repr_get_attr_obj rx306_cstack, rx306_cur, rx306_curclass, "$!cstack"
  rx306_fail:
    unless rx306_bstack, rx306_done
    pop $I19, rx306_bstack
    if_null rx306_cstack, rx306_cstack_done
    unless rx306_cstack, rx306_cstack_done
    dec $I19
    set $P11, rx306_cstack[$I19]
  rx306_cstack_done:
    pop rx306_rep, rx306_bstack
    pop rx306_pos, rx306_bstack
    pop $I19, rx306_bstack
    lt rx306_pos, -1, rx306_done
    lt rx306_pos, 0, rx306_fail
    eq $I19, 0, rx306_fail
    if_null rx306_cstack, rx306_jump
    elements $I18, rx306_bstack
    le $I18, 0, rx306_cut
    dec $I18
    set $I18, rx306_bstack[$I18]
  rx306_cut:
    assign rx306_cstack, $I18
  rx306_jump:
    jump $I19
  rx306_done:
    rx306_cur."!cursor_fail"()
    .return (rx306_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "89_1340317687.034_caps"  :subid("321_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 179
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "89_1340317687.034_nfa"  :subid("322_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 179
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 122
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "obs"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<Z>"  :subid("90_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1422
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 180
    .lex "self", param_1422
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1423
    .lex "$/", $P1424
    .local string rx309_tgt
    .local int rx309_pos
    .local int rx309_off
    .local int rx309_eos
    .local int rx309_rep
    .local pmc rx309_cur
    .local pmc rx309_curclass
    .local pmc rx309_bstack
    .local pmc rx309_cstack
    (rx309_cur, rx309_tgt, rx309_pos, rx309_curclass, rx309_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx309_cur
    length rx309_eos, rx309_tgt
    eq $I19, 1, rx309_restart
    repr_get_attr_int $I11, self, rx309_curclass, "$!from"
    ne $I11, -1, rxscan310_done
    goto rxscan310_scan
  rxscan310_loop:
    inc rx309_pos
    gt rx309_pos, rx309_eos, rx309_fail
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!from", rx309_pos
  rxscan310_scan:
    nqp_rxmark rx309_bstack, rxscan310_loop, rx309_pos, 0
  rxscan310_done:
    add $I11, rx309_pos, 1
    gt $I11, rx309_eos, rx309_fail
    substr $S10, rx309_tgt, rx309_pos, 1
    ne $S10, ucs4:"Z", rx309_fail
    add rx309_pos, 1
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."obs"("\\Z as end-of-string matcher", "\\n?$")
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    rx309_cur."!cursor_pass"(rx309_pos, "backslash:sym<Z>", 'backtrack'=>1)
    .return (rx309_cur)
  rx309_restart:
    repr_get_attr_obj rx309_cstack, rx309_cur, rx309_curclass, "$!cstack"
  rx309_fail:
    unless rx309_bstack, rx309_done
    pop $I19, rx309_bstack
    if_null rx309_cstack, rx309_cstack_done
    unless rx309_cstack, rx309_cstack_done
    dec $I19
    set $P11, rx309_cstack[$I19]
  rx309_cstack_done:
    pop rx309_rep, rx309_bstack
    pop rx309_pos, rx309_bstack
    pop $I19, rx309_bstack
    lt rx309_pos, -1, rx309_done
    lt rx309_pos, 0, rx309_fail
    eq $I19, 0, rx309_fail
    if_null rx309_cstack, rx309_jump
    elements $I18, rx309_bstack
    le $I18, 0, rx309_cut
    dec $I18
    set $I18, rx309_bstack[$I18]
  rx309_cut:
    assign rx309_cstack, $I18
  rx309_jump:
    jump $I19
  rx309_done:
    rx309_cur."!cursor_fail"()
    .return (rx309_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "90_1340317687.034_caps"  :subid("323_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 180
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "90_1340317687.034_nfa"  :subid("324_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 180
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 90
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "obs"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<Q>"  :subid("91_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1428
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 181
    .lex "self", param_1428
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1429
    .lex "$/", $P1430
    .local string rx312_tgt
    .local int rx312_pos
    .local int rx312_off
    .local int rx312_eos
    .local int rx312_rep
    .local pmc rx312_cur
    .local pmc rx312_curclass
    .local pmc rx312_bstack
    .local pmc rx312_cstack
    (rx312_cur, rx312_tgt, rx312_pos, rx312_curclass, rx312_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx312_cur
    length rx312_eos, rx312_tgt
    eq $I19, 1, rx312_restart
    repr_get_attr_int $I11, self, rx312_curclass, "$!from"
    ne $I11, -1, rxscan313_done
    goto rxscan313_scan
  rxscan313_loop:
    inc rx312_pos
    gt rx312_pos, rx312_eos, rx312_fail
    repr_bind_attr_int rx312_cur, rx312_curclass, "$!from", rx312_pos
  rxscan313_scan:
    nqp_rxmark rx312_bstack, rxscan313_loop, rx312_pos, 0
  rxscan313_done:
    add $I11, rx312_pos, 1
    gt $I11, rx312_eos, rx312_fail
    substr $S10, rx312_tgt, rx312_pos, 1
    ne $S10, ucs4:"Q", rx312_fail
    add rx312_pos, 1
    repr_bind_attr_int rx312_cur, rx312_curclass, "$!pos", rx312_pos
    $P11 = rx312_cur."obs"("\\Q as quotemeta", "quotes or literal variable match")
    repr_get_attr_int $I11, $P11, rx312_curclass, "$!pos"
    lt $I11, 0, rx312_fail
    repr_get_attr_int rx312_pos, $P11, rx312_curclass, "$!pos"
    rx312_cur."!cursor_pass"(rx312_pos, "backslash:sym<Q>", 'backtrack'=>1)
    .return (rx312_cur)
  rx312_restart:
    repr_get_attr_obj rx312_cstack, rx312_cur, rx312_curclass, "$!cstack"
  rx312_fail:
    unless rx312_bstack, rx312_done
    pop $I19, rx312_bstack
    if_null rx312_cstack, rx312_cstack_done
    unless rx312_cstack, rx312_cstack_done
    dec $I19
    set $P11, rx312_cstack[$I19]
  rx312_cstack_done:
    pop rx312_rep, rx312_bstack
    pop rx312_pos, rx312_bstack
    pop $I19, rx312_bstack
    lt rx312_pos, -1, rx312_done
    lt rx312_pos, 0, rx312_fail
    eq $I19, 0, rx312_fail
    if_null rx312_cstack, rx312_jump
    elements $I18, rx312_bstack
    le $I18, 0, rx312_cut
    dec $I18
    set $I18, rx312_bstack[$I18]
  rx312_cut:
    assign rx312_cstack, $I18
  rx312_jump:
    jump $I19
  rx312_done:
    rx312_cur."!cursor_fail"()
    .return (rx312_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "91_1340317687.034_caps"  :subid("325_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 181
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "91_1340317687.034_nfa"  :subid("326_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 181
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 81
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "obs"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<unrec>"  :subid("92_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1434
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 182
    .const 'Sub' $P1439 = "328_1340317687.034" 
    capture_lex $P1439
    .lex "self", param_1434
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1435
    .lex "$/", $P1436
    .local string rx315_tgt
    .local int rx315_pos
    .local int rx315_off
    .local int rx315_eos
    .local int rx315_rep
    .local pmc rx315_cur
    .local pmc rx315_curclass
    .local pmc rx315_bstack
    .local pmc rx315_cstack
    (rx315_cur, rx315_tgt, rx315_pos, rx315_curclass, rx315_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx315_cur
    length rx315_eos, rx315_tgt
    eq $I19, 1, rx315_restart
    repr_get_attr_int $I11, self, rx315_curclass, "$!from"
    ne $I11, -1, rxscan316_done
    goto rxscan316_scan
  rxscan316_loop:
    inc rx315_pos
    gt rx315_pos, rx315_eos, rx315_fail
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!from", rx315_pos
  rxscan316_scan:
    nqp_rxmark rx315_bstack, rxscan316_loop, rx315_pos, 0
  rxscan316_done:
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!pos", rx315_pos
    store_lex unicode:"$\x{a2}", rx315_cur
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P1439 = "328_1340317687.034" 
    capture_lex $P1439
    $P105 = $P1439()
    ge rx315_pos, rx315_eos, rx315_fail
    is_cclass $I11, .CCLASS_WORD, rx315_tgt, rx315_pos
    unless $I11, rx315_fail
    add rx315_pos, 1
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!pos", rx315_pos
    $P11 = rx315_cur."panic"("Unrecognized backslash sequence")
    repr_get_attr_int $I11, $P11, rx315_curclass, "$!pos"
    lt $I11, 0, rx315_fail
    repr_get_attr_int rx315_pos, $P11, rx315_curclass, "$!pos"
    rx315_cur."!cursor_pass"(rx315_pos, "backslash:sym<unrec>", 'backtrack'=>1)
    .return (rx315_cur)
  rx315_restart:
    repr_get_attr_obj rx315_cstack, rx315_cur, rx315_curclass, "$!cstack"
  rx315_fail:
    unless rx315_bstack, rx315_done
    pop $I19, rx315_bstack
    if_null rx315_cstack, rx315_cstack_done
    unless rx315_cstack, rx315_cstack_done
    dec $I19
    set $P11, rx315_cstack[$I19]
  rx315_cstack_done:
    pop rx315_rep, rx315_bstack
    pop rx315_pos, rx315_bstack
    pop $I19, rx315_bstack
    lt rx315_pos, -1, rx315_done
    lt rx315_pos, 0, rx315_fail
    eq $I19, 0, rx315_fail
    if_null rx315_cstack, rx315_jump
    elements $I18, rx315_bstack
    le $I18, 0, rx315_cut
    dec $I18
    set $I18, rx315_bstack[$I18]
  rx315_cut:
    assign rx315_cstack, $I18
  rx315_jump:
    jump $I19
  rx315_done:
    rx315_cur."!cursor_fail"()
    .return (rx315_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "92_1340317687.034_caps"  :subid("327_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 182
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1438"  :anon :subid("328_1340317687.034") :outer("92_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 182
    .return ()
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "backslash:sym<misc>"  :subid("93_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1441
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 183
    .lex "self", param_1441
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1442
    .lex "$/", $P1443
    .local string rx318_tgt
    .local int rx318_pos
    .local int rx318_off
    .local int rx318_eos
    .local int rx318_rep
    .local pmc rx318_cur
    .local pmc rx318_curclass
    .local pmc rx318_bstack
    .local pmc rx318_cstack
    (rx318_cur, rx318_tgt, rx318_pos, rx318_curclass, rx318_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx318_cur
    length rx318_eos, rx318_tgt
    eq $I19, 1, rx318_restart
    repr_get_attr_int $I11, self, rx318_curclass, "$!from"
    ne $I11, -1, rxscan319_done
    goto rxscan319_scan
  rxscan319_loop:
    inc rx318_pos
    gt rx318_pos, rx318_eos, rx318_fail
    repr_bind_attr_int rx318_cur, rx318_curclass, "$!from", rx318_pos
  rxscan319_scan:
    nqp_rxmark rx318_bstack, rxscan319_loop, rx318_pos, 0
  rxscan319_done:
    ge rx318_pos, rx318_eos, rx318_fail
    is_cclass $I11, .CCLASS_WORD, rx318_tgt, rx318_pos
    if $I11, rx318_fail
    add rx318_pos, 1
    rx318_cur."!cursor_pass"(rx318_pos, "backslash:sym<misc>", 'backtrack'=>1)
    .return (rx318_cur)
  rx318_restart:
    repr_get_attr_obj rx318_cstack, rx318_cur, rx318_curclass, "$!cstack"
  rx318_fail:
    unless rx318_bstack, rx318_done
    pop $I19, rx318_bstack
    if_null rx318_cstack, rx318_cstack_done
    unless rx318_cstack, rx318_cstack_done
    dec $I19
    set $P11, rx318_cstack[$I19]
  rx318_cstack_done:
    pop rx318_rep, rx318_bstack
    pop rx318_pos, rx318_bstack
    pop $I19, rx318_bstack
    lt rx318_pos, -1, rx318_done
    lt rx318_pos, 0, rx318_fail
    eq $I19, 0, rx318_fail
    if_null rx318_cstack, rx318_jump
    elements $I18, rx318_bstack
    le $I18, 0, rx318_cut
    dec $I18
    set $I18, rx318_bstack[$I18]
  rx318_cut:
    assign rx318_cstack, $I18
  rx318_jump:
    jump $I19
  rx318_done:
    rx318_cur."!cursor_fail"()
    .return (rx318_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "93_1340317687.034_caps"  :subid("329_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 183
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "93_1340317687.034_nfa"  :subid("330_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 183
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 5
    push $P104, 8192
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "assertion"  :subid("94_1340317687.034")
    .param pmc param_1447
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 185
    .lex "self", param_1447
    $P101 = param_1447."!protoregex"("assertion")
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "assertion:sym<?>"  :subid("96_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1449
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 187
    .const 'Sub' $P1456 = "95_1340317687.034" 
    capture_lex $P1456
    .lex "self", param_1449
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1450
    .lex "$/", $P1451
    .local string rx320_tgt
    .local int rx320_pos
    .local int rx320_off
    .local int rx320_eos
    .local int rx320_rep
    .local pmc rx320_cur
    .local pmc rx320_curclass
    .local pmc rx320_bstack
    .local pmc rx320_cstack
    (rx320_cur, rx320_tgt, rx320_pos, rx320_curclass, rx320_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx320_cur
    length rx320_eos, rx320_tgt
    eq $I19, 1, rx320_restart
    repr_get_attr_int $I11, self, rx320_curclass, "$!from"
    ne $I11, -1, rxscan321_done
    goto rxscan321_scan
  rxscan321_loop:
    inc rx320_pos
    gt rx320_pos, rx320_eos, rx320_fail
    repr_bind_attr_int rx320_cur, rx320_curclass, "$!from", rx320_pos
  rxscan321_scan:
    nqp_rxmark rx320_bstack, rxscan321_loop, rx320_pos, 0
  rxscan321_done:
    add $I11, rx320_pos, 1
    gt $I11, rx320_eos, rx320_fail
    substr $S10, rx320_tgt, rx320_pos, 1
    ne $S10, ucs4:"?", rx320_fail
    add rx320_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt322_0
    nqp_push_label $P11, alt322_1
    nqp_rxmark rx320_bstack, alt322_end, -1, 0
    rx320_cur."!alt"(rx320_pos, ucs4:"alt_nfa_97_1340317687.691", $P11)
    goto rx320_fail
  alt322_0:
    .const 'Sub' $P1456 = "95_1340317687.034" 
    capture_lex $P1456
    repr_bind_attr_int rx320_cur, rx320_curclass, "$!pos", rx320_pos
    $P11 = rx320_cur."before"($P1456)
    repr_get_attr_int $I11, $P11, rx320_curclass, "$!pos"
    lt $I11, 0, rx320_fail
    goto alt322_end
  alt322_1:
    repr_bind_attr_int rx320_cur, rx320_curclass, "$!pos", rx320_pos
    $P11 = rx320_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx320_curclass, "$!pos"
    lt $I11, 0, rx320_fail
    nqp_rxmark rx320_bstack, rxsubrule325_pass, -1, 0
  rxsubrule325_pass:
    rx320_cstack = rx320_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx320_pos, $P11, rx320_curclass, "$!pos"
    goto alt322_end
  alt322_end:
    nqp_rxcommit rx320_bstack, alt322_end
    rx320_cur."!cursor_pass"(rx320_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx320_cur)
  rx320_restart:
    repr_get_attr_obj rx320_cstack, rx320_cur, rx320_curclass, "$!cstack"
  rx320_fail:
    unless rx320_bstack, rx320_done
    pop $I19, rx320_bstack
    if_null rx320_cstack, rx320_cstack_done
    unless rx320_cstack, rx320_cstack_done
    dec $I19
    set $P11, rx320_cstack[$I19]
  rx320_cstack_done:
    pop rx320_rep, rx320_bstack
    pop rx320_pos, rx320_bstack
    pop $I19, rx320_bstack
    lt rx320_pos, -1, rx320_done
    lt rx320_pos, 0, rx320_fail
    eq $I19, 0, rx320_fail
    if_null rx320_cstack, rx320_jump
    elements $I18, rx320_bstack
    le $I18, 0, rx320_cut
    dec $I18
    set $I18, rx320_bstack[$I18]
  rx320_cut:
    assign rx320_cstack, $I18
  rx320_jump:
    jump $I19
  rx320_done:
    rx320_cur."!cursor_fail"()
    .return (rx320_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "96_1340317687.034_caps"  :subid("331_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 187
    new $P103, "Hash"
    set $P103["assertion"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "96_1340317687.034_nfa"  :subid("332_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 187
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 63
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 3
    push $P105, 8
    push $P105, "assertion"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "96_1340317687.034_alt_nfa_97_1340317687.691"  :subid("333_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 187
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 62
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "assertion"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P107
    push $P109, $P108
    new $P110, "ResizablePMCArray"
    push $P110, $P106
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1455"  :anon :subid("95_1340317687.034") :method :outer("96_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 187
    .lex unicode:"$\x{a2}", $P1459
    .local string rx323_tgt
    .local int rx323_pos
    .local int rx323_off
    .local int rx323_eos
    .local int rx323_rep
    .local pmc rx323_cur
    .local pmc rx323_curclass
    .local pmc rx323_bstack
    .local pmc rx323_cstack
    (rx323_cur, rx323_tgt, rx323_pos, rx323_curclass, rx323_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx323_cur
    length rx323_eos, rx323_tgt
    eq $I19, 1, rx323_restart
    repr_get_attr_int $I11, self, rx323_curclass, "$!from"
    ne $I11, -1, rxscan324_done
    goto rxscan324_scan
  rxscan324_loop:
    inc rx323_pos
    gt rx323_pos, rx323_eos, rx323_fail
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!from", rx323_pos
  rxscan324_scan:
    nqp_rxmark rx323_bstack, rxscan324_loop, rx323_pos, 0
  rxscan324_done:
    add $I11, rx323_pos, 1
    gt $I11, rx323_eos, rx323_fail
    substr $S10, rx323_tgt, rx323_pos, 1
    ne $S10, ucs4:">", rx323_fail
    add rx323_pos, 1
    rx323_cur."!cursor_pass"(rx323_pos, 'backtrack'=>1)
    .return (rx323_cur)
  rx323_restart:
    repr_get_attr_obj rx323_cstack, rx323_cur, rx323_curclass, "$!cstack"
  rx323_fail:
    unless rx323_bstack, rx323_done
    pop $I19, rx323_bstack
    if_null rx323_cstack, rx323_cstack_done
    unless rx323_cstack, rx323_cstack_done
    dec $I19
    set $P11, rx323_cstack[$I19]
  rx323_cstack_done:
    pop rx323_rep, rx323_bstack
    pop rx323_pos, rx323_bstack
    pop $I19, rx323_bstack
    lt rx323_pos, -1, rx323_done
    lt rx323_pos, 0, rx323_fail
    eq $I19, 0, rx323_fail
    if_null rx323_cstack, rx323_jump
    elements $I18, rx323_bstack
    le $I18, 0, rx323_cut
    dec $I18
    set $I18, rx323_bstack[$I18]
  rx323_cut:
    assign rx323_cstack, $I18
  rx323_jump:
    jump $I19
  rx323_done:
    rx323_cur."!cursor_fail"()
    .return (rx323_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "95_1340317687.034_caps"  :subid("334_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 187
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "95_1340317687.034_nfa"  :subid("335_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 187
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 62
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "assertion:sym<!>"  :subid("99_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1461
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 188
    .const 'Sub' $P1468 = "98_1340317687.034" 
    capture_lex $P1468
    .lex "self", param_1461
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1462
    .lex "$/", $P1463
    .local string rx326_tgt
    .local int rx326_pos
    .local int rx326_off
    .local int rx326_eos
    .local int rx326_rep
    .local pmc rx326_cur
    .local pmc rx326_curclass
    .local pmc rx326_bstack
    .local pmc rx326_cstack
    (rx326_cur, rx326_tgt, rx326_pos, rx326_curclass, rx326_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx326_cur
    length rx326_eos, rx326_tgt
    eq $I19, 1, rx326_restart
    repr_get_attr_int $I11, self, rx326_curclass, "$!from"
    ne $I11, -1, rxscan327_done
    goto rxscan327_scan
  rxscan327_loop:
    inc rx326_pos
    gt rx326_pos, rx326_eos, rx326_fail
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!from", rx326_pos
  rxscan327_scan:
    nqp_rxmark rx326_bstack, rxscan327_loop, rx326_pos, 0
  rxscan327_done:
    add $I11, rx326_pos, 1
    gt $I11, rx326_eos, rx326_fail
    substr $S10, rx326_tgt, rx326_pos, 1
    ne $S10, ucs4:"!", rx326_fail
    add rx326_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt328_0
    nqp_push_label $P11, alt328_1
    nqp_rxmark rx326_bstack, alt328_end, -1, 0
    rx326_cur."!alt"(rx326_pos, ucs4:"alt_nfa_100_1340317687.702", $P11)
    goto rx326_fail
  alt328_0:
    .const 'Sub' $P1468 = "98_1340317687.034" 
    capture_lex $P1468
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!pos", rx326_pos
    $P11 = rx326_cur."before"($P1468)
    repr_get_attr_int $I11, $P11, rx326_curclass, "$!pos"
    lt $I11, 0, rx326_fail
    goto alt328_end
  alt328_1:
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!pos", rx326_pos
    $P11 = rx326_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx326_curclass, "$!pos"
    lt $I11, 0, rx326_fail
    nqp_rxmark rx326_bstack, rxsubrule331_pass, -1, 0
  rxsubrule331_pass:
    rx326_cstack = rx326_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx326_pos, $P11, rx326_curclass, "$!pos"
    goto alt328_end
  alt328_end:
    nqp_rxcommit rx326_bstack, alt328_end
    rx326_cur."!cursor_pass"(rx326_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx326_cur)
  rx326_restart:
    repr_get_attr_obj rx326_cstack, rx326_cur, rx326_curclass, "$!cstack"
  rx326_fail:
    unless rx326_bstack, rx326_done
    pop $I19, rx326_bstack
    if_null rx326_cstack, rx326_cstack_done
    unless rx326_cstack, rx326_cstack_done
    dec $I19
    set $P11, rx326_cstack[$I19]
  rx326_cstack_done:
    pop rx326_rep, rx326_bstack
    pop rx326_pos, rx326_bstack
    pop $I19, rx326_bstack
    lt rx326_pos, -1, rx326_done
    lt rx326_pos, 0, rx326_fail
    eq $I19, 0, rx326_fail
    if_null rx326_cstack, rx326_jump
    elements $I18, rx326_bstack
    le $I18, 0, rx326_cut
    dec $I18
    set $I18, rx326_bstack[$I18]
  rx326_cut:
    assign rx326_cstack, $I18
  rx326_jump:
    jump $I19
  rx326_done:
    rx326_cur."!cursor_fail"()
    .return (rx326_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "99_1340317687.034_caps"  :subid("336_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 188
    new $P103, "Hash"
    set $P103["assertion"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "99_1340317687.034_nfa"  :subid("337_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 188
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 33
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 3
    push $P105, 8
    push $P105, "assertion"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "99_1340317687.034_alt_nfa_100_1340317687.702"  :subid("338_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 188
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 62
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "assertion"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P107
    push $P109, $P108
    new $P110, "ResizablePMCArray"
    push $P110, $P106
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1467"  :anon :subid("98_1340317687.034") :method :outer("99_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 188
    .lex unicode:"$\x{a2}", $P1471
    .local string rx329_tgt
    .local int rx329_pos
    .local int rx329_off
    .local int rx329_eos
    .local int rx329_rep
    .local pmc rx329_cur
    .local pmc rx329_curclass
    .local pmc rx329_bstack
    .local pmc rx329_cstack
    (rx329_cur, rx329_tgt, rx329_pos, rx329_curclass, rx329_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx329_cur
    length rx329_eos, rx329_tgt
    eq $I19, 1, rx329_restart
    repr_get_attr_int $I11, self, rx329_curclass, "$!from"
    ne $I11, -1, rxscan330_done
    goto rxscan330_scan
  rxscan330_loop:
    inc rx329_pos
    gt rx329_pos, rx329_eos, rx329_fail
    repr_bind_attr_int rx329_cur, rx329_curclass, "$!from", rx329_pos
  rxscan330_scan:
    nqp_rxmark rx329_bstack, rxscan330_loop, rx329_pos, 0
  rxscan330_done:
    add $I11, rx329_pos, 1
    gt $I11, rx329_eos, rx329_fail
    substr $S10, rx329_tgt, rx329_pos, 1
    ne $S10, ucs4:">", rx329_fail
    add rx329_pos, 1
    rx329_cur."!cursor_pass"(rx329_pos, 'backtrack'=>1)
    .return (rx329_cur)
  rx329_restart:
    repr_get_attr_obj rx329_cstack, rx329_cur, rx329_curclass, "$!cstack"
  rx329_fail:
    unless rx329_bstack, rx329_done
    pop $I19, rx329_bstack
    if_null rx329_cstack, rx329_cstack_done
    unless rx329_cstack, rx329_cstack_done
    dec $I19
    set $P11, rx329_cstack[$I19]
  rx329_cstack_done:
    pop rx329_rep, rx329_bstack
    pop rx329_pos, rx329_bstack
    pop $I19, rx329_bstack
    lt rx329_pos, -1, rx329_done
    lt rx329_pos, 0, rx329_fail
    eq $I19, 0, rx329_fail
    if_null rx329_cstack, rx329_jump
    elements $I18, rx329_bstack
    le $I18, 0, rx329_cut
    dec $I18
    set $I18, rx329_bstack[$I18]
  rx329_cut:
    assign rx329_cstack, $I18
  rx329_jump:
    jump $I19
  rx329_done:
    rx329_cur."!cursor_fail"()
    .return (rx329_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "98_1340317687.034_caps"  :subid("339_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 188
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "98_1340317687.034_nfa"  :subid("340_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 188
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 62
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "assertion:sym<|>"  :subid("101_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1473
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 189
    .lex "self", param_1473
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1474
    .lex "$/", $P1475
    .local string rx332_tgt
    .local int rx332_pos
    .local int rx332_off
    .local int rx332_eos
    .local int rx332_rep
    .local pmc rx332_cur
    .local pmc rx332_curclass
    .local pmc rx332_bstack
    .local pmc rx332_cstack
    (rx332_cur, rx332_tgt, rx332_pos, rx332_curclass, rx332_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx332_cur
    length rx332_eos, rx332_tgt
    eq $I19, 1, rx332_restart
    repr_get_attr_int $I11, self, rx332_curclass, "$!from"
    ne $I11, -1, rxscan333_done
    goto rxscan333_scan
  rxscan333_loop:
    inc rx332_pos
    gt rx332_pos, rx332_eos, rx332_fail
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!from", rx332_pos
  rxscan333_scan:
    nqp_rxmark rx332_bstack, rxscan333_loop, rx332_pos, 0
  rxscan333_done:
    add $I11, rx332_pos, 1
    gt $I11, rx332_eos, rx332_fail
    substr $S10, rx332_tgt, rx332_pos, 1
    ne $S10, ucs4:"|", rx332_fail
    add rx332_pos, 1
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail
    nqp_rxmark rx332_bstack, rxsubrule334_pass, -1, 0
  rxsubrule334_pass:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    rx332_cur."!cursor_pass"(rx332_pos, "assertion:sym<|>", 'backtrack'=>1)
    .return (rx332_cur)
  rx332_restart:
    repr_get_attr_obj rx332_cstack, rx332_cur, rx332_curclass, "$!cstack"
  rx332_fail:
    unless rx332_bstack, rx332_done
    pop $I19, rx332_bstack
    if_null rx332_cstack, rx332_cstack_done
    unless rx332_cstack, rx332_cstack_done
    dec $I19
    set $P11, rx332_cstack[$I19]
  rx332_cstack_done:
    pop rx332_rep, rx332_bstack
    pop rx332_pos, rx332_bstack
    pop $I19, rx332_bstack
    lt rx332_pos, -1, rx332_done
    lt rx332_pos, 0, rx332_fail
    eq $I19, 0, rx332_fail
    if_null rx332_cstack, rx332_jump
    elements $I18, rx332_bstack
    le $I18, 0, rx332_cut
    dec $I18
    set $I18, rx332_bstack[$I18]
  rx332_cut:
    assign rx332_cstack, $I18
  rx332_jump:
    jump $I19
  rx332_done:
    rx332_cur."!cursor_fail"()
    .return (rx332_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "101_1340317687.034_caps"  :subid("341_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 189
    new $P103, "Hash"
    set $P103["identifier"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "101_1340317687.034_nfa"  :subid("342_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 189
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 124
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "identifier"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "assertion:sym<method>"  :subid("102_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1479
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 191
    .lex "self", param_1479
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1480
    .lex "$/", $P1481
    .local string rx335_tgt
    .local int rx335_pos
    .local int rx335_off
    .local int rx335_eos
    .local int rx335_rep
    .local pmc rx335_cur
    .local pmc rx335_curclass
    .local pmc rx335_bstack
    .local pmc rx335_cstack
    (rx335_cur, rx335_tgt, rx335_pos, rx335_curclass, rx335_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx335_cur
    length rx335_eos, rx335_tgt
    eq $I19, 1, rx335_restart
    repr_get_attr_int $I11, self, rx335_curclass, "$!from"
    ne $I11, -1, rxscan336_done
    goto rxscan336_scan
  rxscan336_loop:
    inc rx335_pos
    gt rx335_pos, rx335_eos, rx335_fail
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!from", rx335_pos
  rxscan336_scan:
    nqp_rxmark rx335_bstack, rxscan336_loop, rx335_pos, 0
  rxscan336_done:
    add $I11, rx335_pos, 1
    gt $I11, rx335_eos, rx335_fail
    substr $S10, rx335_tgt, rx335_pos, 1
    ne $S10, ucs4:".", rx335_fail
    add rx335_pos, 1
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!pos", rx335_pos
    $P11 = rx335_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx335_curclass, "$!pos"
    lt $I11, 0, rx335_fail
    nqp_rxmark rx335_bstack, rxsubrule337_pass, -1, 0
  rxsubrule337_pass:
    rx335_cstack = rx335_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx335_pos, $P11, rx335_curclass, "$!pos"
    rx335_cur."!cursor_pass"(rx335_pos, "assertion:sym<method>", 'backtrack'=>1)
    .return (rx335_cur)
  rx335_restart:
    repr_get_attr_obj rx335_cstack, rx335_cur, rx335_curclass, "$!cstack"
  rx335_fail:
    unless rx335_bstack, rx335_done
    pop $I19, rx335_bstack
    if_null rx335_cstack, rx335_cstack_done
    unless rx335_cstack, rx335_cstack_done
    dec $I19
    set $P11, rx335_cstack[$I19]
  rx335_cstack_done:
    pop rx335_rep, rx335_bstack
    pop rx335_pos, rx335_bstack
    pop $I19, rx335_bstack
    lt rx335_pos, -1, rx335_done
    lt rx335_pos, 0, rx335_fail
    eq $I19, 0, rx335_fail
    if_null rx335_cstack, rx335_jump
    elements $I18, rx335_bstack
    le $I18, 0, rx335_cut
    dec $I18
    set $I18, rx335_bstack[$I18]
  rx335_cut:
    assign rx335_cstack, $I18
  rx335_jump:
    jump $I19
  rx335_done:
    rx335_cur."!cursor_fail"()
    .return (rx335_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "102_1340317687.034_caps"  :subid("343_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 191
    new $P103, "Hash"
    set $P103["assertion"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "102_1340317687.034_nfa"  :subid("344_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 191
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 46
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "assertion"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "assertion:sym<name>"  :subid("104_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1485
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 195
    .const 'Sub' $P1492 = "103_1340317687.034" 
    capture_lex $P1492
    .lex "self", param_1485
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1486
    .lex "$/", $P1487
    .local string rx338_tgt
    .local int rx338_pos
    .local int rx338_off
    .local int rx338_eos
    .local int rx338_rep
    .local pmc rx338_cur
    .local pmc rx338_curclass
    .local pmc rx338_bstack
    .local pmc rx338_cstack
    (rx338_cur, rx338_tgt, rx338_pos, rx338_curclass, rx338_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx338_cur
    length rx338_eos, rx338_tgt
    eq $I19, 1, rx338_restart
    repr_get_attr_int $I11, self, rx338_curclass, "$!from"
    ne $I11, -1, rxscan339_done
    goto rxscan339_scan
  rxscan339_loop:
    inc rx338_pos
    gt rx338_pos, rx338_eos, rx338_fail
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!from", rx338_pos
  rxscan339_scan:
    nqp_rxmark rx338_bstack, rxscan339_loop, rx338_pos, 0
  rxscan339_done:
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!pos", rx338_pos
    $P11 = rx338_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx338_curclass, "$!pos"
    lt $I11, 0, rx338_fail
    nqp_rxmark rx338_bstack, rxsubrule340_pass, -1, 0
  rxsubrule340_pass:
    rx338_cstack = rx338_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx338_pos, $P11, rx338_curclass, "$!pos"
  # rx rxquantr341 ** 0..1
    nqp_rxmark rx338_bstack, rxquantr341_done, rx338_pos, 0
  rxquantr341_loop:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt342_0
    nqp_push_label $P11, alt342_1
    nqp_push_label $P11, alt342_2
    nqp_push_label $P11, alt342_3
    nqp_push_label $P11, alt342_4
    nqp_rxmark rx338_bstack, alt342_end, -1, 0
    rx338_cur."!alt"(rx338_pos, ucs4:"alt_nfa_105_1340317687.734", $P11)
    goto rx338_fail
  alt342_0:
    .const 'Sub' $P1492 = "103_1340317687.034" 
    capture_lex $P1492
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!pos", rx338_pos
    $P11 = rx338_cur."before"($P1492)
    repr_get_attr_int $I11, $P11, rx338_curclass, "$!pos"
    lt $I11, 0, rx338_fail
    goto alt342_end
  alt342_1:
    add $I11, rx338_pos, 1
    gt $I11, rx338_eos, rx338_fail
    substr $S10, rx338_tgt, rx338_pos, 1
    ne $S10, ucs4:"=", rx338_fail
    add rx338_pos, 1
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!pos", rx338_pos
    $P11 = rx338_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx338_curclass, "$!pos"
    lt $I11, 0, rx338_fail
    nqp_rxmark rx338_bstack, rxsubrule345_pass, -1, 0
  rxsubrule345_pass:
    rx338_cstack = rx338_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx338_pos, $P11, rx338_curclass, "$!pos"
    goto alt342_end
  alt342_2:
    add $I11, rx338_pos, 1
    gt $I11, rx338_eos, rx338_fail
    substr $S10, rx338_tgt, rx338_pos, 1
    ne $S10, ucs4:":", rx338_fail
    add rx338_pos, 1
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!pos", rx338_pos
    $P11 = rx338_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx338_curclass, "$!pos"
    lt $I11, 0, rx338_fail
    nqp_rxmark rx338_bstack, rxsubrule346_pass, -1, 0
  rxsubrule346_pass:
    rx338_cstack = rx338_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx338_pos, $P11, rx338_curclass, "$!pos"
    goto alt342_end
  alt342_3:
    add $I11, rx338_pos, 1
    gt $I11, rx338_eos, rx338_fail
    substr $S10, rx338_tgt, rx338_pos, 1
    ne $S10, ucs4:"(", rx338_fail
    add rx338_pos, 1
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!pos", rx338_pos
    $P11 = rx338_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx338_curclass, "$!pos"
    lt $I11, 0, rx338_fail
    nqp_rxmark rx338_bstack, rxsubrule347_pass, -1, 0
  rxsubrule347_pass:
    rx338_cstack = rx338_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx338_pos, $P11, rx338_curclass, "$!pos"
    add $I11, rx338_pos, 1
    gt $I11, rx338_eos, rx338_fail
    substr $S10, rx338_tgt, rx338_pos, 1
    ne $S10, ucs4:")", rx338_fail
    add rx338_pos, 1
    goto alt342_end
  alt342_4:
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!pos", rx338_pos
    $P11 = rx338_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx338_curclass, "$!pos"
    lt $I11, 0, rx338_fail
    repr_get_attr_int rx338_pos, $P11, rx338_curclass, "$!pos"
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!pos", rx338_pos
    $P11 = rx338_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx338_curclass, "$!pos"
    lt $I11, 0, rx338_fail
    nqp_rxmark rx338_bstack, rxsubrule349_pass, -1, 0
  rxsubrule349_pass:
    rx338_cstack = rx338_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx338_pos, $P11, rx338_curclass, "$!pos"
    goto alt342_end
  alt342_end:
    nqp_rxpeek $I19, rx338_bstack, rxquantr341_done
    inc $I19
    inc $I19
    set rx338_rep, rx338_bstack[$I19]
    nqp_rxcommit rx338_bstack, rxquantr341_done
    inc rx338_rep
  rxquantr341_done:
    rx338_cur."!cursor_pass"(rx338_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx338_cur)
  rx338_restart:
    repr_get_attr_obj rx338_cstack, rx338_cur, rx338_curclass, "$!cstack"
  rx338_fail:
    unless rx338_bstack, rx338_done
    pop $I19, rx338_bstack
    if_null rx338_cstack, rx338_cstack_done
    unless rx338_cstack, rx338_cstack_done
    dec $I19
    set $P11, rx338_cstack[$I19]
  rx338_cstack_done:
    pop rx338_rep, rx338_bstack
    pop rx338_pos, rx338_bstack
    pop $I19, rx338_bstack
    lt rx338_pos, -1, rx338_done
    lt rx338_pos, 0, rx338_fail
    eq $I19, 0, rx338_fail
    if_null rx338_cstack, rx338_jump
    elements $I18, rx338_bstack
    le $I18, 0, rx338_cut
    dec $I18
    set $I18, rx338_bstack[$I18]
  rx338_cut:
    assign rx338_cstack, $I18
  rx338_jump:
    jump $I19
  rx338_done:
    rx338_cur."!cursor_fail"()
    .return (rx338_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "104_1340317687.034_caps"  :subid("345_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 195
    new $P103, "Hash"
    set $P103["longname"], 0
    set $P103["assertion"], 2
    set $P103["arglist"], 2
    set $P103["nibbler"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "104_1340317687.034_nfa"  :subid("346_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 195
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 8
    push $P104, "identifier"
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 3
    push $P105, 2
    push $P105, 61
    push $P105, 4
    push $P105, 2
    push $P105, 58
    push $P105, 5
    push $P105, 2
    push $P105, 40
    push $P105, 6
    push $P105, 8
    push $P105, "normspace"
    push $P105, 8
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "assertion"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "arglist"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "arglist"
    push $P109, 7
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 41
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "nibbler"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P103
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "104_1340317687.034_alt_nfa_105_1340317687.734"  :subid("347_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 195
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 62
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 61
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "assertion"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    new $P111, "ResizablePMCArray"
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 58
    push $P112, 2
    new $P113, "ResizablePMCArray"
    push $P113, 8
    push $P113, "arglist"
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    new $P115, "ResizablePMCArray"
    new $P116, "ResizablePMCArray"
    push $P116, 2
    push $P116, 40
    push $P116, 2
    new $P117, "ResizablePMCArray"
    push $P117, 8
    push $P117, "arglist"
    push $P117, 3
    new $P118, "ResizablePMCArray"
    push $P118, 2
    push $P118, 41
    push $P118, 0
    new $P119, "ResizablePMCArray"
    push $P119, $P115
    push $P119, $P116
    push $P119, $P117
    push $P119, $P118
    new $P120, "ResizablePMCArray"
    new $P121, "ResizablePMCArray"
    push $P121, 8
    push $P121, "normspace"
    push $P121, 2
    new $P122, "ResizablePMCArray"
    push $P122, 8
    push $P122, "nibbler"
    push $P122, 0
    new $P123, "ResizablePMCArray"
    push $P123, $P120
    push $P123, $P121
    push $P123, $P122
    new $P124, "ResizablePMCArray"
    push $P124, $P106
    push $P124, $P110
    push $P124, $P114
    push $P124, $P119
    push $P124, $P123
    .return ($P124)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1491"  :anon :subid("103_1340317687.034") :method :outer("104_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 195
    .lex unicode:"$\x{a2}", $P1495
    .local string rx343_tgt
    .local int rx343_pos
    .local int rx343_off
    .local int rx343_eos
    .local int rx343_rep
    .local pmc rx343_cur
    .local pmc rx343_curclass
    .local pmc rx343_bstack
    .local pmc rx343_cstack
    (rx343_cur, rx343_tgt, rx343_pos, rx343_curclass, rx343_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx343_cur
    length rx343_eos, rx343_tgt
    eq $I19, 1, rx343_restart
    repr_get_attr_int $I11, self, rx343_curclass, "$!from"
    ne $I11, -1, rxscan344_done
    goto rxscan344_scan
  rxscan344_loop:
    inc rx343_pos
    gt rx343_pos, rx343_eos, rx343_fail
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!from", rx343_pos
  rxscan344_scan:
    nqp_rxmark rx343_bstack, rxscan344_loop, rx343_pos, 0
  rxscan344_done:
    add $I11, rx343_pos, 1
    gt $I11, rx343_eos, rx343_fail
    substr $S10, rx343_tgt, rx343_pos, 1
    ne $S10, ucs4:">", rx343_fail
    add rx343_pos, 1
    rx343_cur."!cursor_pass"(rx343_pos, 'backtrack'=>1)
    .return (rx343_cur)
  rx343_restart:
    repr_get_attr_obj rx343_cstack, rx343_cur, rx343_curclass, "$!cstack"
  rx343_fail:
    unless rx343_bstack, rx343_done
    pop $I19, rx343_bstack
    if_null rx343_cstack, rx343_cstack_done
    unless rx343_cstack, rx343_cstack_done
    dec $I19
    set $P11, rx343_cstack[$I19]
  rx343_cstack_done:
    pop rx343_rep, rx343_bstack
    pop rx343_pos, rx343_bstack
    pop $I19, rx343_bstack
    lt rx343_pos, -1, rx343_done
    lt rx343_pos, 0, rx343_fail
    eq $I19, 0, rx343_fail
    if_null rx343_cstack, rx343_jump
    elements $I18, rx343_bstack
    le $I18, 0, rx343_cut
    dec $I18
    set $I18, rx343_bstack[$I18]
  rx343_cut:
    assign rx343_cstack, $I18
  rx343_jump:
    jump $I19
  rx343_done:
    rx343_cur."!cursor_fail"()
    .return (rx343_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "103_1340317687.034_caps"  :subid("348_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 195
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "103_1340317687.034_nfa"  :subid("349_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 195
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 62
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "assertion:sym<[>"  :subid("108_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1497
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 206
    .const 'Sub' $P1503 = "106_1340317687.034" 
    capture_lex $P1503
    .lex "self", param_1497
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1498
    .lex "$/", $P1499
    .local string rx350_tgt
    .local int rx350_pos
    .local int rx350_off
    .local int rx350_eos
    .local int rx350_rep
    .local pmc rx350_cur
    .local pmc rx350_curclass
    .local pmc rx350_bstack
    .local pmc rx350_cstack
    (rx350_cur, rx350_tgt, rx350_pos, rx350_curclass, rx350_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx350_cur
    length rx350_eos, rx350_tgt
    eq $I19, 1, rx350_restart
    repr_get_attr_int $I11, self, rx350_curclass, "$!from"
    ne $I11, -1, rxscan351_done
    goto rxscan351_scan
  rxscan351_loop:
    inc rx350_pos
    gt rx350_pos, rx350_eos, rx350_fail
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!from", rx350_pos
  rxscan351_scan:
    nqp_rxmark rx350_bstack, rxscan351_loop, rx350_pos, 0
  rxscan351_done:
    .const 'Sub' $P1503 = "106_1340317687.034" 
    capture_lex $P1503
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."before"($P1503)
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail
  # rx rxquantr355 ** 1..-1
    nqp_rxmark rx350_bstack, rxquantr355_done, -1, 0
  rxquantr355_loop:
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."cclass_elem"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail
    goto rxsubrule356_pass
  rxsubrule356_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail
  rxsubrule356_pass:
    rx350_cstack = rx350_cur."!cursor_capture"($P11, "cclass_elem")
    set_addr $I11, rxsubrule356_back
    push rx350_bstack, $I11
    push rx350_bstack, 0
    push rx350_bstack, rx350_pos
    elements $I11, rx350_cstack
    push rx350_bstack, $I11
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    nqp_rxpeek $I19, rx350_bstack, rxquantr355_done
    inc $I19
    inc $I19
    set rx350_rep, rx350_bstack[$I19]
    nqp_rxcommit rx350_bstack, rxquantr355_done
    inc rx350_rep
    nqp_rxmark rx350_bstack, rxquantr355_done, rx350_pos, rx350_rep
    goto rxquantr355_loop
  rxquantr355_done:
    rx350_cur."!cursor_pass"(rx350_pos, "assertion:sym<[>", 'backtrack'=>1)
    .return (rx350_cur)
  rx350_restart:
    repr_get_attr_obj rx350_cstack, rx350_cur, rx350_curclass, "$!cstack"
  rx350_fail:
    unless rx350_bstack, rx350_done
    pop $I19, rx350_bstack
    if_null rx350_cstack, rx350_cstack_done
    unless rx350_cstack, rx350_cstack_done
    dec $I19
    set $P11, rx350_cstack[$I19]
  rx350_cstack_done:
    pop rx350_rep, rx350_bstack
    pop rx350_pos, rx350_bstack
    pop $I19, rx350_bstack
    lt rx350_pos, -1, rx350_done
    lt rx350_pos, 0, rx350_fail
    eq $I19, 0, rx350_fail
    if_null rx350_cstack, rx350_jump
    elements $I18, rx350_bstack
    le $I18, 0, rx350_cut
    dec $I18
    set $I18, rx350_bstack[$I18]
  rx350_cut:
    assign rx350_cstack, $I18
  rx350_jump:
    jump $I19
  rx350_done:
    rx350_cur."!cursor_fail"()
    .return (rx350_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "108_1340317687.034_caps"  :subid("350_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 206
    new $P103, "Hash"
    set $P103["cclass_elem"], 2
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "108_1340317687.034_nfa"  :subid("351_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 206
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 91
    push $P104, 2
    push $P104, 2
    push $P104, 43
    push $P104, 2
    push $P104, 2
    push $P104, 45
    push $P104, 2
    push $P104, 2
    push $P104, 58
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1502"  :anon :subid("106_1340317687.034") :method :outer("108_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 206
    .lex unicode:"$\x{a2}", $P1507
    .local string rx352_tgt
    .local int rx352_pos
    .local int rx352_off
    .local int rx352_eos
    .local int rx352_rep
    .local pmc rx352_cur
    .local pmc rx352_curclass
    .local pmc rx352_bstack
    .local pmc rx352_cstack
    (rx352_cur, rx352_tgt, rx352_pos, rx352_curclass, rx352_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx352_cur
    length rx352_eos, rx352_tgt
    eq $I19, 1, rx352_restart
    repr_get_attr_int $I11, self, rx352_curclass, "$!from"
    ne $I11, -1, rxscan353_done
    goto rxscan353_scan
  rxscan353_loop:
    inc rx352_pos
    gt rx352_pos, rx352_eos, rx352_fail
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!from", rx352_pos
  rxscan353_scan:
    nqp_rxmark rx352_bstack, rxscan353_loop, rx352_pos, 0
  rxscan353_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt354_0
    nqp_push_label $P11, alt354_1
    nqp_push_label $P11, alt354_2
    nqp_push_label $P11, alt354_3
    nqp_rxmark rx352_bstack, alt354_end, -1, 0
    rx352_cur."!alt"(rx352_pos, ucs4:"alt_nfa_107_1340317687.743", $P11)
    goto rx352_fail
  alt354_0:
    add $I11, rx352_pos, 1
    gt $I11, rx352_eos, rx352_fail
    substr $S10, rx352_tgt, rx352_pos, 1
    ne $S10, ucs4:"[", rx352_fail
    add rx352_pos, 1
    goto alt354_end
  alt354_1:
    add $I11, rx352_pos, 1
    gt $I11, rx352_eos, rx352_fail
    substr $S10, rx352_tgt, rx352_pos, 1
    ne $S10, ucs4:"+", rx352_fail
    add rx352_pos, 1
    goto alt354_end
  alt354_2:
    add $I11, rx352_pos, 1
    gt $I11, rx352_eos, rx352_fail
    substr $S10, rx352_tgt, rx352_pos, 1
    ne $S10, ucs4:"-", rx352_fail
    add rx352_pos, 1
    goto alt354_end
  alt354_3:
    add $I11, rx352_pos, 1
    gt $I11, rx352_eos, rx352_fail
    substr $S10, rx352_tgt, rx352_pos, 1
    ne $S10, ucs4:":", rx352_fail
    add rx352_pos, 1
    goto alt354_end
  alt354_end:
    rx352_cur."!cursor_pass"(rx352_pos, 'backtrack'=>1)
    .return (rx352_cur)
  rx352_restart:
    repr_get_attr_obj rx352_cstack, rx352_cur, rx352_curclass, "$!cstack"
  rx352_fail:
    unless rx352_bstack, rx352_done
    pop $I19, rx352_bstack
    if_null rx352_cstack, rx352_cstack_done
    unless rx352_cstack, rx352_cstack_done
    dec $I19
    set $P11, rx352_cstack[$I19]
  rx352_cstack_done:
    pop rx352_rep, rx352_bstack
    pop rx352_pos, rx352_bstack
    pop $I19, rx352_bstack
    lt rx352_pos, -1, rx352_done
    lt rx352_pos, 0, rx352_fail
    eq $I19, 0, rx352_fail
    if_null rx352_cstack, rx352_jump
    elements $I18, rx352_bstack
    le $I18, 0, rx352_cut
    dec $I18
    set $I18, rx352_bstack[$I18]
  rx352_cut:
    assign rx352_cstack, $I18
  rx352_jump:
    jump $I19
  rx352_done:
    rx352_cur."!cursor_fail"()
    .return (rx352_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "106_1340317687.034_caps"  :subid("352_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 206
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "106_1340317687.034_nfa"  :subid("353_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 206
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 91
    push $P104, 0
    push $P104, 2
    push $P104, 43
    push $P104, 0
    push $P104, 2
    push $P104, 45
    push $P104, 0
    push $P104, 2
    push $P104, 58
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "106_1340317687.034_alt_nfa_107_1340317687.743"  :subid("354_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 206
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 91
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 43
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P106
    push $P108, $P107
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 45
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P109
    push $P111, $P110
    new $P112, "ResizablePMCArray"
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 58
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P112
    push $P114, $P113
    new $P115, "ResizablePMCArray"
    push $P115, $P105
    push $P115, $P108
    push $P115, $P111
    push $P115, $P114
    .return ($P115)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "cclass_elem"  :subid("115_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1509
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    .const 'Sub' $P1518 = "114_1340317687.034" 
    capture_lex $P1518
    .lex "self", param_1509
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1510
    .lex "$/", $P1511
    .local string rx357_tgt
    .local int rx357_pos
    .local int rx357_off
    .local int rx357_eos
    .local int rx357_rep
    .local pmc rx357_cur
    .local pmc rx357_curclass
    .local pmc rx357_bstack
    .local pmc rx357_cstack
    (rx357_cur, rx357_tgt, rx357_pos, rx357_curclass, rx357_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx357_cur
    length rx357_eos, rx357_tgt
    eq $I19, 1, rx357_restart
    repr_get_attr_int $I11, self, rx357_curclass, "$!from"
    ne $I11, -1, rxscan358_done
    goto rxscan358_scan
  rxscan358_loop:
    inc rx357_pos
    gt rx357_pos, rx357_eos, rx357_fail
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!from", rx357_pos
  rxscan358_scan:
    nqp_rxmark rx357_bstack, rxscan358_loop, rx357_pos, 0
  rxscan358_done:
    nqp_rxmark rx357_bstack, rxcap359_fail, rx357_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt360_0
    nqp_push_label $P11, alt360_1
    nqp_push_label $P11, alt360_2
    nqp_rxmark rx357_bstack, alt360_end, -1, 0
    rx357_cur."!alt"(rx357_pos, ucs4:"alt_nfa_116_1340317687.807", $P11)
    goto rx357_fail
  alt360_0:
    add $I11, rx357_pos, 1
    gt $I11, rx357_eos, rx357_fail
    substr $S10, rx357_tgt, rx357_pos, 1
    ne $S10, ucs4:"+", rx357_fail
    add rx357_pos, 1
    goto alt360_end
  alt360_1:
    add $I11, rx357_pos, 1
    gt $I11, rx357_eos, rx357_fail
    substr $S10, rx357_tgt, rx357_pos, 1
    ne $S10, ucs4:"-", rx357_fail
    add rx357_pos, 1
    goto alt360_end
  alt360_2:
    goto alt360_end
  alt360_end:
    nqp_rxcommit rx357_bstack, alt360_end
    nqp_rxpeek $I19, rx357_bstack, rxcap359_fail
    inc $I19
    set $I11, rx357_bstack[$I19]
    $P11 = rx357_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx357_pos)
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "sign")
    goto rxcap359_done
  rxcap359_fail:
    goto rx357_fail
  rxcap359_done:
  # rx rxquantr362 ** 0..1
    nqp_rxmark rx357_bstack, rxquantr362_done, rx357_pos, 0
  rxquantr362_loop:
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!pos", rx357_pos
    $P11 = rx357_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail
    goto rxsubrule363_pass
  rxsubrule363_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail
  rxsubrule363_pass:
    rx357_cstack = rx357_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule363_back
    push rx357_bstack, $I11
    push rx357_bstack, 0
    push rx357_bstack, rx357_pos
    elements $I11, rx357_cstack
    push rx357_bstack, $I11
    repr_get_attr_int rx357_pos, $P11, rx357_curclass, "$!pos"
    nqp_rxpeek $I19, rx357_bstack, rxquantr362_done
    inc $I19
    inc $I19
    set rx357_rep, rx357_bstack[$I19]
    nqp_rxcommit rx357_bstack, rxquantr362_done
    inc rx357_rep
  rxquantr362_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt364_0
    nqp_push_label $P11, alt364_1
    nqp_push_label $P11, alt364_2
    nqp_rxmark rx357_bstack, alt364_end, -1, 0
    rx357_cur."!alt"(rx357_pos, ucs4:"alt_nfa_117_1340317687.808", $P11)
    goto rx357_fail
  alt364_0:
    add $I11, rx357_pos, 1
    gt $I11, rx357_eos, rx357_fail
    substr $S10, rx357_tgt, rx357_pos, 1
    ne $S10, ucs4:"[", rx357_fail
    add rx357_pos, 1
  # rx rxquantr365 ** 0..-1
    nqp_rxmark rx357_bstack, rxquantr365_done, rx357_pos, 0
  rxquantr365_loop:
    .const 'Sub' $P1518 = "114_1340317687.034" 
    capture_lex $P1518
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!pos", rx357_pos
    $P11 = rx357_cur.$P1518()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail
    goto rxsubrule396_pass
  rxsubrule396_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail
  rxsubrule396_pass:
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "charspec")
    set_addr $I11, rxsubrule396_back
    push rx357_bstack, $I11
    push rx357_bstack, 0
    push rx357_bstack, rx357_pos
    elements $I11, rx357_cstack
    push rx357_bstack, $I11
    repr_get_attr_int rx357_pos, $P11, rx357_curclass, "$!pos"
    nqp_rxpeek $I19, rx357_bstack, rxquantr365_done
    inc $I19
    inc $I19
    set rx357_rep, rx357_bstack[$I19]
    nqp_rxcommit rx357_bstack, rxquantr365_done
    inc rx357_rep
    nqp_rxmark rx357_bstack, rxquantr365_done, rx357_pos, rx357_rep
    goto rxquantr365_loop
  rxquantr365_done:
  # rx rxquantr397 ** 0..-1
    nqp_rxmark rx357_bstack, rxquantr397_done, rx357_pos, 0
  rxquantr397_loop:
    ge rx357_pos, rx357_eos, rx357_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx357_tgt, rx357_pos
    unless $I11, rx357_fail
    add rx357_pos, 1
    nqp_rxpeek $I19, rx357_bstack, rxquantr397_done
    inc $I19
    inc $I19
    set rx357_rep, rx357_bstack[$I19]
    nqp_rxcommit rx357_bstack, rxquantr397_done
    inc rx357_rep
    nqp_rxmark rx357_bstack, rxquantr397_done, rx357_pos, rx357_rep
    goto rxquantr397_loop
  rxquantr397_done:
    add $I11, rx357_pos, 1
    gt $I11, rx357_eos, rx357_fail
    substr $S10, rx357_tgt, rx357_pos, 1
    ne $S10, ucs4:"]", rx357_fail
    add rx357_pos, 1
    goto alt364_end
  alt364_1:
    nqp_rxmark rx357_bstack, rxcap398_fail, rx357_pos, 0
  # rx rxquantr399 ** 1..-1
    nqp_rxmark rx357_bstack, rxquantr399_done, -1, 0
  rxquantr399_loop:
    ge rx357_pos, rx357_eos, rx357_fail
    is_cclass $I11, .CCLASS_WORD, rx357_tgt, rx357_pos
    unless $I11, rx357_fail
    add rx357_pos, 1
    nqp_rxpeek $I19, rx357_bstack, rxquantr399_done
    inc $I19
    inc $I19
    set rx357_rep, rx357_bstack[$I19]
    nqp_rxcommit rx357_bstack, rxquantr399_done
    inc rx357_rep
    nqp_rxmark rx357_bstack, rxquantr399_done, rx357_pos, rx357_rep
    goto rxquantr399_loop
  rxquantr399_done:
    nqp_rxpeek $I19, rx357_bstack, rxcap398_fail
    inc $I19
    set $I11, rx357_bstack[$I19]
    $P11 = rx357_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx357_pos)
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "name")
    goto rxcap398_done
  rxcap398_fail:
    goto rx357_fail
  rxcap398_done:
    goto alt364_end
  alt364_2:
    add $I11, rx357_pos, 1
    gt $I11, rx357_eos, rx357_fail
    substr $S10, rx357_tgt, rx357_pos, 1
    ne $S10, ucs4:":", rx357_fail
    add rx357_pos, 1
    nqp_rxmark rx357_bstack, rxcap400_fail, rx357_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt401_0
    nqp_push_label $P11, alt401_1
    nqp_rxmark rx357_bstack, alt401_end, -1, 0
    rx357_cur."!alt"(rx357_pos, ucs4:"alt_nfa_118_1340317687.809", $P11)
    goto rx357_fail
  alt401_0:
    add $I11, rx357_pos, 1
    gt $I11, rx357_eos, rx357_fail
    substr $S10, rx357_tgt, rx357_pos, 1
    ne $S10, ucs4:"!", rx357_fail
    add rx357_pos, 1
    goto alt401_end
  alt401_1:
    goto alt401_end
  alt401_end:
    nqp_rxcommit rx357_bstack, alt401_end
    nqp_rxpeek $I19, rx357_bstack, rxcap400_fail
    inc $I19
    set $I11, rx357_bstack[$I19]
    $P11 = rx357_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx357_pos)
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "invert")
    goto rxcap400_done
  rxcap400_fail:
    goto rx357_fail
  rxcap400_done:
    nqp_rxmark rx357_bstack, rxcap403_fail, rx357_pos, 0
  # rx rxquantr404 ** 1..-1
    nqp_rxmark rx357_bstack, rxquantr404_done, -1, 0
  rxquantr404_loop:
    ge rx357_pos, rx357_eos, rx357_fail
    is_cclass $I11, .CCLASS_WORD, rx357_tgt, rx357_pos
    unless $I11, rx357_fail
    add rx357_pos, 1
    nqp_rxpeek $I19, rx357_bstack, rxquantr404_done
    inc $I19
    inc $I19
    set rx357_rep, rx357_bstack[$I19]
    nqp_rxcommit rx357_bstack, rxquantr404_done
    inc rx357_rep
    nqp_rxmark rx357_bstack, rxquantr404_done, rx357_pos, rx357_rep
    goto rxquantr404_loop
  rxquantr404_done:
    nqp_rxpeek $I19, rx357_bstack, rxcap403_fail
    inc $I19
    set $I11, rx357_bstack[$I19]
    $P11 = rx357_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx357_pos)
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "uniprop")
    goto rxcap403_done
  rxcap403_fail:
    goto rx357_fail
  rxcap403_done:
    goto alt364_end
  alt364_end:
    nqp_rxcommit rx357_bstack, alt364_end
  # rx rxquantr405 ** 0..1
    nqp_rxmark rx357_bstack, rxquantr405_done, rx357_pos, 0
  rxquantr405_loop:
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!pos", rx357_pos
    $P11 = rx357_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail
    goto rxsubrule406_pass
  rxsubrule406_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail
  rxsubrule406_pass:
    rx357_cstack = rx357_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule406_back
    push rx357_bstack, $I11
    push rx357_bstack, 0
    push rx357_bstack, rx357_pos
    elements $I11, rx357_cstack
    push rx357_bstack, $I11
    repr_get_attr_int rx357_pos, $P11, rx357_curclass, "$!pos"
    nqp_rxpeek $I19, rx357_bstack, rxquantr405_done
    inc $I19
    inc $I19
    set rx357_rep, rx357_bstack[$I19]
    nqp_rxcommit rx357_bstack, rxquantr405_done
    inc rx357_rep
  rxquantr405_done:
    rx357_cur."!cursor_pass"(rx357_pos, "cclass_elem", 'backtrack'=>1)
    .return (rx357_cur)
  rx357_restart:
    repr_get_attr_obj rx357_cstack, rx357_cur, rx357_curclass, "$!cstack"
  rx357_fail:
    unless rx357_bstack, rx357_done
    pop $I19, rx357_bstack
    if_null rx357_cstack, rx357_cstack_done
    unless rx357_cstack, rx357_cstack_done
    dec $I19
    set $P11, rx357_cstack[$I19]
  rx357_cstack_done:
    pop rx357_rep, rx357_bstack
    pop rx357_pos, rx357_bstack
    pop $I19, rx357_bstack
    lt rx357_pos, -1, rx357_done
    lt rx357_pos, 0, rx357_fail
    eq $I19, 0, rx357_fail
    if_null rx357_cstack, rx357_jump
    elements $I18, rx357_bstack
    le $I18, 0, rx357_cut
    dec $I18
    set $I18, rx357_bstack[$I18]
  rx357_cut:
    assign rx357_cstack, $I18
  rx357_jump:
    jump $I19
  rx357_done:
    rx357_cur."!cursor_fail"()
    .return (rx357_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "115_1340317687.034_caps"  :subid("355_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "Hash"
    set $P103["sign"], 0
    set $P103["charspec"], 2
    set $P103["name"], 0
    set $P103["invert"], 0
    set $P103["uniprop"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "115_1340317687.034_nfa"  :subid("356_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 43
    push $P104, 2
    push $P104, 2
    push $P104, 45
    push $P104, 2
    push $P104, 1
    push $P104, 0
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "normspace"
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 91
    push $P106, 4
    push $P106, 1
    push $P106, 0
    push $P106, 8
    push $P106, 2
    push $P106, 58
    push $P106, 10
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    push $P107, 1
    push $P107, 0
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 32
    push $P108, 5
    push $P108, 1
    push $P108, 0
    push $P108, 6
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 93
    push $P109, 7
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "normspace"
    push $P110, 0
    push $P110, 1
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 8192
    push $P111, 9
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 8
    push $P112, 1
    push $P112, 0
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 33
    push $P113, 11
    push $P113, 1
    push $P113, 0
    push $P113, 11
    new $P114, "ResizablePMCArray"
    push $P114, 1
    push $P114, 0
    push $P114, 12
    new $P115, "ResizablePMCArray"
    push $P115, 4
    push $P115, 8192
    push $P115, 13
    new $P116, "ResizablePMCArray"
    push $P116, 1
    push $P116, 0
    push $P116, 12
    push $P116, 1
    push $P116, 0
    push $P116, 7
    new $P117, "ResizablePMCArray"
    push $P117, $P103
    push $P117, $P104
    push $P117, $P105
    push $P117, $P106
    push $P117, $P107
    push $P117, $P108
    push $P117, $P109
    push $P117, $P110
    push $P117, $P111
    push $P117, $P112
    push $P117, $P113
    push $P117, $P114
    push $P117, $P115
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "115_1340317687.034_alt_nfa_116_1340317687.807"  :subid("357_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 43
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 45
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P106
    push $P108, $P107
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P109
    push $P111, $P110
    new $P112, "ResizablePMCArray"
    push $P112, $P105
    push $P112, $P108
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "115_1340317687.034_alt_nfa_118_1340317687.809"  :subid("358_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 33
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P106
    push $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, $P105
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "115_1340317687.034_alt_nfa_117_1340317687.808"  :subid("359_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 91
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    push $P105, 1
    push $P105, 0
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 4
    push $P106, 32
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 93
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P103
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 2
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 8192
    push $P111, 3
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 2
    push $P112, 1
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    new $P114, "ResizablePMCArray"
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 58
    push $P115, 2
    new $P116, "ResizablePMCArray"
    push $P116, 2
    push $P116, 33
    push $P116, 3
    push $P116, 1
    push $P116, 0
    push $P116, 3
    new $P117, "ResizablePMCArray"
    push $P117, 1
    push $P117, 0
    push $P117, 4
    new $P118, "ResizablePMCArray"
    push $P118, 4
    push $P118, 8192
    push $P118, 5
    new $P119, "ResizablePMCArray"
    push $P119, 1
    push $P119, 0
    push $P119, 4
    push $P119, 1
    push $P119, 0
    push $P119, 0
    new $P120, "ResizablePMCArray"
    push $P120, $P114
    push $P120, $P115
    push $P120, $P116
    push $P120, $P117
    push $P120, $P118
    push $P120, $P119
    new $P121, "ResizablePMCArray"
    push $P121, $P108
    push $P121, $P113
    push $P121, $P120
    .return ($P121)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1517"  :anon :subid("114_1340317687.034") :method :outer("115_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    .const 'Sub' $P1535 = "113_1340317687.034" 
    capture_lex $P1535
    .const 'Sub' $P1527 = "111_1340317687.034" 
    capture_lex $P1527
    .const 'Sub' $P1522 = "109_1340317687.034" 
    capture_lex $P1522
    .lex unicode:"$\x{a2}", $P1520
    .local string rx366_tgt
    .local int rx366_pos
    .local int rx366_off
    .local int rx366_eos
    .local int rx366_rep
    .local pmc rx366_cur
    .local pmc rx366_curclass
    .local pmc rx366_bstack
    .local pmc rx366_cstack
    (rx366_cur, rx366_tgt, rx366_pos, rx366_curclass, rx366_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx366_cur
    length rx366_eos, rx366_tgt
    eq $I19, 1, rx366_restart
    repr_get_attr_int $I11, self, rx366_curclass, "$!from"
    ne $I11, -1, rxscan367_done
    goto rxscan367_scan
  rxscan367_loop:
    inc rx366_pos
    gt rx366_pos, rx366_eos, rx366_fail
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!from", rx366_pos
  rxscan367_scan:
    nqp_rxmark rx366_bstack, rxscan367_loop, rx366_pos, 0
  rxscan367_done:
  alt368_0:
    nqp_rxmark rx366_bstack, alt368_1, rx366_pos, 0
  # rx rxquantr369 ** 0..-1
    nqp_rxmark rx366_bstack, rxquantr369_done, rx366_pos, 0
  rxquantr369_loop:
    ge rx366_pos, rx366_eos, rx366_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx366_tgt, rx366_pos
    unless $I11, rx366_fail
    add rx366_pos, 1
    nqp_rxpeek $I19, rx366_bstack, rxquantr369_done
    inc $I19
    inc $I19
    set rx366_rep, rx366_bstack[$I19]
    nqp_rxcommit rx366_bstack, rxquantr369_done
    inc rx366_rep
    nqp_rxmark rx366_bstack, rxquantr369_done, rx366_pos, rx366_rep
    goto rxquantr369_loop
  rxquantr369_done:
    add $I11, rx366_pos, 1
    gt $I11, rx366_eos, rx366_fail
    substr $S10, rx366_tgt, rx366_pos, 1
    ne $S10, ucs4:"-", rx366_fail
    add rx366_pos, 1
    .const 'Sub' $P1522 = "109_1340317687.034" 
    capture_lex $P1522
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."before"($P1522)
    repr_get_attr_int $I11, $P11, rx366_curclass, "$!pos"
    ge $I11, 0, rx366_fail
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."obs"("- as character range", ".. for range, for explicit - in character class, escape it or place as last thing")
    repr_get_attr_int $I11, $P11, rx366_curclass, "$!pos"
    lt $I11, 0, rx366_fail
    repr_get_attr_int rx366_pos, $P11, rx366_curclass, "$!pos"
    goto alt368_end
  alt368_1:
  # rx rxquantr374 ** 0..-1
    nqp_rxmark rx366_bstack, rxquantr374_done, rx366_pos, 0
  rxquantr374_loop:
    ge rx366_pos, rx366_eos, rx366_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx366_tgt, rx366_pos
    unless $I11, rx366_fail
    add rx366_pos, 1
    nqp_rxpeek $I19, rx366_bstack, rxquantr374_done
    inc $I19
    inc $I19
    set rx366_rep, rx366_bstack[$I19]
    nqp_rxcommit rx366_bstack, rxquantr374_done
    inc rx366_rep
    nqp_rxmark rx366_bstack, rxquantr374_done, rx366_pos, rx366_rep
    goto rxquantr374_loop
  rxquantr374_done:
    .const 'Sub' $P1527 = "111_1340317687.034" 
    capture_lex $P1527
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur.$P1527()
    repr_get_attr_int $I11, $P11, rx366_curclass, "$!pos"
    lt $I11, 0, rx366_fail
    nqp_rxmark rx366_bstack, rxsubrule383_pass, -1, 0
  rxsubrule383_pass:
    rx366_cstack = rx366_cur."!cursor_capture"($P11, 0)
    repr_get_attr_int rx366_pos, $P11, rx366_curclass, "$!pos"
  # rx rxquantr384 ** 0..1
    nqp_rxmark rx366_bstack, rxquantr384_done, rx366_pos, 0
  rxquantr384_loop:
  # rx rxquantr385 ** 0..-1
    nqp_rxmark rx366_bstack, rxquantr385_done, rx366_pos, 0
  rxquantr385_loop:
    ge rx366_pos, rx366_eos, rx366_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx366_tgt, rx366_pos
    unless $I11, rx366_fail
    add rx366_pos, 1
    nqp_rxpeek $I19, rx366_bstack, rxquantr385_done
    inc $I19
    inc $I19
    set rx366_rep, rx366_bstack[$I19]
    nqp_rxcommit rx366_bstack, rxquantr385_done
    inc rx366_rep
    nqp_rxmark rx366_bstack, rxquantr385_done, rx366_pos, rx366_rep
    goto rxquantr385_loop
  rxquantr385_done:
    add $I11, rx366_pos, 2
    gt $I11, rx366_eos, rx366_fail
    substr $S10, rx366_tgt, rx366_pos, 2
    ne $S10, ucs4:"..", rx366_fail
    add rx366_pos, 2
  # rx rxquantr386 ** 0..-1
    nqp_rxmark rx366_bstack, rxquantr386_done, rx366_pos, 0
  rxquantr386_loop:
    ge rx366_pos, rx366_eos, rx366_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx366_tgt, rx366_pos
    unless $I11, rx366_fail
    add rx366_pos, 1
    nqp_rxpeek $I19, rx366_bstack, rxquantr386_done
    inc $I19
    inc $I19
    set rx366_rep, rx366_bstack[$I19]
    nqp_rxcommit rx366_bstack, rxquantr386_done
    inc rx366_rep
    nqp_rxmark rx366_bstack, rxquantr386_done, rx366_pos, rx366_rep
    goto rxquantr386_loop
  rxquantr386_done:
    .const 'Sub' $P1535 = "113_1340317687.034" 
    capture_lex $P1535
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur.$P1535()
    repr_get_attr_int $I11, $P11, rx366_curclass, "$!pos"
    lt $I11, 0, rx366_fail
    nqp_rxmark rx366_bstack, rxsubrule395_pass, -1, 0
  rxsubrule395_pass:
    rx366_cstack = rx366_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx366_pos, $P11, rx366_curclass, "$!pos"
    nqp_rxpeek $I19, rx366_bstack, rxquantr384_done
    inc $I19
    inc $I19
    set rx366_rep, rx366_bstack[$I19]
    nqp_rxcommit rx366_bstack, rxquantr384_done
    inc rx366_rep
  rxquantr384_done:
  alt368_end:
    rx366_cur."!cursor_pass"(rx366_pos, 'backtrack'=>1)
    .return (rx366_cur)
  rx366_restart:
    repr_get_attr_obj rx366_cstack, rx366_cur, rx366_curclass, "$!cstack"
  rx366_fail:
    unless rx366_bstack, rx366_done
    pop $I19, rx366_bstack
    if_null rx366_cstack, rx366_cstack_done
    unless rx366_cstack, rx366_cstack_done
    dec $I19
    set $P11, rx366_cstack[$I19]
  rx366_cstack_done:
    pop rx366_rep, rx366_bstack
    pop rx366_pos, rx366_bstack
    pop $I19, rx366_bstack
    lt rx366_pos, -1, rx366_done
    lt rx366_pos, 0, rx366_fail
    eq $I19, 0, rx366_fail
    if_null rx366_cstack, rx366_jump
    elements $I18, rx366_bstack
    le $I18, 0, rx366_cut
    dec $I18
    set $I18, rx366_bstack[$I18]
  rx366_cut:
    assign rx366_cstack, $I18
  rx366_jump:
    jump $I19
  rx366_done:
    rx366_cur."!cursor_fail"()
    .return (rx366_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "114_1340317687.034_caps"  :subid("360_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "Hash"
    set $P103["0"], 1
    set $P103["1"], 3
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1521"  :anon :subid("109_1340317687.034") :method :outer("114_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    .lex unicode:"$\x{a2}", $P1525
    .local string rx370_tgt
    .local int rx370_pos
    .local int rx370_off
    .local int rx370_eos
    .local int rx370_rep
    .local pmc rx370_cur
    .local pmc rx370_curclass
    .local pmc rx370_bstack
    .local pmc rx370_cstack
    (rx370_cur, rx370_tgt, rx370_pos, rx370_curclass, rx370_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx370_cur
    length rx370_eos, rx370_tgt
    eq $I19, 1, rx370_restart
    repr_get_attr_int $I11, self, rx370_curclass, "$!from"
    ne $I11, -1, rxscan371_done
    goto rxscan371_scan
  rxscan371_loop:
    inc rx370_pos
    gt rx370_pos, rx370_eos, rx370_fail
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!from", rx370_pos
  rxscan371_scan:
    nqp_rxmark rx370_bstack, rxscan371_loop, rx370_pos, 0
  rxscan371_done:
  # rx rxquantr372 ** 0..-1
    nqp_rxmark rx370_bstack, rxquantr372_done, rx370_pos, 0
  rxquantr372_loop:
    ge rx370_pos, rx370_eos, rx370_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx370_tgt, rx370_pos
    unless $I11, rx370_fail
    add rx370_pos, 1
    nqp_rxpeek $I19, rx370_bstack, rxquantr372_done
    inc $I19
    inc $I19
    set rx370_rep, rx370_bstack[$I19]
    nqp_rxcommit rx370_bstack, rxquantr372_done
    inc rx370_rep
    nqp_rxmark rx370_bstack, rxquantr372_done, rx370_pos, rx370_rep
    goto rxquantr372_loop
  rxquantr372_done:
    add $I11, rx370_pos, 1
    gt $I11, rx370_eos, rx370_fail
    substr $S10, rx370_tgt, rx370_pos, 1
    ne $S10, ucs4:"]", rx370_fail
    add rx370_pos, 1
    rx370_cur."!cursor_pass"(rx370_pos, 'backtrack'=>1)
    .return (rx370_cur)
  rx370_restart:
    repr_get_attr_obj rx370_cstack, rx370_cur, rx370_curclass, "$!cstack"
  rx370_fail:
    unless rx370_bstack, rx370_done
    pop $I19, rx370_bstack
    if_null rx370_cstack, rx370_cstack_done
    unless rx370_cstack, rx370_cstack_done
    dec $I19
    set $P11, rx370_cstack[$I19]
  rx370_cstack_done:
    pop rx370_rep, rx370_bstack
    pop rx370_pos, rx370_bstack
    pop $I19, rx370_bstack
    lt rx370_pos, -1, rx370_done
    lt rx370_pos, 0, rx370_fail
    eq $I19, 0, rx370_fail
    if_null rx370_cstack, rx370_jump
    elements $I18, rx370_bstack
    le $I18, 0, rx370_cut
    dec $I18
    set $I18, rx370_bstack[$I18]
  rx370_cut:
    assign rx370_cstack, $I18
  rx370_jump:
    jump $I19
  rx370_done:
    rx370_cur."!cursor_fail"()
    .return (rx370_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "109_1340317687.034_caps"  :subid("361_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "109_1340317687.034_nfa"  :subid("362_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 4
    push $P104, 32
    push $P104, 1
    push $P104, 1
    push $P104, 0
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 93
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1526"  :anon :subid("111_1340317687.034") :method :outer("114_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    .const 'Sub' $P1531 = "110_1340317687.034" 
    capture_lex $P1531
    .lex unicode:"$\x{a2}", $P1529
    .local string rx375_tgt
    .local int rx375_pos
    .local int rx375_off
    .local int rx375_eos
    .local int rx375_rep
    .local pmc rx375_cur
    .local pmc rx375_curclass
    .local pmc rx375_bstack
    .local pmc rx375_cstack
    (rx375_cur, rx375_tgt, rx375_pos, rx375_curclass, rx375_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx375_cur
    length rx375_eos, rx375_tgt
    eq $I19, 1, rx375_restart
    repr_get_attr_int $I11, self, rx375_curclass, "$!from"
    ne $I11, -1, rxscan376_done
    goto rxscan376_scan
  rxscan376_loop:
    inc rx375_pos
    gt rx375_pos, rx375_eos, rx375_fail
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!from", rx375_pos
  rxscan376_scan:
    nqp_rxmark rx375_bstack, rxscan376_loop, rx375_pos, 0
  rxscan376_done:
  alt377_0:
    nqp_rxmark rx375_bstack, alt377_1, rx375_pos, 0
    add $I11, rx375_pos, 1
    gt $I11, rx375_eos, rx375_fail
    substr $S10, rx375_tgt, rx375_pos, 1
    ne $S10, ucs4:"\\", rx375_fail
    add rx375_pos, 1
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!pos", rx375_pos
    $P11 = rx375_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx375_curclass, "$!pos"
    lt $I11, 0, rx375_fail
    nqp_rxmark rx375_bstack, rxsubrule378_pass, -1, 0
  rxsubrule378_pass:
    rx375_cstack = rx375_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx375_pos, $P11, rx375_curclass, "$!pos"
    goto alt377_end
  alt377_1:
    .const 'Sub' $P1531 = "110_1340317687.034" 
    capture_lex $P1531
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!pos", rx375_pos
    $P11 = rx375_cur.$P1531()
    repr_get_attr_int $I11, $P11, rx375_curclass, "$!pos"
    lt $I11, 0, rx375_fail
    nqp_rxmark rx375_bstack, rxsubrule382_pass, -1, 0
  rxsubrule382_pass:
    rx375_cstack = rx375_cur."!cursor_capture"($P11, 0)
    repr_get_attr_int rx375_pos, $P11, rx375_curclass, "$!pos"
  alt377_end:
    rx375_cur."!cursor_pass"(rx375_pos, 'backtrack'=>1)
    .return (rx375_cur)
  rx375_restart:
    repr_get_attr_obj rx375_cstack, rx375_cur, rx375_curclass, "$!cstack"
  rx375_fail:
    unless rx375_bstack, rx375_done
    pop $I19, rx375_bstack
    if_null rx375_cstack, rx375_cstack_done
    unless rx375_cstack, rx375_cstack_done
    dec $I19
    set $P11, rx375_cstack[$I19]
  rx375_cstack_done:
    pop rx375_rep, rx375_bstack
    pop rx375_pos, rx375_bstack
    pop $I19, rx375_bstack
    lt rx375_pos, -1, rx375_done
    lt rx375_pos, 0, rx375_fail
    eq $I19, 0, rx375_fail
    if_null rx375_cstack, rx375_jump
    elements $I18, rx375_bstack
    le $I18, 0, rx375_cut
    dec $I18
    set $I18, rx375_bstack[$I18]
  rx375_cut:
    assign rx375_cstack, $I18
  rx375_jump:
    jump $I19
  rx375_done:
    rx375_cur."!cursor_fail"()
    .return (rx375_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "111_1340317687.034_caps"  :subid("363_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "Hash"
    set $P103["backslash"], 0
    set $P103["0"], 1
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1530"  :anon :subid("110_1340317687.034") :method :outer("111_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    .lex unicode:"$\x{a2}", $P1533
    .local string rx379_tgt
    .local int rx379_pos
    .local int rx379_off
    .local int rx379_eos
    .local int rx379_rep
    .local pmc rx379_cur
    .local pmc rx379_curclass
    .local pmc rx379_bstack
    .local pmc rx379_cstack
    (rx379_cur, rx379_tgt, rx379_pos, rx379_curclass, rx379_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx379_cur
    length rx379_eos, rx379_tgt
    eq $I19, 1, rx379_restart
    repr_get_attr_int $I11, self, rx379_curclass, "$!from"
    ne $I11, -1, rxscan380_done
    goto rxscan380_scan
  rxscan380_loop:
    inc rx379_pos
    gt rx379_pos, rx379_eos, rx379_fail
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!from", rx379_pos
  rxscan380_scan:
    nqp_rxmark rx379_bstack, rxscan380_loop, rx379_pos, 0
  rxscan380_done:
    nqp_rxmark rx379_bstack, rxconj381_fail, rx379_pos, 0
    goto rxconj381_first
  rxconj381_fail:
    goto rx379_fail
  rxconj381_first:
    add $I11, rx379_pos, 1
    gt $I11, rx379_eos, rx379_fail
    substr $S10, rx379_tgt, rx379_pos, 1
    eq $S10, ucs4:"]", rx379_fail
    add rx379_pos, 1
    nqp_rxpeek $I19, rx379_bstack, rxconj381_fail
    inc $I19
    set $I11, rx379_bstack[$I19]
    nqp_rxmark rx379_bstack, rxconj381_fail, $I11, rx379_pos
    set rx379_pos, $I11
    add $I11, rx379_pos, 1
    gt $I11, rx379_eos, rx379_fail
    substr $S10, rx379_tgt, rx379_pos, 1
    eq $S10, ucs4:"\\", rx379_fail
    add rx379_pos, 1
    nqp_rxpeek $I19, rx379_bstack, rxconj381_fail
    inc $I19
    set $I11, rx379_bstack[$I19]
    inc $I19
    set $I12, rx379_bstack[$I19]
    ne rx379_pos, $I12, rx379_fail
    set rx379_pos, $I11
    ge rx379_pos, rx379_eos, rx379_fail
    add rx379_pos, 1
    rx379_cur."!cursor_pass"(rx379_pos, 'backtrack'=>1)
    .return (rx379_cur)
  rx379_restart:
    repr_get_attr_obj rx379_cstack, rx379_cur, rx379_curclass, "$!cstack"
  rx379_fail:
    unless rx379_bstack, rx379_done
    pop $I19, rx379_bstack
    if_null rx379_cstack, rx379_cstack_done
    unless rx379_cstack, rx379_cstack_done
    dec $I19
    set $P11, rx379_cstack[$I19]
  rx379_cstack_done:
    pop rx379_rep, rx379_bstack
    pop rx379_pos, rx379_bstack
    pop $I19, rx379_bstack
    lt rx379_pos, -1, rx379_done
    lt rx379_pos, 0, rx379_fail
    eq $I19, 0, rx379_fail
    if_null rx379_cstack, rx379_jump
    elements $I18, rx379_bstack
    le $I18, 0, rx379_cut
    dec $I18
    set $I18, rx379_bstack[$I18]
  rx379_cut:
    assign rx379_cstack, $I18
  rx379_jump:
    jump $I19
  rx379_done:
    rx379_cur."!cursor_fail"()
    .return (rx379_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "110_1340317687.034_caps"  :subid("364_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1534"  :anon :subid("113_1340317687.034") :method :outer("114_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    .const 'Sub' $P1539 = "112_1340317687.034" 
    capture_lex $P1539
    .lex unicode:"$\x{a2}", $P1537
    .local string rx387_tgt
    .local int rx387_pos
    .local int rx387_off
    .local int rx387_eos
    .local int rx387_rep
    .local pmc rx387_cur
    .local pmc rx387_curclass
    .local pmc rx387_bstack
    .local pmc rx387_cstack
    (rx387_cur, rx387_tgt, rx387_pos, rx387_curclass, rx387_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx387_cur
    length rx387_eos, rx387_tgt
    eq $I19, 1, rx387_restart
    repr_get_attr_int $I11, self, rx387_curclass, "$!from"
    ne $I11, -1, rxscan388_done
    goto rxscan388_scan
  rxscan388_loop:
    inc rx387_pos
    gt rx387_pos, rx387_eos, rx387_fail
    repr_bind_attr_int rx387_cur, rx387_curclass, "$!from", rx387_pos
  rxscan388_scan:
    nqp_rxmark rx387_bstack, rxscan388_loop, rx387_pos, 0
  rxscan388_done:
  alt389_0:
    nqp_rxmark rx387_bstack, alt389_1, rx387_pos, 0
    add $I11, rx387_pos, 1
    gt $I11, rx387_eos, rx387_fail
    substr $S10, rx387_tgt, rx387_pos, 1
    ne $S10, ucs4:"\\", rx387_fail
    add rx387_pos, 1
    repr_bind_attr_int rx387_cur, rx387_curclass, "$!pos", rx387_pos
    $P11 = rx387_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx387_curclass, "$!pos"
    lt $I11, 0, rx387_fail
    nqp_rxmark rx387_bstack, rxsubrule390_pass, -1, 0
  rxsubrule390_pass:
    rx387_cstack = rx387_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx387_pos, $P11, rx387_curclass, "$!pos"
    goto alt389_end
  alt389_1:
    .const 'Sub' $P1539 = "112_1340317687.034" 
    capture_lex $P1539
    repr_bind_attr_int rx387_cur, rx387_curclass, "$!pos", rx387_pos
    $P11 = rx387_cur.$P1539()
    repr_get_attr_int $I11, $P11, rx387_curclass, "$!pos"
    lt $I11, 0, rx387_fail
    nqp_rxmark rx387_bstack, rxsubrule394_pass, -1, 0
  rxsubrule394_pass:
    rx387_cstack = rx387_cur."!cursor_capture"($P11, 0)
    repr_get_attr_int rx387_pos, $P11, rx387_curclass, "$!pos"
  alt389_end:
    rx387_cur."!cursor_pass"(rx387_pos, 'backtrack'=>1)
    .return (rx387_cur)
  rx387_restart:
    repr_get_attr_obj rx387_cstack, rx387_cur, rx387_curclass, "$!cstack"
  rx387_fail:
    unless rx387_bstack, rx387_done
    pop $I19, rx387_bstack
    if_null rx387_cstack, rx387_cstack_done
    unless rx387_cstack, rx387_cstack_done
    dec $I19
    set $P11, rx387_cstack[$I19]
  rx387_cstack_done:
    pop rx387_rep, rx387_bstack
    pop rx387_pos, rx387_bstack
    pop $I19, rx387_bstack
    lt rx387_pos, -1, rx387_done
    lt rx387_pos, 0, rx387_fail
    eq $I19, 0, rx387_fail
    if_null rx387_cstack, rx387_jump
    elements $I18, rx387_bstack
    le $I18, 0, rx387_cut
    dec $I18
    set $I18, rx387_bstack[$I18]
  rx387_cut:
    assign rx387_cstack, $I18
  rx387_jump:
    jump $I19
  rx387_done:
    rx387_cur."!cursor_fail"()
    .return (rx387_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "113_1340317687.034_caps"  :subid("365_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "Hash"
    set $P103["backslash"], 0
    set $P103["0"], 1
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1538"  :anon :subid("112_1340317687.034") :method :outer("113_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    .lex unicode:"$\x{a2}", $P1541
    .local string rx391_tgt
    .local int rx391_pos
    .local int rx391_off
    .local int rx391_eos
    .local int rx391_rep
    .local pmc rx391_cur
    .local pmc rx391_curclass
    .local pmc rx391_bstack
    .local pmc rx391_cstack
    (rx391_cur, rx391_tgt, rx391_pos, rx391_curclass, rx391_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx391_cur
    length rx391_eos, rx391_tgt
    eq $I19, 1, rx391_restart
    repr_get_attr_int $I11, self, rx391_curclass, "$!from"
    ne $I11, -1, rxscan392_done
    goto rxscan392_scan
  rxscan392_loop:
    inc rx391_pos
    gt rx391_pos, rx391_eos, rx391_fail
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!from", rx391_pos
  rxscan392_scan:
    nqp_rxmark rx391_bstack, rxscan392_loop, rx391_pos, 0
  rxscan392_done:
    nqp_rxmark rx391_bstack, rxconj393_fail, rx391_pos, 0
    goto rxconj393_first
  rxconj393_fail:
    goto rx391_fail
  rxconj393_first:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail
    substr $S10, rx391_tgt, rx391_pos, 1
    eq $S10, ucs4:"]", rx391_fail
    add rx391_pos, 1
    nqp_rxpeek $I19, rx391_bstack, rxconj393_fail
    inc $I19
    set $I11, rx391_bstack[$I19]
    nqp_rxmark rx391_bstack, rxconj393_fail, $I11, rx391_pos
    set rx391_pos, $I11
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail
    substr $S10, rx391_tgt, rx391_pos, 1
    eq $S10, ucs4:"\\", rx391_fail
    add rx391_pos, 1
    nqp_rxpeek $I19, rx391_bstack, rxconj393_fail
    inc $I19
    set $I11, rx391_bstack[$I19]
    inc $I19
    set $I12, rx391_bstack[$I19]
    ne rx391_pos, $I12, rx391_fail
    set rx391_pos, $I11
    ge rx391_pos, rx391_eos, rx391_fail
    add rx391_pos, 1
    rx391_cur."!cursor_pass"(rx391_pos, 'backtrack'=>1)
    .return (rx391_cur)
  rx391_restart:
    repr_get_attr_obj rx391_cstack, rx391_cur, rx391_curclass, "$!cstack"
  rx391_fail:
    unless rx391_bstack, rx391_done
    pop $I19, rx391_bstack
    if_null rx391_cstack, rx391_cstack_done
    unless rx391_cstack, rx391_cstack_done
    dec $I19
    set $P11, rx391_cstack[$I19]
  rx391_cstack_done:
    pop rx391_rep, rx391_bstack
    pop rx391_pos, rx391_bstack
    pop $I19, rx391_bstack
    lt rx391_pos, -1, rx391_done
    lt rx391_pos, 0, rx391_fail
    eq $I19, 0, rx391_fail
    if_null rx391_cstack, rx391_jump
    elements $I18, rx391_bstack
    le $I18, 0, rx391_cut
    dec $I18
    set $I18, rx391_bstack[$I18]
  rx391_cut:
    assign rx391_cstack, $I18
  rx391_jump:
    jump $I19
  rx391_done:
    rx391_cur."!cursor_fail"()
    .return (rx391_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "112_1340317687.034_caps"  :subid("366_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 208
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "mod_internal"  :subid("121_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1543
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 227
    .const 'Sub' $P1550 = "119_1340317687.034" 
    capture_lex $P1550
    .lex "self", param_1543
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1544
    .lex "$/", $P1545
    .local string rx407_tgt
    .local int rx407_pos
    .local int rx407_off
    .local int rx407_eos
    .local int rx407_rep
    .local pmc rx407_cur
    .local pmc rx407_curclass
    .local pmc rx407_bstack
    .local pmc rx407_cstack
    (rx407_cur, rx407_tgt, rx407_pos, rx407_curclass, rx407_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx407_cur
    length rx407_eos, rx407_tgt
    eq $I19, 1, rx407_restart
    repr_get_attr_int $I11, self, rx407_curclass, "$!from"
    ne $I11, -1, rxscan408_done
    goto rxscan408_scan
  rxscan408_loop:
    inc rx407_pos
    gt rx407_pos, rx407_eos, rx407_fail
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!from", rx407_pos
  rxscan408_scan:
    nqp_rxmark rx407_bstack, rxscan408_loop, rx407_pos, 0
  rxscan408_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt409_0
    nqp_push_label $P11, alt409_1
    nqp_rxmark rx407_bstack, alt409_end, -1, 0
    rx407_cur."!alt"(rx407_pos, ucs4:"alt_nfa_122_1340317687.832", $P11)
    goto rx407_fail
  alt409_0:
    add $I11, rx407_pos, 1
    gt $I11, rx407_eos, rx407_fail
    substr $S10, rx407_tgt, rx407_pos, 1
    ne $S10, ucs4:":", rx407_fail
    add rx407_pos, 1
  # rx rxquantr410 ** 1..1
    nqp_rxmark rx407_bstack, rxquantr410_done, -1, 0
  rxquantr410_loop:
    .const 'Sub' $P1550 = "119_1340317687.034" 
    capture_lex $P1550
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    $P11 = rx407_cur.$P1550()
    repr_get_attr_int $I11, $P11, rx407_curclass, "$!pos"
    lt $I11, 0, rx407_fail
    goto rxsubrule415_pass
  rxsubrule415_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx407_curclass, "$!pos"
    lt $I11, 0, rx407_fail
  rxsubrule415_pass:
    rx407_cstack = rx407_cur."!cursor_capture"($P11, "n")
    set_addr $I11, rxsubrule415_back
    push rx407_bstack, $I11
    push rx407_bstack, 0
    push rx407_bstack, rx407_pos
    elements $I11, rx407_cstack
    push rx407_bstack, $I11
    repr_get_attr_int rx407_pos, $P11, rx407_curclass, "$!pos"
    nqp_rxpeek $I19, rx407_bstack, rxquantr410_done
    inc $I19
    inc $I19
    set rx407_rep, rx407_bstack[$I19]
    nqp_rxcommit rx407_bstack, rxquantr410_done
    inc rx407_rep
  rxquantr410_done:
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    $P11 = rx407_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx407_curclass, "$!pos"
    lt $I11, 0, rx407_fail
    nqp_rxmark rx407_bstack, rxsubrule416_pass, -1, 0
  rxsubrule416_pass:
    rx407_cstack = rx407_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx407_pos, $P11, rx407_curclass, "$!pos"
    le rx407_pos, 0, rx407_fail
    is_cclass $I11, .CCLASS_WORD, rx407_tgt, rx407_pos
    if $I11, rx407_fail
    sub $I11, rx407_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx407_tgt, $I11
    unless $I11, rx407_fail
    goto alt409_end
  alt409_1:
    add $I11, rx407_pos, 1
    gt $I11, rx407_eos, rx407_fail
    substr $S10, rx407_tgt, rx407_pos, 1
    ne $S10, ucs4:":", rx407_fail
    add rx407_pos, 1
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    $P11 = rx407_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx407_curclass, "$!pos"
    lt $I11, 0, rx407_fail
    nqp_rxmark rx407_bstack, rxsubrule418_pass, -1, 0
  rxsubrule418_pass:
    rx407_cstack = rx407_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx407_pos, $P11, rx407_curclass, "$!pos"
  # rx rxquantr419 ** 0..1
    nqp_rxmark rx407_bstack, rxquantr419_done, rx407_pos, 0
  rxquantr419_loop:
    add $I11, rx407_pos, 1
    gt $I11, rx407_eos, rx407_fail
    substr $S10, rx407_tgt, rx407_pos, 1
    ne $S10, ucs4:"(", rx407_fail
    add rx407_pos, 1
    nqp_rxmark rx407_bstack, rxcap420_fail, rx407_pos, 0
  # rx rxquantr421 ** 1..-1
    nqp_rxmark rx407_bstack, rxquantr421_done, -1, 0
  rxquantr421_loop:
    ge rx407_pos, rx407_eos, rx407_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx407_tgt, rx407_pos
    unless $I11, rx407_fail
    add rx407_pos, 1
    nqp_rxpeek $I19, rx407_bstack, rxquantr421_done
    inc $I19
    inc $I19
    set rx407_rep, rx407_bstack[$I19]
    nqp_rxcommit rx407_bstack, rxquantr421_done
    inc rx407_rep
    nqp_rxmark rx407_bstack, rxquantr421_done, rx407_pos, rx407_rep
    goto rxquantr421_loop
  rxquantr421_done:
    nqp_rxpeek $I19, rx407_bstack, rxcap420_fail
    inc $I19
    set $I11, rx407_bstack[$I19]
    $P11 = rx407_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx407_pos)
    rx407_cstack = rx407_cur."!cursor_capture"($P11, "n")
    goto rxcap420_done
  rxcap420_fail:
    goto rx407_fail
  rxcap420_done:
    add $I11, rx407_pos, 1
    gt $I11, rx407_eos, rx407_fail
    substr $S10, rx407_tgt, rx407_pos, 1
    ne $S10, ucs4:")", rx407_fail
    add rx407_pos, 1
    nqp_rxpeek $I19, rx407_bstack, rxquantr419_done
    inc $I19
    inc $I19
    set rx407_rep, rx407_bstack[$I19]
    nqp_rxcommit rx407_bstack, rxquantr419_done
    inc rx407_rep
  rxquantr419_done:
    goto alt409_end
  alt409_end:
    nqp_rxcommit rx407_bstack, alt409_end
    rx407_cur."!cursor_pass"(rx407_pos, "mod_internal", 'backtrack'=>1)
    .return (rx407_cur)
  rx407_restart:
    repr_get_attr_obj rx407_cstack, rx407_cur, rx407_curclass, "$!cstack"
  rx407_fail:
    unless rx407_bstack, rx407_done
    pop $I19, rx407_bstack
    if_null rx407_cstack, rx407_cstack_done
    unless rx407_cstack, rx407_cstack_done
    dec $I19
    set $P11, rx407_cstack[$I19]
  rx407_cstack_done:
    pop rx407_rep, rx407_bstack
    pop rx407_pos, rx407_bstack
    pop $I19, rx407_bstack
    lt rx407_pos, -1, rx407_done
    lt rx407_pos, 0, rx407_fail
    eq $I19, 0, rx407_fail
    if_null rx407_cstack, rx407_jump
    elements $I18, rx407_bstack
    le $I18, 0, rx407_cut
    dec $I18
    set $I18, rx407_bstack[$I18]
  rx407_cut:
    assign rx407_cstack, $I18
  rx407_jump:
    jump $I19
  rx407_done:
    rx407_cur."!cursor_fail"()
    .return (rx407_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "121_1340317687.034_caps"  :subid("367_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 227
    new $P103, "Hash"
    set $P103["n"], 2
    set $P103["mod_ident"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "121_1340317687.034_nfa"  :subid("368_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 227
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 58
    push $P104, 2
    push $P104, 2
    push $P104, 58
    push $P104, 3
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "mod_ident"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 40
    push $P107, 5
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 6
    new $P109, "ResizablePMCArray"
    push $P109, 4
    push $P109, 8
    push $P109, 7
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 6
    push $P110, 1
    push $P110, 0
    push $P110, 8
    push $P110, 2
    push $P110, 41
    push $P110, 0
    new $P111, "ResizablePMCArray"
    new $P112, "ResizablePMCArray"
    push $P112, $P103
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "121_1340317687.034_alt_nfa_122_1340317687.832"  :subid("369_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 227
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 58
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P103
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 58
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "mod_ident"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 40
    push $P110, 4
    push $P110, 1
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 5
    new $P112, "ResizablePMCArray"
    push $P112, 4
    push $P112, 8
    push $P112, 6
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 5
    push $P113, 1
    push $P113, 0
    push $P113, 7
    push $P113, 2
    push $P113, 41
    push $P113, 0
    new $P114, "ResizablePMCArray"
    new $P115, "ResizablePMCArray"
    push $P115, $P107
    push $P115, $P108
    push $P115, $P109
    push $P115, $P110
    push $P115, $P111
    push $P115, $P112
    push $P115, $P113
    push $P115, $P114
    new $P116, "ResizablePMCArray"
    push $P116, $P106
    push $P116, $P115
    .return ($P116)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "_block1549"  :anon :subid("119_1340317687.034") :method :outer("121_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 227
    .lex unicode:"$\x{a2}", $P1554
    .local string rx411_tgt
    .local int rx411_pos
    .local int rx411_off
    .local int rx411_eos
    .local int rx411_rep
    .local pmc rx411_cur
    .local pmc rx411_curclass
    .local pmc rx411_bstack
    .local pmc rx411_cstack
    (rx411_cur, rx411_tgt, rx411_pos, rx411_curclass, rx411_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx411_cur
    length rx411_eos, rx411_tgt
    eq $I19, 1, rx411_restart
    repr_get_attr_int $I11, self, rx411_curclass, "$!from"
    ne $I11, -1, rxscan412_done
    goto rxscan412_scan
  rxscan412_loop:
    inc rx411_pos
    gt rx411_pos, rx411_eos, rx411_fail
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!from", rx411_pos
  rxscan412_scan:
    nqp_rxmark rx411_bstack, rxscan412_loop, rx411_pos, 0
  rxscan412_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt413_0
    nqp_push_label $P11, alt413_1
    nqp_rxmark rx411_bstack, alt413_end, -1, 0
    rx411_cur."!alt"(rx411_pos, ucs4:"alt_nfa_120_1340317687.817", $P11)
    goto rx411_fail
  alt413_0:
    add $I11, rx411_pos, 1
    gt $I11, rx411_eos, rx411_fail
    substr $S10, rx411_tgt, rx411_pos, 1
    ne $S10, ucs4:"!", rx411_fail
    add rx411_pos, 1
    goto alt413_end
  alt413_1:
  # rx rxquantr414 ** 1..-1
    nqp_rxmark rx411_bstack, rxquantr414_done, -1, 0
  rxquantr414_loop:
    ge rx411_pos, rx411_eos, rx411_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx411_tgt, rx411_pos
    unless $I11, rx411_fail
    add rx411_pos, 1
    nqp_rxpeek $I19, rx411_bstack, rxquantr414_done
    inc $I19
    inc $I19
    set rx411_rep, rx411_bstack[$I19]
    nqp_rxcommit rx411_bstack, rxquantr414_done
    inc rx411_rep
    nqp_rxmark rx411_bstack, rxquantr414_done, rx411_pos, rx411_rep
    goto rxquantr414_loop
  rxquantr414_done:
    goto alt413_end
  alt413_end:
    rx411_cur."!cursor_pass"(rx411_pos, 'backtrack'=>1)
    .return (rx411_cur)
  rx411_restart:
    repr_get_attr_obj rx411_cstack, rx411_cur, rx411_curclass, "$!cstack"
  rx411_fail:
    unless rx411_bstack, rx411_done
    pop $I19, rx411_bstack
    if_null rx411_cstack, rx411_cstack_done
    unless rx411_cstack, rx411_cstack_done
    dec $I19
    set $P11, rx411_cstack[$I19]
  rx411_cstack_done:
    pop rx411_rep, rx411_bstack
    pop rx411_pos, rx411_bstack
    pop $I19, rx411_bstack
    lt rx411_pos, -1, rx411_done
    lt rx411_pos, 0, rx411_fail
    eq $I19, 0, rx411_fail
    if_null rx411_cstack, rx411_jump
    elements $I18, rx411_bstack
    le $I18, 0, rx411_cut
    dec $I18
    set $I18, rx411_bstack[$I18]
  rx411_cut:
    assign rx411_cstack, $I18
  rx411_jump:
    jump $I19
  rx411_done:
    rx411_cur."!cursor_fail"()
    .return (rx411_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "119_1340317687.034_caps"  :subid("370_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 227
    new $P103, "Hash"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "119_1340317687.034_nfa"  :subid("371_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 227
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 33
    push $P104, 0
    push $P104, 1
    push $P104, 0
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 4
    push $P105, 8
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "119_1340317687.034_alt_nfa_120_1340317687.817"  :subid("372_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 227
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 33
    push $P104, 0
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 2
    push $P109, 1
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    new $P111, "ResizablePMCArray"
    push $P111, $P105
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "mod_ident"  :subid("123_1340317687.034")
    .param pmc param_1556
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 234
    .lex "self", param_1556
    $P101 = param_1556."!protoregex"("mod_ident")
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "mod_ident:sym<ignorecase>"  :subid("124_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1558
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 235
    .lex "self", param_1558
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1559
    .lex "$/", $P1560
    .local string rx422_tgt
    .local int rx422_pos
    .local int rx422_off
    .local int rx422_eos
    .local int rx422_rep
    .local pmc rx422_cur
    .local pmc rx422_curclass
    .local pmc rx422_bstack
    .local pmc rx422_cstack
    (rx422_cur, rx422_tgt, rx422_pos, rx422_curclass, rx422_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx422_cur
    length rx422_eos, rx422_tgt
    eq $I19, 1, rx422_restart
    repr_get_attr_int $I11, self, rx422_curclass, "$!from"
    ne $I11, -1, rxscan423_done
    goto rxscan423_scan
  rxscan423_loop:
    inc rx422_pos
    gt rx422_pos, rx422_eos, rx422_fail
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!from", rx422_pos
  rxscan423_scan:
    nqp_rxmark rx422_bstack, rxscan423_loop, rx422_pos, 0
  rxscan423_done:
    nqp_rxmark rx422_bstack, rxcap424_fail, rx422_pos, 0
    add $I11, rx422_pos, 1
    gt $I11, rx422_eos, rx422_fail
    substr $S10, rx422_tgt, rx422_pos, 1
    ne $S10, ucs4:"i", rx422_fail
    add rx422_pos, 1
    nqp_rxpeek $I19, rx422_bstack, rxcap424_fail
    inc $I19
    set $I11, rx422_bstack[$I19]
    $P11 = rx422_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx422_pos)
    rx422_cstack = rx422_cur."!cursor_capture"($P11, "sym")
    goto rxcap424_done
  rxcap424_fail:
    goto rx422_fail
  rxcap424_done:
  # rx rxquantr425 ** 0..1
    nqp_rxmark rx422_bstack, rxquantr425_done, rx422_pos, 0
  rxquantr425_loop:
    add $I11, rx422_pos, 9
    gt $I11, rx422_eos, rx422_fail
    substr $S10, rx422_tgt, rx422_pos, 9
    ne $S10, ucs4:"gnorecase", rx422_fail
    add rx422_pos, 9
    nqp_rxpeek $I19, rx422_bstack, rxquantr425_done
    inc $I19
    inc $I19
    set rx422_rep, rx422_bstack[$I19]
    nqp_rxcommit rx422_bstack, rxquantr425_done
    inc rx422_rep
  rxquantr425_done:
    rx422_cur."!cursor_pass"(rx422_pos, "mod_ident:sym<ignorecase>", 'backtrack'=>1)
    .return (rx422_cur)
  rx422_restart:
    repr_get_attr_obj rx422_cstack, rx422_cur, rx422_curclass, "$!cstack"
  rx422_fail:
    unless rx422_bstack, rx422_done
    pop $I19, rx422_bstack
    if_null rx422_cstack, rx422_cstack_done
    unless rx422_cstack, rx422_cstack_done
    dec $I19
    set $P11, rx422_cstack[$I19]
  rx422_cstack_done:
    pop rx422_rep, rx422_bstack
    pop rx422_pos, rx422_bstack
    pop $I19, rx422_bstack
    lt rx422_pos, -1, rx422_done
    lt rx422_pos, 0, rx422_fail
    eq $I19, 0, rx422_fail
    if_null rx422_cstack, rx422_jump
    elements $I18, rx422_bstack
    le $I18, 0, rx422_cut
    dec $I18
    set $I18, rx422_bstack[$I18]
  rx422_cut:
    assign rx422_cstack, $I18
  rx422_jump:
    jump $I19
  rx422_done:
    rx422_cur."!cursor_fail"()
    .return (rx422_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "124_1340317687.034_caps"  :subid("373_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 235
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "124_1340317687.034_nfa"  :subid("374_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 235
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 105
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 103
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 110
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 111
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 114
    push $P108, 6
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 101
    push $P109, 7
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 99
    push $P110, 8
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 97
    push $P111, 9
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 115
    push $P112, 10
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 101
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P103
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "mod_ident:sym<ratchet>"  :subid("125_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1564
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 236
    .lex "self", param_1564
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1565
    .lex "$/", $P1566
    .local string rx426_tgt
    .local int rx426_pos
    .local int rx426_off
    .local int rx426_eos
    .local int rx426_rep
    .local pmc rx426_cur
    .local pmc rx426_curclass
    .local pmc rx426_bstack
    .local pmc rx426_cstack
    (rx426_cur, rx426_tgt, rx426_pos, rx426_curclass, rx426_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx426_cur
    length rx426_eos, rx426_tgt
    eq $I19, 1, rx426_restart
    repr_get_attr_int $I11, self, rx426_curclass, "$!from"
    ne $I11, -1, rxscan427_done
    goto rxscan427_scan
  rxscan427_loop:
    inc rx426_pos
    gt rx426_pos, rx426_eos, rx426_fail
    repr_bind_attr_int rx426_cur, rx426_curclass, "$!from", rx426_pos
  rxscan427_scan:
    nqp_rxmark rx426_bstack, rxscan427_loop, rx426_pos, 0
  rxscan427_done:
    nqp_rxmark rx426_bstack, rxcap428_fail, rx426_pos, 0
    add $I11, rx426_pos, 1
    gt $I11, rx426_eos, rx426_fail
    substr $S10, rx426_tgt, rx426_pos, 1
    ne $S10, ucs4:"r", rx426_fail
    add rx426_pos, 1
    nqp_rxpeek $I19, rx426_bstack, rxcap428_fail
    inc $I19
    set $I11, rx426_bstack[$I19]
    $P11 = rx426_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx426_pos)
    rx426_cstack = rx426_cur."!cursor_capture"($P11, "sym")
    goto rxcap428_done
  rxcap428_fail:
    goto rx426_fail
  rxcap428_done:
  # rx rxquantr429 ** 0..1
    nqp_rxmark rx426_bstack, rxquantr429_done, rx426_pos, 0
  rxquantr429_loop:
    add $I11, rx426_pos, 6
    gt $I11, rx426_eos, rx426_fail
    substr $S10, rx426_tgt, rx426_pos, 6
    ne $S10, ucs4:"atchet", rx426_fail
    add rx426_pos, 6
    nqp_rxpeek $I19, rx426_bstack, rxquantr429_done
    inc $I19
    inc $I19
    set rx426_rep, rx426_bstack[$I19]
    nqp_rxcommit rx426_bstack, rxquantr429_done
    inc rx426_rep
  rxquantr429_done:
    rx426_cur."!cursor_pass"(rx426_pos, "mod_ident:sym<ratchet>", 'backtrack'=>1)
    .return (rx426_cur)
  rx426_restart:
    repr_get_attr_obj rx426_cstack, rx426_cur, rx426_curclass, "$!cstack"
  rx426_fail:
    unless rx426_bstack, rx426_done
    pop $I19, rx426_bstack
    if_null rx426_cstack, rx426_cstack_done
    unless rx426_cstack, rx426_cstack_done
    dec $I19
    set $P11, rx426_cstack[$I19]
  rx426_cstack_done:
    pop rx426_rep, rx426_bstack
    pop rx426_pos, rx426_bstack
    pop $I19, rx426_bstack
    lt rx426_pos, -1, rx426_done
    lt rx426_pos, 0, rx426_fail
    eq $I19, 0, rx426_fail
    if_null rx426_cstack, rx426_jump
    elements $I18, rx426_bstack
    le $I18, 0, rx426_cut
    dec $I18
    set $I18, rx426_bstack[$I18]
  rx426_cut:
    assign rx426_cstack, $I18
  rx426_jump:
    jump $I19
  rx426_done:
    rx426_cur."!cursor_fail"()
    .return (rx426_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "125_1340317687.034_caps"  :subid("375_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 236
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "125_1340317687.034_nfa"  :subid("376_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 236
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 114
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 97
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 116
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 99
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 104
    push $P108, 6
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 101
    push $P109, 7
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P103
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Grammar"]
.sub "mod_ident:sym<sigspace>"  :subid("126_1340317687.034") :outer("183_1340317687.034")
    .param pmc param_1570
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 237
    .lex "self", param_1570
    .local pmc self
    find_lex $P101, "self"
    set self, $P101
    .lex unicode:"$\x{a2}", $P1571
    .lex "$/", $P1572
    .local string rx430_tgt
    .local int rx430_pos
    .local int rx430_off
    .local int rx430_eos
    .local int rx430_rep
    .local pmc rx430_cur
    .local pmc rx430_curclass
    .local pmc rx430_bstack
    .local pmc rx430_cstack
    (rx430_cur, rx430_tgt, rx430_pos, rx430_curclass, rx430_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx430_cur
    length rx430_eos, rx430_tgt
    eq $I19, 1, rx430_restart
    repr_get_attr_int $I11, self, rx430_curclass, "$!from"
    ne $I11, -1, rxscan431_done
    goto rxscan431_scan
  rxscan431_loop:
    inc rx430_pos
    gt rx430_pos, rx430_eos, rx430_fail
    repr_bind_attr_int rx430_cur, rx430_curclass, "$!from", rx430_pos
  rxscan431_scan:
    nqp_rxmark rx430_bstack, rxscan431_loop, rx430_pos, 0
  rxscan431_done:
    nqp_rxmark rx430_bstack, rxcap432_fail, rx430_pos, 0
    add $I11, rx430_pos, 1
    gt $I11, rx430_eos, rx430_fail
    substr $S10, rx430_tgt, rx430_pos, 1
    ne $S10, ucs4:"s", rx430_fail
    add rx430_pos, 1
    nqp_rxpeek $I19, rx430_bstack, rxcap432_fail
    inc $I19
    set $I11, rx430_bstack[$I19]
    $P11 = rx430_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx430_pos)
    rx430_cstack = rx430_cur."!cursor_capture"($P11, "sym")
    goto rxcap432_done
  rxcap432_fail:
    goto rx430_fail
  rxcap432_done:
  # rx rxquantr433 ** 0..1
    nqp_rxmark rx430_bstack, rxquantr433_done, rx430_pos, 0
  rxquantr433_loop:
    add $I11, rx430_pos, 7
    gt $I11, rx430_eos, rx430_fail
    substr $S10, rx430_tgt, rx430_pos, 7
    ne $S10, ucs4:"igspace", rx430_fail
    add rx430_pos, 7
    nqp_rxpeek $I19, rx430_bstack, rxquantr433_done
    inc $I19
    inc $I19
    set rx430_rep, rx430_bstack[$I19]
    nqp_rxcommit rx430_bstack, rxquantr433_done
    inc rx430_rep
  rxquantr433_done:
    rx430_cur."!cursor_pass"(rx430_pos, "mod_ident:sym<sigspace>", 'backtrack'=>1)
    .return (rx430_cur)
  rx430_restart:
    repr_get_attr_obj rx430_cstack, rx430_cur, rx430_curclass, "$!cstack"
  rx430_fail:
    unless rx430_bstack, rx430_done
    pop $I19, rx430_bstack
    if_null rx430_cstack, rx430_cstack_done
    unless rx430_cstack, rx430_cstack_done
    dec $I19
    set $P11, rx430_cstack[$I19]
  rx430_cstack_done:
    pop rx430_rep, rx430_bstack
    pop rx430_pos, rx430_bstack
    pop $I19, rx430_bstack
    lt rx430_pos, -1, rx430_done
    lt rx430_pos, 0, rx430_fail
    eq $I19, 0, rx430_fail
    if_null rx430_cstack, rx430_jump
    elements $I18, rx430_bstack
    le $I18, 0, rx430_cut
    dec $I18
    set $I18, rx430_bstack[$I18]
  rx430_cut:
    assign rx430_cstack, $I18
  rx430_jump:
    jump $I19
  rx430_done:
    rx430_cur."!cursor_fail"()
    .return (rx430_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "126_1340317687.034_caps"  :subid("377_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 237
    new $P103, "Hash"
    set $P103["sym"], 0
    .return ($P103)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "126_1340317687.034_nfa"  :subid("378_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 237
    new $P103, "ResizablePMCArray"
    new $P104, "ResizablePMCArray"
    push $P104, 2
    push $P104, 115
    push $P104, 2
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 105
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 103
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 115
    push $P107, 5
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 112
    push $P108, 6
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 97
    push $P109, 7
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 99
    push $P110, 8
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 101
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P103
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1575"  :subid("379_1340317687.034") :outer("181_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 241
    .const 'Sub' $P2262 = "180_1340317687.034" 
    capture_lex $P2262
    .const 'Sub' $P2257 = "179_1340317687.034" 
    capture_lex $P2257
    .const 'Sub' $P2246 = "178_1340317687.034" 
    capture_lex $P2246
    .const 'Sub' $P2148 = "177_1340317687.034" 
    capture_lex $P2148
    .const 'Sub' $P2139 = "176_1340317687.034" 
    capture_lex $P2139
    .const 'Sub' $P2132 = "175_1340317687.034" 
    capture_lex $P2132
    .const 'Sub' $P2114 = "174_1340317687.034" 
    capture_lex $P2114
    .const 'Sub' $P2080 = "173_1340317687.034" 
    capture_lex $P2080
    .const 'Sub' $P2075 = "172_1340317687.034" 
    capture_lex $P2075
    .const 'Sub' $P2067 = "171_1340317687.034" 
    capture_lex $P2067
    .const 'Sub' $P2060 = "170_1340317687.034" 
    capture_lex $P2060
    .const 'Sub' $P2053 = "169_1340317687.034" 
    capture_lex $P2053
    .const 'Sub' $P2049 = "168_1340317687.034" 
    capture_lex $P2049
    .const 'Sub' $P2045 = "167_1340317687.034" 
    capture_lex $P2045
    .const 'Sub' $P2035 = "166_1340317687.034" 
    capture_lex $P2035
    .const 'Sub' $P2025 = "165_1340317687.034" 
    capture_lex $P2025
    .const 'Sub' $P2020 = "164_1340317687.034" 
    capture_lex $P2020
    .const 'Sub' $P2015 = "163_1340317687.034" 
    capture_lex $P2015
    .const 'Sub' $P2010 = "162_1340317687.034" 
    capture_lex $P2010
    .const 'Sub' $P2005 = "161_1340317687.034" 
    capture_lex $P2005
    .const 'Sub' $P2000 = "160_1340317687.034" 
    capture_lex $P2000
    .const 'Sub' $P1995 = "159_1340317687.034" 
    capture_lex $P1995
    .const 'Sub' $P1990 = "158_1340317687.034" 
    capture_lex $P1990
    .const 'Sub' $P1983 = "157_1340317687.034" 
    capture_lex $P1983
    .const 'Sub' $P1977 = "156_1340317687.034" 
    capture_lex $P1977
    .const 'Sub' $P1959 = "155_1340317687.034" 
    capture_lex $P1959
    .const 'Sub' $P1955 = "154_1340317687.034" 
    capture_lex $P1955
    .const 'Sub' $P1951 = "153_1340317687.034" 
    capture_lex $P1951
    .const 'Sub' $P1948 = "152_1340317687.034" 
    capture_lex $P1948
    .const 'Sub' $P1945 = "151_1340317687.034" 
    capture_lex $P1945
    .const 'Sub' $P1942 = "150_1340317687.034" 
    capture_lex $P1942
    .const 'Sub' $P1939 = "149_1340317687.034" 
    capture_lex $P1939
    .const 'Sub' $P1936 = "148_1340317687.034" 
    capture_lex $P1936
    .const 'Sub' $P1933 = "147_1340317687.034" 
    capture_lex $P1933
    .const 'Sub' $P1930 = "146_1340317687.034" 
    capture_lex $P1930
    .const 'Sub' $P1922 = "145_1340317687.034" 
    capture_lex $P1922
    .const 'Sub' $P1914 = "144_1340317687.034" 
    capture_lex $P1914
    .const 'Sub' $P1907 = "143_1340317687.034" 
    capture_lex $P1907
    .const 'Sub' $P1903 = "142_1340317687.034" 
    capture_lex $P1903
    .const 'Sub' $P1898 = "141_1340317687.034" 
    capture_lex $P1898
    .const 'Sub' $P1884 = "140_1340317687.034" 
    capture_lex $P1884
    .const 'Sub' $P1879 = "139_1340317687.034" 
    capture_lex $P1879
    .const 'Sub' $P1874 = "138_1340317687.034" 
    capture_lex $P1874
    .const 'Sub' $P1869 = "137_1340317687.034" 
    capture_lex $P1869
    .const 'Sub' $P1859 = "136_1340317687.034" 
    capture_lex $P1859
    .const 'Sub' $P1855 = "135_1340317687.034" 
    capture_lex $P1855
    .const 'Sub' $P1821 = "134_1340317687.034" 
    capture_lex $P1821
    .const 'Sub' $P1799 = "133_1340317687.034" 
    capture_lex $P1799
    .const 'Sub' $P1786 = "132_1340317687.034" 
    capture_lex $P1786
    .const 'Sub' $P1773 = "131_1340317687.034" 
    capture_lex $P1773
    .const 'Sub' $P1760 = "130_1340317687.034" 
    capture_lex $P1760
    .const 'Sub' $P1747 = "129_1340317687.034" 
    capture_lex $P1747
    .const 'Sub' $P1743 = "128_1340317687.034" 
    capture_lex $P1743
    .const 'Sub' $P1739 = "127_1340317687.034" 
    capture_lex $P1739
    .const 'Sub' $P1711 = "397_1340317687.034" 
    capture_lex $P1711
    .const 'Sub' $P1610 = "384_1340317687.034" 
    capture_lex $P1610
    .const 'Sub' $P1588 = "381_1340317687.034" 
    capture_lex $P1588
    .const 'Sub' $P1578 = "380_1340317687.034" 
    capture_lex $P1578
.annotate 'line', 735
    .const 'Sub' $P1578 = "380_1340317687.034" 
    newclosure $P1586, $P1578
    set $P1577, $P1586
    .lex "backmod", $P1577
.annotate 'line', 742
    .const 'Sub' $P1588 = "381_1340317687.034" 
    newclosure $P1608, $P1588
    set $P1587, $P1608
    .lex "buildsub", $P1587
.annotate 'line', 241
    set $P114, $P1587
    find_lex $P115, "$?PACKAGE"
    get_who $P116, $P115
    set $P116["buildsub"], $P114
.annotate 'line', 783
    .const 'Sub' $P1610 = "384_1340317687.034" 
    newclosure $P1709, $P1610
    set $P1609, $P1709
    .lex "capnames", $P1609
.annotate 'line', 831
    .const 'Sub' $P1711 = "397_1340317687.034" 
    newclosure $P1736, $P1711
    set $P1710, $P1736
    .lex "alt_nfas", $P1710
.annotate 'line', 241
    .lex "$?PACKAGE", $P1737
    .lex "$?CLASS", $P1738
    set $P120, $P1577
    set $P120, $P1587
    set $P120, $P1609
    set $P120, $P1710
.annotate 'line', 859
    .const 'Sub' $P2262 = "180_1340317687.034" 
    newclosure $P2287, $P2262
.annotate 'line', 241
    .return ($P2287)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backmod"  :subid("380_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1579
    .param pmc param_1580
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 735
    .lex "$ast", param_1579
    .lex "$backmod", param_1580
.annotate 'line', 736
    set $P101, param_1580
    unless_null $P101, vivify_436
    new $P101, "Undef"
  vivify_436:
    set $S100, $P101
    iseq $I100, $S100, ":"
    if $I100, if_1581
.annotate 'line', 737
    set $P104, param_1580
    unless_null $P104, vivify_437
    new $P104, "Undef"
  vivify_437:
    set $S101, $P104
    iseq $I101, $S101, ":?"
    unless $I101, unless_1583
    new $P103, 'Integer'
    set $P103, $I101
    goto unless_1583_end
  unless_1583:
    set $P105, param_1580
    unless_null $P105, vivify_438
    new $P105, "Undef"
  vivify_438:
    set $S102, $P105
    iseq $I102, $S102, "?"
    new $P103, 'Integer'
    set $P103, $I102
  unless_1583_end:
    if $P103, if_1582
.annotate 'line', 738
    set $P107, param_1580
    unless_null $P107, vivify_439
    new $P107, "Undef"
  vivify_439:
    set $S103, $P107
    iseq $I103, $S103, ":!"
    unless $I103, unless_1585
    new $P106, 'Integer'
    set $P106, $I103
    goto unless_1585_end
  unless_1585:
    set $P108, param_1580
    unless_null $P108, vivify_440
    new $P108, "Undef"
  vivify_440:
    set $S104, $P108
    iseq $I104, $S104, "!"
    new $P106, 'Integer'
    set $P106, $I104
  unless_1585_end:
    unless $P106, if_1584_end
    set $P109, param_1579
    unless_null $P109, vivify_441
    new $P109, "Undef"
  vivify_441:
    $P109."backtrack"("g")
  if_1584_end:
    goto if_1582_end
  if_1582:
.annotate 'line', 737
    set $P106, param_1579
    unless_null $P106, vivify_442
    new $P106, "Undef"
  vivify_442:
    $P106."backtrack"("f")
  if_1582_end:
    goto if_1581_end
  if_1581:
.annotate 'line', 736
    set $P103, param_1579
    unless_null $P103, vivify_443
    new $P103, "Undef"
  vivify_443:
    $P103."backtrack"("r")
  if_1581_end:
.annotate 'line', 735
    set $P101, param_1579
    unless_null $P101, vivify_444
    new $P101, "Undef"
  vivify_444:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "buildsub"  :subid("381_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1589
    .param pmc param_1590 :optional
    .param int has_param_1590 :opt_flag
    .param pmc param_1591 :optional :named("anon")
    .param int has_param_1591 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 742
    .const 'Sub' $P1603 = "383_1340317687.034" 
    capture_lex $P1603
    .const 'Sub' $P1597 = "382_1340317687.034" 
    capture_lex $P1597
    .lex "$qast", param_1589
    if has_param_1590, optparam_445
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "PAST"
    get_who $P105, $P104
    set $P106, $P105["Block"]
    $P107 = $P106."new"("method" :named("blocktype"))
    set param_1590, $P107
  optparam_445:
    .lex "$block", param_1590
    if has_param_1591, optparam_446
    new $P108, "Undef"
    set param_1591, $P108
  optparam_446:
    .lex "$anon", param_1591
.annotate 'line', 743
    new $P109, "Undef"
    set $P1592, $P109
    .lex "$hashpast", $P1592
.annotate 'line', 751
    new $P110, "Undef"
    set $P1593, $P110
    .lex "$initpast", $P1593
.annotate 'line', 752
    new $P111, "Undef"
    set $P1594, $P111
    .lex "$capblock", $P1594
.annotate 'line', 756
    new $P112, "Undef"
    set $P1595, $P112
    .lex "$nfapast", $P1595
.annotate 'line', 743
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
    $P117 = $P116."new"("hash" :named("pasttype"))
    set $P1592, $P117
.annotate 'line', 744
    set $P114, param_1589
    unless_null $P114, vivify_447
    new $P114, "Undef"
  vivify_447:
    $P115 = "capnames"($P114, 0)
    defined $I100, $P115
    unless $I100, for_undef_448
    iter $P113, $P115
    new $P118, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P118, loop1600_handler
    push_eh $P118
  loop1600_test:
    unless $P113, loop1600_done
    shift $P116, $P113
  loop1600_redo:
    .const 'Sub' $P1597 = "382_1340317687.034" 
    capture_lex $P1597
    $P1597($P116)
  loop1600_next:
    goto loop1600_test
  loop1600_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P119, exception, 'type'
    eq $P119, .CONTROL_LOOP_NEXT, loop1600_next
    eq $P119, .CONTROL_LOOP_REDO, loop1600_redo
  loop1600_done:
    pop_eh 
  for_undef_448:
.annotate 'line', 751
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Stmts"]
    $P117 = $P116."new"()
    set $P1593, $P117
.annotate 'line', 752
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Block"]
    new $P117, "ResizablePMCArray"
    push $P117, "Sub"
.annotate 'line', 753
    set $P118, param_1590
    unless_null $P118, vivify_455
    new $P118, "Undef"
  vivify_455:
    $P119 = $P118."subid"()
    concat $P120, $P119, "_caps"
.annotate 'line', 752
    set $P121, $P1592
    unless_null $P121, vivify_456
    new $P121, "Undef"
  vivify_456:
    $P122 = $P116."new"($P121, "nqp" :named("hll"), $P117 :named("namespace"), 0 :named("lexical"), $P120 :named("name"))
    set $P1594, $P122
.annotate 'line', 754
    set $P113, $P1593
    unless_null $P113, vivify_457
    new $P113, "Undef"
  vivify_457:
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Stmt"]
    set $P118, $P1594
    unless_null $P118, vivify_458
    new $P118, "Undef"
  vivify_458:
    $P119 = $P117."new"($P118)
    $P113."push"($P119)
.annotate 'line', 756
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "QRegex"
    get_who $P115, $P114
    set $P116, $P115["NFA"]
    $P117 = $P116."new"()
    set $P118, param_1589
    unless_null $P118, vivify_459
    new $P118, "Undef"
  vivify_459:
    $P119 = $P117."addnode"($P118)
    $P120 = $P119."past"()
    set $P1595, $P120
.annotate 'line', 757
    set $P113, $P1595
    unless_null $P113, vivify_460
    new $P113, "Undef"
  vivify_460:
    unless $P113, if_1601_end
    .const 'Sub' $P1603 = "383_1340317687.034" 
    capture_lex $P1603
    $P1603()
  if_1601_end:
.annotate 'line', 763
    set $P113, param_1589
    unless_null $P113, vivify_465
    new $P113, "Undef"
  vivify_465:
    set $P114, param_1590
    unless_null $P114, vivify_466
    new $P114, "Undef"
  vivify_466:
    $P115 = $P114."subid"()
    set $P116, $P1593
    unless_null $P116, vivify_467
    new $P116, "Undef"
  vivify_467:
    "alt_nfas"($P113, $P115, $P116)
.annotate 'line', 765
    set $P113, param_1590
    unless_null $P113, vivify_468
    new $P113, "Undef"
  vivify_468:
    $P114 = $P113."symbol"(unicode:"$\x{a2}")
    if $P114, unless_1605_end
.annotate 'line', 766
    set $P115, $P1593
    unless_null $P115, vivify_469
    new $P115, "Undef"
  vivify_469:
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Var"]
    $P120 = $P119."new"(unicode:"$\x{a2}" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"))
    $P115."push"($P120)
.annotate 'line', 767
    set $P115, param_1590
    unless_null $P115, vivify_470
    new $P115, "Undef"
  vivify_470:
    $P115."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
  unless_1605_end:
.annotate 'line', 770
    set $P113, param_1589
    unless_null $P113, vivify_471
    new $P113, "Undef"
  vivify_471:
    set $P1606, param_1590
    unless_null $P1606, vivify_472
    $P1606 = root_new ['parrot';'Hash']
    set param_1590, $P1606
  vivify_472:
    set $P1606["orig_qast"], $P113
.annotate 'line', 772
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "QAST"
    get_who $P115, $P114
    set $P116, $P115["Regex"]
.annotate 'line', 773
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "QAST"
    get_who $P119, $P118
    set $P120, $P119["Regex"]
    $P121 = $P120."new"("scan" :named("rxtype"))
    set $P122, param_1589
    unless_null $P122, vivify_473
    new $P122, "Undef"
  vivify_473:
.annotate 'line', 775
    set $P124, param_1591
    unless_null $P124, vivify_474
    new $P124, "Undef"
  vivify_474:
    if $P124, if_1607
.annotate 'line', 777
    get_hll_global $P130, "GLOBAL"
    nqp_get_package_through_who $P131, $P130, "QAST"
    get_who $P132, $P131
    set $P133, $P132["Regex"]
    find_dynamic_lex $P136, "%*RX"
    unless_null $P136, vivify_475
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["%RX"]
    unless_null $P136, vivify_476
    die "Contextual %*RX not found"
  vivify_476:
  vivify_475:
    set $P137, $P136["name"]
    unless_null $P137, vivify_477
    new $P137, "Undef"
  vivify_477:
    $P138 = $P133."new"("pass" :named("rxtype"), $P137 :named("name"))
    set $P123, $P138
.annotate 'line', 775
    goto if_1607_end
  if_1607:
.annotate 'line', 776
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "QAST"
    get_who $P127, $P126
    set $P128, $P127["Regex"]
    $P129 = $P128."new"("pass" :named("rxtype"))
    set $P123, $P129
  if_1607_end:
.annotate 'line', 775
    $P139 = $P116."new"($P121, $P122, $P123, "concat" :named("rxtype"))
.annotate 'line', 772
    set param_1589, $P139
.annotate 'line', 778
    set $P113, param_1590
    unless_null $P113, vivify_478
    new $P113, "Undef"
  vivify_478:
    set $P114, $P1593
    unless_null $P114, vivify_479
    new $P114, "Undef"
  vivify_479:
    $P113."push"($P114)
.annotate 'line', 779
    set $P113, param_1590
    unless_null $P113, vivify_480
    new $P113, "Undef"
  vivify_480:
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["QAST"]
    set $P118, param_1589
    unless_null $P118, vivify_481
    new $P118, "Undef"
  vivify_481:
    $P119 = $P117."new"($P118)
    $P113."push"($P119)
.annotate 'line', 742
    set $P113, param_1590
    unless_null $P113, vivify_482
    new $P113, "Undef"
  vivify_482:
    .return ($P113)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1596"  :anon :subid("382_1340317687.034") :outer("381_1340317687.034")
    .param pmc param_1598
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 744
    .lex "$_", param_1598
.annotate 'line', 745
    find_lex $P118, "$_"
    unless_null $P118, vivify_449
    new $P118, "Undef"
  vivify_449:
    $S100 = $P118."key"()
    isgt $I101, $S100, ""
    if $I101, if_1599
    new $P117, 'Integer'
    set $P117, $I101
    goto if_1599_end
  if_1599:
.annotate 'line', 746
    find_lex $P119, "$hashpast"
    unless_null $P119, vivify_450
    new $P119, "Undef"
  vivify_450:
    find_lex $P120, "$_"
    unless_null $P120, vivify_451
    new $P120, "Undef"
  vivify_451:
    $P121 = $P120."key"()
    $P119."push"($P121)
.annotate 'line', 747
    find_lex $P119, "$hashpast"
    unless_null $P119, vivify_452
    new $P119, "Undef"
  vivify_452:
.annotate 'line', 748
    find_lex $P120, "$_"
    unless_null $P120, vivify_453
    new $P120, "Undef"
  vivify_453:
    $S101 = $P120."key"()
    is_cclass $I102, .CCLASS_NUMERIC, $S101, 0
    new $P121, 'Integer'
    set $P121, $I102
    find_lex $P122, "$_"
    unless_null $P122, vivify_454
    new $P122, "Undef"
  vivify_454:
    $N100 = $P122."value"()
    set $N101, 1
    isgt $I103, $N100, $N101
    new $P123, 'Integer'
    set $P123, $I103
    mul $P124, $P123, 2
    add $P125, $P121, $P124
    $P126 = $P119."push"($P125)
.annotate 'line', 745
    set $P117, $P126
  if_1599_end:
.annotate 'line', 744
    .return ($P117)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1602"  :anon :subid("383_1340317687.034") :outer("381_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 758
    new $P114, "Undef"
    set $P1604, $P114
    .lex "$nfablock", $P1604
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Block"]
    new $P119, "ResizablePMCArray"
    push $P119, "Sub"
.annotate 'line', 760
    find_lex $P120, "$block"
    unless_null $P120, vivify_461
    new $P120, "Undef"
  vivify_461:
    $P121 = $P120."subid"()
    concat $P122, $P121, "_nfa"
.annotate 'line', 758
    find_lex $P123, "$nfapast"
    unless_null $P123, vivify_462
    new $P123, "Undef"
  vivify_462:
    $P124 = $P118."new"($P123, "nqp" :named("hll"), $P119 :named("namespace"), 0 :named("lexical"), $P122 :named("name"))
    set $P1604, $P124
.annotate 'line', 761
    find_lex $P115, "$initpast"
    unless_null $P115, vivify_463
    new $P115, "Undef"
  vivify_463:
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmt"]
    set $P120, $P1604
    unless_null $P120, vivify_464
    new $P120, "Undef"
  vivify_464:
    $P121 = $P119."new"($P120)
    $P122 = $P115."push"($P121)
.annotate 'line', 757
    .return ($P122)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "capnames"  :subid("384_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1611
    .param pmc param_1612
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 783
    .const 'Sub' $P1696 = "395_1340317687.034" 
    capture_lex $P1696
    .const 'Sub' $P1674 = "392_1340317687.034" 
    capture_lex $P1674
    .const 'Sub' $P1659 = "390_1340317687.034" 
    capture_lex $P1659
    .const 'Sub' $P1635 = "387_1340317687.034" 
    capture_lex $P1635
    .const 'Sub' $P1619 = "385_1340317687.034" 
    capture_lex $P1619
    .lex "$ast", param_1611
    .lex "$count", param_1612
.annotate 'line', 784
    $P1614 = root_new ['parrot';'Hash']
    set $P1613, $P1614
    .lex "%capnames", $P1613
.annotate 'line', 785
    new $P117, "Undef"
    set $P1615, $P117
    .lex "$rxtype", $P1615
.annotate 'line', 783
    set $P1616, $P1613
    unless_null $P1616, vivify_483
    $P1616 = root_new ['parrot';'Hash']
  vivify_483:
.annotate 'line', 785
    set $P118, param_1611
    unless_null $P118, vivify_484
    new $P118, "Undef"
  vivify_484:
    $P119 = $P118."rxtype"()
    set $P1615, $P119
.annotate 'line', 786
    set $P118, $P1615
    unless_null $P118, vivify_485
    new $P118, "Undef"
  vivify_485:
    set $S100, $P118
    iseq $I100, $S100, "concat"
    if $I100, if_1617
.annotate 'line', 793
    set $P120, $P1615
    unless_null $P120, vivify_486
    new $P120, "Undef"
  vivify_486:
    set $S101, $P120
    iseq $I101, $S101, "altseq"
    unless $I101, unless_1633
    new $P119, 'Integer'
    set $P119, $I101
    goto unless_1633_end
  unless_1633:
    set $P121, $P1615
    unless_null $P121, vivify_487
    new $P121, "Undef"
  vivify_487:
    set $S102, $P121
    iseq $I102, $S102, "alt"
    new $P119, 'Integer'
    set $P119, $I102
  unless_1633_end:
    if $P119, if_1632
.annotate 'line', 804
    set $P125, $P1615
    unless_null $P125, vivify_488
    new $P125, "Undef"
  vivify_488:
    set $S103, $P125
    iseq $I103, $S103, "subrule"
    if $I103, if_1657
    new $P124, 'Integer'
    set $P124, $I103
    goto if_1657_end
  if_1657:
    set $P126, param_1611
    unless_null $P126, vivify_489
    new $P126, "Undef"
  vivify_489:
    $S104 = $P126."subtype"()
    iseq $I104, $S104, "capture"
    new $P124, 'Integer'
    set $P124, $I104
  if_1657_end:
    if $P124, if_1656
.annotate 'line', 813
    set $P129, $P1615
    unless_null $P129, vivify_490
    new $P129, "Undef"
  vivify_490:
    set $S105, $P129
    iseq $I105, $S105, "subcapture"
    if $I105, if_1672
.annotate 'line', 822
    set $P131, $P1615
    unless_null $P131, vivify_491
    new $P131, "Undef"
  vivify_491:
    set $S106, $P131
    iseq $I106, $S106, "quant"
    unless $I106, if_1694_end
    .const 'Sub' $P1696 = "395_1340317687.034" 
    capture_lex $P1696
    $P1696()
  if_1694_end:
    goto if_1672_end
  if_1672:
.annotate 'line', 813
    .const 'Sub' $P1674 = "392_1340317687.034" 
    capture_lex $P1674
    $P1674()
  if_1672_end:
    goto if_1656_end
  if_1656:
.annotate 'line', 804
    .const 'Sub' $P1659 = "390_1340317687.034" 
    capture_lex $P1659
    $P1659()
  if_1656_end:
    goto if_1632_end
  if_1632:
.annotate 'line', 793
    .const 'Sub' $P1635 = "387_1340317687.034" 
    capture_lex $P1635
    $P1635()
  if_1632_end:
    goto if_1617_end
  if_1617:
.annotate 'line', 787
    set $P120, param_1611
    unless_null $P120, vivify_557
    new $P120, "Undef"
  vivify_557:
    $P121 = $P120."list"()
    defined $I101, $P121
    unless $I101, for_undef_558
    iter $P119, $P121
    new $P124, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P124, loop1631_handler
    push_eh $P124
  loop1631_test:
    unless $P119, loop1631_done
    shift $P122, $P119
  loop1631_redo:
    .const 'Sub' $P1619 = "385_1340317687.034" 
    capture_lex $P1619
    $P1619($P122)
  loop1631_next:
    goto loop1631_test
  loop1631_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P125, exception, 'type'
    eq $P125, .CONTROL_LOOP_NEXT, loop1631_next
    eq $P125, .CONTROL_LOOP_REDO, loop1631_redo
  loop1631_done:
    pop_eh 
  for_undef_558:
  if_1617_end:
.annotate 'line', 827
    set $P118, param_1612
    unless_null $P118, vivify_571
    new $P118, "Undef"
  vivify_571:
    set $P1707, $P1613
    unless_null $P1707, vivify_572
    $P1707 = root_new ['parrot';'Hash']
    set $P1613, $P1707
  vivify_572:
    set $P1707[""], $P118
.annotate 'line', 783
    set $P1708, $P1613
    unless_null $P1708, vivify_573
    $P1708 = root_new ['parrot';'Hash']
  vivify_573:
    .return ($P1708)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "_block1695"  :anon :subid("395_1340317687.034") :outer("384_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 822
    .const 'Sub' $P1702 = "396_1340317687.034" 
    capture_lex $P1702
.annotate 'line', 823
    $P1698 = root_new ['parrot';'Hash']
    set $P1697, $P1698
    .lex "%astcap", $P1697
    find_lex $P1699, "$ast"
    unless_null $P1699, vivify_492
    $P1699 = root_new ['parrot';'ResizablePMCArray']
  vivify_492:
    set $P132, $P1699[0]
    unless_null $P132, vivify_493
    new $P132, "Undef"
  vivify_493:
    find_lex $P133, "$count"
    unless_null $P133, vivify_494
    new $P133, "Undef"
  vivify_494:
    $P134 = "capnames"($P132, $P133)
    set $P1697, $P134
.annotate 'line', 824
    set $P1700, $P1697
    unless_null $P1700, vivify_495
    $P1700 = root_new ['parrot';'Hash']
  vivify_495:
    defined $I107, $P1700
    unless $I107, for_undef_496
    iter $P132, $P1700
    new $P135, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P135, loop1705_handler
    push_eh $P135
  loop1705_test:
    unless $P132, loop1705_done
    shift $P133, $P132
  loop1705_redo:
    .const 'Sub' $P1702 = "396_1340317687.034" 
    capture_lex $P1702
    $P1702($P133)
  loop1705_next:
    goto loop1705_test
  loop1705_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P136, exception, 'type'
    eq $P136, .CONTROL_LOOP_NEXT, loop1705_next
    eq $P136, .CONTROL_LOOP_REDO, loop1705_redo
  loop1705_done:
    pop_eh 
  for_undef_496:
.annotate 'line', 825
    set $P1706, $P1697
    unless_null $P1706, vivify_499
    $P1706 = root_new ['parrot';'Hash']
  vivify_499:
    set $P132, $P1706[""]
    unless_null $P132, vivify_500
    new $P132, "Undef"
  vivify_500:
    store_lex "$count", $P132
.annotate 'line', 822
    .return ($P132)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1701"  :anon :subid("396_1340317687.034") :outer("395_1340317687.034")
    .param pmc param_1703
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 824
    .lex "$_", param_1703
    new $P134, "Float"
    assign $P134, 2
    find_lex $P135, "$_"
    unless_null $P135, vivify_497
    new $P135, "Undef"
  vivify_497:
    find_lex $P1704, "%capnames"
    unless_null $P1704, vivify_498
    $P1704 = root_new ['parrot';'Hash']
    store_lex "%capnames", $P1704
  vivify_498:
    set $P1704[$P135], $P134
    .return ($P134)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "_block1673"  :anon :subid("392_1340317687.034") :outer("384_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 813
    .const 'Sub' $P1687 = "394_1340317687.034" 
    capture_lex $P1687
    .const 'Sub' $P1678 = "393_1340317687.034" 
    capture_lex $P1678
.annotate 'line', 818
    $P1676 = root_new ['parrot';'Hash']
    set $P1675, $P1676
    .lex "%x", $P1675
.annotate 'line', 814
    find_lex $P131, "$ast"
    unless_null $P131, vivify_501
    new $P131, "Undef"
  vivify_501:
    $S106 = $P131."name"()
    split $P132, " ", $S106
    defined $I106, $P132
    unless $I106, for_undef_502
    iter $P130, $P132
    new $P135, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P135, loop1683_handler
    push_eh $P135
  loop1683_test:
    unless $P130, loop1683_done
    shift $P133, $P130
  loop1683_redo:
    .const 'Sub' $P1678 = "393_1340317687.034" 
    capture_lex $P1678
    $P1678($P133)
  loop1683_next:
    goto loop1683_test
  loop1683_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P136, exception, 'type'
    eq $P136, .CONTROL_LOOP_NEXT, loop1683_next
    eq $P136, .CONTROL_LOOP_REDO, loop1683_redo
  loop1683_done:
    pop_eh 
  for_undef_502:
.annotate 'line', 818
    find_lex $P1684, "$ast"
    unless_null $P1684, vivify_508
    $P1684 = root_new ['parrot';'ResizablePMCArray']
  vivify_508:
    set $P130, $P1684[0]
    unless_null $P130, vivify_509
    new $P130, "Undef"
  vivify_509:
    find_lex $P131, "$count"
    unless_null $P131, vivify_510
    new $P131, "Undef"
  vivify_510:
    $P132 = "capnames"($P130, $P131)
    set $P1675, $P132
.annotate 'line', 819
    set $P1685, $P1675
    unless_null $P1685, vivify_511
    $P1685 = root_new ['parrot';'Hash']
  vivify_511:
    defined $I106, $P1685
    unless $I106, for_undef_512
    iter $P130, $P1685
    new $P132, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P132, loop1692_handler
    push_eh $P132
  loop1692_test:
    unless $P130, loop1692_done
    shift $P131, $P130
  loop1692_redo:
    .const 'Sub' $P1687 = "394_1340317687.034" 
    capture_lex $P1687
    $P1687($P131)
  loop1692_next:
    goto loop1692_test
  loop1692_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P133, exception, 'type'
    eq $P133, .CONTROL_LOOP_NEXT, loop1692_next
    eq $P133, .CONTROL_LOOP_REDO, loop1692_redo
  loop1692_done:
    pop_eh 
  for_undef_512:
.annotate 'line', 820
    set $P1693, $P1675
    unless_null $P1693, vivify_521
    $P1693 = root_new ['parrot';'Hash']
  vivify_521:
    set $P130, $P1693[""]
    unless_null $P130, vivify_522
    new $P130, "Undef"
  vivify_522:
    store_lex "$count", $P130
.annotate 'line', 813
    .return ($P130)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1677"  :anon :subid("393_1340317687.034") :outer("392_1340317687.034")
    .param pmc param_1679
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 814
    .lex "$_", param_1679
.annotate 'line', 815
    find_lex $P135, "$_"
    unless_null $P135, vivify_503
    new $P135, "Undef"
  vivify_503:
    set $S107, $P135
    iseq $I107, $S107, "0"
    unless $I107, unless_1681
    new $P134, 'Integer'
    set $P134, $I107
    goto unless_1681_end
  unless_1681:
    find_lex $P136, "$_"
    unless_null $P136, vivify_504
    new $P136, "Undef"
  vivify_504:
    set $N100, $P136
    set $N101, 0
    isgt $I108, $N100, $N101
    new $P134, 'Integer'
    set $P134, $I108
  unless_1681_end:
    unless $P134, if_1680_end
    find_lex $P137, "$_"
    unless_null $P137, vivify_505
    new $P137, "Undef"
  vivify_505:
    add $P138, $P137, 1
    store_lex "$count", $P138
  if_1680_end:
.annotate 'line', 816
    new $P134, "Float"
    assign $P134, 1
    find_lex $P135, "$_"
    unless_null $P135, vivify_506
    new $P135, "Undef"
  vivify_506:
    find_lex $P1682, "%capnames"
    unless_null $P1682, vivify_507
    $P1682 = root_new ['parrot';'Hash']
    store_lex "%capnames", $P1682
  vivify_507:
    set $P1682[$P135], $P134
.annotate 'line', 814
    .return ($P134)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1686"  :anon :subid("394_1340317687.034") :outer("392_1340317687.034")
    .param pmc param_1688
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 819
    .lex "$_", param_1688
    find_lex $P132, "$_"
    unless_null $P132, vivify_513
    new $P132, "Undef"
  vivify_513:
    $P133 = $P132."key"()
    find_lex $P1689, "%capnames"
    unless_null $P1689, vivify_514
    $P1689 = root_new ['parrot';'Hash']
  vivify_514:
    set $P134, $P1689[$P133]
    unless_null $P134, vivify_515
    new $P134, "Undef"
  vivify_515:
    set $N100, $P134
    new $P135, 'Float'
    set $P135, $N100
    find_lex $P136, "$_"
    unless_null $P136, vivify_516
    new $P136, "Undef"
  vivify_516:
    $P137 = $P136."key"()
    find_lex $P1690, "%x"
    unless_null $P1690, vivify_517
    $P1690 = root_new ['parrot';'Hash']
  vivify_517:
    set $P138, $P1690[$P137]
    unless_null $P138, vivify_518
    new $P138, "Undef"
  vivify_518:
    add $P139, $P135, $P138
    find_lex $P140, "$_"
    unless_null $P140, vivify_519
    new $P140, "Undef"
  vivify_519:
    $P141 = $P140."key"()
    find_lex $P1691, "%capnames"
    unless_null $P1691, vivify_520
    $P1691 = root_new ['parrot';'Hash']
    store_lex "%capnames", $P1691
  vivify_520:
    set $P1691[$P141], $P139
    .return ($P139)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "_block1658"  :anon :subid("390_1340317687.034") :outer("384_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 804
    .const 'Sub' $P1666 = "391_1340317687.034" 
    capture_lex $P1666
.annotate 'line', 805
    new $P127, "Undef"
    set $P1660, $P127
    .lex "$name", $P1660
.annotate 'line', 807
    $P1662 = root_new ['parrot';'ResizablePMCArray']
    set $P1661, $P1662
    .lex "@names", $P1661
.annotate 'line', 805
    find_lex $P128, "$ast"
    unless_null $P128, vivify_523
    new $P128, "Undef"
  vivify_523:
    $P129 = $P128."name"()
    set $P1660, $P129
.annotate 'line', 806
    set $P128, $P1660
    unless_null $P128, vivify_524
    new $P128, "Undef"
  vivify_524:
    set $S105, $P128
    iseq $I105, $S105, ""
    unless $I105, if_1663_end
    find_lex $P129, "$count"
    unless_null $P129, vivify_525
    new $P129, "Undef"
  vivify_525:
    set $P1660, $P129
    find_lex $P129, "$ast"
    unless_null $P129, vivify_526
    new $P129, "Undef"
  vivify_526:
    set $P130, $P1660
    unless_null $P130, vivify_527
    new $P130, "Undef"
  vivify_527:
    $P129."name"($P130)
  if_1663_end:
.annotate 'line', 807
    set $P128, $P1660
    unless_null $P128, vivify_528
    new $P128, "Undef"
  vivify_528:
    set $S105, $P128
    split $P129, "=", $S105
    set $P1661, $P129
.annotate 'line', 808
    set $P1664, $P1661
    unless_null $P1664, vivify_529
    $P1664 = root_new ['parrot';'ResizablePMCArray']
  vivify_529:
    defined $I105, $P1664
    unless $I105, for_undef_530
    iter $P128, $P1664
    new $P131, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P131, loop1671_handler
    push_eh $P131
  loop1671_test:
    unless $P128, loop1671_done
    shift $P129, $P128
  loop1671_redo:
    .const 'Sub' $P1666 = "391_1340317687.034" 
    capture_lex $P1666
    $P1666($P129)
  loop1671_next:
    goto loop1671_test
  loop1671_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P132, exception, 'type'
    eq $P132, .CONTROL_LOOP_NEXT, loop1671_next
    eq $P132, .CONTROL_LOOP_REDO, loop1671_redo
  loop1671_done:
    pop_eh 
  for_undef_530:
.annotate 'line', 804
    .return ($P128)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1665"  :anon :subid("391_1340317687.034") :outer("390_1340317687.034")
    .param pmc param_1667
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 808
    .lex "$_", param_1667
.annotate 'line', 809
    find_lex $P131, "$_"
    unless_null $P131, vivify_531
    new $P131, "Undef"
  vivify_531:
    set $S105, $P131
    iseq $I106, $S105, "0"
    unless $I106, unless_1669
    new $P130, 'Integer'
    set $P130, $I106
    goto unless_1669_end
  unless_1669:
    find_lex $P132, "$_"
    unless_null $P132, vivify_532
    new $P132, "Undef"
  vivify_532:
    set $N100, $P132
    set $N101, 0
    isgt $I107, $N100, $N101
    new $P130, 'Integer'
    set $P130, $I107
  unless_1669_end:
    unless $P130, if_1668_end
    find_lex $P133, "$_"
    unless_null $P133, vivify_533
    new $P133, "Undef"
  vivify_533:
    add $P134, $P133, 1
    store_lex "$count", $P134
  if_1668_end:
.annotate 'line', 810
    new $P130, "Float"
    assign $P130, 1
    find_lex $P131, "$_"
    unless_null $P131, vivify_534
    new $P131, "Undef"
  vivify_534:
    find_lex $P1670, "%capnames"
    unless_null $P1670, vivify_535
    $P1670 = root_new ['parrot';'Hash']
    store_lex "%capnames", $P1670
  vivify_535:
    set $P1670[$P131], $P130
.annotate 'line', 808
    .return ($P130)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "_block1634"  :anon :subid("387_1340317687.034") :outer("384_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 793
    .const 'Sub' $P1638 = "388_1340317687.034" 
    capture_lex $P1638
.annotate 'line', 794
    new $P122, "Undef"
    set $P1636, $P122
    .lex "$max", $P1636
    find_lex $P123, "$count"
    unless_null $P123, vivify_536
    new $P123, "Undef"
  vivify_536:
    set $P1636, $P123
.annotate 'line', 795
    find_lex $P124, "$ast"
    unless_null $P124, vivify_537
    new $P124, "Undef"
  vivify_537:
    $P125 = $P124."list"()
    defined $I103, $P125
    unless $I103, for_undef_538
    iter $P123, $P125
    new $P128, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P128, loop1655_handler
    push_eh $P128
  loop1655_test:
    unless $P123, loop1655_done
    shift $P126, $P123
  loop1655_redo:
    .const 'Sub' $P1638 = "388_1340317687.034" 
    capture_lex $P1638
    $P1638($P126)
  loop1655_next:
    goto loop1655_test
  loop1655_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P129, exception, 'type'
    eq $P129, .CONTROL_LOOP_NEXT, loop1655_next
    eq $P129, .CONTROL_LOOP_REDO, loop1655_redo
  loop1655_done:
    pop_eh 
  for_undef_538:
.annotate 'line', 802
    set $P123, $P1636
    unless_null $P123, vivify_556
    new $P123, "Undef"
  vivify_556:
    store_lex "$count", $P123
.annotate 'line', 793
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "_block1637"  :anon :subid("388_1340317687.034") :outer("387_1340317687.034")
    .param pmc param_1641
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 795
    .const 'Sub' $P1644 = "389_1340317687.034" 
    capture_lex $P1644
.annotate 'line', 796
    $P1640 = root_new ['parrot';'Hash']
    set $P1639, $P1640
    .lex "%x", $P1639
    .lex "$_", param_1641
    find_lex $P127, "$_"
    unless_null $P127, vivify_539
    new $P127, "Undef"
  vivify_539:
    find_lex $P128, "$count"
    unless_null $P128, vivify_540
    new $P128, "Undef"
  vivify_540:
    $P129 = "capnames"($P127, $P128)
    set $P1639, $P129
.annotate 'line', 797
    set $P1642, $P1639
    unless_null $P1642, vivify_541
    $P1642 = root_new ['parrot';'Hash']
  vivify_541:
    defined $I104, $P1642
    unless $I104, for_undef_542
    iter $P127, $P1642
    new $P130, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P130, loop1651_handler
    push_eh $P130
  loop1651_test:
    unless $P127, loop1651_done
    shift $P128, $P127
  loop1651_redo:
    .const 'Sub' $P1644 = "389_1340317687.034" 
    capture_lex $P1644
    $P1644($P128)
  loop1651_next:
    goto loop1651_test
  loop1651_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P131, exception, 'type'
    eq $P131, .CONTROL_LOOP_NEXT, loop1651_next
    eq $P131, .CONTROL_LOOP_REDO, loop1651_redo
  loop1651_done:
    pop_eh 
  for_undef_542:
.annotate 'line', 800
    set $P1653, $P1639
    unless_null $P1653, vivify_551
    $P1653 = root_new ['parrot';'Hash']
  vivify_551:
    set $P128, $P1653[""]
    unless_null $P128, vivify_552
    new $P128, "Undef"
  vivify_552:
    set $N100, $P128
    find_lex $P129, "$max"
    unless_null $P129, vivify_553
    new $P129, "Undef"
  vivify_553:
    set $N101, $P129
    isgt $I104, $N100, $N101
    if $I104, if_1652
    new $P127, 'Integer'
    set $P127, $I104
    goto if_1652_end
  if_1652:
    set $P1654, $P1639
    unless_null $P1654, vivify_554
    $P1654 = root_new ['parrot';'Hash']
  vivify_554:
    set $P130, $P1654[""]
    unless_null $P130, vivify_555
    new $P130, "Undef"
  vivify_555:
    store_lex "$max", $P130
    set $P127, $P130
  if_1652_end:
.annotate 'line', 795
    .return ($P127)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1643"  :anon :subid("389_1340317687.034") :outer("388_1340317687.034")
    .param pmc param_1645
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 797
    .lex "$_", param_1645
.annotate 'line', 798
    find_lex $P131, "$_"
    unless_null $P131, vivify_543
    new $P131, "Undef"
  vivify_543:
    $P132 = $P131."key"()
    find_lex $P1648, "%capnames"
    unless_null $P1648, vivify_544
    $P1648 = root_new ['parrot';'Hash']
  vivify_544:
    set $P133, $P1648[$P132]
    unless_null $P133, vivify_545
    new $P133, "Undef"
  vivify_545:
    set $N100, $P133
    set $N101, 2
    islt $I105, $N100, $N101
    if $I105, if_1647
    new $P130, 'Integer'
    set $P130, $I105
    goto if_1647_end
  if_1647:
    find_lex $P134, "$_"
    unless_null $P134, vivify_546
    new $P134, "Undef"
  vivify_546:
    $P135 = $P134."key"()
    find_lex $P1649, "%x"
    unless_null $P1649, vivify_547
    $P1649 = root_new ['parrot';'Hash']
  vivify_547:
    set $P136, $P1649[$P135]
    unless_null $P136, vivify_548
    new $P136, "Undef"
  vivify_548:
    set $N102, $P136
    set $N103, 1
    iseq $I106, $N102, $N103
    new $P130, 'Integer'
    set $P130, $I106
  if_1647_end:
    if $P130, if_1646
    new $P138, "Float"
    assign $P138, 2
    set $P129, $P138
    goto if_1646_end
  if_1646:
    new $P137, "Float"
    assign $P137, 1
    set $P129, $P137
  if_1646_end:
    find_lex $P139, "$_"
    unless_null $P139, vivify_549
    new $P139, "Undef"
  vivify_549:
    $P140 = $P139."key"()
    find_lex $P1650, "%capnames"
    unless_null $P1650, vivify_550
    $P1650 = root_new ['parrot';'Hash']
    store_lex "%capnames", $P1650
  vivify_550:
    set $P1650[$P140], $P129
.annotate 'line', 797
    .return ($P129)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "_block1618"  :anon :subid("385_1340317687.034") :outer("384_1340317687.034")
    .param pmc param_1622
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 787
    .const 'Sub' $P1625 = "386_1340317687.034" 
    capture_lex $P1625
.annotate 'line', 788
    $P1621 = root_new ['parrot';'Hash']
    set $P1620, $P1621
    .lex "%x", $P1620
    .lex "$_", param_1622
    find_lex $P123, "$_"
    unless_null $P123, vivify_559
    new $P123, "Undef"
  vivify_559:
    find_lex $P124, "$count"
    unless_null $P124, vivify_560
    new $P124, "Undef"
  vivify_560:
    $P125 = "capnames"($P123, $P124)
    set $P1620, $P125
.annotate 'line', 789
    set $P1623, $P1620
    unless_null $P1623, vivify_561
    $P1623 = root_new ['parrot';'Hash']
  vivify_561:
    defined $I102, $P1623
    unless $I102, for_undef_562
    iter $P123, $P1623
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop1629_handler
    push_eh $P125
  loop1629_test:
    unless $P123, loop1629_done
    shift $P124, $P123
  loop1629_redo:
    .const 'Sub' $P1625 = "386_1340317687.034" 
    capture_lex $P1625
    $P1625($P124)
  loop1629_next:
    goto loop1629_test
  loop1629_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop1629_next
    eq $P126, .CONTROL_LOOP_REDO, loop1629_redo
  loop1629_done:
    pop_eh 
  for_undef_562:
.annotate 'line', 790
    set $P1630, $P1620
    unless_null $P1630, vivify_569
    $P1630 = root_new ['parrot';'Hash']
  vivify_569:
    set $P123, $P1630[""]
    unless_null $P123, vivify_570
    new $P123, "Undef"
  vivify_570:
    store_lex "$count", $P123
.annotate 'line', 787
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1624"  :anon :subid("386_1340317687.034") :outer("385_1340317687.034")
    .param pmc param_1626
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 789
    .lex "$_", param_1626
    find_lex $P125, "$_"
    unless_null $P125, vivify_563
    new $P125, "Undef"
  vivify_563:
    $P126 = $P125."key"()
    find_lex $P1627, "%capnames"
    unless_null $P1627, vivify_564
    $P1627 = root_new ['parrot';'Hash']
  vivify_564:
    set $P127, $P1627[$P126]
    unless_null $P127, vivify_565
    new $P127, "Undef"
  vivify_565:
    set $N100, $P127
    new $P128, 'Float'
    set $P128, $N100
    find_lex $P129, "$_"
    unless_null $P129, vivify_566
    new $P129, "Undef"
  vivify_566:
    $N101 = $P129."value"()
    add $P130, $P128, $N101
    find_lex $P131, "$_"
    unless_null $P131, vivify_567
    new $P131, "Undef"
  vivify_567:
    $P132 = $P131."key"()
    find_lex $P1628, "%capnames"
    unless_null $P1628, vivify_568
    $P1628 = root_new ['parrot';'Hash']
    store_lex "%capnames", $P1628
  vivify_568:
    set $P1628[$P132], $P130
    .return ($P130)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "alt_nfas"  :subid("397_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1712
    .param pmc param_1713
    .param pmc param_1714
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 831
    .const 'Sub' $P1733 = "400_1340317687.034" 
    capture_lex $P1733
    .const 'Sub' $P1718 = "398_1340317687.034" 
    capture_lex $P1718
    .lex "$ast", param_1712
    .lex "$subid", param_1713
    .lex "$initpast", param_1714
.annotate 'line', 832
    new $P118, "Undef"
    set $P1715, $P118
    .lex "$rxtype", $P1715
    set $P119, param_1712
    unless_null $P119, vivify_574
    new $P119, "Undef"
  vivify_574:
    $P120 = $P119."rxtype"()
    set $P1715, $P120
.annotate 'line', 833
    set $P120, $P1715
    unless_null $P120, vivify_575
    new $P120, "Undef"
  vivify_575:
    set $S100, $P120
    iseq $I100, $S100, "alt"
    if $I100, if_1716
.annotate 'line', 845
    set $P126, $P1715
    unless_null $P126, vivify_576
    new $P126, "Undef"
  vivify_576:
    set $S101, $P126
    iseq $I101, $S101, "subcapture"
    unless $I101, unless_1726
    new $P125, 'Integer'
    set $P125, $I101
    goto unless_1726_end
  unless_1726:
    set $P127, $P1715
    unless_null $P127, vivify_577
    new $P127, "Undef"
  vivify_577:
    set $S102, $P127
    iseq $I102, $S102, "quant"
    new $P125, 'Integer'
    set $P125, $I102
  unless_1726_end:
    if $P125, if_1725
.annotate 'line', 848
    set $P134, $P1715
    unless_null $P134, vivify_578
    new $P134, "Undef"
  vivify_578:
    set $S103, $P134
    iseq $I103, $S103, "concat"
    unless $I103, unless_1731
    new $P133, 'Integer'
    set $P133, $I103
    goto unless_1731_end
  unless_1731:
    set $P135, $P1715
    unless_null $P135, vivify_579
    new $P135, "Undef"
  vivify_579:
    set $S104, $P135
    iseq $I104, $S104, "altseq"
    new $P133, 'Integer'
    set $P133, $I104
  unless_1731_end:
    unless $P133, unless_1730
    set $P131, $P133
    goto unless_1730_end
  unless_1730:
    set $P136, $P1715
    unless_null $P136, vivify_580
    new $P136, "Undef"
  vivify_580:
    set $S105, $P136
    iseq $I105, $S105, "conj"
    new $P131, 'Integer'
    set $P131, $I105
  unless_1730_end:
    unless $P131, unless_1729
    set $P129, $P131
    goto unless_1729_end
  unless_1729:
    set $P137, $P1715
    unless_null $P137, vivify_581
    new $P137, "Undef"
  vivify_581:
    set $S106, $P137
    iseq $I106, $S106, "conjseq"
    new $P129, 'Integer'
    set $P129, $I106
  unless_1729_end:
    if $P129, if_1728
    set $P128, $P129
    goto if_1728_end
  if_1728:
.annotate 'line', 849
    set $P139, param_1712
    unless_null $P139, vivify_582
    new $P139, "Undef"
  vivify_582:
    $P140 = $P139."list"()
    defined $I107, $P140
    unless $I107, for_undef_583
    iter $P138, $P140
    new $P142, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P142, loop1735_handler
    push_eh $P142
  loop1735_test:
    unless $P138, loop1735_done
    shift $P141, $P138
  loop1735_redo:
    .const 'Sub' $P1733 = "400_1340317687.034" 
    capture_lex $P1733
    $P1733($P141)
  loop1735_next:
    goto loop1735_test
  loop1735_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P143, exception, 'type'
    eq $P143, .CONTROL_LOOP_NEXT, loop1735_next
    eq $P143, .CONTROL_LOOP_REDO, loop1735_redo
  loop1735_done:
    pop_eh 
  for_undef_583:
.annotate 'line', 848
    set $P128, $P138
  if_1728_end:
    set $P124, $P128
.annotate 'line', 845
    goto if_1725_end
  if_1725:
.annotate 'line', 846
    set $P1727, param_1712
    unless_null $P1727, vivify_587
    $P1727 = root_new ['parrot';'ResizablePMCArray']
  vivify_587:
    set $P128, $P1727[0]
    unless_null $P128, vivify_588
    new $P128, "Undef"
  vivify_588:
    set $P129, param_1713
    unless_null $P129, vivify_589
    new $P129, "Undef"
  vivify_589:
    set $P131, param_1714
    unless_null $P131, vivify_590
    new $P131, "Undef"
  vivify_590:
    $P132 = "alt_nfas"($P128, $P129, $P131)
.annotate 'line', 845
    set $P124, $P132
  if_1725_end:
    set $P119, $P124
.annotate 'line', 833
    goto if_1716_end
  if_1716:
    .const 'Sub' $P1718 = "398_1340317687.034" 
    capture_lex $P1718
    $P123 = $P1718()
    set $P119, $P123
  if_1716_end:
.annotate 'line', 831
    .return ($P119)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1732"  :anon :subid("400_1340317687.034") :outer("397_1340317687.034")
    .param pmc param_1734
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 849
    .lex "$_", param_1734
    find_lex $P142, "$_"
    unless_null $P142, vivify_584
    new $P142, "Undef"
  vivify_584:
    find_lex $P143, "$subid"
    unless_null $P143, vivify_585
    new $P143, "Undef"
  vivify_585:
    find_lex $P144, "$initpast"
    unless_null $P144, vivify_586
    new $P144, "Undef"
  vivify_586:
    $P145 = "alt_nfas"($P142, $P143, $P144)
    .return ($P145)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "_block1717"  :anon :subid("398_1340317687.034") :outer("397_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 833
    .const 'Sub' $P1722 = "399_1340317687.034" 
    capture_lex $P1722
.annotate 'line', 834
    new $P121, "Undef"
    set $P1719, $P121
    .lex "$nfapast", $P1719
.annotate 'line', 840
    new $P122, "Undef"
    set $P1720, $P122
    .lex "$nfablock", $P1720
.annotate 'line', 834
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    $P127 = $P126."new"("list" :named("pasttype"))
    set $P1719, $P127
.annotate 'line', 835
    find_lex $P123, "$ast"
    unless_null $P123, vivify_591
    new $P123, "Undef"
  vivify_591:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Node"]
    $P128 = $P127."unique"("alt_nfa_")
    concat $P129, $P128, "_"
    time $N100
    set $S101, $N100
    concat $P130, $P129, $S101
    $P123."name"($P130)
.annotate 'line', 836
    find_lex $P124, "$ast"
    unless_null $P124, vivify_592
    new $P124, "Undef"
  vivify_592:
    $P125 = $P124."list"()
    defined $I101, $P125
    unless $I101, for_undef_593
    iter $P123, $P125
    new $P127, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P127, loop1724_handler
    push_eh $P127
  loop1724_test:
    unless $P123, loop1724_done
    shift $P126, $P123
  loop1724_redo:
    .const 'Sub' $P1722 = "399_1340317687.034" 
    capture_lex $P1722
    $P1722($P126)
  loop1724_next:
    goto loop1724_test
  loop1724_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P128, exception, 'type'
    eq $P128, .CONTROL_LOOP_NEXT, loop1724_next
    eq $P128, .CONTROL_LOOP_REDO, loop1724_redo
  loop1724_done:
    pop_eh 
  for_undef_593:
.annotate 'line', 840
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Block"]
    new $P127, "ResizablePMCArray"
    push $P127, "Sub"
.annotate 'line', 842
    find_lex $P128, "$subid"
    unless_null $P128, vivify_599
    new $P128, "Undef"
  vivify_599:
    concat $P129, $P128, "_"
    find_lex $P130, "$ast"
    unless_null $P130, vivify_600
    new $P130, "Undef"
  vivify_600:
    $S101 = $P130."name"()
    concat $P131, $P129, $S101
.annotate 'line', 840
    set $P132, $P1719
    unless_null $P132, vivify_601
    new $P132, "Undef"
  vivify_601:
    $P133 = $P126."new"($P132, "nqp" :named("hll"), $P127 :named("namespace"), 0 :named("lexical"), $P131 :named("name"))
    set $P1720, $P133
.annotate 'line', 843
    find_lex $P123, "$initpast"
    unless_null $P123, vivify_602
    new $P123, "Undef"
  vivify_602:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Stmt"]
    set $P128, $P1720
    unless_null $P128, vivify_603
    new $P128, "Undef"
  vivify_603:
    $P129 = $P127."new"($P128)
    $P130 = $P123."push"($P129)
.annotate 'line', 833
    .return ($P130)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1721"  :anon :subid("399_1340317687.034") :outer("398_1340317687.034")
    .param pmc param_1723
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 836
    .lex "$_", param_1723
.annotate 'line', 837
    find_lex $P127, "$_"
    unless_null $P127, vivify_594
    new $P127, "Undef"
  vivify_594:
    find_lex $P128, "$subid"
    unless_null $P128, vivify_595
    new $P128, "Undef"
  vivify_595:
    find_lex $P129, "$initpast"
    unless_null $P129, vivify_596
    new $P129, "Undef"
  vivify_596:
    "alt_nfas"($P127, $P128, $P129)
.annotate 'line', 838
    find_lex $P127, "$nfapast"
    unless_null $P127, vivify_597
    new $P127, "Undef"
  vivify_597:
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "QRegex"
    get_who $P130, $P129
    set $P131, $P130["NFA"]
    $P132 = $P131."new"()
    find_lex $P133, "$_"
    unless_null $P133, vivify_598
    new $P133, "Undef"
  vivify_598:
    $P134 = $P132."addnode"($P133)
    $P135 = $P134."past"(1 :named("non_empty"))
    $P136 = $P127."push"($P135)
.annotate 'line', 836
    .return ($P136)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "TOP" :anon :subid("127_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1740
    .param pmc param_1741
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 242
    .lex "self", param_1740
    .lex "$/", param_1741
.annotate 'line', 243
    set $P120, param_1741
    set $P1742, param_1741
    unless_null $P1742, vivify_604
    $P1742 = root_new ['parrot';'Hash']
  vivify_604:
    set $P121, $P1742["nibbler"]
    unless_null $P121, vivify_605
    new $P121, "Undef"
  vivify_605:
    $P122 = $P121."ast"()
    $P123 = "buildsub"($P122)
    $P124 = $P120."!make"($P123)
.annotate 'line', 242
    .return ($P124)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "nibbler" :anon :subid("128_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1744
    .param pmc param_1745
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 246
    .lex "self", param_1744
    .lex "$/", param_1745
    set $P120, param_1745
    set $P1746, param_1745
    unless_null $P1746, vivify_606
    $P1746 = root_new ['parrot';'Hash']
  vivify_606:
    set $P121, $P1746["termaltseq"]
    unless_null $P121, vivify_607
    new $P121, "Undef"
  vivify_607:
    $P122 = $P121."ast"()
    $P123 = $P120."!make"($P122)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "termaltseq" :anon :subid("129_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1748
    .param pmc param_1749
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 248
    .const 'Sub' $P1757 = "401_1340317687.034" 
    capture_lex $P1757
    .lex "self", param_1748
    .lex "$/", param_1749
.annotate 'line', 249
    new $P120, "Undef"
    set $P1750, $P120
    .lex "$qast", $P1750
    set $P1751, param_1749
    unless_null $P1751, vivify_608
    $P1751 = root_new ['parrot';'Hash']
  vivify_608:
    set $P1752, $P1751["termconjseq"]
    unless_null $P1752, vivify_609
    $P1752 = root_new ['parrot';'ResizablePMCArray']
  vivify_609:
    set $P121, $P1752[0]
    unless_null $P121, vivify_610
    new $P121, "Undef"
  vivify_610:
    $P122 = $P121."ast"()
    set $P1750, $P122
.annotate 'line', 250
    set $P1754, param_1749
    unless_null $P1754, vivify_611
    $P1754 = root_new ['parrot';'Hash']
  vivify_611:
    set $P121, $P1754["termconjseq"]
    unless_null $P121, vivify_612
    new $P121, "Undef"
  vivify_612:
    set $N100, $P121
    set $N101, 1
    isgt $I100, $N100, $N101
    unless $I100, if_1753_end
.annotate 'line', 251
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "QAST"
    get_who $P124, $P123
    set $P125, $P124["Regex"]
    set $P126, param_1749
    unless_null $P126, vivify_613
    new $P126, "Undef"
  vivify_613:
    $P127 = $P125."new"("altseq" :named("rxtype"), $P126 :named("node"))
    set $P1750, $P127
.annotate 'line', 252
    set $P1755, param_1749
    unless_null $P1755, vivify_614
    $P1755 = root_new ['parrot';'Hash']
  vivify_614:
    set $P123, $P1755["termconjseq"]
    unless_null $P123, vivify_615
    new $P123, "Undef"
  vivify_615:
    defined $I101, $P123
    unless $I101, for_undef_616
    iter $P122, $P123
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop1759_handler
    push_eh $P125
  loop1759_test:
    unless $P122, loop1759_done
    shift $P124, $P122
  loop1759_redo:
    .const 'Sub' $P1757 = "401_1340317687.034" 
    capture_lex $P1757
    $P1757($P124)
  loop1759_next:
    goto loop1759_test
  loop1759_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop1759_next
    eq $P126, .CONTROL_LOOP_REDO, loop1759_redo
  loop1759_done:
    pop_eh 
  for_undef_616:
  if_1753_end:
.annotate 'line', 254
    set $P121, param_1749
    set $P122, $P1750
    unless_null $P122, vivify_619
    new $P122, "Undef"
  vivify_619:
    $P123 = $P121."!make"($P122)
.annotate 'line', 248
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1756"  :anon :subid("401_1340317687.034") :outer("129_1340317687.034")
    .param pmc param_1758
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 252
    .lex "$_", param_1758
    find_lex $P125, "$qast"
    unless_null $P125, vivify_617
    new $P125, "Undef"
  vivify_617:
    find_lex $P126, "$_"
    unless_null $P126, vivify_618
    new $P126, "Undef"
  vivify_618:
    $P127 = $P126."ast"()
    $P128 = $P125."push"($P127)
    .return ($P128)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "termconjseq" :anon :subid("130_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1761
    .param pmc param_1762
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 257
    .const 'Sub' $P1770 = "402_1340317687.034" 
    capture_lex $P1770
    .lex "self", param_1761
    .lex "$/", param_1762
.annotate 'line', 258
    new $P120, "Undef"
    set $P1763, $P120
    .lex "$qast", $P1763
    set $P1764, param_1762
    unless_null $P1764, vivify_620
    $P1764 = root_new ['parrot';'Hash']
  vivify_620:
    set $P1765, $P1764["termalt"]
    unless_null $P1765, vivify_621
    $P1765 = root_new ['parrot';'ResizablePMCArray']
  vivify_621:
    set $P121, $P1765[0]
    unless_null $P121, vivify_622
    new $P121, "Undef"
  vivify_622:
    $P122 = $P121."ast"()
    set $P1763, $P122
.annotate 'line', 259
    set $P1767, param_1762
    unless_null $P1767, vivify_623
    $P1767 = root_new ['parrot';'Hash']
  vivify_623:
    set $P121, $P1767["termalt"]
    unless_null $P121, vivify_624
    new $P121, "Undef"
  vivify_624:
    set $N100, $P121
    set $N101, 1
    isgt $I100, $N100, $N101
    unless $I100, if_1766_end
.annotate 'line', 260
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "QAST"
    get_who $P124, $P123
    set $P125, $P124["Regex"]
    set $P126, param_1762
    unless_null $P126, vivify_625
    new $P126, "Undef"
  vivify_625:
    $P127 = $P125."new"("conjseq" :named("rxtype"), $P126 :named("node"))
    set $P1763, $P127
.annotate 'line', 261
    set $P1768, param_1762
    unless_null $P1768, vivify_626
    $P1768 = root_new ['parrot';'Hash']
  vivify_626:
    set $P123, $P1768["termalt"]
    unless_null $P123, vivify_627
    new $P123, "Undef"
  vivify_627:
    defined $I101, $P123
    unless $I101, for_undef_628
    iter $P122, $P123
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop1772_handler
    push_eh $P125
  loop1772_test:
    unless $P122, loop1772_done
    shift $P124, $P122
  loop1772_redo:
    .const 'Sub' $P1770 = "402_1340317687.034" 
    capture_lex $P1770
    $P1770($P124)
  loop1772_next:
    goto loop1772_test
  loop1772_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop1772_next
    eq $P126, .CONTROL_LOOP_REDO, loop1772_redo
  loop1772_done:
    pop_eh 
  for_undef_628:
  if_1766_end:
.annotate 'line', 263
    set $P121, param_1762
    set $P122, $P1763
    unless_null $P122, vivify_631
    new $P122, "Undef"
  vivify_631:
    $P123 = $P121."!make"($P122)
.annotate 'line', 257
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1769"  :anon :subid("402_1340317687.034") :outer("130_1340317687.034")
    .param pmc param_1771
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 261
    .lex "$_", param_1771
    find_lex $P125, "$qast"
    unless_null $P125, vivify_629
    new $P125, "Undef"
  vivify_629:
    find_lex $P126, "$_"
    unless_null $P126, vivify_630
    new $P126, "Undef"
  vivify_630:
    $P127 = $P126."ast"()
    $P128 = $P125."push"($P127)
    .return ($P128)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "termalt" :anon :subid("131_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1774
    .param pmc param_1775
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 266
    .const 'Sub' $P1783 = "403_1340317687.034" 
    capture_lex $P1783
    .lex "self", param_1774
    .lex "$/", param_1775
.annotate 'line', 267
    new $P120, "Undef"
    set $P1776, $P120
    .lex "$qast", $P1776
    set $P1777, param_1775
    unless_null $P1777, vivify_632
    $P1777 = root_new ['parrot';'Hash']
  vivify_632:
    set $P1778, $P1777["termconj"]
    unless_null $P1778, vivify_633
    $P1778 = root_new ['parrot';'ResizablePMCArray']
  vivify_633:
    set $P121, $P1778[0]
    unless_null $P121, vivify_634
    new $P121, "Undef"
  vivify_634:
    $P122 = $P121."ast"()
    set $P1776, $P122
.annotate 'line', 268
    set $P1780, param_1775
    unless_null $P1780, vivify_635
    $P1780 = root_new ['parrot';'Hash']
  vivify_635:
    set $P121, $P1780["termconj"]
    unless_null $P121, vivify_636
    new $P121, "Undef"
  vivify_636:
    set $N100, $P121
    set $N101, 1
    isgt $I100, $N100, $N101
    unless $I100, if_1779_end
.annotate 'line', 269
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "QAST"
    get_who $P124, $P123
    set $P125, $P124["Regex"]
    set $P126, param_1775
    unless_null $P126, vivify_637
    new $P126, "Undef"
  vivify_637:
    $P127 = $P125."new"("alt" :named("rxtype"), $P126 :named("node"))
    set $P1776, $P127
.annotate 'line', 270
    set $P1781, param_1775
    unless_null $P1781, vivify_638
    $P1781 = root_new ['parrot';'Hash']
  vivify_638:
    set $P123, $P1781["termconj"]
    unless_null $P123, vivify_639
    new $P123, "Undef"
  vivify_639:
    defined $I101, $P123
    unless $I101, for_undef_640
    iter $P122, $P123
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop1785_handler
    push_eh $P125
  loop1785_test:
    unless $P122, loop1785_done
    shift $P124, $P122
  loop1785_redo:
    .const 'Sub' $P1783 = "403_1340317687.034" 
    capture_lex $P1783
    $P1783($P124)
  loop1785_next:
    goto loop1785_test
  loop1785_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop1785_next
    eq $P126, .CONTROL_LOOP_REDO, loop1785_redo
  loop1785_done:
    pop_eh 
  for_undef_640:
  if_1779_end:
.annotate 'line', 272
    set $P121, param_1775
    set $P122, $P1776
    unless_null $P122, vivify_643
    new $P122, "Undef"
  vivify_643:
    $P123 = $P121."!make"($P122)
.annotate 'line', 266
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1782"  :anon :subid("403_1340317687.034") :outer("131_1340317687.034")
    .param pmc param_1784
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 270
    .lex "$_", param_1784
    find_lex $P125, "$qast"
    unless_null $P125, vivify_641
    new $P125, "Undef"
  vivify_641:
    find_lex $P126, "$_"
    unless_null $P126, vivify_642
    new $P126, "Undef"
  vivify_642:
    $P127 = $P126."ast"()
    $P128 = $P125."push"($P127)
    .return ($P128)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "termconj" :anon :subid("132_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1787
    .param pmc param_1788
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 275
    .const 'Sub' $P1796 = "404_1340317687.034" 
    capture_lex $P1796
    .lex "self", param_1787
    .lex "$/", param_1788
.annotate 'line', 276
    new $P120, "Undef"
    set $P1789, $P120
    .lex "$qast", $P1789
    set $P1790, param_1788
    unless_null $P1790, vivify_644
    $P1790 = root_new ['parrot';'Hash']
  vivify_644:
    set $P1791, $P1790["termish"]
    unless_null $P1791, vivify_645
    $P1791 = root_new ['parrot';'ResizablePMCArray']
  vivify_645:
    set $P121, $P1791[0]
    unless_null $P121, vivify_646
    new $P121, "Undef"
  vivify_646:
    $P122 = $P121."ast"()
    set $P1789, $P122
.annotate 'line', 277
    set $P1793, param_1788
    unless_null $P1793, vivify_647
    $P1793 = root_new ['parrot';'Hash']
  vivify_647:
    set $P121, $P1793["termish"]
    unless_null $P121, vivify_648
    new $P121, "Undef"
  vivify_648:
    set $N100, $P121
    set $N101, 1
    isgt $I100, $N100, $N101
    unless $I100, if_1792_end
.annotate 'line', 278
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "QAST"
    get_who $P124, $P123
    set $P125, $P124["Regex"]
    set $P126, param_1788
    unless_null $P126, vivify_649
    new $P126, "Undef"
  vivify_649:
    $P127 = $P125."new"("conj" :named("rxtype"), $P126 :named("node"))
    set $P1789, $P127
.annotate 'line', 279
    set $P1794, param_1788
    unless_null $P1794, vivify_650
    $P1794 = root_new ['parrot';'Hash']
  vivify_650:
    set $P123, $P1794["termish"]
    unless_null $P123, vivify_651
    new $P123, "Undef"
  vivify_651:
    defined $I101, $P123
    unless $I101, for_undef_652
    iter $P122, $P123
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop1798_handler
    push_eh $P125
  loop1798_test:
    unless $P122, loop1798_done
    shift $P124, $P122
  loop1798_redo:
    .const 'Sub' $P1796 = "404_1340317687.034" 
    capture_lex $P1796
    $P1796($P124)
  loop1798_next:
    goto loop1798_test
  loop1798_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop1798_next
    eq $P126, .CONTROL_LOOP_REDO, loop1798_redo
  loop1798_done:
    pop_eh 
  for_undef_652:
  if_1792_end:
.annotate 'line', 281
    set $P121, param_1788
    set $P122, $P1789
    unless_null $P122, vivify_655
    new $P122, "Undef"
  vivify_655:
    $P123 = $P121."!make"($P122)
.annotate 'line', 275
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1795"  :anon :subid("404_1340317687.034") :outer("132_1340317687.034")
    .param pmc param_1797
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 279
    .lex "$_", param_1797
    find_lex $P125, "$qast"
    unless_null $P125, vivify_653
    new $P125, "Undef"
  vivify_653:
    find_lex $P126, "$_"
    unless_null $P126, vivify_654
    new $P126, "Undef"
  vivify_654:
    $P127 = $P126."ast"()
    $P128 = $P125."push"($P127)
    .return ($P128)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "termish" :anon :subid("133_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1800
    .param pmc param_1801
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 284
    .const 'Sub' $P1806 = "405_1340317687.034" 
    capture_lex $P1806
    .lex "self", param_1800
    .lex "$/", param_1801
.annotate 'line', 285
    new $P120, "Undef"
    set $P1802, $P120
    .lex "$qast", $P1802
.annotate 'line', 286
    new $P121, "Undef"
    set $P1803, $P121
    .lex "$lastlit", $P1803
.annotate 'line', 285
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "QAST"
    get_who $P124, $P123
    set $P125, $P124["Regex"]
    set $P126, param_1801
    unless_null $P126, vivify_656
    new $P126, "Undef"
  vivify_656:
    $P127 = $P125."new"("concat" :named("rxtype"), $P126 :named("node"))
    set $P1802, $P127
.annotate 'line', 286
    new $P122, "Float"
    assign $P122, 0
    set $P1803, $P122
.annotate 'line', 287
    set $P1804, param_1801
    unless_null $P1804, vivify_657
    $P1804 = root_new ['parrot';'Hash']
  vivify_657:
    set $P123, $P1804["noun"]
    unless_null $P123, vivify_658
    new $P123, "Undef"
  vivify_658:
    defined $I100, $P123
    unless $I100, for_undef_659
    iter $P122, $P123
    new $P127, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P127, loop1820_handler
    push_eh $P127
  loop1820_test:
    unless $P122, loop1820_done
    shift $P124, $P122
  loop1820_redo:
    .const 'Sub' $P1806 = "405_1340317687.034" 
    capture_lex $P1806
    $P1806($P124)
  loop1820_next:
    goto loop1820_test
  loop1820_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P128, exception, 'type'
    eq $P128, .CONTROL_LOOP_NEXT, loop1820_next
    eq $P128, .CONTROL_LOOP_REDO, loop1820_redo
  loop1820_done:
    pop_eh 
  for_undef_659:
.annotate 'line', 302
    set $P122, param_1801
    set $P123, $P1802
    unless_null $P123, vivify_677
    new $P123, "Undef"
  vivify_677:
    $P124 = $P122."!make"($P123)
.annotate 'line', 284
    .return ($P124)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1805"  :anon :subid("405_1340317687.034") :outer("133_1340317687.034")
    .param pmc param_1808
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 288
    new $P125, "Undef"
    set $P1807, $P125
    .lex "$ast", $P1807
    .lex "$_", param_1808
    find_lex $P126, "$_"
    unless_null $P126, vivify_660
    new $P126, "Undef"
  vivify_660:
    $P127 = $P126."ast"()
    set $P1807, $P127
.annotate 'line', 289
    set $P127, $P1807
    unless_null $P127, vivify_661
    new $P127, "Undef"
  vivify_661:
    if $P127, if_1809
    set $P126, $P127
    goto if_1809_end
  if_1809:
.annotate 'line', 290
    find_lex $P131, "$lastlit"
    unless_null $P131, vivify_662
    new $P131, "Undef"
  vivify_662:
    if $P131, if_1812
    set $P130, $P131
    goto if_1812_end
  if_1812:
    set $P132, $P1807
    unless_null $P132, vivify_663
    new $P132, "Undef"
  vivify_663:
    $S100 = $P132."rxtype"()
    iseq $I101, $S100, "literal"
    new $P130, 'Integer'
    set $P130, $I101
  if_1812_end:
    if $P130, if_1811
    set $P129, $P130
    goto if_1811_end
  if_1811:
.annotate 'line', 291
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "QAST"
    get_who $P135, $P134
    set $P136, $P135["Node"]
    set $P1813, $P1807
    unless_null $P1813, vivify_664
    $P1813 = root_new ['parrot';'ResizablePMCArray']
  vivify_664:
    set $P137, $P1813[0]
    unless_null $P137, vivify_665
    new $P137, "Undef"
  vivify_665:
    $P138 = $P136."ACCEPTS"($P137)
    isfalse $I102, $P138
    new $P129, 'Integer'
    set $P129, $I102
  if_1811_end:
    if $P129, if_1810
.annotate 'line', 295
    find_lex $P139, "$qast"
    unless_null $P139, vivify_666
    new $P139, "Undef"
  vivify_666:
    find_lex $P140, "$_"
    unless_null $P140, vivify_667
    new $P140, "Undef"
  vivify_667:
    $P142 = $P140."ast"()
    $P139."push"($P142)
.annotate 'line', 296
    set $P142, $P1807
    unless_null $P142, vivify_668
    new $P142, "Undef"
  vivify_668:
    $S101 = $P142."rxtype"()
    iseq $I103, $S101, "literal"
    if $I103, if_1818
    new $P140, 'Integer'
    set $P140, $I103
    goto if_1818_end
  if_1818:
.annotate 'line', 297
    get_hll_global $P143, "GLOBAL"
    nqp_get_package_through_who $P144, $P143, "QAST"
    get_who $P145, $P144
    set $P146, $P145["Node"]
    set $P1819, $P1807
    unless_null $P1819, vivify_669
    $P1819 = root_new ['parrot';'ResizablePMCArray']
  vivify_669:
    set $P147, $P1819[0]
    unless_null $P147, vivify_670
    new $P147, "Undef"
  vivify_670:
    $P148 = $P146."ACCEPTS"($P147)
    isfalse $I104, $P148
    new $P140, 'Integer'
    set $P140, $I104
  if_1818_end:
    if $P140, if_1817
    new $P150, "Float"
    assign $P150, 0
    set $P139, $P150
    goto if_1817_end
  if_1817:
    set $P149, $P1807
    unless_null $P149, vivify_671
    new $P149, "Undef"
  vivify_671:
    set $P139, $P149
  if_1817_end:
.annotate 'line', 298
    store_lex "$lastlit", $P139
.annotate 'line', 294
    set $P128, $P139
.annotate 'line', 291
    goto if_1810_end
  if_1810:
.annotate 'line', 292
    find_lex $P1814, "$lastlit"
    unless_null $P1814, vivify_672
    $P1814 = root_new ['parrot';'ResizablePMCArray']
  vivify_672:
    set $P139, $P1814[0]
    unless_null $P139, vivify_673
    new $P139, "Undef"
  vivify_673:
    set $P1815, $P1807
    unless_null $P1815, vivify_674
    $P1815 = root_new ['parrot';'ResizablePMCArray']
  vivify_674:
    set $P140, $P1815[0]
    unless_null $P140, vivify_675
    new $P140, "Undef"
  vivify_675:
    concat $P141, $P139, $P140
    find_lex $P1816, "$lastlit"
    unless_null $P1816, vivify_676
    $P1816 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$lastlit", $P1816
  vivify_676:
    set $P1816[0], $P141
.annotate 'line', 291
    set $P128, $P141
  if_1810_end:
.annotate 'line', 289
    set $P126, $P128
  if_1809_end:
.annotate 'line', 287
    .return ($P126)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "quantified_atom" :anon :subid("134_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1822
    .param pmc param_1823
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 305
    .const 'Sub' $P1829 = "406_1340317687.034" 
    capture_lex $P1829
    .lex "self", param_1822
    .lex "$/", param_1823
.annotate 'line', 306
    new $P120, "Undef"
    set $P1824, $P120
    .lex "$qast", $P1824
    set $P1825, param_1823
    unless_null $P1825, vivify_678
    $P1825 = root_new ['parrot';'Hash']
  vivify_678:
    set $P121, $P1825["atom"]
    unless_null $P121, vivify_679
    new $P121, "Undef"
  vivify_679:
    $P122 = $P121."ast"()
    set $P1824, $P122
.annotate 'line', 307
    set $P1827, param_1823
    unless_null $P1827, vivify_680
    $P1827 = root_new ['parrot';'Hash']
  vivify_680:
    set $P121, $P1827["quantifier"]
    unless_null $P121, vivify_681
    new $P121, "Undef"
  vivify_681:
    unless $P121, if_1826_end
    .const 'Sub' $P1829 = "406_1340317687.034" 
    capture_lex $P1829
    $P1829()
  if_1826_end:
.annotate 'line', 312
    set $P1834, param_1823
    unless_null $P1834, vivify_688
    $P1834 = root_new ['parrot';'Hash']
  vivify_688:
    set $P121, $P1834["separator"]
    unless_null $P121, vivify_689
    new $P121, "Undef"
  vivify_689:
    unless $P121, if_1833_end
.annotate 'line', 313
    set $P122, $P1824
    unless_null $P122, vivify_690
    new $P122, "Undef"
  vivify_690:
    $S100 = $P122."rxtype"()
    iseq $I100, $S100, "quant"
    if $I100, unless_1835_end
.annotate 'line', 314
    set $P123, param_1823
    unless_null $P123, vivify_691
    new $P123, "Undef"
  vivify_691:
    $P124 = $P123."CURSOR"()
    new $P125, "String"
    assign $P125, "'"
    set $P1836, param_1823
    unless_null $P1836, vivify_692
    $P1836 = root_new ['parrot';'Hash']
  vivify_692:
    set $P1837, $P1836["separator"]
    unless_null $P1837, vivify_693
    $P1837 = root_new ['parrot';'ResizablePMCArray']
  vivify_693:
    set $P1838, $P1837[0]
    unless_null $P1838, vivify_694
    $P1838 = root_new ['parrot';'Hash']
  vivify_694:
    set $P126, $P1838["septype"]
    unless_null $P126, vivify_695
    new $P126, "Undef"
  vivify_695:
    concat $P127, $P125, $P126
    concat $P128, $P127, "' many only be used immediately following a quantifier"
    $P124."panic"($P128)
  unless_1835_end:
.annotate 'line', 317
    set $P122, $P1824
    unless_null $P122, vivify_696
    new $P122, "Undef"
  vivify_696:
    set $P1839, param_1823
    unless_null $P1839, vivify_697
    $P1839 = root_new ['parrot';'Hash']
  vivify_697:
    set $P1840, $P1839["separator"]
    unless_null $P1840, vivify_698
    $P1840 = root_new ['parrot';'ResizablePMCArray']
  vivify_698:
    set $P123, $P1840[0]
    unless_null $P123, vivify_699
    new $P123, "Undef"
  vivify_699:
    $P124 = $P123."ast"()
    $P122."push"($P124)
.annotate 'line', 318
    set $P1842, param_1823
    unless_null $P1842, vivify_700
    $P1842 = root_new ['parrot';'Hash']
  vivify_700:
    set $P1843, $P1842["separator"]
    unless_null $P1843, vivify_701
    $P1843 = root_new ['parrot';'ResizablePMCArray']
  vivify_701:
    set $P1844, $P1843[0]
    unless_null $P1844, vivify_702
    $P1844 = root_new ['parrot';'Hash']
  vivify_702:
    set $P122, $P1844["septype"]
    unless_null $P122, vivify_703
    new $P122, "Undef"
  vivify_703:
    set $S100, $P122
    iseq $I100, $S100, "%%"
    unless $I100, if_1841_end
.annotate 'line', 319
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "QAST"
    get_who $P125, $P124
    set $P126, $P125["Regex"]
    set $P127, $P1824
    unless_null $P127, vivify_704
    new $P127, "Undef"
  vivify_704:
.annotate 'line', 320
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "QAST"
    get_who $P130, $P129
    set $P131, $P130["Regex"]
    set $P1845, param_1823
    unless_null $P1845, vivify_705
    $P1845 = root_new ['parrot';'Hash']
  vivify_705:
    set $P1846, $P1845["separator"]
    unless_null $P1846, vivify_706
    $P1846 = root_new ['parrot';'ResizablePMCArray']
  vivify_706:
    set $P132, $P1846[0]
    unless_null $P132, vivify_707
    new $P132, "Undef"
  vivify_707:
    $P133 = $P132."ast"()
    $P134 = $P131."new"($P133, "quant" :named("rxtype"), 0 :named("min"), 1 :named("max"))
    $P135 = $P126."new"($P127, $P134, "concat" :named("rxtype"))
.annotate 'line', 319
    set $P1824, $P135
  if_1841_end:
  if_1833_end:
.annotate 'line', 323
    set $P123, $P1824
    unless_null $P123, vivify_708
    new $P123, "Undef"
  vivify_708:
    if $P123, if_1849
    set $P122, $P123
    goto if_1849_end
  if_1849:
    set $P124, $P1824
    unless_null $P124, vivify_709
    new $P124, "Undef"
  vivify_709:
    $P125 = $P124."backtrack"()
    isfalse $I100, $P125
    new $P122, 'Integer'
    set $P122, $I100
  if_1849_end:
    if $P122, if_1848
    set $P121, $P122
    goto if_1848_end
  if_1848:
.annotate 'line', 324
    find_dynamic_lex $P129, "%*RX"
    unless_null $P129, vivify_710
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["%RX"]
    unless_null $P129, vivify_711
    die "Contextual %*RX not found"
  vivify_711:
  vivify_710:
    set $P130, $P129["r"]
    unless_null $P130, vivify_712
    new $P130, "Undef"
  vivify_712:
    unless $P130, unless_1850
    set $P126, $P130
    goto unless_1850_end
  unless_1850:
    set $P1852, param_1823
    unless_null $P1852, vivify_713
    $P1852 = root_new ['parrot';'Hash']
  vivify_713:
    set $P132, $P1852["backmod"]
    unless_null $P132, vivify_714
    new $P132, "Undef"
  vivify_714:
    if $P132, if_1851
    set $P131, $P132
    goto if_1851_end
  if_1851:
    set $P1853, param_1823
    unless_null $P1853, vivify_715
    $P1853 = root_new ['parrot';'Hash']
  vivify_715:
    set $P1854, $P1853["backmod"]
    unless_null $P1854, vivify_716
    $P1854 = root_new ['parrot';'ResizablePMCArray']
  vivify_716:
    set $P133, $P1854[0]
    unless_null $P133, vivify_717
    new $P133, "Undef"
  vivify_717:
    set $S100, $P133
    iseq $I101, $S100, ":"
    new $P131, 'Integer'
    set $P131, $I101
  if_1851_end:
    set $P126, $P131
  unless_1850_end:
    set $P121, $P126
  if_1848_end:
.annotate 'line', 323
    unless $P121, if_1847_end
    set $P134, $P1824
    unless_null $P134, vivify_718
    new $P134, "Undef"
  vivify_718:
    $P134."backtrack"("r")
  if_1847_end:
.annotate 'line', 325
    set $P121, param_1823
    set $P122, $P1824
    unless_null $P122, vivify_719
    new $P122, "Undef"
  vivify_719:
    $P123 = $P121."!make"($P122)
.annotate 'line', 305
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1828"  :anon :subid("406_1340317687.034") :outer("134_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 308
    new $P122, "Undef"
    set $P1830, $P122
    .lex "$ast", $P1830
    find_lex $P1831, "$/"
    unless_null $P1831, vivify_682
    $P1831 = root_new ['parrot';'Hash']
  vivify_682:
    set $P1832, $P1831["quantifier"]
    unless_null $P1832, vivify_683
    $P1832 = root_new ['parrot';'ResizablePMCArray']
  vivify_683:
    set $P123, $P1832[0]
    unless_null $P123, vivify_684
    new $P123, "Undef"
  vivify_684:
    $P124 = $P123."ast"()
    set $P1830, $P124
.annotate 'line', 309
    set $P123, $P1830
    unless_null $P123, vivify_685
    new $P123, "Undef"
  vivify_685:
    find_lex $P124, "$qast"
    unless_null $P124, vivify_686
    new $P124, "Undef"
  vivify_686:
    $P123."unshift"($P124)
.annotate 'line', 310
    set $P123, $P1830
    unless_null $P123, vivify_687
    new $P123, "Undef"
  vivify_687:
    store_lex "$qast", $P123
.annotate 'line', 307
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "separator" :anon :subid("135_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1856
    .param pmc param_1857
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 328
    .lex "self", param_1856
    .lex "$/", param_1857
.annotate 'line', 329
    set $P120, param_1857
    set $P1858, param_1857
    unless_null $P1858, vivify_720
    $P1858 = root_new ['parrot';'Hash']
  vivify_720:
    set $P121, $P1858["quantified_atom"]
    unless_null $P121, vivify_721
    new $P121, "Undef"
  vivify_721:
    $P122 = $P121."ast"()
    $P123 = $P120."!make"($P122)
.annotate 'line', 328
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "atom" :anon :subid("136_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1860
    .param pmc param_1861
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 332
    .const 'Sub' $P1866 = "407_1340317687.034" 
    capture_lex $P1866
    .lex "self", param_1860
    .lex "$/", param_1861
.annotate 'line', 333
    set $P1863, param_1861
    unless_null $P1863, vivify_722
    $P1863 = root_new ['parrot';'Hash']
  vivify_722:
    set $P121, $P1863["metachar"]
    unless_null $P121, vivify_723
    new $P121, "Undef"
  vivify_723:
    if $P121, if_1862
.annotate 'line', 336
    .const 'Sub' $P1866 = "407_1340317687.034" 
    capture_lex $P1866
    $P123 = $P1866()
    set $P120, $P123
.annotate 'line', 333
    goto if_1862_end
  if_1862:
.annotate 'line', 334
    set $P122, param_1861
    set $P1864, param_1861
    unless_null $P1864, vivify_731
    $P1864 = root_new ['parrot';'Hash']
  vivify_731:
    set $P123, $P1864["metachar"]
    unless_null $P123, vivify_732
    new $P123, "Undef"
  vivify_732:
    $P124 = $P123."ast"()
    $P125 = $P122."!make"($P124)
.annotate 'line', 333
    set $P120, $P125
  if_1862_end:
.annotate 'line', 332
    .return ($P120)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block1865"  :anon :subid("407_1340317687.034") :outer("136_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 337
    new $P122, "Undef"
    set $P1867, $P122
    .lex "$qast", $P1867
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "QAST"
    get_who $P126, $P124
    set $P127, $P126["Regex"]
    find_lex $P128, "$/"
    unless_null $P128, vivify_724
    new $P128, "Undef"
  vivify_724:
    set $S100, $P128
    find_lex $P129, "$/"
    unless_null $P129, vivify_725
    new $P129, "Undef"
  vivify_725:
    $P130 = $P127."new"($S100, "literal" :named("rxtype"), $P129 :named("node"))
    set $P1867, $P130
.annotate 'line', 338
    find_dynamic_lex $P126, "%*RX"
    unless_null $P126, vivify_726
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P126, $P124["%RX"]
    unless_null $P126, vivify_727
    die "Contextual %*RX not found"
  vivify_727:
  vivify_726:
    set $P127, $P126["i"]
    unless_null $P127, vivify_728
    new $P127, "Undef"
  vivify_728:
    unless $P127, if_1868_end
    set $P128, $P1867
    unless_null $P128, vivify_729
    new $P128, "Undef"
  vivify_729:
    $P128."subtype"("ignorecase")
  if_1868_end:
.annotate 'line', 339
    find_dynamic_lex $P123, "$/"
    set $P124, $P1867
    unless_null $P124, vivify_730
    new $P124, "Undef"
  vivify_730:
    $P126 = $P123."!make"($P124)
.annotate 'line', 336
    .return ($P126)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "quantifier:sym<*>" :anon :subid("137_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1870
    .param pmc param_1871
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 343
    .lex "self", param_1870
    .lex "$/", param_1871
.annotate 'line', 344
    new $P120, "Undef"
    set $P1872, $P120
    .lex "$qast", $P1872
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_1871
    unless_null $P125, vivify_733
    new $P125, "Undef"
  vivify_733:
    $P126 = $P124."new"("quant" :named("rxtype"), $P125 :named("node"))
    set $P1872, $P126
.annotate 'line', 345
    set $P121, param_1871
    set $P122, $P1872
    unless_null $P122, vivify_734
    new $P122, "Undef"
  vivify_734:
    set $P1873, param_1871
    unless_null $P1873, vivify_735
    $P1873 = root_new ['parrot';'Hash']
  vivify_735:
    set $P123, $P1873["backmod"]
    unless_null $P123, vivify_736
    new $P123, "Undef"
  vivify_736:
    $P124 = "backmod"($P122, $P123)
    $P125 = $P121."!make"($P124)
.annotate 'line', 343
    .return ($P125)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "quantifier:sym<+>" :anon :subid("138_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1875
    .param pmc param_1876
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 348
    .lex "self", param_1875
    .lex "$/", param_1876
.annotate 'line', 349
    new $P120, "Undef"
    set $P1877, $P120
    .lex "$qast", $P1877
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_1876
    unless_null $P125, vivify_737
    new $P125, "Undef"
  vivify_737:
    $P126 = $P124."new"("quant" :named("rxtype"), 1 :named("min"), $P125 :named("node"))
    set $P1877, $P126
.annotate 'line', 350
    set $P121, param_1876
    set $P122, $P1877
    unless_null $P122, vivify_738
    new $P122, "Undef"
  vivify_738:
    set $P1878, param_1876
    unless_null $P1878, vivify_739
    $P1878 = root_new ['parrot';'Hash']
  vivify_739:
    set $P123, $P1878["backmod"]
    unless_null $P123, vivify_740
    new $P123, "Undef"
  vivify_740:
    $P124 = "backmod"($P122, $P123)
    $P125 = $P121."!make"($P124)
.annotate 'line', 348
    .return ($P125)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "quantifier:sym<?>" :anon :subid("139_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1880
    .param pmc param_1881
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 353
    .lex "self", param_1880
    .lex "$/", param_1881
.annotate 'line', 354
    new $P120, "Undef"
    set $P1882, $P120
    .lex "$qast", $P1882
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_1881
    unless_null $P125, vivify_741
    new $P125, "Undef"
  vivify_741:
    $P126 = $P124."new"("quant" :named("rxtype"), 0 :named("min"), 1 :named("max"), $P125 :named("node"))
    set $P1882, $P126
.annotate 'line', 355
    set $P121, param_1881
    set $P122, $P1882
    unless_null $P122, vivify_742
    new $P122, "Undef"
  vivify_742:
    set $P1883, param_1881
    unless_null $P1883, vivify_743
    $P1883 = root_new ['parrot';'Hash']
  vivify_743:
    set $P123, $P1883["backmod"]
    unless_null $P123, vivify_744
    new $P123, "Undef"
  vivify_744:
    $P124 = "backmod"($P122, $P123)
    $P125 = $P121."!make"($P124)
.annotate 'line', 353
    .return ($P125)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "quantifier:sym<**>" :anon :subid("140_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1885
    .param pmc param_1886
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 358
    .lex "self", param_1885
    .lex "$/", param_1886
.annotate 'line', 359
    new $P120, "Undef"
    set $P1887, $P120
    .lex "$qast", $P1887
.annotate 'line', 358
    set $P121, $P1887
    unless_null $P121, vivify_745
    new $P121, "Undef"
  vivify_745:
.annotate 'line', 360
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P1888, param_1886
    unless_null $P1888, vivify_746
    $P1888 = root_new ['parrot';'Hash']
  vivify_746:
    set $P125, $P1888["min"]
    unless_null $P125, vivify_747
    new $P125, "Undef"
  vivify_747:
    set $N100, $P125
    set $P126, param_1886
    unless_null $P126, vivify_748
    new $P126, "Undef"
  vivify_748:
    $P127 = $P124."new"("quant" :named("rxtype"), $N100 :named("min"), $P126 :named("node"))
    set $P1887, $P127
.annotate 'line', 361
    set $P1890, param_1886
    unless_null $P1890, vivify_749
    $P1890 = root_new ['parrot';'Hash']
  vivify_749:
    set $P121, $P1890["max"]
    unless_null $P121, vivify_750
    new $P121, "Undef"
  vivify_750:
    isfalse $I100, $P121
    if $I100, if_1889
.annotate 'line', 362
    set $P1893, param_1886
    unless_null $P1893, vivify_751
    $P1893 = root_new ['parrot';'Hash']
  vivify_751:
    set $P1894, $P1893["max"]
    unless_null $P1894, vivify_752
    $P1894 = root_new ['parrot';'ResizablePMCArray']
  vivify_752:
    set $P122, $P1894[0]
    unless_null $P122, vivify_753
    new $P122, "Undef"
  vivify_753:
    set $S100, $P122
    isne $I101, $S100, "*"
    unless $I101, if_1892_end
    set $P123, $P1887
    unless_null $P123, vivify_754
    new $P123, "Undef"
  vivify_754:
    set $P1895, param_1886
    unless_null $P1895, vivify_755
    $P1895 = root_new ['parrot';'Hash']
  vivify_755:
    set $P1896, $P1895["max"]
    unless_null $P1896, vivify_756
    $P1896 = root_new ['parrot';'ResizablePMCArray']
  vivify_756:
    set $P124, $P1896[0]
    unless_null $P124, vivify_757
    new $P124, "Undef"
  vivify_757:
    set $N100, $P124
    $P123."max"($N100)
  if_1892_end:
    goto if_1889_end
  if_1889:
.annotate 'line', 361
    set $P122, $P1887
    unless_null $P122, vivify_758
    new $P122, "Undef"
  vivify_758:
    set $P1891, param_1886
    unless_null $P1891, vivify_759
    $P1891 = root_new ['parrot';'Hash']
  vivify_759:
    set $P123, $P1891["min"]
    unless_null $P123, vivify_760
    new $P123, "Undef"
  vivify_760:
    set $N100, $P123
    $P122."max"($N100)
  if_1889_end:
.annotate 'line', 363
    set $P121, param_1886
    set $P122, $P1887
    unless_null $P122, vivify_761
    new $P122, "Undef"
  vivify_761:
    set $P1897, param_1886
    unless_null $P1897, vivify_762
    $P1897 = root_new ['parrot';'Hash']
  vivify_762:
    set $P123, $P1897["backmod"]
    unless_null $P123, vivify_763
    new $P123, "Undef"
  vivify_763:
    $P124 = "backmod"($P122, $P123)
    $P125 = $P121."!make"($P124)
.annotate 'line', 358
    .return ($P125)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<ws>" :anon :subid("141_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1899
    .param pmc param_1900
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 366
    .lex "self", param_1899
    .lex "$/", param_1900
.annotate 'line', 367
    new $P120, "Undef"
    set $P1901, $P120
    .lex "$qast", $P1901
.annotate 'line', 368
    find_dynamic_lex $P124, "%*RX"
    unless_null $P124, vivify_764
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["%RX"]
    unless_null $P124, vivify_765
    die "Contextual %*RX not found"
  vivify_765:
  vivify_764:
    set $P125, $P124["s"]
    unless_null $P125, vivify_766
    new $P125, "Undef"
  vivify_766:
    if $P125, if_1902
    new $P137, "Float"
    assign $P137, 0
    set $P121, $P137
    goto if_1902_end
  if_1902:
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "QAST"
    get_who $P128, $P127
    set $P129, $P128["Regex"]
    get_hll_global $P130, "GLOBAL"
    nqp_get_package_through_who $P131, $P130, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Node"]
    $P134 = $P133."new"("ws")
    set $P135, param_1900
    unless_null $P135, vivify_767
    new $P135, "Undef"
  vivify_767:
    $P136 = $P129."new"($P134, "ws" :named("rxtype"), "method" :named("subtype"), $P135 :named("node"))
    set $P121, $P136
  if_1902_end:
    set $P1901, $P121
.annotate 'line', 370
    set $P121, param_1900
    set $P122, $P1901
    unless_null $P122, vivify_768
    new $P122, "Undef"
  vivify_768:
    $P123 = $P121."!make"($P122)
.annotate 'line', 366
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<[ ]>" :anon :subid("142_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1904
    .param pmc param_1905
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 373
    .lex "self", param_1904
    .lex "$/", param_1905
.annotate 'line', 374
    set $P120, param_1905
    set $P1906, param_1905
    unless_null $P1906, vivify_769
    $P1906 = root_new ['parrot';'Hash']
  vivify_769:
    set $P121, $P1906["nibbler"]
    unless_null $P121, vivify_770
    new $P121, "Undef"
  vivify_770:
    $P122 = $P121."ast"()
    $P123 = $P120."!make"($P122)
.annotate 'line', 373
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<( )>" :anon :subid("143_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1908
    .param pmc param_1909
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 377
    .lex "self", param_1908
    .lex "$/", param_1909
.annotate 'line', 378
    new $P120, "Undef"
    set $P1910, $P120
    .lex "$subpast", $P1910
.annotate 'line', 379
    new $P121, "Undef"
    set $P1911, $P121
    .lex "$qast", $P1911
.annotate 'line', 378
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Node"]
    set $P1912, param_1909
    unless_null $P1912, vivify_771
    $P1912 = root_new ['parrot';'Hash']
  vivify_771:
    set $P126, $P1912["nibbler"]
    unless_null $P126, vivify_772
    new $P126, "Undef"
  vivify_772:
    $P127 = $P126."ast"()
    $P128 = "buildsub"($P127, 1 :named("anon"))
    $P129 = $P125."new"($P128)
    set $P1910, $P129
.annotate 'line', 379
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "QAST"
    get_who $P124, $P123
    set $P125, $P124["Regex"]
    set $P126, $P1910
    unless_null $P126, vivify_773
    new $P126, "Undef"
  vivify_773:
    set $P1913, param_1909
    unless_null $P1913, vivify_774
    $P1913 = root_new ['parrot';'Hash']
  vivify_774:
    set $P127, $P1913["nibbler"]
    unless_null $P127, vivify_775
    new $P127, "Undef"
  vivify_775:
    $P128 = $P127."ast"()
    set $P129, param_1909
    unless_null $P129, vivify_776
    new $P129, "Undef"
  vivify_776:
    $P130 = $P125."new"($P126, $P128, "subrule" :named("rxtype"), "capture" :named("subtype"), $P129 :named("node"))
    set $P1911, $P130
.annotate 'line', 381
    set $P122, param_1909
    set $P123, $P1911
    unless_null $P123, vivify_777
    new $P123, "Undef"
  vivify_777:
    $P124 = $P122."!make"($P123)
.annotate 'line', 377
    .return ($P124)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<'>" :anon :subid("144_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1915
    .param pmc param_1916
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 384
    .lex "self", param_1915
    .lex "$/", param_1916
.annotate 'line', 385
    new $P120, "Undef"
    set $P1917, $P120
    .lex "$quote", $P1917
.annotate 'line', 387
    new $P121, "Undef"
    set $P1918, $P121
    .lex "$qast", $P1918
.annotate 'line', 385
    set $P1919, param_1916
    unless_null $P1919, vivify_778
    $P1919 = root_new ['parrot';'Hash']
  vivify_778:
    set $P122, $P1919["quote_EXPR"]
    unless_null $P122, vivify_779
    new $P122, "Undef"
  vivify_779:
    $P123 = $P122."ast"()
    set $P1917, $P123
.annotate 'line', 386
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Val"]
    set $P126, $P1917
    unless_null $P126, vivify_780
    new $P126, "Undef"
  vivify_780:
    $P127 = $P125."ACCEPTS"($P126)
    unless $P127, if_1920_end
    set $P128, $P1917
    unless_null $P128, vivify_781
    new $P128, "Undef"
  vivify_781:
    $P129 = $P128."value"()
    set $P1917, $P129
  if_1920_end:
.annotate 'line', 387
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "QAST"
    get_who $P124, $P123
    set $P125, $P124["Regex"]
    set $P126, $P1917
    unless_null $P126, vivify_782
    new $P126, "Undef"
  vivify_782:
    set $P127, param_1916
    unless_null $P127, vivify_783
    new $P127, "Undef"
  vivify_783:
    $P128 = $P125."new"($P126, "literal" :named("rxtype"), $P127 :named("node"))
    set $P1918, $P128
.annotate 'line', 388
    find_dynamic_lex $P124, "%*RX"
    unless_null $P124, vivify_784
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["%RX"]
    unless_null $P124, vivify_785
    die "Contextual %*RX not found"
  vivify_785:
  vivify_784:
    set $P125, $P124["i"]
    unless_null $P125, vivify_786
    new $P125, "Undef"
  vivify_786:
    unless $P125, if_1921_end
    set $P126, $P1918
    unless_null $P126, vivify_787
    new $P126, "Undef"
  vivify_787:
    $P126."subtype"("ignorecase")
  if_1921_end:
.annotate 'line', 389
    set $P122, param_1916
    set $P123, $P1918
    unless_null $P123, vivify_788
    new $P123, "Undef"
  vivify_788:
    $P124 = $P122."!make"($P123)
.annotate 'line', 384
    .return ($P124)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<\">" :anon :subid("145_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1923
    .param pmc param_1924
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 392
    .lex "self", param_1923
    .lex "$/", param_1924
.annotate 'line', 393
    new $P120, "Undef"
    set $P1925, $P120
    .lex "$quote", $P1925
.annotate 'line', 395
    new $P121, "Undef"
    set $P1926, $P121
    .lex "$qast", $P1926
.annotate 'line', 393
    set $P1927, param_1924
    unless_null $P1927, vivify_789
    $P1927 = root_new ['parrot';'Hash']
  vivify_789:
    set $P122, $P1927["quote_EXPR"]
    unless_null $P122, vivify_790
    new $P122, "Undef"
  vivify_790:
    $P123 = $P122."ast"()
    set $P1925, $P123
.annotate 'line', 394
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Val"]
    set $P126, $P1925
    unless_null $P126, vivify_791
    new $P126, "Undef"
  vivify_791:
    $P127 = $P125."ACCEPTS"($P126)
    unless $P127, if_1928_end
    set $P128, $P1925
    unless_null $P128, vivify_792
    new $P128, "Undef"
  vivify_792:
    $P129 = $P128."value"()
    set $P1925, $P129
  if_1928_end:
.annotate 'line', 395
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "QAST"
    get_who $P124, $P123
    set $P125, $P124["Regex"]
    set $P126, $P1925
    unless_null $P126, vivify_793
    new $P126, "Undef"
  vivify_793:
    set $P127, param_1924
    unless_null $P127, vivify_794
    new $P127, "Undef"
  vivify_794:
    $P128 = $P125."new"($P126, "literal" :named("rxtype"), $P127 :named("node"))
    set $P1926, $P128
.annotate 'line', 396
    find_dynamic_lex $P124, "%*RX"
    unless_null $P124, vivify_795
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["%RX"]
    unless_null $P124, vivify_796
    die "Contextual %*RX not found"
  vivify_796:
  vivify_795:
    set $P125, $P124["i"]
    unless_null $P125, vivify_797
    new $P125, "Undef"
  vivify_797:
    unless $P125, if_1929_end
    set $P126, $P1926
    unless_null $P126, vivify_798
    new $P126, "Undef"
  vivify_798:
    $P126."subtype"("ignorecase")
  if_1929_end:
.annotate 'line', 397
    set $P122, param_1924
    set $P123, $P1926
    unless_null $P123, vivify_799
    new $P123, "Undef"
  vivify_799:
    $P124 = $P122."!make"($P123)
.annotate 'line', 392
    .return ($P124)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<.>" :anon :subid("146_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1931
    .param pmc param_1932
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 400
    .lex "self", param_1931
    .lex "$/", param_1932
.annotate 'line', 401
    set $P120, param_1932
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_1932
    unless_null $P125, vivify_800
    new $P125, "Undef"
  vivify_800:
    $P126 = $P124."new"("cclass" :named("rxtype"), "." :named("subtype"), $P125 :named("node"))
    $P127 = $P120."!make"($P126)
.annotate 'line', 400
    .return ($P127)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<^>" :anon :subid("147_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1934
    .param pmc param_1935
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 404
    .lex "self", param_1934
    .lex "$/", param_1935
.annotate 'line', 405
    set $P120, param_1935
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_1935
    unless_null $P125, vivify_801
    new $P125, "Undef"
  vivify_801:
    $P126 = $P124."new"("anchor" :named("rxtype"), "bos" :named("subtype"), $P125 :named("node"))
    $P127 = $P120."!make"($P126)
.annotate 'line', 404
    .return ($P127)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<^^>" :anon :subid("148_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1937
    .param pmc param_1938
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 408
    .lex "self", param_1937
    .lex "$/", param_1938
.annotate 'line', 409
    set $P120, param_1938
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_1938
    unless_null $P125, vivify_802
    new $P125, "Undef"
  vivify_802:
    $P126 = $P124."new"("anchor" :named("rxtype"), "bol" :named("subtype"), $P125 :named("node"))
    $P127 = $P120."!make"($P126)
.annotate 'line', 408
    .return ($P127)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<$>" :anon :subid("149_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1940
    .param pmc param_1941
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 412
    .lex "self", param_1940
    .lex "$/", param_1941
.annotate 'line', 413
    set $P120, param_1941
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_1941
    unless_null $P125, vivify_803
    new $P125, "Undef"
  vivify_803:
    $P126 = $P124."new"("anchor" :named("rxtype"), "eos" :named("subtype"), $P125 :named("node"))
    $P127 = $P120."!make"($P126)
.annotate 'line', 412
    .return ($P127)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<$$>" :anon :subid("150_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1943
    .param pmc param_1944
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 416
    .lex "self", param_1943
    .lex "$/", param_1944
.annotate 'line', 417
    set $P120, param_1944
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_1944
    unless_null $P125, vivify_804
    new $P125, "Undef"
  vivify_804:
    $P126 = $P124."new"("anchor" :named("rxtype"), "eol" :named("subtype"), $P125 :named("node"))
    $P127 = $P120."!make"($P126)
.annotate 'line', 416
    .return ($P127)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<lwb>" :anon :subid("151_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1946
    .param pmc param_1947
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 420
    .lex "self", param_1946
    .lex "$/", param_1947
.annotate 'line', 421
    set $P120, param_1947
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_1947
    unless_null $P125, vivify_805
    new $P125, "Undef"
  vivify_805:
    $P126 = $P124."new"("anchor" :named("rxtype"), "lwb" :named("subtype"), $P125 :named("node"))
    $P127 = $P120."!make"($P126)
.annotate 'line', 420
    .return ($P127)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<rwb>" :anon :subid("152_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1949
    .param pmc param_1950
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 424
    .lex "self", param_1949
    .lex "$/", param_1950
.annotate 'line', 425
    set $P120, param_1950
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_1950
    unless_null $P125, vivify_806
    new $P125, "Undef"
  vivify_806:
    $P126 = $P124."new"("anchor" :named("rxtype"), "rwb" :named("subtype"), $P125 :named("node"))
    $P127 = $P120."!make"($P126)
.annotate 'line', 424
    .return ($P127)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<bs>" :anon :subid("153_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1952
    .param pmc param_1953
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 428
    .lex "self", param_1952
    .lex "$/", param_1953
.annotate 'line', 429
    set $P120, param_1953
    set $P1954, param_1953
    unless_null $P1954, vivify_807
    $P1954 = root_new ['parrot';'Hash']
  vivify_807:
    set $P121, $P1954["backslash"]
    unless_null $P121, vivify_808
    new $P121, "Undef"
  vivify_808:
    $P122 = $P121."ast"()
    $P123 = $P120."!make"($P122)
.annotate 'line', 428
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<assert>" :anon :subid("154_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1956
    .param pmc param_1957
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 432
    .lex "self", param_1956
    .lex "$/", param_1957
.annotate 'line', 433
    set $P120, param_1957
    set $P1958, param_1957
    unless_null $P1958, vivify_809
    $P1958 = root_new ['parrot';'Hash']
  vivify_809:
    set $P121, $P1958["assertion"]
    unless_null $P121, vivify_810
    new $P121, "Undef"
  vivify_810:
    $P122 = $P121."ast"()
    $P123 = $P120."!make"($P122)
.annotate 'line', 432
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<var>" :anon :subid("155_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1960
    .param pmc param_1961
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 436
    .lex "self", param_1960
    .lex "$/", param_1961
.annotate 'line', 437
    new $P120, "Undef"
    set $P1962, $P120
    .lex "$qast", $P1962
.annotate 'line', 438
    new $P121, "Undef"
    set $P1963, $P121
    .lex "$name", $P1963
.annotate 'line', 436
    set $P122, $P1962
    unless_null $P122, vivify_811
    new $P122, "Undef"
  vivify_811:
.annotate 'line', 438
    set $P1965, param_1961
    unless_null $P1965, vivify_812
    $P1965 = root_new ['parrot';'Hash']
  vivify_812:
    set $P123, $P1965["pos"]
    unless_null $P123, vivify_813
    new $P123, "Undef"
  vivify_813:
    if $P123, if_1964
    set $P1967, param_1961
    unless_null $P1967, vivify_814
    $P1967 = root_new ['parrot';'Hash']
  vivify_814:
    set $P125, $P1967["name"]
    unless_null $P125, vivify_815
    new $P125, "Undef"
  vivify_815:
    set $S100, $P125
    new $P122, 'String'
    set $P122, $S100
    goto if_1964_end
  if_1964:
    set $P1966, param_1961
    unless_null $P1966, vivify_816
    $P1966 = root_new ['parrot';'Hash']
  vivify_816:
    set $P124, $P1966["pos"]
    unless_null $P124, vivify_817
    new $P124, "Undef"
  vivify_817:
    set $N100, $P124
    new $P122, 'Float'
    set $P122, $N100
  if_1964_end:
    set $P1963, $P122
.annotate 'line', 439
    set $P1969, param_1961
    unless_null $P1969, vivify_818
    $P1969 = root_new ['parrot';'Hash']
  vivify_818:
    set $P122, $P1969["quantified_atom"]
    unless_null $P122, vivify_819
    new $P122, "Undef"
  vivify_819:
    if $P122, if_1968
.annotate 'line', 453
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "QAST"
    get_who $P125, $P124
    set $P126, $P125["Regex"]
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P130, $P129["Node"]
    set $P131, $P1963
    unless_null $P131, vivify_820
    new $P131, "Undef"
  vivify_820:
    $P132 = $P130."new"("!BACKREF", $P131)
    set $P133, param_1961
    unless_null $P133, vivify_821
    new $P133, "Undef"
  vivify_821:
    $P134 = $P126."new"($P132, "subrule" :named("rxtype"), "method" :named("subtype"), $P133 :named("node"))
    set $P1962, $P134
.annotate 'line', 452
    goto if_1968_end
  if_1968:
.annotate 'line', 440
    set $P1970, param_1961
    unless_null $P1970, vivify_822
    $P1970 = root_new ['parrot';'Hash']
  vivify_822:
    set $P1971, $P1970["quantified_atom"]
    unless_null $P1971, vivify_823
    $P1971 = root_new ['parrot';'ResizablePMCArray']
  vivify_823:
    set $P123, $P1971[0]
    unless_null $P123, vivify_824
    new $P123, "Undef"
  vivify_824:
    $P124 = $P123."ast"()
    set $P1962, $P124
.annotate 'line', 441
    set $P124, $P1962
    unless_null $P124, vivify_825
    new $P124, "Undef"
  vivify_825:
    $S100 = $P124."rxtype"()
    iseq $I100, $S100, "quant"
    if $I100, if_1973
    new $P123, 'Integer'
    set $P123, $I100
    goto if_1973_end
  if_1973:
    set $P1974, $P1962
    unless_null $P1974, vivify_826
    $P1974 = root_new ['parrot';'ResizablePMCArray']
  vivify_826:
    set $P125, $P1974[0]
    unless_null $P125, vivify_827
    new $P125, "Undef"
  vivify_827:
    $S101 = $P125."rxtype"()
    iseq $I101, $S101, "subrule"
    new $P123, 'Integer'
    set $P123, $I101
  if_1973_end:
    if $P123, if_1972
.annotate 'line', 444
    set $P126, $P1962
    unless_null $P126, vivify_828
    new $P126, "Undef"
  vivify_828:
    $S102 = $P126."rxtype"()
    iseq $I102, $S102, "subrule"
    if $I102, if_1976
.annotate 'line', 448
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "QAST"
    get_who $P129, $P128
    set $P130, $P129["Regex"]
    set $P131, $P1962
    unless_null $P131, vivify_829
    new $P131, "Undef"
  vivify_829:
    set $P132, $P1963
    unless_null $P132, vivify_830
    new $P132, "Undef"
  vivify_830:
    set $P133, param_1961
    unless_null $P133, vivify_831
    new $P133, "Undef"
  vivify_831:
    $P134 = $P130."new"($P131, $P132 :named("name"), "subcapture" :named("rxtype"), $P133 :named("node"))
    set $P1962, $P134
.annotate 'line', 447
    goto if_1976_end
  if_1976:
.annotate 'line', 445
    set $P127, param_1960
    nqp_decontainerize $P128, $P127
    set $P129, $P1962
    unless_null $P129, vivify_832
    new $P129, "Undef"
  vivify_832:
    set $P130, $P1963
    unless_null $P130, vivify_833
    new $P130, "Undef"
  vivify_833:
    $P128."subrule_alias"($P129, $P130)
  if_1976_end:
.annotate 'line', 444
    goto if_1972_end
  if_1972:
.annotate 'line', 442
    set $P126, param_1960
    nqp_decontainerize $P127, $P126
    set $P1975, $P1962
    unless_null $P1975, vivify_834
    $P1975 = root_new ['parrot';'ResizablePMCArray']
  vivify_834:
    set $P128, $P1975[0]
    unless_null $P128, vivify_835
    new $P128, "Undef"
  vivify_835:
    set $P129, $P1963
    unless_null $P129, vivify_836
    new $P129, "Undef"
  vivify_836:
    $P127."subrule_alias"($P128, $P129)
  if_1972_end:
  if_1968_end:
.annotate 'line', 456
    set $P122, param_1961
    set $P123, $P1962
    unless_null $P123, vivify_837
    new $P123, "Undef"
  vivify_837:
    $P124 = $P122."!make"($P123)
.annotate 'line', 436
    .return ($P124)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "metachar:sym<~>" :anon :subid("156_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1978
    .param pmc param_1979
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 459
    .lex "self", param_1978
    .lex "$/", param_1979
.annotate 'line', 460
    set $P120, param_1979
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
.annotate 'line', 461
    set $P1980, param_1979
    unless_null $P1980, vivify_838
    $P1980 = root_new ['parrot';'Hash']
  vivify_838:
    set $P125, $P1980["EXPR"]
    unless_null $P125, vivify_839
    new $P125, "Undef"
  vivify_839:
    $P126 = $P125."ast"()
.annotate 'line', 462
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "QAST"
    get_who $P129, $P128
    set $P130, $P129["Regex"]
.annotate 'line', 463
    set $P1981, param_1979
    unless_null $P1981, vivify_840
    $P1981 = root_new ['parrot';'Hash']
  vivify_840:
    set $P131, $P1981["GOAL"]
    unless_null $P131, vivify_841
    new $P131, "Undef"
  vivify_841:
    $P132 = $P131."ast"()
.annotate 'line', 464
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "QAST"
    get_who $P135, $P134
    set $P136, $P135["Regex"]
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Node"]
    set $P1982, param_1979
    unless_null $P1982, vivify_842
    $P1982 = root_new ['parrot';'Hash']
  vivify_842:
    set $P141, $P1982["GOAL"]
    unless_null $P141, vivify_843
    new $P141, "Undef"
  vivify_843:
    set $S100, $P141
    $P142 = $P140."new"("FAILGOAL", $S100)
    $P143 = $P136."new"($P142, "subrule" :named("rxtype"), "method" :named("subtype"))
    $P144 = $P130."new"($P132, $P143, "altseq" :named("rxtype"))
.annotate 'line', 462
    $P145 = $P124."new"($P126, $P144, "concat" :named("rxtype"))
.annotate 'line', 460
    $P146 = $P120."!make"($P145)
.annotate 'line', 459
    .return ($P146)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<s>" :anon :subid("157_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1984
    .param pmc param_1985
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 472
    .lex "self", param_1984
    .lex "$/", param_1985
.annotate 'line', 473
    set $P120, param_1985
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
.annotate 'line', 474
    set $P1987, param_1985
    unless_null $P1987, vivify_844
    $P1987 = root_new ['parrot';'Hash']
  vivify_844:
    set $P126, $P1987["sym"]
    unless_null $P126, vivify_845
    new $P126, "Undef"
  vivify_845:
    set $S100, $P126
    iseq $I100, $S100, "n"
    if $I100, if_1986
    set $P1988, param_1985
    unless_null $P1988, vivify_846
    $P1988 = root_new ['parrot';'Hash']
  vivify_846:
    set $P128, $P1988["sym"]
    unless_null $P128, vivify_847
    new $P128, "Undef"
  vivify_847:
    set $S101, $P128
    new $P125, 'String'
    set $P125, $S101
    goto if_1986_end
  if_1986:
    new $P127, "String"
    assign $P127, "nl"
    set $P125, $P127
  if_1986_end:
.annotate 'line', 475
    set $P1989, param_1985
    unless_null $P1989, vivify_848
    $P1989 = root_new ['parrot';'Hash']
  vivify_848:
    set $P129, $P1989["sym"]
    unless_null $P129, vivify_849
    new $P129, "Undef"
  vivify_849:
    set $S102, $P129
    isle $I101, $S102, "Z"
.annotate 'line', 473
    set $P130, param_1985
    unless_null $P130, vivify_850
    new $P130, "Undef"
  vivify_850:
    $P131 = $P124."new"(".CCLASS_WHITESPACE", "cclass" :named("rxtype"), $P125 :named("subtype"), $I101 :named("negate"), $P130 :named("node"))
    $P132 = $P120."!make"($P131)
.annotate 'line', 472
    .return ($P132)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<b>" :anon :subid("158_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1991
    .param pmc param_1992
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 478
    .lex "self", param_1991
    .lex "$/", param_1992
.annotate 'line', 479
    new $P120, "Undef"
    set $P1993, $P120
    .lex "$qast", $P1993
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
.annotate 'line', 480
    set $P1994, param_1992
    unless_null $P1994, vivify_851
    $P1994 = root_new ['parrot';'Hash']
  vivify_851:
    set $P125, $P1994["sym"]
    unless_null $P125, vivify_852
    new $P125, "Undef"
  vivify_852:
    set $S100, $P125
    iseq $I100, $S100, "B"
.annotate 'line', 479
    set $P126, param_1992
    unless_null $P126, vivify_853
    new $P126, "Undef"
  vivify_853:
    $P127 = $P124."new"("\b", "enumcharlist" :named("rxtype"), $I100 :named("negate"), $P126 :named("node"))
    set $P1993, $P127
.annotate 'line', 481
    set $P121, param_1992
    set $P122, $P1993
    unless_null $P122, vivify_854
    new $P122, "Undef"
  vivify_854:
    $P123 = $P121."!make"($P122)
.annotate 'line', 478
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<e>" :anon :subid("159_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_1996
    .param pmc param_1997
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 484
    .lex "self", param_1996
    .lex "$/", param_1997
.annotate 'line', 485
    new $P120, "Undef"
    set $P1998, $P120
    .lex "$qast", $P1998
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
.annotate 'line', 486
    set $P1999, param_1997
    unless_null $P1999, vivify_855
    $P1999 = root_new ['parrot';'Hash']
  vivify_855:
    set $P125, $P1999["sym"]
    unless_null $P125, vivify_856
    new $P125, "Undef"
  vivify_856:
    set $S100, $P125
    iseq $I100, $S100, "E"
.annotate 'line', 485
    set $P126, param_1997
    unless_null $P126, vivify_857
    new $P126, "Undef"
  vivify_857:
    $P127 = $P124."new"("\e", "enumcharlist" :named("rxtype"), $I100 :named("negate"), $P126 :named("node"))
    set $P1998, $P127
.annotate 'line', 487
    set $P121, param_1997
    set $P122, $P1998
    unless_null $P122, vivify_858
    new $P122, "Undef"
  vivify_858:
    $P123 = $P121."!make"($P122)
.annotate 'line', 484
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<f>" :anon :subid("160_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2001
    .param pmc param_2002
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 490
    .lex "self", param_2001
    .lex "$/", param_2002
.annotate 'line', 491
    new $P120, "Undef"
    set $P2003, $P120
    .lex "$qast", $P2003
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
.annotate 'line', 492
    set $P2004, param_2002
    unless_null $P2004, vivify_859
    $P2004 = root_new ['parrot';'Hash']
  vivify_859:
    set $P125, $P2004["sym"]
    unless_null $P125, vivify_860
    new $P125, "Undef"
  vivify_860:
    set $S100, $P125
    iseq $I100, $S100, "F"
.annotate 'line', 491
    set $P126, param_2002
    unless_null $P126, vivify_861
    new $P126, "Undef"
  vivify_861:
    $P127 = $P124."new"("\f", "enumcharlist" :named("rxtype"), $I100 :named("negate"), $P126 :named("node"))
    set $P2003, $P127
.annotate 'line', 493
    set $P121, param_2002
    set $P122, $P2003
    unless_null $P122, vivify_862
    new $P122, "Undef"
  vivify_862:
    $P123 = $P121."!make"($P122)
.annotate 'line', 490
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<h>" :anon :subid("161_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2006
    .param pmc param_2007
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 496
    .lex "self", param_2006
    .lex "$/", param_2007
.annotate 'line', 497
    new $P120, "Undef"
    set $P2008, $P120
    .lex "$qast", $P2008
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
.annotate 'line', 498
    set $P2009, param_2007
    unless_null $P2009, vivify_863
    $P2009 = root_new ['parrot';'Hash']
  vivify_863:
    set $P125, $P2009["sym"]
    unless_null $P125, vivify_864
    new $P125, "Undef"
  vivify_864:
    set $S100, $P125
    iseq $I100, $S100, "H"
.annotate 'line', 497
    set $P126, param_2007
    unless_null $P126, vivify_865
    new $P126, "Undef"
  vivify_865:
    $P127 = $P124."new"(unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I100 :named("negate"), $P126 :named("node"))
    set $P2008, $P127
.annotate 'line', 499
    set $P121, param_2007
    set $P122, $P2008
    unless_null $P122, vivify_866
    new $P122, "Undef"
  vivify_866:
    $P123 = $P121."!make"($P122)
.annotate 'line', 496
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<r>" :anon :subid("162_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2011
    .param pmc param_2012
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 502
    .lex "self", param_2011
    .lex "$/", param_2012
.annotate 'line', 503
    new $P120, "Undef"
    set $P2013, $P120
    .lex "$qast", $P2013
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
.annotate 'line', 504
    set $P2014, param_2012
    unless_null $P2014, vivify_867
    $P2014 = root_new ['parrot';'Hash']
  vivify_867:
    set $P125, $P2014["sym"]
    unless_null $P125, vivify_868
    new $P125, "Undef"
  vivify_868:
    set $S100, $P125
    iseq $I100, $S100, "R"
.annotate 'line', 503
    set $P126, param_2012
    unless_null $P126, vivify_869
    new $P126, "Undef"
  vivify_869:
    $P127 = $P124."new"("\r", "enumcharlist" :named("rxtype"), $I100 :named("negate"), $P126 :named("node"))
    set $P2013, $P127
.annotate 'line', 505
    set $P121, param_2012
    set $P122, $P2013
    unless_null $P122, vivify_870
    new $P122, "Undef"
  vivify_870:
    $P123 = $P121."!make"($P122)
.annotate 'line', 502
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<t>" :anon :subid("163_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2016
    .param pmc param_2017
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 508
    .lex "self", param_2016
    .lex "$/", param_2017
.annotate 'line', 509
    new $P120, "Undef"
    set $P2018, $P120
    .lex "$qast", $P2018
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
.annotate 'line', 510
    set $P2019, param_2017
    unless_null $P2019, vivify_871
    $P2019 = root_new ['parrot';'Hash']
  vivify_871:
    set $P125, $P2019["sym"]
    unless_null $P125, vivify_872
    new $P125, "Undef"
  vivify_872:
    set $S100, $P125
    iseq $I100, $S100, "T"
.annotate 'line', 509
    set $P126, param_2017
    unless_null $P126, vivify_873
    new $P126, "Undef"
  vivify_873:
    $P127 = $P124."new"("\t", "enumcharlist" :named("rxtype"), $I100 :named("negate"), $P126 :named("node"))
    set $P2018, $P127
.annotate 'line', 511
    set $P121, param_2017
    set $P122, $P2018
    unless_null $P122, vivify_874
    new $P122, "Undef"
  vivify_874:
    $P123 = $P121."!make"($P122)
.annotate 'line', 508
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<v>" :anon :subid("164_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2021
    .param pmc param_2022
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 514
    .lex "self", param_2021
    .lex "$/", param_2022
.annotate 'line', 515
    new $P120, "Undef"
    set $P2023, $P120
    .lex "$qast", $P2023
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
.annotate 'line', 517
    set $P2024, param_2022
    unless_null $P2024, vivify_875
    $P2024 = root_new ['parrot';'Hash']
  vivify_875:
    set $P125, $P2024["sym"]
    unless_null $P125, vivify_876
    new $P125, "Undef"
  vivify_876:
    set $S100, $P125
    iseq $I100, $S100, "V"
.annotate 'line', 515
    set $P126, param_2022
    unless_null $P126, vivify_877
    new $P126, "Undef"
  vivify_877:
    $P127 = $P124."new"(unicode:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I100 :named("negate"), $P126 :named("node"))
    set $P2023, $P127
.annotate 'line', 518
    set $P121, param_2022
    set $P122, $P2023
    unless_null $P122, vivify_878
    new $P122, "Undef"
  vivify_878:
    $P123 = $P121."!make"($P122)
.annotate 'line', 514
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<o>" :anon :subid("165_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2026
    .param pmc param_2027
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 521
    .lex "self", param_2026
    .lex "$/", param_2027
.annotate 'line', 522
    new $P120, "Undef"
    set $P2028, $P120
    .lex "$octlit", $P2028
.annotate 'line', 523
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "HLL"
    get_who $P123, $P122
    set $P124, $P123["Actions"]
    set $P2030, param_2027
    unless_null $P2030, vivify_879
    $P2030 = root_new ['parrot';'Hash']
  vivify_879:
    set $P126, $P2030["octint"]
    unless_null $P126, vivify_880
    new $P126, "Undef"
  vivify_880:
    unless $P126, unless_2029
    set $P125, $P126
    goto unless_2029_end
  unless_2029:
    set $P2031, param_2027
    unless_null $P2031, vivify_881
    $P2031 = root_new ['parrot';'Hash']
  vivify_881:
    set $P2032, $P2031["octints"]
    unless_null $P2032, vivify_882
    $P2032 = root_new ['parrot';'Hash']
  vivify_882:
    set $P127, $P2032["octint"]
    unless_null $P127, vivify_883
    new $P127, "Undef"
  vivify_883:
    set $P125, $P127
  unless_2029_end:
    $P128 = $P124."ints_to_string"($P125)
    set $P2028, $P128
.annotate 'line', 524
    set $P121, param_2027
    set $P2034, param_2027
    unless_null $P2034, vivify_884
    $P2034 = root_new ['parrot';'Hash']
  vivify_884:
    set $P123, $P2034["sym"]
    unless_null $P123, vivify_885
    new $P123, "Undef"
  vivify_885:
    set $S100, $P123
    iseq $I100, $S100, "O"
    if $I100, if_2033
.annotate 'line', 527
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "QAST"
    get_who $P133, $P132
    set $P134, $P133["Regex"]
    set $P135, $P2028
    unless_null $P135, vivify_886
    new $P135, "Undef"
  vivify_886:
    set $P136, param_2027
    unless_null $P136, vivify_887
    new $P136, "Undef"
  vivify_887:
    $P137 = $P134."new"($P135, "literal" :named("rxtype"), $P136 :named("node"))
    set $P122, $P137
.annotate 'line', 524
    goto if_2033_end
  if_2033:
.annotate 'line', 525
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "QAST"
    get_who $P126, $P125
    set $P127, $P126["Regex"]
    set $P128, $P2028
    unless_null $P128, vivify_888
    new $P128, "Undef"
  vivify_888:
    set $P129, param_2027
    unless_null $P129, vivify_889
    new $P129, "Undef"
  vivify_889:
    $P130 = $P127."new"($P128, "enumcharlist" :named("rxtype"), 1 :named("negate"), $P129 :named("node"))
    set $P122, $P130
  if_2033_end:
    $P138 = $P121."!make"($P122)
.annotate 'line', 521
    .return ($P138)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<x>" :anon :subid("166_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2036
    .param pmc param_2037
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 530
    .lex "self", param_2036
    .lex "$/", param_2037
.annotate 'line', 531
    new $P120, "Undef"
    set $P2038, $P120
    .lex "$hexlit", $P2038
.annotate 'line', 532
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "HLL"
    get_who $P123, $P122
    set $P124, $P123["Actions"]
    set $P2040, param_2037
    unless_null $P2040, vivify_890
    $P2040 = root_new ['parrot';'Hash']
  vivify_890:
    set $P126, $P2040["hexint"]
    unless_null $P126, vivify_891
    new $P126, "Undef"
  vivify_891:
    unless $P126, unless_2039
    set $P125, $P126
    goto unless_2039_end
  unless_2039:
    set $P2041, param_2037
    unless_null $P2041, vivify_892
    $P2041 = root_new ['parrot';'Hash']
  vivify_892:
    set $P2042, $P2041["hexints"]
    unless_null $P2042, vivify_893
    $P2042 = root_new ['parrot';'Hash']
  vivify_893:
    set $P127, $P2042["hexint"]
    unless_null $P127, vivify_894
    new $P127, "Undef"
  vivify_894:
    set $P125, $P127
  unless_2039_end:
    $P128 = $P124."ints_to_string"($P125)
    set $P2038, $P128
.annotate 'line', 533
    set $P121, param_2037
    set $P2044, param_2037
    unless_null $P2044, vivify_895
    $P2044 = root_new ['parrot';'Hash']
  vivify_895:
    set $P123, $P2044["sym"]
    unless_null $P123, vivify_896
    new $P123, "Undef"
  vivify_896:
    set $S100, $P123
    iseq $I100, $S100, "X"
    if $I100, if_2043
.annotate 'line', 536
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "QAST"
    get_who $P133, $P132
    set $P134, $P133["Regex"]
    set $P135, $P2038
    unless_null $P135, vivify_897
    new $P135, "Undef"
  vivify_897:
    set $P136, param_2037
    unless_null $P136, vivify_898
    new $P136, "Undef"
  vivify_898:
    $P137 = $P134."new"($P135, "literal" :named("rxtype"), $P136 :named("node"))
    set $P122, $P137
.annotate 'line', 533
    goto if_2043_end
  if_2043:
.annotate 'line', 534
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "QAST"
    get_who $P126, $P125
    set $P127, $P126["Regex"]
    set $P128, $P2038
    unless_null $P128, vivify_899
    new $P128, "Undef"
  vivify_899:
    set $P129, param_2037
    unless_null $P129, vivify_900
    new $P129, "Undef"
  vivify_900:
    $P130 = $P127."new"($P128, "enumcharlist" :named("rxtype"), 1 :named("negate"), $P129 :named("node"))
    set $P122, $P130
  if_2043_end:
    $P138 = $P121."!make"($P122)
.annotate 'line', 530
    .return ($P138)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<c>" :anon :subid("167_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2046
    .param pmc param_2047
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 539
    .lex "self", param_2046
    .lex "$/", param_2047
.annotate 'line', 540
    set $P120, param_2047
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P2048, param_2047
    unless_null $P2048, vivify_901
    $P2048 = root_new ['parrot';'Hash']
  vivify_901:
    set $P125, $P2048["charspec"]
    unless_null $P125, vivify_902
    new $P125, "Undef"
  vivify_902:
    $P126 = $P125."ast"()
    set $P127, param_2047
    unless_null $P127, vivify_903
    new $P127, "Undef"
  vivify_903:
    $P128 = $P124."new"($P126, "literal" :named("rxtype"), $P127 :named("node"))
    $P129 = $P120."!make"($P128)
.annotate 'line', 539
    .return ($P129)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "backslash:sym<misc>" :anon :subid("168_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2050
    .param pmc param_2051
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 543
    .lex "self", param_2050
    .lex "$/", param_2051
.annotate 'line', 544
    new $P120, "Undef"
    set $P2052, $P120
    .lex "$qast", $P2052
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    set $P125, param_2051
    unless_null $P125, vivify_904
    new $P125, "Undef"
  vivify_904:
    set $S100, $P125
    set $P126, param_2051
    unless_null $P126, vivify_905
    new $P126, "Undef"
  vivify_905:
    $P127 = $P124."new"($S100, "literal" :named("rxtype"), $P126 :named("node"))
    set $P2052, $P127
.annotate 'line', 545
    set $P121, param_2051
    set $P122, $P2052
    unless_null $P122, vivify_906
    new $P122, "Undef"
  vivify_906:
    $P123 = $P121."!make"($P122)
.annotate 'line', 543
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "assertion:sym<?>" :anon :subid("169_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2054
    .param pmc param_2055
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 548
    .lex "self", param_2054
    .lex "$/", param_2055
.annotate 'line', 549
    new $P120, "Undef"
    set $P2056, $P120
    .lex "$qast", $P2056
.annotate 'line', 548
    set $P121, $P2056
    unless_null $P121, vivify_907
    new $P121, "Undef"
  vivify_907:
.annotate 'line', 550
    set $P2058, param_2055
    unless_null $P2058, vivify_908
    $P2058 = root_new ['parrot';'Hash']
  vivify_908:
    set $P121, $P2058["assertion"]
    unless_null $P121, vivify_909
    new $P121, "Undef"
  vivify_909:
    if $P121, if_2057
.annotate 'line', 555
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "QAST"
    get_who $P124, $P123
    set $P125, $P124["Regex"]
    set $P126, param_2055
    unless_null $P126, vivify_910
    new $P126, "Undef"
  vivify_910:
    $P127 = $P125."new"("anchor" :named("rxtype"), "pass" :named("subtype"), $P126 :named("node"))
    set $P2056, $P127
.annotate 'line', 554
    goto if_2057_end
  if_2057:
.annotate 'line', 551
    set $P2059, param_2055
    unless_null $P2059, vivify_911
    $P2059 = root_new ['parrot';'Hash']
  vivify_911:
    set $P122, $P2059["assertion"]
    unless_null $P122, vivify_912
    new $P122, "Undef"
  vivify_912:
    $P123 = $P122."ast"()
    set $P2056, $P123
.annotate 'line', 552
    set $P122, $P2056
    unless_null $P122, vivify_913
    new $P122, "Undef"
  vivify_913:
    $P122."subtype"("zerowidth")
  if_2057_end:
.annotate 'line', 557
    set $P121, param_2055
    set $P122, $P2056
    unless_null $P122, vivify_914
    new $P122, "Undef"
  vivify_914:
    $P123 = $P121."!make"($P122)
.annotate 'line', 548
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "assertion:sym<!>" :anon :subid("170_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2061
    .param pmc param_2062
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 560
    .lex "self", param_2061
    .lex "$/", param_2062
.annotate 'line', 561
    new $P120, "Undef"
    set $P2063, $P120
    .lex "$qast", $P2063
.annotate 'line', 560
    set $P121, $P2063
    unless_null $P121, vivify_915
    new $P121, "Undef"
  vivify_915:
.annotate 'line', 562
    set $P2065, param_2062
    unless_null $P2065, vivify_916
    $P2065 = root_new ['parrot';'Hash']
  vivify_916:
    set $P121, $P2065["assertion"]
    unless_null $P121, vivify_917
    new $P121, "Undef"
  vivify_917:
    if $P121, if_2064
.annotate 'line', 568
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "QAST"
    get_who $P124, $P123
    set $P125, $P124["Regex"]
    set $P126, param_2062
    unless_null $P126, vivify_918
    new $P126, "Undef"
  vivify_918:
    $P127 = $P125."new"("anchor" :named("rxtype"), "fail" :named("subtype"), $P126 :named("node"))
    set $P2063, $P127
.annotate 'line', 567
    goto if_2064_end
  if_2064:
.annotate 'line', 563
    set $P2066, param_2062
    unless_null $P2066, vivify_919
    $P2066 = root_new ['parrot';'Hash']
  vivify_919:
    set $P122, $P2066["assertion"]
    unless_null $P122, vivify_920
    new $P122, "Undef"
  vivify_920:
    $P123 = $P122."ast"()
    set $P2063, $P123
.annotate 'line', 564
    set $P122, $P2063
    unless_null $P122, vivify_921
    new $P122, "Undef"
  vivify_921:
    set $P123, $P2063
    unless_null $P123, vivify_922
    new $P123, "Undef"
  vivify_922:
    $P124 = $P123."negate"()
    isfalse $I100, $P124
    $P122."negate"($I100)
.annotate 'line', 565
    set $P122, $P2063
    unless_null $P122, vivify_923
    new $P122, "Undef"
  vivify_923:
    $P122."subtype"("zerowidth")
  if_2064_end:
.annotate 'line', 570
    set $P121, param_2062
    set $P122, $P2063
    unless_null $P122, vivify_924
    new $P122, "Undef"
  vivify_924:
    $P123 = $P121."!make"($P122)
.annotate 'line', 560
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "assertion:sym<|>" :anon :subid("171_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2068
    .param pmc param_2069
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 573
    .lex "self", param_2068
    .lex "$/", param_2069
.annotate 'line', 574
    new $P120, "Undef"
    set $P2070, $P120
    .lex "$qast", $P2070
.annotate 'line', 575
    new $P121, "Undef"
    set $P2071, $P121
    .lex "$name", $P2071
.annotate 'line', 573
    set $P122, $P2070
    unless_null $P122, vivify_925
    new $P122, "Undef"
  vivify_925:
.annotate 'line', 575
    set $P2072, param_2069
    unless_null $P2072, vivify_926
    $P2072 = root_new ['parrot';'Hash']
  vivify_926:
    set $P122, $P2072["identifier"]
    unless_null $P122, vivify_927
    new $P122, "Undef"
  vivify_927:
    set $S100, $P122
    new $P123, 'String'
    set $P123, $S100
    set $P2071, $P123
.annotate 'line', 576
    set $P122, $P2071
    unless_null $P122, vivify_928
    new $P122, "Undef"
  vivify_928:
    set $S100, $P122
    iseq $I100, $S100, "c"
    if $I100, if_2073
.annotate 'line', 581
    set $P123, $P2071
    unless_null $P123, vivify_929
    new $P123, "Undef"
  vivify_929:
    set $S101, $P123
    iseq $I101, $S101, "w"
    unless $I101, if_2074_end
.annotate 'line', 582
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "QAST"
    get_who $P126, $P125
    set $P127, $P126["Regex"]
    set $P128, param_2069
    unless_null $P128, vivify_930
    new $P128, "Undef"
  vivify_930:
.annotate 'line', 583
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Node"]
    $P133 = $P132."new"("wb")
    $P134 = $P127."new"($P133, "subrule" :named("rxtype"), "method" :named("subtype"), $P128 :named("node"), "" :named("name"))
.annotate 'line', 582
    set $P2070, $P134
  if_2074_end:
.annotate 'line', 581
    goto if_2073_end
  if_2073:
.annotate 'line', 579
    new $P123, "Float"
    assign $P123, 0
    set $P2070, $P123
  if_2073_end:
.annotate 'line', 586
    set $P122, param_2069
    set $P123, $P2070
    unless_null $P123, vivify_931
    new $P123, "Undef"
  vivify_931:
    $P124 = $P122."!make"($P123)
.annotate 'line', 573
    .return ($P124)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "assertion:sym<method>" :anon :subid("172_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2076
    .param pmc param_2077
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 589
    .lex "self", param_2076
    .lex "$/", param_2077
.annotate 'line', 590
    new $P120, "Undef"
    set $P2078, $P120
    .lex "$qast", $P2078
    set $P2079, param_2077
    unless_null $P2079, vivify_932
    $P2079 = root_new ['parrot';'Hash']
  vivify_932:
    set $P121, $P2079["assertion"]
    unless_null $P121, vivify_933
    new $P121, "Undef"
  vivify_933:
    $P122 = $P121."ast"()
    set $P2078, $P122
.annotate 'line', 591
    set $P121, $P2078
    unless_null $P121, vivify_934
    new $P121, "Undef"
  vivify_934:
    $P121."subtype"("method")
.annotate 'line', 592
    set $P121, $P2078
    unless_null $P121, vivify_935
    new $P121, "Undef"
  vivify_935:
    $P121."name"("")
.annotate 'line', 593
    set $P121, param_2077
    set $P122, $P2078
    unless_null $P122, vivify_936
    new $P122, "Undef"
  vivify_936:
    $P123 = $P121."!make"($P122)
.annotate 'line', 589
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "assertion:sym<name>" :anon :subid("173_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2081
    .param pmc param_2082
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 596
    .const 'Sub' $P2101 = "409_1340317687.034" 
    capture_lex $P2101
    .const 'Sub' $P2092 = "408_1340317687.034" 
    capture_lex $P2092
    .lex "self", param_2081
    .lex "$/", param_2082
.annotate 'line', 597
    new $P120, "Undef"
    set $P2083, $P120
    .lex "$name", $P2083
.annotate 'line', 598
    new $P121, "Undef"
    set $P2084, $P121
    .lex "$qast", $P2084
.annotate 'line', 597
    set $P2085, param_2082
    unless_null $P2085, vivify_937
    $P2085 = root_new ['parrot';'Hash']
  vivify_937:
    set $P122, $P2085["longname"]
    unless_null $P122, vivify_938
    new $P122, "Undef"
  vivify_938:
    set $S100, $P122
    new $P123, 'String'
    set $P123, $S100
    set $P2083, $P123
.annotate 'line', 596
    set $P122, $P2084
    unless_null $P122, vivify_939
    new $P122, "Undef"
  vivify_939:
.annotate 'line', 599
    set $P2087, param_2082
    unless_null $P2087, vivify_940
    $P2087 = root_new ['parrot';'Hash']
  vivify_940:
    set $P122, $P2087["assertion"]
    unless_null $P122, vivify_941
    new $P122, "Undef"
  vivify_941:
    if $P122, if_2086
.annotate 'line', 603
    set $P123, $P2083
    unless_null $P123, vivify_942
    new $P123, "Undef"
  vivify_942:
    set $S100, $P123
    iseq $I100, $S100, "sym"
    if $I100, if_2090
.annotate 'line', 612
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "QAST"
    get_who $P128, $P127
    set $P129, $P128["Regex"]
    set $P130, param_2082
    unless_null $P130, vivify_943
    new $P130, "Undef"
  vivify_943:
.annotate 'line', 613
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Node"]
    set $P135, $P2083
    unless_null $P135, vivify_944
    new $P135, "Undef"
  vivify_944:
    $P136 = $P134."new"($P135)
    set $P137, $P2083
    unless_null $P137, vivify_945
    new $P137, "Undef"
  vivify_945:
    $P139 = $P129."new"($P136, "subrule" :named("rxtype"), "capture" :named("subtype"), $P130 :named("node"), $P137 :named("name"))
.annotate 'line', 612
    set $P2084, $P139
.annotate 'line', 615
    set $P2097, param_2082
    unless_null $P2097, vivify_946
    $P2097 = root_new ['parrot';'Hash']
  vivify_946:
    set $P126, $P2097["arglist"]
    unless_null $P126, vivify_947
    new $P126, "Undef"
  vivify_947:
    if $P126, if_2096
.annotate 'line', 618
    set $P2106, param_2082
    unless_null $P2106, vivify_948
    $P2106 = root_new ['parrot';'Hash']
  vivify_948:
    set $P127, $P2106["nibbler"]
    unless_null $P127, vivify_949
    new $P127, "Undef"
  vivify_949:
    unless $P127, if_2105_end
.annotate 'line', 619
    set $P128, $P2083
    unless_null $P128, vivify_950
    new $P128, "Undef"
  vivify_950:
    set $S101, $P128
    iseq $I101, $S101, "after"
    if $I101, if_2107
.annotate 'line', 621
    set $P2111, $P2084
    unless_null $P2111, vivify_951
    $P2111 = root_new ['parrot';'ResizablePMCArray']
  vivify_951:
    set $P136, $P2111[0]
    unless_null $P136, vivify_952
    new $P136, "Undef"
  vivify_952:
    set $P2112, param_2082
    unless_null $P2112, vivify_953
    $P2112 = root_new ['parrot';'Hash']
  vivify_953:
    set $P2113, $P2112["nibbler"]
    unless_null $P2113, vivify_954
    $P2113 = root_new ['parrot';'ResizablePMCArray']
  vivify_954:
    set $P137, $P2113[0]
    unless_null $P137, vivify_955
    new $P137, "Undef"
  vivify_955:
    $P139 = $P137."ast"()
    $P140 = "buildsub"($P139, 1 :named("anon"))
    $P136."push"($P140)
    goto if_2107_end
  if_2107:
.annotate 'line', 620
    set $P2108, $P2084
    unless_null $P2108, vivify_956
    $P2108 = root_new ['parrot';'ResizablePMCArray']
  vivify_956:
    set $P129, $P2108[0]
    unless_null $P129, vivify_957
    new $P129, "Undef"
  vivify_957:
    set $P130, param_2081
    nqp_decontainerize $P131, $P130
    set $P2109, param_2082
    unless_null $P2109, vivify_958
    $P2109 = root_new ['parrot';'Hash']
  vivify_958:
    set $P2110, $P2109["nibbler"]
    unless_null $P2110, vivify_959
    $P2110 = root_new ['parrot';'ResizablePMCArray']
  vivify_959:
    set $P132, $P2110[0]
    unless_null $P132, vivify_960
    new $P132, "Undef"
  vivify_960:
    $P133 = $P132."ast"()
    $P134 = $P131."flip_ast"($P133)
    $P135 = "buildsub"($P134, 1 :named("anon"))
    $P129."push"($P135)
  if_2107_end:
  if_2105_end:
.annotate 'line', 618
    goto if_2096_end
  if_2096:
.annotate 'line', 616
    set $P2098, param_2082
    unless_null $P2098, vivify_961
    $P2098 = root_new ['parrot';'Hash']
  vivify_961:
    set $P2099, $P2098["arglist"]
    unless_null $P2099, vivify_962
    $P2099 = root_new ['parrot';'ResizablePMCArray']
  vivify_962:
    set $P128, $P2099[0]
    unless_null $P128, vivify_963
    new $P128, "Undef"
  vivify_963:
    $P129 = $P128."ast"()
    $P130 = $P129."list"()
    defined $I101, $P130
    unless $I101, for_undef_964
    iter $P127, $P130
    new $P132, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P132, loop2104_handler
    push_eh $P132
  loop2104_test:
    unless $P127, loop2104_done
    shift $P131, $P127
  loop2104_redo:
    .const 'Sub' $P2101 = "409_1340317687.034" 
    capture_lex $P2101
    $P2101($P131)
  loop2104_next:
    goto loop2104_test
  loop2104_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P133, exception, 'type'
    eq $P133, .CONTROL_LOOP_NEXT, loop2104_next
    eq $P133, .CONTROL_LOOP_REDO, loop2104_redo
  loop2104_done:
    pop_eh 
  for_undef_964:
  if_2096_end:
.annotate 'line', 611
    goto if_2090_end
  if_2090:
.annotate 'line', 603
    .const 'Sub' $P2092 = "408_1340317687.034" 
    capture_lex $P2092
    $P2092()
  if_2090_end:
    goto if_2086_end
  if_2086:
.annotate 'line', 600
    set $P2088, param_2082
    unless_null $P2088, vivify_982
    $P2088 = root_new ['parrot';'Hash']
  vivify_982:
    set $P2089, $P2088["assertion"]
    unless_null $P2089, vivify_983
    $P2089 = root_new ['parrot';'ResizablePMCArray']
  vivify_983:
    set $P123, $P2089[0]
    unless_null $P123, vivify_984
    new $P123, "Undef"
  vivify_984:
    $P124 = $P123."ast"()
    set $P2084, $P124
.annotate 'line', 601
    set $P123, param_2081
    nqp_decontainerize $P124, $P123
    set $P125, $P2084
    unless_null $P125, vivify_985
    new $P125, "Undef"
  vivify_985:
    set $P126, $P2083
    unless_null $P126, vivify_986
    new $P126, "Undef"
  vivify_986:
    $P124."subrule_alias"($P125, $P126)
  if_2086_end:
.annotate 'line', 624
    set $P122, param_2082
    set $P123, $P2084
    unless_null $P123, vivify_987
    new $P123, "Undef"
  vivify_987:
    $P124 = $P122."!make"($P123)
.annotate 'line', 596
    .return ($P124)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block2100"  :anon :subid("409_1340317687.034") :outer("173_1340317687.034")
    .param pmc param_2102
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 616
    .lex "$_", param_2102
    find_lex $P2103, "$qast"
    unless_null $P2103, vivify_965
    $P2103 = root_new ['parrot';'ResizablePMCArray']
  vivify_965:
    set $P132, $P2103[0]
    unless_null $P132, vivify_966
    new $P132, "Undef"
  vivify_966:
    find_lex $P133, "$_"
    unless_null $P133, vivify_967
    new $P133, "Undef"
  vivify_967:
    $P134 = $P132."push"($P133)
    .return ($P134)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block2091"  :anon :subid("408_1340317687.034") :outer("173_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 604
    new $P124, "Undef"
    set $P2093, $P124
    .lex "$loc", $P2093
.annotate 'line', 607
    new $P125, "Undef"
    set $P2094, $P125
    .lex "$rxname", $P2094
.annotate 'line', 604
    find_dynamic_lex $P128, "%*RX"
    unless_null $P128, vivify_968
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["%RX"]
    unless_null $P128, vivify_969
    die "Contextual %*RX not found"
  vivify_969:
  vivify_968:
    set $P129, $P128["name"]
    unless_null $P129, vivify_970
    new $P129, "Undef"
  vivify_970:
    set $S101, $P129
    index $I101, $S101, ":sym<"
    new $P130, 'Integer'
    set $P130, $I101
    set $P2093, $P130
.annotate 'line', 606
    set $P126, $P2093
    unless_null $P126, vivify_971
    new $P126, "Undef"
  vivify_971:
    set $N100, $P126
    set $N101, 0
    islt $I101, $N100, $N101
    unless $I101, if_2095_end
.annotate 'line', 605
    find_dynamic_lex $P129, "%*RX"
    unless_null $P129, vivify_972
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["%RX"]
    unless_null $P129, vivify_973
    die "Contextual %*RX not found"
  vivify_973:
  vivify_972:
    set $P130, $P129["name"]
    unless_null $P130, vivify_974
    new $P130, "Undef"
  vivify_974:
    set $S101, $P130
    index $I102, $S101, unicode:":sym\x{ab}"
    new $P131, 'Integer'
    set $P131, $I102
    set $P2093, $P131
  if_2095_end:
.annotate 'line', 607
    find_dynamic_lex $P128, "%*RX"
    unless_null $P128, vivify_975
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["%RX"]
    unless_null $P128, vivify_976
    die "Contextual %*RX not found"
  vivify_976:
  vivify_975:
    set $P129, $P128["name"]
    unless_null $P129, vivify_977
    new $P129, "Undef"
  vivify_977:
    set $S101, $P129
    set $P130, $P2093
    unless_null $P130, vivify_978
    new $P130, "Undef"
  vivify_978:
    add $P131, $P130, 5
    set $I101, $P131
    substr $S102, $S101, $I101
    chopn $S103, $S102, 1
    new $P132, 'String'
    set $P132, $S103
    set $P2094, $P132
.annotate 'line', 608
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "QAST"
    get_who $P128, $P127
    set $P129, $P128["Regex"]
    find_lex $P130, "$/"
    unless_null $P130, vivify_979
    new $P130, "Undef"
  vivify_979:
.annotate 'line', 609
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "QAST"
    get_who $P133, $P132
    set $P134, $P133["Regex"]
    set $P135, $P2094
    unless_null $P135, vivify_980
    new $P135, "Undef"
  vivify_980:
    find_lex $P136, "$/"
    unless_null $P136, vivify_981
    new $P136, "Undef"
  vivify_981:
    $P137 = $P134."new"($P135, "literal" :named("rxtype"), $P136 :named("node"))
    $P138 = $P129."new"($P137, "sym" :named("name"), "subcapture" :named("rxtype"), $P130 :named("node"))
.annotate 'line', 608
    store_lex "$qast", $P138
.annotate 'line', 603
    .return ($P138)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "assertion:sym<[>" :anon :subid("174_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2115
    .param pmc param_2116
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 627
    .const 'Sub' $P2126 = "410_1340317687.034" 
    capture_lex $P2126
    .lex "self", param_2115
    .lex "$/", param_2116
.annotate 'line', 628
    new $P120, "Undef"
    set $P2117, $P120
    .lex "$clist", $P2117
.annotate 'line', 629
    new $P121, "Undef"
    set $P2118, $P121
    .lex "$qast", $P2118
.annotate 'line', 636
    new $P122, "Undef"
    set $P2119, $P122
    .lex "$i", $P2119
.annotate 'line', 637
    new $P123, "Undef"
    set $P2120, $P123
    .lex "$n", $P2120
.annotate 'line', 628
    set $P2121, param_2116
    unless_null $P2121, vivify_988
    $P2121 = root_new ['parrot';'Hash']
  vivify_988:
    set $P124, $P2121["cclass_elem"]
    unless_null $P124, vivify_989
    new $P124, "Undef"
  vivify_989:
    set $P2117, $P124
.annotate 'line', 629
    set $P2122, $P2117
    unless_null $P2122, vivify_990
    $P2122 = root_new ['parrot';'ResizablePMCArray']
  vivify_990:
    set $P124, $P2122[0]
    unless_null $P124, vivify_991
    new $P124, "Undef"
  vivify_991:
    $P125 = $P124."ast"()
    set $P2118, $P125
.annotate 'line', 630
    set $P125, $P2118
    unless_null $P125, vivify_992
    new $P125, "Undef"
  vivify_992:
    $P126 = $P125."negate"()
    if $P126, if_2124
    set $P124, $P126
    goto if_2124_end
  if_2124:
    set $P127, $P2118
    unless_null $P127, vivify_993
    new $P127, "Undef"
  vivify_993:
    $S100 = $P127."rxtype"()
    iseq $I100, $S100, "subrule"
    new $P124, 'Integer'
    set $P124, $I100
  if_2124_end:
    unless $P124, if_2123_end
.annotate 'line', 631
    set $P128, $P2118
    unless_null $P128, vivify_994
    new $P128, "Undef"
  vivify_994:
    $P128."subtype"("zerowidth")
.annotate 'line', 632
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "QAST"
    get_who $P130, $P129
    set $P131, $P130["Regex"]
    set $P132, param_2116
    unless_null $P132, vivify_995
    new $P132, "Undef"
  vivify_995:
    set $P133, $P2118
    unless_null $P133, vivify_996
    new $P133, "Undef"
  vivify_996:
.annotate 'line', 634
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "QAST"
    get_who $P136, $P135
    set $P137, $P136["Regex"]
    $P138 = $P137."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P139 = $P131."new"($P133, $P138, "concat" :named("rxtype"), $P132 :named("node"))
.annotate 'line', 632
    set $P2118, $P139
  if_2123_end:
.annotate 'line', 636
    new $P124, "Float"
    assign $P124, 1
    set $P2119, $P124
.annotate 'line', 637
    set $P124, $P2117
    unless_null $P124, vivify_997
    new $P124, "Undef"
  vivify_997:
    set $N100, $P124
    new $P125, 'Float'
    set $P125, $N100
    set $P2120, $P125
.annotate 'line', 638
    new $P127, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P127, loop2131_handler
    push_eh $P127
  loop2131_test:
    set $P124, $P2119
    unless_null $P124, vivify_998
    new $P124, "Undef"
  vivify_998:
    set $N100, $P124
    set $P125, $P2120
    unless_null $P125, vivify_999
    new $P125, "Undef"
  vivify_999:
    set $N101, $P125
    islt $I100, $N100, $N101
    unless $I100, loop2131_done
  loop2131_redo:
    .const 'Sub' $P2126 = "410_1340317687.034" 
    capture_lex $P2126
    $P2126()
  loop2131_next:
    goto loop2131_test
  loop2131_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P128, exception, 'type'
    eq $P128, .CONTROL_LOOP_NEXT, loop2131_next
    eq $P128, .CONTROL_LOOP_REDO, loop2131_redo
  loop2131_done:
    pop_eh 
.annotate 'line', 649
    set $P124, param_2116
    set $P125, $P2118
    unless_null $P125, vivify_1012
    new $P125, "Undef"
  vivify_1012:
    $P126 = $P124."!make"($P125)
.annotate 'line', 627
    .return ($P126)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block2125"  :anon :subid("410_1340317687.034") :outer("174_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 639
    new $P126, "Undef"
    set $P2127, $P126
    .lex "$ast", $P2127
    find_lex $P127, "$i"
    unless_null $P127, vivify_1000
    new $P127, "Undef"
  vivify_1000:
    set $I101, $P127
    find_lex $P2128, "$clist"
    unless_null $P2128, vivify_1001
    $P2128 = root_new ['parrot';'ResizablePMCArray']
  vivify_1001:
    set $P128, $P2128[$I101]
    unless_null $P128, vivify_1002
    new $P128, "Undef"
  vivify_1002:
    $P129 = $P128."ast"()
    set $P2127, $P129
.annotate 'line', 640
    set $P127, $P2127
    unless_null $P127, vivify_1003
    new $P127, "Undef"
  vivify_1003:
    $P128 = $P127."negate"()
    if $P128, if_2129
.annotate 'line', 645
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "QAST"
    get_who $P131, $P130
    set $P132, $P131["Regex"]
    find_lex $P133, "$qast"
    unless_null $P133, vivify_1004
    new $P133, "Undef"
  vivify_1004:
    set $P134, $P2127
    unless_null $P134, vivify_1005
    new $P134, "Undef"
  vivify_1005:
    find_lex $P135, "$/"
    unless_null $P135, vivify_1006
    new $P135, "Undef"
  vivify_1006:
    $P136 = $P132."new"($P133, $P134, "altseq" :named("rxtype"), $P135 :named("node"))
    store_lex "$qast", $P136
.annotate 'line', 644
    goto if_2129_end
  if_2129:
.annotate 'line', 641
    set $P129, $P2127
    unless_null $P129, vivify_1007
    new $P129, "Undef"
  vivify_1007:
    $P129."subtype"("zerowidth")
.annotate 'line', 642
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "QAST"
    get_who $P131, $P130
    set $P132, $P131["Regex"]
    set $P133, $P2127
    unless_null $P133, vivify_1008
    new $P133, "Undef"
  vivify_1008:
    find_lex $P134, "$qast"
    unless_null $P134, vivify_1009
    new $P134, "Undef"
  vivify_1009:
    find_lex $P135, "$/"
    unless_null $P135, vivify_1010
    new $P135, "Undef"
  vivify_1010:
    $P136 = $P132."new"($P133, $P134, "concat" :named("rxtype"), $P135 :named("node"))
    store_lex "$qast", $P136
  if_2129_end:
.annotate 'line', 638
    find_lex $P127, "$i"
    unless_null $P127, vivify_1011
    new $P127, "Undef"
  vivify_1011:
    clone $P2130, $P127
    inc $P127
    .return ($P2130)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "arg" :anon :subid("175_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2133
    .param pmc param_2134
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 652
    .lex "self", param_2133
    .lex "$/", param_2134
.annotate 'line', 653
    set $P120, param_2134
    set $P2136, param_2134
    unless_null $P2136, vivify_1013
    $P2136 = root_new ['parrot';'Hash']
  vivify_1013:
    set $P122, $P2136["quote_EXPR"]
    unless_null $P122, vivify_1014
    new $P122, "Undef"
  vivify_1014:
    if $P122, if_2135
    set $P2138, param_2134
    unless_null $P2138, vivify_1015
    $P2138 = root_new ['parrot';'Hash']
  vivify_1015:
    set $P125, $P2138["val"]
    unless_null $P125, vivify_1016
    new $P125, "Undef"
  vivify_1016:
    set $N100, $P125
    new $P121, 'Float'
    set $P121, $N100
    goto if_2135_end
  if_2135:
    set $P2137, param_2134
    unless_null $P2137, vivify_1017
    $P2137 = root_new ['parrot';'Hash']
  vivify_1017:
    set $P123, $P2137["quote_EXPR"]
    unless_null $P123, vivify_1018
    new $P123, "Undef"
  vivify_1018:
    $P124 = $P123."ast"()
    set $P121, $P124
  if_2135_end:
    $P126 = $P120."!make"($P121)
.annotate 'line', 652
    .return ($P126)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "arglist" :anon :subid("176_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2140
    .param pmc param_2141
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 656
    .const 'Sub' $P2145 = "411_1340317687.034" 
    capture_lex $P2145
    .lex "self", param_2140
    .lex "$/", param_2141
.annotate 'line', 657
    new $P120, "Undef"
    set $P2142, $P120
    .lex "$past", $P2142
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
    $P125 = $P124."new"("list" :named("pasttype"))
    set $P2142, $P125
.annotate 'line', 658
    set $P2143, param_2141
    unless_null $P2143, vivify_1019
    $P2143 = root_new ['parrot';'Hash']
  vivify_1019:
    set $P122, $P2143["arg"]
    unless_null $P122, vivify_1020
    new $P122, "Undef"
  vivify_1020:
    defined $I100, $P122
    unless $I100, for_undef_1021
    iter $P121, $P122
    new $P124, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P124, loop2147_handler
    push_eh $P124
  loop2147_test:
    unless $P121, loop2147_done
    shift $P123, $P121
  loop2147_redo:
    .const 'Sub' $P2145 = "411_1340317687.034" 
    capture_lex $P2145
    $P2145($P123)
  loop2147_next:
    goto loop2147_test
  loop2147_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P125, exception, 'type'
    eq $P125, .CONTROL_LOOP_NEXT, loop2147_next
    eq $P125, .CONTROL_LOOP_REDO, loop2147_redo
  loop2147_done:
    pop_eh 
  for_undef_1021:
.annotate 'line', 659
    set $P121, param_2141
    set $P122, $P2142
    unless_null $P122, vivify_1024
    new $P122, "Undef"
  vivify_1024:
    $P123 = $P121."!make"($P122)
.annotate 'line', 656
    .return ($P123)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block2144"  :anon :subid("411_1340317687.034") :outer("176_1340317687.034")
    .param pmc param_2146
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 658
    .lex "$_", param_2146
    find_lex $P124, "$past"
    unless_null $P124, vivify_1022
    new $P124, "Undef"
  vivify_1022:
    find_lex $P125, "$_"
    unless_null $P125, vivify_1023
    new $P125, "Undef"
  vivify_1023:
    $P126 = $P125."ast"()
    $P127 = $P124."push"($P126)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "cclass_elem" :anon :subid("177_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2149
    .param pmc param_2150
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 662
    .const 'Sub' $P2174 = "414_1340317687.034" 
    capture_lex $P2174
    .const 'Sub' $P2163 = "413_1340317687.034" 
    capture_lex $P2163
    .const 'Sub' $P2156 = "412_1340317687.034" 
    capture_lex $P2156
    .lex "self", param_2149
    .lex "$/", param_2150
.annotate 'line', 663
    new $P120, "Undef"
    set $P2151, $P120
    .lex "$str", $P2151
.annotate 'line', 664
    new $P121, "Undef"
    set $P2152, $P121
    .lex "$qast", $P2152
.annotate 'line', 663
    new $P122, "String"
    assign $P122, ""
    set $P2151, $P122
.annotate 'line', 662
    set $P122, $P2152
    unless_null $P122, vivify_1025
    new $P122, "Undef"
  vivify_1025:
.annotate 'line', 665
    set $P2154, param_2150
    unless_null $P2154, vivify_1026
    $P2154 = root_new ['parrot';'Hash']
  vivify_1026:
    set $P122, $P2154["name"]
    unless_null $P122, vivify_1027
    new $P122, "Undef"
  vivify_1027:
    if $P122, if_2153
.annotate 'line', 670
    set $P2161, param_2150
    unless_null $P2161, vivify_1028
    $P2161 = root_new ['parrot';'Hash']
  vivify_1028:
    set $P124, $P2161["uniprop"]
    unless_null $P124, vivify_1029
    new $P124, "Undef"
  vivify_1029:
    if $P124, if_2160
.annotate 'line', 676
    .const 'Sub' $P2174 = "414_1340317687.034" 
    capture_lex $P2174
    $P2174()
    goto if_2160_end
  if_2160:
.annotate 'line', 670
    .const 'Sub' $P2163 = "413_1340317687.034" 
    capture_lex $P2163
    $P2163()
  if_2160_end:
    goto if_2153_end
  if_2153:
.annotate 'line', 665
    .const 'Sub' $P2156 = "412_1340317687.034" 
    capture_lex $P2156
    $P2156()
  if_2153_end:
.annotate 'line', 726
    set $P122, param_2150
    set $P123, $P2152
    unless_null $P123, vivify_1135
    new $P123, "Undef"
  vivify_1135:
    $P124 = $P122."!make"($P123)
.annotate 'line', 662
    .return ($P124)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "_block2173"  :anon :subid("414_1340317687.034") :outer("177_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 676
    .const 'Sub' $P2180 = "415_1340317687.034" 
    capture_lex $P2180
.annotate 'line', 677
    $P2176 = root_new ['parrot';'ResizablePMCArray']
    set $P2175, $P2176
    .lex "@alts", $P2175
.annotate 'line', 676
    set $P2177, $P2175
    unless_null $P2177, vivify_1030
    $P2177 = root_new ['parrot';'ResizablePMCArray']
  vivify_1030:
.annotate 'line', 678
    find_lex $P2178, "$/"
    unless_null $P2178, vivify_1031
    $P2178 = root_new ['parrot';'Hash']
  vivify_1031:
    set $P127, $P2178["charspec"]
    unless_null $P127, vivify_1032
    new $P127, "Undef"
  vivify_1032:
    defined $I100, $P127
    unless $I100, for_undef_1033
    iter $P126, $P127
    new $P130, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P130, loop2235_handler
    push_eh $P130
  loop2235_test:
    unless $P126, loop2235_done
    shift $P128, $P126
  loop2235_redo:
    .const 'Sub' $P2180 = "415_1340317687.034" 
    capture_lex $P2180
    $P2180($P128)
  loop2235_next:
    goto loop2235_test
  loop2235_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P131, exception, 'type'
    eq $P131, .CONTROL_LOOP_NEXT, loop2235_next
    eq $P131, .CONTROL_LOOP_REDO, loop2235_redo
  loop2235_done:
    pop_eh 
  for_undef_1033:
.annotate 'line', 717
    find_lex $P126, "$str"
    unless_null $P126, vivify_1103
    new $P126, "Undef"
  vivify_1103:
    set $S100, $P126
    length $I100, $S100
    unless $I100, if_2236_end
.annotate 'line', 716
    set $P2237, $P2175
    unless_null $P2237, vivify_1104
    $P2237 = root_new ['parrot';'ResizablePMCArray']
  vivify_1104:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "QAST"
    get_who $P129, $P128
    set $P130, $P129["Regex"]
    find_lex $P131, "$str"
    unless_null $P131, vivify_1105
    new $P131, "Undef"
  vivify_1105:
    find_lex $P132, "$/"
    unless_null $P132, vivify_1106
    new $P132, "Undef"
  vivify_1106:
    find_lex $P2238, "$/"
    unless_null $P2238, vivify_1107
    $P2238 = root_new ['parrot';'Hash']
  vivify_1107:
    set $P133, $P2238["sign"]
    unless_null $P133, vivify_1108
    new $P133, "Undef"
  vivify_1108:
    set $S101, $P133
    iseq $I101, $S101, "-"
    $P134 = $P130."new"($P131, "enumcharlist" :named("rxtype"), $P132 :named("node"), $I101 :named("negate"))
    $P2237."push"($P134)
  if_2236_end:
.annotate 'line', 718
    set $P2240, $P2175
    unless_null $P2240, vivify_1109
    $P2240 = root_new ['parrot';'ResizablePMCArray']
  vivify_1109:
    set $N100, $P2240
    set $N101, 1
    iseq $I100, $N100, $N101
    if $I100, if_2239
.annotate 'line', 719
    find_lex $P2243, "$/"
    unless_null $P2243, vivify_1110
    $P2243 = root_new ['parrot';'Hash']
  vivify_1110:
    set $P129, $P2243["sign"]
    unless_null $P129, vivify_1111
    new $P129, "Undef"
  vivify_1111:
    set $S100, $P129
    iseq $I101, $S100, "-"
    if $I101, if_2242
.annotate 'line', 723
    get_hll_global $P148, "GLOBAL"
    nqp_get_package_through_who $P149, $P148, "QAST"
    get_who $P150, $P149
    set $P151, $P150["Regex"]
    set $P2245, $P2175
    unless_null $P2245, vivify_1112
    $P2245 = root_new ['parrot';'ResizablePMCArray']
  vivify_1112:
    $P152 = $P151."new"($P2245 :flat, "altseq" :named("rxtype"))
    set $P128, $P152
.annotate 'line', 719
    goto if_2242_end
  if_2242:
.annotate 'line', 720
    get_hll_global $P130, "GLOBAL"
    nqp_get_package_through_who $P131, $P130, "QAST"
    get_who $P132, $P131
    set $P133, $P132["Regex"]
    find_lex $P134, "$/"
    unless_null $P134, vivify_1113
    new $P134, "Undef"
  vivify_1113:
.annotate 'line', 721
    get_hll_global $P135, "GLOBAL"
    nqp_get_package_through_who $P137, $P135, "QAST"
    get_who $P138, $P137
    set $P139, $P138["Regex"]
    set $P2244, $P2175
    unless_null $P2244, vivify_1114
    $P2244 = root_new ['parrot';'ResizablePMCArray']
  vivify_1114:
    $P141 = $P139."new"($P2244 :flat, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
.annotate 'line', 722
    get_hll_global $P142, "GLOBAL"
    nqp_get_package_through_who $P143, $P142, "QAST"
    get_who $P144, $P143
    set $P145, $P144["Regex"]
    $P146 = $P145."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P147 = $P133."new"($P141, $P146, "concat" :named("rxtype"), $P134 :named("node"))
.annotate 'line', 720
    set $P128, $P147
  if_2242_end:
.annotate 'line', 719
    set $P126, $P128
.annotate 'line', 718
    goto if_2239_end
  if_2239:
    set $P2241, $P2175
    unless_null $P2241, vivify_1115
    $P2241 = root_new ['parrot';'ResizablePMCArray']
  vivify_1115:
    set $P127, $P2241[0]
    unless_null $P127, vivify_1116
    new $P127, "Undef"
  vivify_1116:
    set $P126, $P127
  if_2239_end:
    store_lex "$qast", $P126
.annotate 'line', 676
    .return ($P126)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block2179"  :anon :subid("415_1340317687.034") :outer("414_1340317687.034")
    .param pmc param_2181
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 678
    .const 'Sub' $P2227 = "417_1340317687.034" 
    capture_lex $P2227
    .const 'Sub' $P2185 = "416_1340317687.034" 
    capture_lex $P2185
    .lex "$_", param_2181
.annotate 'line', 679
    find_lex $P2183, "$_"
    unless_null $P2183, vivify_1034
    $P2183 = root_new ['parrot';'ResizablePMCArray']
  vivify_1034:
    set $P130, $P2183[1]
    unless_null $P130, vivify_1035
    new $P130, "Undef"
  vivify_1035:
    if $P130, if_2182
.annotate 'line', 709
    find_lex $P2224, "$_"
    unless_null $P2224, vivify_1036
    $P2224 = root_new ['parrot';'ResizablePMCArray']
  vivify_1036:
    set $P2225, $P2224[0]
    unless_null $P2225, vivify_1037
    $P2225 = root_new ['parrot';'Hash']
  vivify_1037:
    set $P139, $P2225["backslash"]
    unless_null $P139, vivify_1038
    new $P139, "Undef"
  vivify_1038:
    if $P139, if_2223
.annotate 'line', 714
    find_lex $P144, "$str"
    unless_null $P144, vivify_1039
    new $P144, "Undef"
  vivify_1039:
    find_lex $P2234, "$_"
    unless_null $P2234, vivify_1040
    $P2234 = root_new ['parrot';'ResizablePMCArray']
  vivify_1040:
    set $P145, $P2234[0]
    unless_null $P145, vivify_1041
    new $P145, "Undef"
  vivify_1041:
    set $S100, $P145
    concat $P146, $P144, $S100
    store_lex "$str", $P146
    set $P138, $P146
.annotate 'line', 709
    goto if_2223_end
  if_2223:
    .const 'Sub' $P2227 = "417_1340317687.034" 
    capture_lex $P2227
    $P142 = $P2227()
    set $P138, $P142
  if_2223_end:
    set $P129, $P138
.annotate 'line', 679
    goto if_2182_end
  if_2182:
    .const 'Sub' $P2185 = "416_1340317687.034" 
    capture_lex $P2185
    $P137 = $P2185()
    set $P129, $P137
  if_2182_end:
.annotate 'line', 678
    .return ($P129)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block2226"  :anon :subid("417_1340317687.034") :outer("415_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 710
    new $P141, "Undef"
    set $P2228, $P141
    .lex "$bs", $P2228
    find_lex $P2229, "$_"
    unless_null $P2229, vivify_1042
    $P2229 = root_new ['parrot';'ResizablePMCArray']
  vivify_1042:
    set $P2230, $P2229[0]
    unless_null $P2230, vivify_1043
    $P2230 = root_new ['parrot';'Hash']
  vivify_1043:
    set $P142, $P2230["backslash"]
    unless_null $P142, vivify_1044
    new $P142, "Undef"
  vivify_1044:
    $P143 = $P142."ast"()
    set $P2228, $P143
.annotate 'line', 711
    find_lex $P2232, "$/"
    unless_null $P2232, vivify_1045
    $P2232 = root_new ['parrot';'Hash']
  vivify_1045:
    set $P142, $P2232["sign"]
    unless_null $P142, vivify_1046
    new $P142, "Undef"
  vivify_1046:
    set $S100, $P142
    iseq $I102, $S100, "-"
    unless $I102, if_2231_end
    set $P143, $P2228
    unless_null $P143, vivify_1047
    new $P143, "Undef"
  vivify_1047:
    set $P144, $P2228
    unless_null $P144, vivify_1048
    new $P144, "Undef"
  vivify_1048:
    $P145 = $P144."negate"()
    isfalse $I103, $P145
    $P143."negate"($I103)
  if_2231_end:
.annotate 'line', 712
    find_lex $P2233, "@alts"
    unless_null $P2233, vivify_1049
    $P2233 = root_new ['parrot';'ResizablePMCArray']
  vivify_1049:
    set $P142, $P2228
    unless_null $P142, vivify_1050
    new $P142, "Undef"
  vivify_1050:
    $P143 = $P2233."push"($P142)
.annotate 'line', 709
    .return ($P143)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "_block2184"  :anon :subid("416_1340317687.034") :outer("415_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 680
    new $P131, "Undef"
    set $P2186, $P131
    .lex "$node", $P2186
.annotate 'line', 681
    new $P132, "Undef"
    set $P2187, $P132
    .lex "$lhs", $P2187
.annotate 'line', 682
    new $P133, "Undef"
    set $P2188, $P133
    .lex "$rhs", $P2188
.annotate 'line', 703
    new $P134, "Undef"
    set $P2189, $P134
    .lex "$ord0", $P2189
.annotate 'line', 704
    new $P135, "Undef"
    set $P2190, $P135
    .lex "$ord1", $P2190
.annotate 'line', 679
    set $P137, $P2186
    unless_null $P137, vivify_1051
    new $P137, "Undef"
  vivify_1051:
    set $P137, $P2187
    unless_null $P137, vivify_1052
    new $P137, "Undef"
  vivify_1052:
    set $P137, $P2188
    unless_null $P137, vivify_1053
    new $P137, "Undef"
  vivify_1053:
.annotate 'line', 683
    find_lex $P2192, "$_"
    unless_null $P2192, vivify_1054
    $P2192 = root_new ['parrot';'ResizablePMCArray']
  vivify_1054:
    set $P2193, $P2192[0]
    unless_null $P2193, vivify_1055
    $P2193 = root_new ['parrot';'Hash']
  vivify_1055:
    set $P137, $P2193["backslash"]
    unless_null $P137, vivify_1056
    new $P137, "Undef"
  vivify_1056:
    if $P137, if_2191
.annotate 'line', 691
    find_lex $P2202, "$_"
    unless_null $P2202, vivify_1057
    $P2202 = root_new ['parrot';'ResizablePMCArray']
  vivify_1057:
    set $P2203, $P2202[0]
    unless_null $P2203, vivify_1058
    $P2203 = root_new ['parrot';'ResizablePMCArray']
  vivify_1058:
    set $P138, $P2203[0]
    unless_null $P138, vivify_1059
    new $P138, "Undef"
  vivify_1059:
    set $S100, $P138
    new $P139, 'String'
    set $P139, $S100
    set $P2187, $P139
.annotate 'line', 690
    goto if_2191_end
  if_2191:
.annotate 'line', 684
    find_lex $P2194, "$_"
    unless_null $P2194, vivify_1060
    $P2194 = root_new ['parrot';'ResizablePMCArray']
  vivify_1060:
    set $P2195, $P2194[0]
    unless_null $P2195, vivify_1061
    $P2195 = root_new ['parrot';'Hash']
  vivify_1061:
    set $P138, $P2195["backslash"]
    unless_null $P138, vivify_1062
    new $P138, "Undef"
  vivify_1062:
    $P139 = $P138."ast"()
    set $P2186, $P139
.annotate 'line', 686
    set $P142, $P2186
    unless_null $P142, vivify_1063
    new $P142, "Undef"
  vivify_1063:
    $S100 = $P142."rxtype"()
    isne $I101, $S100, "literal"
    if $I101, if_2199
    new $P141, 'Integer'
    set $P141, $I101
    goto if_2199_end
  if_2199:
    set $P143, $P2186
    unless_null $P143, vivify_1064
    new $P143, "Undef"
  vivify_1064:
    $S101 = $P143."rxtype"()
    isne $I102, $S101, "enumcharlist"
    new $P141, 'Integer'
    set $P141, $I102
  if_2199_end:
    unless $P141, unless_2198
    set $P139, $P141
    goto unless_2198_end
  unless_2198:
.annotate 'line', 687
    set $P144, $P2186
    unless_null $P144, vivify_1065
    new $P144, "Undef"
  vivify_1065:
    $P145 = $P144."negate"()
    set $P139, $P145
  unless_2198_end:
    unless $P139, unless_2197
    set $P138, $P139
    goto unless_2197_end
  unless_2197:
    set $P2200, $P2186
    unless_null $P2200, vivify_1066
    $P2200 = root_new ['parrot';'ResizablePMCArray']
  vivify_1066:
    set $P146, $P2200[0]
    unless_null $P146, vivify_1067
    new $P146, "Undef"
  vivify_1067:
    set $S102, $P146
    length $I103, $S102
    set $N100, $I103
    set $N101, 1
    isne $I104, $N100, $N101
    new $P138, 'Integer'
    set $P138, $I104
  unless_2197_end:
    unless $P138, if_2196_end
.annotate 'line', 685
    find_lex $P147, "$/"
    unless_null $P147, vivify_1068
    new $P147, "Undef"
  vivify_1068:
    $P148 = $P147."CURSOR"()
    new $P149, "String"
    assign $P149, "Illegal range endpoint in regex: "
    find_lex $P150, "$_"
    unless_null $P150, vivify_1069
    new $P150, "Undef"
  vivify_1069:
    set $S103, $P150
    concat $P151, $P149, $S103
    $P148."panic"($P151)
  if_2196_end:
.annotate 'line', 688
    set $P2201, $P2186
    unless_null $P2201, vivify_1070
    $P2201 = root_new ['parrot';'ResizablePMCArray']
  vivify_1070:
    set $P138, $P2201[0]
    unless_null $P138, vivify_1071
    new $P138, "Undef"
  vivify_1071:
    set $P2187, $P138
  if_2191_end:
.annotate 'line', 693
    find_lex $P2205, "$_"
    unless_null $P2205, vivify_1072
    $P2205 = root_new ['parrot';'ResizablePMCArray']
  vivify_1072:
    set $P2206, $P2205[1]
    unless_null $P2206, vivify_1073
    $P2206 = root_new ['parrot';'ResizablePMCArray']
  vivify_1073:
    set $P2207, $P2206[0]
    unless_null $P2207, vivify_1074
    $P2207 = root_new ['parrot';'Hash']
  vivify_1074:
    set $P137, $P2207["backslash"]
    unless_null $P137, vivify_1075
    new $P137, "Undef"
  vivify_1075:
    if $P137, if_2204
.annotate 'line', 701
    find_lex $P2217, "$_"
    unless_null $P2217, vivify_1076
    $P2217 = root_new ['parrot';'ResizablePMCArray']
  vivify_1076:
    set $P2218, $P2217[1]
    unless_null $P2218, vivify_1077
    $P2218 = root_new ['parrot';'ResizablePMCArray']
  vivify_1077:
    set $P2219, $P2218[0]
    unless_null $P2219, vivify_1078
    $P2219 = root_new ['parrot';'ResizablePMCArray']
  vivify_1078:
    set $P138, $P2219[0]
    unless_null $P138, vivify_1079
    new $P138, "Undef"
  vivify_1079:
    set $S100, $P138
    new $P139, 'String'
    set $P139, $S100
    set $P2188, $P139
.annotate 'line', 700
    goto if_2204_end
  if_2204:
.annotate 'line', 694
    find_lex $P2208, "$_"
    unless_null $P2208, vivify_1080
    $P2208 = root_new ['parrot';'ResizablePMCArray']
  vivify_1080:
    set $P2209, $P2208[1]
    unless_null $P2209, vivify_1081
    $P2209 = root_new ['parrot';'ResizablePMCArray']
  vivify_1081:
    set $P2210, $P2209[0]
    unless_null $P2210, vivify_1082
    $P2210 = root_new ['parrot';'Hash']
  vivify_1082:
    set $P138, $P2210["backslash"]
    unless_null $P138, vivify_1083
    new $P138, "Undef"
  vivify_1083:
    $P139 = $P138."ast"()
    set $P2186, $P139
.annotate 'line', 696
    set $P142, $P2186
    unless_null $P142, vivify_1084
    new $P142, "Undef"
  vivify_1084:
    $S100 = $P142."rxtype"()
    isne $I101, $S100, "literal"
    if $I101, if_2214
    new $P141, 'Integer'
    set $P141, $I101
    goto if_2214_end
  if_2214:
    set $P143, $P2186
    unless_null $P143, vivify_1085
    new $P143, "Undef"
  vivify_1085:
    $S101 = $P143."rxtype"()
    isne $I102, $S101, "enumcharlist"
    new $P141, 'Integer'
    set $P141, $I102
  if_2214_end:
    unless $P141, unless_2213
    set $P139, $P141
    goto unless_2213_end
  unless_2213:
.annotate 'line', 697
    set $P144, $P2186
    unless_null $P144, vivify_1086
    new $P144, "Undef"
  vivify_1086:
    $P145 = $P144."negate"()
    set $P139, $P145
  unless_2213_end:
    unless $P139, unless_2212
    set $P138, $P139
    goto unless_2212_end
  unless_2212:
    set $P2215, $P2186
    unless_null $P2215, vivify_1087
    $P2215 = root_new ['parrot';'ResizablePMCArray']
  vivify_1087:
    set $P146, $P2215[0]
    unless_null $P146, vivify_1088
    new $P146, "Undef"
  vivify_1088:
    set $S102, $P146
    length $I103, $S102
    set $N100, $I103
    set $N101, 1
    isne $I104, $N100, $N101
    new $P138, 'Integer'
    set $P138, $I104
  unless_2212_end:
    unless $P138, if_2211_end
.annotate 'line', 695
    find_lex $P147, "$/"
    unless_null $P147, vivify_1089
    new $P147, "Undef"
  vivify_1089:
    $P148 = $P147."CURSOR"()
    new $P149, "String"
    assign $P149, "Illegal range endpoint in regex: "
    find_lex $P150, "$_"
    unless_null $P150, vivify_1090
    new $P150, "Undef"
  vivify_1090:
    set $S103, $P150
    concat $P151, $P149, $S103
    $P148."panic"($P151)
  if_2211_end:
.annotate 'line', 698
    set $P2216, $P2186
    unless_null $P2216, vivify_1091
    $P2216 = root_new ['parrot';'ResizablePMCArray']
  vivify_1091:
    set $P138, $P2216[0]
    unless_null $P138, vivify_1092
    new $P138, "Undef"
  vivify_1092:
    set $P2188, $P138
  if_2204_end:
.annotate 'line', 703
    set $P137, $P2187
    unless_null $P137, vivify_1093
    new $P137, "Undef"
  vivify_1093:
    set $S100, $P137
    ord $I101, $S100
    new $P138, 'Integer'
    set $P138, $I101
    set $P2189, $P138
.annotate 'line', 704
    set $P137, $P2188
    unless_null $P137, vivify_1094
    new $P137, "Undef"
  vivify_1094:
    set $S100, $P137
    ord $I101, $S100
    new $P138, 'Integer'
    set $P138, $I101
    set $P2190, $P138
.annotate 'line', 706
    set $P137, $P2189
    unless_null $P137, vivify_1095
    new $P137, "Undef"
  vivify_1095:
    set $N100, $P137
    set $P138, $P2190
    unless_null $P138, vivify_1096
    new $P138, "Undef"
  vivify_1096:
    set $N101, $P138
    isgt $I101, $N100, $N101
    unless $I101, if_2220_end
.annotate 'line', 705
    find_lex $P139, "$/"
    unless_null $P139, vivify_1097
    new $P139, "Undef"
  vivify_1097:
    $P141 = $P139."CURSOR"()
    new $P142, "String"
    assign $P142, "Illegal reversed character range in regex: "
    find_lex $P143, "$_"
    unless_null $P143, vivify_1098
    new $P143, "Undef"
  vivify_1098:
    set $S100, $P143
    concat $P144, $P142, $S100
    $P141."panic"($P144)
  if_2220_end:
.annotate 'line', 707
    new $P143, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P143, loop2222_handler
    push_eh $P143
  loop2222_test:
    set $P137, $P2189
    unless_null $P137, vivify_1099
    new $P137, "Undef"
  vivify_1099:
    set $N100, $P137
    set $P138, $P2190
    unless_null $P138, vivify_1100
    new $P138, "Undef"
  vivify_1100:
    set $N101, $P138
    isle $I101, $N100, $N101
    unless $I101, loop2222_done
  loop2222_redo:
    find_lex $P139, "$str"
    unless_null $P139, vivify_1101
    new $P139, "Undef"
  vivify_1101:
    set $P141, $P2189
    unless_null $P141, vivify_1102
    new $P141, "Undef"
  vivify_1102:
    clone $P2221, $P141
    inc $P141
    set $I102, $P2221
    chr $S100, $I102
    concat $P142, $P139, $S100
    store_lex "$str", $P142
  loop2222_next:
    goto loop2222_test
  loop2222_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P144, exception, 'type'
    eq $P144, .CONTROL_LOOP_NEXT, loop2222_next
    eq $P144, .CONTROL_LOOP_REDO, loop2222_redo
  loop2222_done:
    pop_eh 
.annotate 'line', 679
    .return ($I101)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block2162"  :anon :subid("413_1340317687.034") :outer("177_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 671
    new $P125, "Undef"
    set $P2164, $P125
    .lex "$uniprop", $P2164
    find_lex $P2165, "$/"
    unless_null $P2165, vivify_1117
    $P2165 = root_new ['parrot';'Hash']
  vivify_1117:
    set $P126, $P2165["uniprop"]
    unless_null $P126, vivify_1118
    new $P126, "Undef"
  vivify_1118:
    set $S100, $P126
    new $P127, 'String'
    set $P127, $S100
    set $P2164, $P127
.annotate 'line', 672
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "QAST"
    get_who $P128, $P127
    set $P129, $P128["Regex"]
    set $P130, $P2164
    unless_null $P130, vivify_1119
    new $P130, "Undef"
  vivify_1119:
.annotate 'line', 673
    find_lex $P2168, "$/"
    unless_null $P2168, vivify_1120
    $P2168 = root_new ['parrot';'Hash']
  vivify_1120:
    set $P133, $P2168["sign"]
    unless_null $P133, vivify_1121
    new $P133, "Undef"
  vivify_1121:
    set $S100, $P133
    iseq $I100, $S100, "-"
    if $I100, if_2167
    new $P132, 'Integer'
    set $P132, $I100
    goto if_2167_end
  if_2167:
    find_lex $P2169, "$/"
    unless_null $P2169, vivify_1122
    $P2169 = root_new ['parrot';'Hash']
  vivify_1122:
    set $P134, $P2169["invert"]
    unless_null $P134, vivify_1123
    new $P134, "Undef"
  vivify_1123:
    set $S101, $P134
    isne $I101, $S101, "!"
    new $P132, 'Integer'
    set $P132, $I101
  if_2167_end:
    unless $P132, unless_2166
    set $P131, $P132
    goto unless_2166_end
  unless_2166:
.annotate 'line', 674
    find_lex $P2171, "$/"
    unless_null $P2171, vivify_1124
    $P2171 = root_new ['parrot';'Hash']
  vivify_1124:
    set $P137, $P2171["sign"]
    unless_null $P137, vivify_1125
    new $P137, "Undef"
  vivify_1125:
    set $S102, $P137
    isne $I102, $S102, "-"
    if $I102, if_2170
    new $P135, 'Integer'
    set $P135, $I102
    goto if_2170_end
  if_2170:
    find_lex $P2172, "$/"
    unless_null $P2172, vivify_1126
    $P2172 = root_new ['parrot';'Hash']
  vivify_1126:
    set $P138, $P2172["invert"]
    unless_null $P138, vivify_1127
    new $P138, "Undef"
  vivify_1127:
    set $S103, $P138
    iseq $I103, $S103, "!"
    new $P135, 'Integer'
    set $P135, $I103
  if_2170_end:
    set $P131, $P135
  unless_2166_end:
.annotate 'line', 672
    find_lex $P139, "$/"
    unless_null $P139, vivify_1128
    new $P139, "Undef"
  vivify_1128:
    $P140 = $P129."new"($P130, "uniprop" :named("rxtype"), $P131 :named("negate"), $P139 :named("node"))
    store_lex "$qast", $P140
.annotate 'line', 670
    .return ($P140)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block2155"  :anon :subid("412_1340317687.034") :outer("177_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 666
    new $P123, "Undef"
    set $P2157, $P123
    .lex "$name", $P2157
    find_lex $P2158, "$/"
    unless_null $P2158, vivify_1129
    $P2158 = root_new ['parrot';'Hash']
  vivify_1129:
    set $P124, $P2158["name"]
    unless_null $P124, vivify_1130
    new $P124, "Undef"
  vivify_1130:
    set $S100, $P124
    new $P125, 'String'
    set $P125, $S100
    set $P2157, $P125
.annotate 'line', 667
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "QAST"
    get_who $P126, $P125
    set $P127, $P126["Regex"]
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P130, $P129
    set $P131, $P130["Node"]
    set $P132, $P2157
    unless_null $P132, vivify_1131
    new $P132, "Undef"
  vivify_1131:
    $P133 = $P131."new"($P132)
.annotate 'line', 668
    find_lex $P2159, "$/"
    unless_null $P2159, vivify_1132
    $P2159 = root_new ['parrot';'Hash']
  vivify_1132:
    set $P134, $P2159["sign"]
    unless_null $P134, vivify_1133
    new $P134, "Undef"
  vivify_1133:
    set $S100, $P134
    iseq $I100, $S100, "-"
.annotate 'line', 667
    find_lex $P135, "$/"
    unless_null $P135, vivify_1134
    new $P135, "Undef"
  vivify_1134:
    $P136 = $P127."new"($P133, "subrule" :named("rxtype"), "method" :named("subtype"), $I100 :named("negate"), $P135 :named("node"))
    store_lex "$qast", $P136
.annotate 'line', 665
    .return ($P136)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "mod_internal" :anon :subid("178_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2247
    .param pmc param_2248
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 729
    .lex "self", param_2247
    .lex "$/", param_2248
.annotate 'line', 730
    new $P120, "Undef"
    set $P2249, $P120
    .lex "$n", $P2249
    set $P2251, param_2248
    unless_null $P2251, vivify_1136
    $P2251 = root_new ['parrot';'Hash']
  vivify_1136:
    set $P2252, $P2251["n"]
    unless_null $P2252, vivify_1137
    $P2252 = root_new ['parrot';'ResizablePMCArray']
  vivify_1137:
    set $P122, $P2252[0]
    unless_null $P122, vivify_1138
    new $P122, "Undef"
  vivify_1138:
    set $S100, $P122
    isgt $I100, $S100, ""
    if $I100, if_2250
    new $P124, "Float"
    assign $P124, 1
    set $P121, $P124
    goto if_2250_end
  if_2250:
    set $P2253, param_2248
    unless_null $P2253, vivify_1139
    $P2253 = root_new ['parrot';'Hash']
  vivify_1139:
    set $P2254, $P2253["n"]
    unless_null $P2254, vivify_1140
    $P2254 = root_new ['parrot';'ResizablePMCArray']
  vivify_1140:
    set $P123, $P2254[0]
    unless_null $P123, vivify_1141
    new $P123, "Undef"
  vivify_1141:
    set $N100, $P123
    new $P121, 'Float'
    set $P121, $N100
  if_2250_end:
    set $P2249, $P121
.annotate 'line', 731
    set $P121, $P2249
    unless_null $P121, vivify_1142
    new $P121, "Undef"
  vivify_1142:
    set $P2255, param_2248
    unless_null $P2255, vivify_1143
    $P2255 = root_new ['parrot';'Hash']
  vivify_1143:
    set $P2256, $P2255["mod_ident"]
    unless_null $P2256, vivify_1144
    $P2256 = root_new ['parrot';'Hash']
  vivify_1144:
    set $P122, $P2256["sym"]
    unless_null $P122, vivify_1145
    new $P122, "Undef"
  vivify_1145:
    set $S100, $P122
    find_dynamic_lex $P125, "%*RX"
    unless_null $P125, vivify_1146
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["%RX"]
    unless_null $P125, vivify_1147
    die "Contextual %*RX not found"
  vivify_1147:
    store_dynamic_lex "%*RX", $P125
  vivify_1146:
    set $P125[$S100], $P121
.annotate 'line', 732
    set $P121, param_2248
    $P122 = $P121."!make"(0)
.annotate 'line', 729
    .return ($P122)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "subrule_alias" :anon :subid("179_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2258
    .param pmc param_2259
    .param pmc param_2260
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 853
    .lex "self", param_2258
    .lex "$ast", param_2259
    .lex "$name", param_2260
.annotate 'line', 854
    set $P120, param_2259
    unless_null $P120, vivify_1148
    new $P120, "Undef"
  vivify_1148:
    $S100 = $P120."name"()
    isgt $I100, $S100, ""
    if $I100, if_2261
.annotate 'line', 855
    set $P121, param_2259
    unless_null $P121, vivify_1149
    new $P121, "Undef"
  vivify_1149:
    set $P122, param_2260
    unless_null $P122, vivify_1150
    new $P122, "Undef"
  vivify_1150:
    $P121."name"($P122)
    goto if_2261_end
  if_2261:
.annotate 'line', 854
    set $P121, param_2259
    unless_null $P121, vivify_1151
    new $P121, "Undef"
  vivify_1151:
    set $P122, param_2260
    unless_null $P122, vivify_1152
    new $P122, "Undef"
  vivify_1152:
    concat $P123, $P122, "="
    set $P124, param_2259
    unless_null $P124, vivify_1153
    new $P124, "Undef"
  vivify_1153:
    $S101 = $P124."name"()
    concat $P125, $P123, $S101
    $P121."name"($P125)
  if_2261_end:
.annotate 'line', 856
    set $P120, param_2259
    unless_null $P120, vivify_1154
    new $P120, "Undef"
  vivify_1154:
    $P121 = $P120."subtype"("capture")
.annotate 'line', 853
    .return ($P121)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "flip_ast" :anon :subid("180_1340317687.034") :outer("379_1340317687.034")
    .param pmc param_2265
    .param pmc param_2266
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 859
    .const 'Sub' $P2284 = "419_1340317687.034" 
    capture_lex $P2284
    .const 'Sub' $P2273 = "418_1340317687.034" 
    capture_lex $P2273
    new $P2264, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2264, control_2263
    push_eh $P2264
    .lex "self", param_2265
    .lex "$qast", param_2266
.annotate 'line', 860
    set $P120, param_2266
    unless_null $P120, vivify_1155
    new $P120, "Undef"
  vivify_1155:
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "QAST"
    get_who $P123, $P122
    set $P124, $P123["Regex"]
    type_check $I100, $P120, $P124
    if $I100, unless_2267_end
    new $P125, "Exception"
    set $P125['type'], .CONTROL_RETURN
    set $P126, param_2266
    unless_null $P126, vivify_1156
    new $P126, "Undef"
  vivify_1156:
    setattribute $P125, 'payload', $P126
    throw $P125
  unless_2267_end:
.annotate 'line', 861
    set $P120, param_2266
    unless_null $P120, vivify_1157
    new $P120, "Undef"
  vivify_1157:
    $S100 = $P120."rxtype"()
    iseq $I100, $S100, "literal"
    if $I100, if_2268
.annotate 'line', 864
    set $P121, param_2266
    unless_null $P121, vivify_1158
    new $P121, "Undef"
  vivify_1158:
    $S101 = $P121."rxtype"()
    iseq $I101, $S101, "concat"
    if $I101, if_2271
.annotate 'line', 869
    set $P122, param_2266
    unless_null $P122, vivify_1159
    new $P122, "Undef"
  vivify_1159:
    $S102 = $P122."rxtype"()
    iseq $I102, $S102, "pastnode"
    if $I102, if_2282
.annotate 'line', 873
    set $P124, param_2266
    unless_null $P124, vivify_1160
    new $P124, "Undef"
  vivify_1160:
    $P125 = $P124."list"()
    defined $I103, $P125
    unless $I103, for_undef_1161
    iter $P123, $P125
    new $P127, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P127, loop2286_handler
    push_eh $P127
  loop2286_test:
    unless $P123, loop2286_done
    shift $P126, $P123
  loop2286_redo:
    .const 'Sub' $P2284 = "419_1340317687.034" 
    capture_lex $P2284
    $P2284($P126)
  loop2286_next:
    goto loop2286_test
  loop2286_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P128, exception, 'type'
    eq $P128, .CONTROL_LOOP_NEXT, loop2286_next
    eq $P128, .CONTROL_LOOP_REDO, loop2286_redo
  loop2286_done:
    pop_eh 
  for_undef_1161:
.annotate 'line', 872
    goto if_2282_end
  if_2282:
  if_2282_end:
.annotate 'line', 869
    goto if_2271_end
  if_2271:
.annotate 'line', 864
    .const 'Sub' $P2273 = "418_1340317687.034" 
    capture_lex $P2273
    $P2273()
  if_2271_end:
    goto if_2268_end
  if_2268:
.annotate 'line', 862
    set $P2269, param_2266
    unless_null $P2269, vivify_1170
    $P2269 = root_new ['parrot';'ResizablePMCArray']
  vivify_1170:
    set $P121, $P2269[0]
    unless_null $P121, vivify_1171
    new $P121, "Undef"
  vivify_1171:
    $P122 = $P121."reverse"()
    set $P2270, param_2266
    unless_null $P2270, vivify_1172
    $P2270 = root_new ['parrot';'ResizablePMCArray']
    set param_2266, $P2270
  vivify_1172:
    set $P2270[0], $P122
  if_2268_end:
.annotate 'line', 859
    set $P120, param_2266
    unless_null $P120, vivify_1173
    new $P120, "Undef"
  vivify_1173:
    .return ($P120)
  control_2263:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P121, exception, "payload"
    .return ($P121)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.sub "_block2283"  :anon :subid("419_1340317687.034") :outer("180_1340317687.034")
    .param pmc param_2285
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 873
    .lex "$_", param_2285
    find_lex $P127, "self"
    nqp_decontainerize $P128, $P127
    find_lex $P129, "$_"
    unless_null $P129, vivify_1162
    new $P129, "Undef"
  vivify_1162:
    $P130 = $P128."flip_ast"($P129)
    .return ($P130)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Actions"]
.include "except_types.pasm"
.sub "_block2272"  :anon :subid("418_1340317687.034") :outer("180_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 865
    $P2275 = root_new ['parrot';'ResizablePMCArray']
    set $P2274, $P2275
    .lex "@tmp", $P2274
.annotate 'line', 864
    set $P2276, $P2274
    unless_null $P2276, vivify_1163
    $P2276 = root_new ['parrot';'ResizablePMCArray']
  vivify_1163:
.annotate 'line', 866
    new $P124, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P124, loop2278_handler
    push_eh $P124
  loop2278_test:
    find_lex $P122, "$qast"
    unless_null $P122, vivify_1164
    new $P122, "Undef"
  vivify_1164:
    $P123 = $P122."list"()
    set $N100, $P123
    unless $N100, loop2278_done
  loop2278_redo:
    set $P2277, $P2274
    unless_null $P2277, vivify_1165
    $P2277 = root_new ['parrot';'ResizablePMCArray']
  vivify_1165:
    find_lex $P124, "$qast"
    unless_null $P124, vivify_1166
    new $P124, "Undef"
  vivify_1166:
    $P125 = $P124."list"()
    $P126 = $P125."shift"()
    $P2277."push"($P126)
  loop2278_next:
    goto loop2278_test
  loop2278_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P125, exception, 'type'
    eq $P125, .CONTROL_LOOP_NEXT, loop2278_next
    eq $P125, .CONTROL_LOOP_REDO, loop2278_redo
  loop2278_done:
    pop_eh 
.annotate 'line', 867
    new $P122, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P122, loop2281_handler
    push_eh $P122
  loop2281_test:
    set $P2279, $P2274
    unless_null $P2279, vivify_1167
    $P2279 = root_new ['parrot';'ResizablePMCArray']
  vivify_1167:
    unless $P2279, loop2281_done
  loop2281_redo:
    find_lex $P122, "$qast"
    unless_null $P122, vivify_1168
    new $P122, "Undef"
  vivify_1168:
    $P123 = $P122."list"()
    find_lex $P124, "self"
    nqp_decontainerize $P125, $P124
    set $P2280, $P2274
    unless_null $P2280, vivify_1169
    $P2280 = root_new ['parrot';'ResizablePMCArray']
  vivify_1169:
    $P126 = $P2280."pop"()
    $P127 = $P125."flip_ast"($P126)
    $P123."push"($P127)
  loop2281_next:
    goto loop2281_test
  loop2281_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P123, exception, 'type'
    eq $P123, .CONTROL_LOOP_NEXT, loop2281_next
    eq $P123, .CONTROL_LOOP_REDO, loop2281_redo
  loop2281_done:
    pop_eh 
.annotate 'line', 864
    .return ($P2279)
.end


.HLL "nqp"

.namespace ["QRegex";"P6Regex";"Compiler"]
.sub "_block2288"  :subid("420_1340317687.034") :outer("181_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 880
    .lex "$?PACKAGE", $P2290
    .lex "$?CLASS", $P2291
    .return ()
.end


.HLL "nqp"

.namespace []
.sub "_block2294" :load :anon :subid("421_1340317687.034")
.annotate 'file', "src\\stage2\\gen\\NQPP6QRegex.pm"
.annotate 'line', 1
    .const '' $P2296 = "181_1340317687.034" 
    $P109 = $P2296()
    .return ($P109)
.end

