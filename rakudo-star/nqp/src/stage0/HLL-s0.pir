.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1000"  :anon :subid("191_1340317678.734")
    .param pmc param_1002 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 0
    .const 'Sub' $P2559 = "347_1340317678.734" 
    capture_lex $P2559
    .const 'Sub' $P2437 = "343_1340317678.734" 
    capture_lex $P2437
    .const 'Sub' $P2297 = "333_1340317678.734" 
    capture_lex $P2297
    .const 'Sub' $P2268 = "332_1340317678.734" 
    capture_lex $P2268
    .const 'Sub' $P1608 = "295_1340317678.734" 
    capture_lex $P1608
    .const 'Sub' $P1361 = "283_1340317678.734" 
    capture_lex $P1361
    .const 'Sub' $P1007 = "192_1340317678.734" 
    capture_lex $P1007
.annotate 'line', 1
    .lex "@ARGS", param_1002
    .lex "GLOBALish", $P1003
    .lex "$?PACKAGE", $P1004
.annotate 'line', 1725
    new $P100, "Undef"
    set $P1005, $P100
    .lex "$compiler", $P1005
.annotate 'line', 1046
    load_bytecode "Parrot/Exception.pbc"
.annotate 'line', 1045
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 7
    .const 'Sub' $P1007 = "192_1340317678.734" 
    capture_lex $P1007
    $P1007()
.annotate 'line', 858
    .const 'Sub' $P1361 = "283_1340317678.734" 
    capture_lex $P1361
    $P1361()
.annotate 'line', 1053
    .const 'Sub' $P1608 = "295_1340317678.734" 
    capture_lex $P1608
    $P1608()
.annotate 'line', 1725
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "HLL"
    get_who $P103, $P102
    set $P104, $P103["Compiler"]
    $P105 = $P104."new"()
    set $P1005, $P105
.annotate 'line', 1726
    set $P101, $P1005
    unless_null $P101, vivify_1018
    new $P101, "Undef"
  vivify_1018:
    $P101."language"("parrot")
.annotate 'line', 1820
    .const 'Sub' $P2268 = "332_1340317678.734" 
    capture_lex $P2268
    $P2268()
.annotate 'line', 1851
    .const 'Sub' $P2297 = "333_1340317678.734" 
    capture_lex $P2297
    $P2297()
.annotate 'line', 2042
    .const 'Sub' $P2437 = "343_1340317678.734" 
    capture_lex $P2437
    $P2437()
.annotate 'line', 1
    set $P102, param_1002
    if $P102, if_2554
    set $P101, $P102
    goto if_2554_end
  if_2554:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P103, "ModuleLoader"
    getinterp $P104
    set $P105, $P104["context"]
    $P106 = $P103."set_mainline_module"($P105)
    set $P101, $P106
  if_2554_end:
    .return ($P101)
.annotate 'line', 1045
    .const 'Sub' $P2556 = "346_1340317678.734" 
.annotate 'line', 1
    .return ($P2556)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post348") :outer("191_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 0
    .const 'Sub' $P1001 = "191_1340317678.734" 
    .local pmc block
    set block, $P1001
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P108
    get_class $P109, "LexPad"
    get_class $P110, "NQPLexPad"
    $P108."hll_map"($P109, $P110)
    nqp_create_sc $P111, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547"
    .local pmc cur_sc
    set cur_sc, $P111
    cur_sc."set_description"("src\\stage2\\gen\\NQPHLL.pm")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P112, "ModuleLoader"
    $P113 = $P112."load_setting"("NQPCORE")
    block."set_outer_ctx"($P113)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P112, "ModuleLoader"
    $P112."load_module"("QRegex")
    set $S100, ""
    new $P112, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P112
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "7E033569F34177212576FDA0294C745BCE7F0C4A-1340317675.107"
    push string_heap, "src\\stage2\\QRegex.nqp"
    push string_heap, "NQPMatch"
    push string_heap, "NQPCursor"
    push string_heap, "NQPRegexMethod"
    push string_heap, "NQPRegex"
    push string_heap, "HLL"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "24B4A3E094679322365C61BEF17761CEF7D3E30E-1340317674.193"
    push string_heap, "src\\stage2\\NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!alt"
    push string_heap, "!alt_nfa"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "user-progname"
    push string_heap, "cli-options"
    push string_heap, "cli-arguments"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "$!user_progname"
    push string_heap, "@!cli-arguments"
    push string_heap, "%!cli-options"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "init"
    push string_heap, "arguments"
    push string_heap, "options"
    push string_heap, "add-argument"
    push string_heap, "add-option"
    push string_heap, "@!arguments"
    push string_heap, "%!options"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "stop-after-first-arg"
    push string_heap, "BUILD"
    push string_heap, "add-stopper"
    push string_heap, "split-option-aliases"
    push string_heap, "add-spec"
    push string_heap, "is-option"
    push string_heap, "wants-value"
    push string_heap, "optional-value"
    push string_heap, "parse"
    push string_heap, "@!specs"
    push string_heap, "%!options"
    push string_heap, "%!stopper"
    push string_heap, "$!stop-after-first-arg"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "slot_for_object"
    push string_heap, "get_slot_past_for_object"
    push string_heap, "get_slot_past_for_code_ref_at"
    push string_heap, "set_slot_past"
    push string_heap, "set_cur_sc"
    push string_heap, "add_object_to_cur_sc_past"
    push string_heap, "add_object"
    push string_heap, "add_root_code_ref"
    push string_heap, "update_root_code_ref"
    push string_heap, "is_precompilation_mode"
    push string_heap, "add_load_dependency_task"
    push string_heap, "add_fixup_task"
    push string_heap, "get_ref"
    push string_heap, "sc"
    push string_heap, "handle"
    push string_heap, "load_dependency_tasks"
    push string_heap, "fixup_tasks"
    push string_heap, "serialize_and_produce_deserialization_past"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "AEE56C4185E3F1A9434A478736F71908013C2160-1340317670.905"
    push string_heap, "src\\stage2\\gen\\nqp-mo.pm"
    push string_heap, "HLL::Grammar"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "FAILGOAL"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "HLL::Actions"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "HLL::Compiler"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "$!user_progname"
    push string_heap, "@!cli-arguments"
    push string_heap, "%!cli-options"
    push string_heap, "new"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "user-progname"
    push string_heap, "cli-options"
    push string_heap, "cli-arguments"
    push string_heap, "HLL::CommandLine::Result"
    push string_heap, "@!arguments"
    push string_heap, "%!options"
    push string_heap, "init"
    push string_heap, "arguments"
    push string_heap, "options"
    push string_heap, "add-argument"
    push string_heap, "add-option"
    push string_heap, "HLL::CommandLine::Parser"
    push string_heap, "@!specs"
    push string_heap, "%!options"
    push string_heap, "%!stopper"
    push string_heap, "$!stop-after-first-arg"
    push string_heap, "new"
    push string_heap, "stop-after-first-arg"
    push string_heap, "BUILD"
    push string_heap, "add-stopper"
    push string_heap, "split-option-aliases"
    push string_heap, "add-spec"
    push string_heap, "is-option"
    push string_heap, "wants-value"
    push string_heap, "optional-value"
    push string_heap, "parse"
    push string_heap, "HLL::World"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "new"
    push string_heap, "BUILD"
    push string_heap, "slot_for_object"
    push string_heap, "get_slot_past_for_object"
    push string_heap, "get_slot_past_for_code_ref_at"
    push string_heap, "set_slot_past"
    push string_heap, "set_cur_sc"
    push string_heap, "add_object_to_cur_sc_past"
    push string_heap, "add_object"
    push string_heap, "add_root_code_ref"
    push string_heap, "update_root_code_ref"
    push string_heap, "is_precompilation_mode"
    push string_heap, "add_load_dependency_task"
    push string_heap, "add_fixup_task"
    push string_heap, "get_ref"
    push string_heap, "sc"
    push string_heap, "handle"
    push string_heap, "load_dependency_tasks"
    push string_heap, "fixup_tasks"
    push string_heap, "serialize_and_produce_deserialization_past"
    push string_heap, "P6opaque"
    push string_heap, "NFA"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "CommandLine"
    push string_heap, "World"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "$!user_progname"
    push string_heap, "@!cli-arguments"
    push string_heap, "%!cli-options"
    push string_heap, "@!arguments"
    push string_heap, "%!options"
    push string_heap, "@!specs"
    push string_heap, "%!options"
    push string_heap, "%!stopper"
    push string_heap, "$!stop-after-first-arg"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "QRegex"
    push string_heap, "HLL"
    push string_heap, "P6opaque"
    push string_heap, "Result"
    push string_heap, "Parser"
    push string_heap, "CommandLine"
    .const 'Sub' $P2559 = "347_1340317678.734" 
    capture_lex $P2559
    $P114 = $P2559()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P114
    .const 'LexInfo' $P2730 = "191_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 0
    $P2730."set_static_lexpad_value"("GLOBALish", $P115)
    .const 'LexInfo' $P2731 = "191_1340317678.734" 
    $P2731."finish_static_lexpad"()
    .const 'LexInfo' $P2732 = "191_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 0
    $P2732."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2733 = "191_1340317678.734" 
    $P2733."finish_static_lexpad"()
    .const '' $P2734 = "10_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 2
    set_sub_code_object $P2734, $P115
    .const '' $P2735 = "11_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 3
    set_sub_code_object $P2735, $P115
    .const '' $P2736 = "12_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 4
    set_sub_code_object $P2736, $P115
    .const '' $P2737 = "13_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 5
    set_sub_code_object $P2737, $P115
    .const '' $P2738 = "14_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 6
    set_sub_code_object $P2738, $P115
    .const '' $P2739 = "15_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 7
    set_sub_code_object $P2739, $P115
    .const '' $P2740 = "16_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 8
    set_sub_code_object $P2740, $P115
    .const '' $P2741 = "17_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 9
    set_sub_code_object $P2741, $P115
    .const '' $P2742 = "18_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 10
    set_sub_code_object $P2742, $P115
    .const '' $P2743 = "19_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 11
    set_sub_code_object $P2743, $P115
    .const '' $P2744 = "20_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 12
    set_sub_code_object $P2744, $P115
    .const '' $P2745 = "22_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 13
    set_sub_code_object $P2745, $P115
    .const '' $P2746 = "23_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 14
    set_sub_code_object $P2746, $P115
    .const '' $P2747 = "24_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 15
    set_sub_code_object $P2747, $P115
    .const '' $P2748 = "25_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 16
    set_sub_code_object $P2748, $P115
    .const '' $P2749 = "26_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 17
    set_sub_code_object $P2749, $P115
    .const '' $P2750 = "28_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 18
    set_sub_code_object $P2750, $P115
    .const '' $P2751 = "29_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 19
    set_sub_code_object $P2751, $P115
    .const '' $P2752 = "30_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 20
    set_sub_code_object $P2752, $P115
    .const '' $P2753 = "31_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 21
    set_sub_code_object $P2753, $P115
    .const '' $P2754 = "32_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 22
    set_sub_code_object $P2754, $P115
    .const '' $P2755 = "33_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 23
    set_sub_code_object $P2755, $P115
    .const '' $P2756 = "34_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 24
    set_sub_code_object $P2756, $P115
    .const '' $P2757 = "35_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 25
    set_sub_code_object $P2757, $P115
    .const '' $P2758 = "36_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 26
    set_sub_code_object $P2758, $P115
    .const '' $P2759 = "39_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 27
    set_sub_code_object $P2759, $P115
    .const '' $P2760 = "41_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 28
    set_sub_code_object $P2760, $P115
    .const '' $P2761 = "42_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 29
    set_sub_code_object $P2761, $P115
    .const '' $P2762 = "43_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 30
    set_sub_code_object $P2762, $P115
    .const '' $P2763 = "44_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 31
    set_sub_code_object $P2763, $P115
    .const '' $P2764 = "45_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 32
    set_sub_code_object $P2764, $P115
    .const '' $P2765 = "46_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 33
    set_sub_code_object $P2765, $P115
    .const '' $P2766 = "47_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 34
    set_sub_code_object $P2766, $P115
    .const '' $P2767 = "48_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 35
    set_sub_code_object $P2767, $P115
    .const '' $P2768 = "49_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 36
    set_sub_code_object $P2768, $P115
    .const '' $P2769 = "50_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 37
    set_sub_code_object $P2769, $P115
    .const '' $P2770 = "51_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 38
    set_sub_code_object $P2770, $P115
    .const '' $P2771 = "53_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 39
    set_sub_code_object $P2771, $P115
    .const '' $P2772 = "55_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 40
    set_sub_code_object $P2772, $P115
    .const '' $P2773 = "56_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 41
    set_sub_code_object $P2773, $P115
    .const '' $P2774 = "58_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 42
    set_sub_code_object $P2774, $P115
    .const '' $P2775 = "61_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 43
    set_sub_code_object $P2775, $P115
    .const '' $P2776 = "62_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 44
    set_sub_code_object $P2776, $P115
    .const '' $P2777 = "63_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 45
    set_sub_code_object $P2777, $P115
    .const '' $P2778 = "65_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 46
    set_sub_code_object $P2778, $P115
    .const '' $P2779 = "66_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 47
    set_sub_code_object $P2779, $P115
    .const '' $P2780 = "67_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 48
    set_sub_code_object $P2780, $P115
    .const '' $P2781 = "68_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 49
    set_sub_code_object $P2781, $P115
    .const '' $P2782 = "69_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 50
    set_sub_code_object $P2782, $P115
    .const '' $P2783 = "70_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 51
    set_sub_code_object $P2783, $P115
    .const '' $P2784 = "71_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 52
    set_sub_code_object $P2784, $P115
    .const '' $P2785 = "72_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 53
    set_sub_code_object $P2785, $P115
    .const '' $P2786 = "73_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 54
    set_sub_code_object $P2786, $P115
    .const '' $P2787 = "73_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 1
    get_who $P116, $P115
    set $P116["split_words"], $P2787
    .const '' $P2788 = "74_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 55
    set_sub_code_object $P2788, $P115
    .const '' $P2789 = "75_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 56
    set_sub_code_object $P2789, $P115
    .const '' $P2790 = "76_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 57
    set_sub_code_object $P2790, $P115
    .const '' $P2791 = "77_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 58
    set_sub_code_object $P2791, $P115
    .const '' $P2792 = "78_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 59
    set_sub_code_object $P2792, $P115
    .const '' $P2793 = "79_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 60
    set_sub_code_object $P2793, $P115
    .const 'LexInfo' $P2794 = "192_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 1
    $P2794."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2795 = "192_1340317678.734" 
    $P2795."finish_static_lexpad"()
    .const 'LexInfo' $P2796 = "192_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 1
    $P2796."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2797 = "192_1340317678.734" 
    $P2797."finish_static_lexpad"()
    .const '' $P2798 = "284_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 61
    get_who $P116, $P115
    set $P116["string_to_int"], $P2798
    .const '' $P2799 = "80_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 62
    set_sub_code_object $P2799, $P115
    .const '' $P2800 = "81_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 63
    set_sub_code_object $P2800, $P115
    .const '' $P2801 = "82_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 64
    set_sub_code_object $P2801, $P115
    .const '' $P2802 = "83_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 65
    set_sub_code_object $P2802, $P115
    .const '' $P2803 = "84_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 66
    set_sub_code_object $P2803, $P115
    .const '' $P2804 = "85_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 67
    set_sub_code_object $P2804, $P115
    .const '' $P2805 = "86_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 68
    set_sub_code_object $P2805, $P115
    .const '' $P2806 = "87_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 69
    set_sub_code_object $P2806, $P115
    .const '' $P2807 = "88_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 70
    set_sub_code_object $P2807, $P115
    .const '' $P2808 = "89_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 71
    set_sub_code_object $P2808, $P115
    .const '' $P2809 = "90_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 72
    set_sub_code_object $P2809, $P115
    .const '' $P2810 = "91_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 73
    set_sub_code_object $P2810, $P115
    .const '' $P2811 = "92_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 74
    set_sub_code_object $P2811, $P115
    .const '' $P2812 = "93_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 75
    set_sub_code_object $P2812, $P115
    .const '' $P2813 = "94_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 76
    set_sub_code_object $P2813, $P115
    .const '' $P2814 = "95_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 77
    set_sub_code_object $P2814, $P115
    .const '' $P2815 = "96_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 78
    set_sub_code_object $P2815, $P115
    .const '' $P2816 = "97_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 79
    set_sub_code_object $P2816, $P115
    .const '' $P2817 = "98_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 80
    set_sub_code_object $P2817, $P115
    .const '' $P2818 = "99_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 81
    set_sub_code_object $P2818, $P115
    .const '' $P2819 = "100_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 82
    set_sub_code_object $P2819, $P115
    .const '' $P2820 = "101_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 83
    set_sub_code_object $P2820, $P115
    .const '' $P2821 = "102_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 84
    set_sub_code_object $P2821, $P115
    .const '' $P2822 = "103_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 85
    set_sub_code_object $P2822, $P115
    .const '' $P2823 = "104_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 86
    set_sub_code_object $P2823, $P115
    .const '' $P2824 = "105_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 87
    set_sub_code_object $P2824, $P115
    .const '' $P2825 = "106_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 88
    set_sub_code_object $P2825, $P115
    .const '' $P2826 = "107_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 89
    set_sub_code_object $P2826, $P115
    .const '' $P2827 = "108_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 90
    set_sub_code_object $P2827, $P115
    .const '' $P2828 = "109_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 91
    set_sub_code_object $P2828, $P115
    .const '' $P2829 = "110_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 92
    set_sub_code_object $P2829, $P115
    .const '' $P2830 = "111_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 93
    set_sub_code_object $P2830, $P115
    .const '' $P2831 = "112_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 94
    set_sub_code_object $P2831, $P115
    .const 'LexInfo' $P2832 = "283_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 61
    $P2832."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2833 = "283_1340317678.734" 
    $P2833."finish_static_lexpad"()
    .const 'LexInfo' $P2834 = "283_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 61
    $P2834."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2835 = "283_1340317678.734" 
    $P2835."finish_static_lexpad"()
    .const '' $P2836 = "113_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 96
    set_sub_code_object $P2836, $P115
    .const '' $P2837 = "114_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 97
    set_sub_code_object $P2837, $P115
    .const '' $P2838 = "115_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 98
    set_sub_code_object $P2838, $P115
    .const '' $P2839 = "116_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 99
    set_sub_code_object $P2839, $P115
    .const '' $P2840 = "117_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 100
    set_sub_code_object $P2840, $P115
    .const '' $P2841 = "118_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 101
    set_sub_code_object $P2841, $P115
    .const '' $P2842 = "119_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 102
    set_sub_code_object $P2842, $P115
    .const '' $P2843 = "120_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 103
    set_sub_code_object $P2843, $P115
    .const '' $P2844 = "121_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 104
    set_sub_code_object $P2844, $P115
    .const '' $P2845 = "122_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 105
    set_sub_code_object $P2845, $P115
    .const '' $P2846 = "123_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 106
    set_sub_code_object $P2846, $P115
    .const '' $P2847 = "124_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 107
    set_sub_code_object $P2847, $P115
    .const '' $P2848 = "125_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 108
    set_sub_code_object $P2848, $P115
    .const '' $P2849 = "126_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 109
    set_sub_code_object $P2849, $P115
    .const '' $P2850 = "127_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 110
    set_sub_code_object $P2850, $P115
    .const '' $P2851 = "128_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 111
    set_sub_code_object $P2851, $P115
    .const '' $P2852 = "129_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 112
    set_sub_code_object $P2852, $P115
    .const '' $P2853 = "130_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 113
    set_sub_code_object $P2853, $P115
    .const '' $P2854 = "131_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 114
    set_sub_code_object $P2854, $P115
    .const '' $P2855 = "132_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 115
    set_sub_code_object $P2855, $P115
    .const '' $P2856 = "133_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 116
    set_sub_code_object $P2856, $P115
    .const '' $P2857 = "134_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 117
    set_sub_code_object $P2857, $P115
    .const '' $P2858 = "135_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 118
    set_sub_code_object $P2858, $P115
    .const '' $P2859 = "136_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 119
    set_sub_code_object $P2859, $P115
    .const '' $P2860 = "137_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 120
    set_sub_code_object $P2860, $P115
    .const '' $P2861 = "138_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 121
    set_sub_code_object $P2861, $P115
    .const '' $P2862 = "139_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 122
    set_sub_code_object $P2862, $P115
    .const '' $P2863 = "140_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 123
    set_sub_code_object $P2863, $P115
    .const '' $P2864 = "141_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 124
    set_sub_code_object $P2864, $P115
    .const '' $P2865 = "142_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 125
    set_sub_code_object $P2865, $P115
    .const '' $P2866 = "143_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 126
    set_sub_code_object $P2866, $P115
    .const '' $P2867 = "144_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 127
    set_sub_code_object $P2867, $P115
    .const '' $P2868 = "145_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 128
    set_sub_code_object $P2868, $P115
    .const '' $P2869 = "146_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 129
    set_sub_code_object $P2869, $P115
    .const '' $P2870 = "147_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 130
    set_sub_code_object $P2870, $P115
    .const '' $P2871 = "148_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 131
    set_sub_code_object $P2871, $P115
    .const '' $P2872 = "149_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 132
    set_sub_code_object $P2872, $P115
    .const '' $P2873 = "150_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 133
    set_sub_code_object $P2873, $P115
    .const '' $P2874 = "151_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 134
    set_sub_code_object $P2874, $P115
    .const '' $P2875 = "152_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 135
    set_sub_code_object $P2875, $P115
    .const '' $P2876 = "153_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 136
    set_sub_code_object $P2876, $P115
    .const '' $P2877 = "154_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 137
    set_sub_code_object $P2877, $P115
    .const '' $P2878 = "155_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 138
    set_sub_code_object $P2878, $P115
    .const 'LexInfo' $P2879 = "295_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    $P2879."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2880 = "295_1340317678.734" 
    $P2880."finish_static_lexpad"()
    .const 'LexInfo' $P2881 = "295_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    $P2881."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2882 = "295_1340317678.734" 
    $P2882."finish_static_lexpad"()
    .const '' $P2883 = "156_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 140
    set_sub_code_object $P2883, $P115
    .const '' $P2884 = "157_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 141
    set_sub_code_object $P2884, $P115
    .const '' $P2885 = "158_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 142
    set_sub_code_object $P2885, $P115
    .const '' $P2886 = "159_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 143
    set_sub_code_object $P2886, $P115
    .const '' $P2887 = "160_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 144
    set_sub_code_object $P2887, $P115
    .const 'LexInfo' $P2888 = "332_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    $P2888."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2889 = "332_1340317678.734" 
    $P2889."finish_static_lexpad"()
    .const 'LexInfo' $P2890 = "332_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    $P2890."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2891 = "332_1340317678.734" 
    $P2891."finish_static_lexpad"()
    .const '' $P2892 = "161_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 146
    set_sub_code_object $P2892, $P115
    .const '' $P2893 = "162_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 147
    set_sub_code_object $P2893, $P115
    .const '' $P2894 = "163_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 148
    set_sub_code_object $P2894, $P115
    .const '' $P2895 = "164_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 149
    set_sub_code_object $P2895, $P115
    .const '' $P2896 = "165_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 150
    set_sub_code_object $P2896, $P115
    .const '' $P2897 = "166_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 151
    set_sub_code_object $P2897, $P115
    .const '' $P2898 = "167_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 152
    set_sub_code_object $P2898, $P115
    .const '' $P2899 = "168_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 153
    set_sub_code_object $P2899, $P115
    .const '' $P2900 = "169_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 154
    set_sub_code_object $P2900, $P115
    .const '' $P2901 = "170_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 155
    set_sub_code_object $P2901, $P115
    .const 'LexInfo' $P2902 = "333_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    $P2902."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2903 = "333_1340317678.734" 
    $P2903."finish_static_lexpad"()
    .const 'LexInfo' $P2904 = "333_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    $P2904."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2905 = "333_1340317678.734" 
    $P2905."finish_static_lexpad"()
    .const '' $P2906 = "171_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 157
    set_sub_code_object $P2906, $P115
    .const '' $P2907 = "172_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 158
    set_sub_code_object $P2907, $P115
    .const '' $P2908 = "173_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 159
    set_sub_code_object $P2908, $P115
    .const '' $P2909 = "174_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 160
    set_sub_code_object $P2909, $P115
    .const '' $P2910 = "175_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 161
    set_sub_code_object $P2910, $P115
    .const '' $P2911 = "176_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 162
    set_sub_code_object $P2911, $P115
    .const '' $P2912 = "177_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 163
    set_sub_code_object $P2912, $P115
    .const '' $P2913 = "178_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 164
    set_sub_code_object $P2913, $P115
    .const '' $P2914 = "179_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 165
    set_sub_code_object $P2914, $P115
    .const '' $P2915 = "180_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 166
    set_sub_code_object $P2915, $P115
    .const '' $P2916 = "181_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 167
    set_sub_code_object $P2916, $P115
    .const '' $P2917 = "182_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 168
    set_sub_code_object $P2917, $P115
    .const '' $P2918 = "183_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 169
    set_sub_code_object $P2918, $P115
    .const '' $P2919 = "184_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 170
    set_sub_code_object $P2919, $P115
    .const '' $P2920 = "185_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 171
    set_sub_code_object $P2920, $P115
    .const '' $P2921 = "186_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 172
    set_sub_code_object $P2921, $P115
    .const '' $P2922 = "187_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 173
    set_sub_code_object $P2922, $P115
    .const '' $P2923 = "188_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 174
    set_sub_code_object $P2923, $P115
    .const '' $P2924 = "189_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 175
    set_sub_code_object $P2924, $P115
    .const '' $P2925 = "190_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 176
    set_sub_code_object $P2925, $P115
    .const 'LexInfo' $P2926 = "343_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    $P2926."set_static_lexpad_value"("$?PACKAGE", $P115)
    .const 'LexInfo' $P2927 = "343_1340317678.734" 
    $P2927."finish_static_lexpad"()
    .const 'LexInfo' $P2928 = "343_1340317678.734" 
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    $P2928."set_static_lexpad_value"("$?CLASS", $P115)
    .const 'LexInfo' $P2929 = "343_1340317678.734" 
    $P2929."finish_static_lexpad"()
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 0
    set_hll_global "GLOBAL", $P115
.end


.HLL "nqp"

.namespace []
.sub "_block2558"  :anon :subid("347_1340317678.734") :outer("191_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 0
    .const 'Sub' $P2560 = "10_1340317678.734" 
    .const 'Sub' $P2561 = "11_1340317678.734" 
    .const 'Sub' $P2562 = "12_1340317678.734" 
    .const 'Sub' $P2563 = "13_1340317678.734" 
    .const 'Sub' $P2564 = "14_1340317678.734" 
    .const 'Sub' $P2565 = "15_1340317678.734" 
    .const 'Sub' $P2566 = "16_1340317678.734" 
    .const 'Sub' $P2567 = "17_1340317678.734" 
    .const 'Sub' $P2568 = "18_1340317678.734" 
    .const 'Sub' $P2569 = "19_1340317678.734" 
    .const 'Sub' $P2570 = "20_1340317678.734" 
    .const 'Sub' $P2571 = "22_1340317678.734" 
    .const 'Sub' $P2572 = "23_1340317678.734" 
    .const 'Sub' $P2573 = "24_1340317678.734" 
    .const 'Sub' $P2574 = "25_1340317678.734" 
    .const 'Sub' $P2575 = "26_1340317678.734" 
    .const 'Sub' $P2576 = "28_1340317678.734" 
    .const 'Sub' $P2577 = "29_1340317678.734" 
    .const 'Sub' $P2578 = "30_1340317678.734" 
    .const 'Sub' $P2579 = "31_1340317678.734" 
    .const 'Sub' $P2580 = "32_1340317678.734" 
    .const 'Sub' $P2581 = "33_1340317678.734" 
    .const 'Sub' $P2582 = "34_1340317678.734" 
    .const 'Sub' $P2583 = "35_1340317678.734" 
    .const 'Sub' $P2584 = "36_1340317678.734" 
    .const 'Sub' $P2585 = "39_1340317678.734" 
    .const 'Sub' $P2586 = "41_1340317678.734" 
    .const 'Sub' $P2587 = "42_1340317678.734" 
    .const 'Sub' $P2588 = "43_1340317678.734" 
    .const 'Sub' $P2589 = "44_1340317678.734" 
    .const 'Sub' $P2590 = "45_1340317678.734" 
    .const 'Sub' $P2591 = "46_1340317678.734" 
    .const 'Sub' $P2592 = "47_1340317678.734" 
    .const 'Sub' $P2593 = "48_1340317678.734" 
    .const 'Sub' $P2594 = "49_1340317678.734" 
    .const 'Sub' $P2595 = "50_1340317678.734" 
    .const 'Sub' $P2596 = "51_1340317678.734" 
    .const 'Sub' $P2597 = "53_1340317678.734" 
    .const 'Sub' $P2598 = "55_1340317678.734" 
    .const 'Sub' $P2599 = "56_1340317678.734" 
    .const 'Sub' $P2600 = "58_1340317678.734" 
    .const 'Sub' $P2601 = "61_1340317678.734" 
    .const 'Sub' $P2602 = "62_1340317678.734" 
    .const 'Sub' $P2603 = "63_1340317678.734" 
    .const 'Sub' $P2604 = "65_1340317678.734" 
    .const 'Sub' $P2605 = "66_1340317678.734" 
    .const 'Sub' $P2606 = "67_1340317678.734" 
    .const 'Sub' $P2607 = "68_1340317678.734" 
    .const 'Sub' $P2608 = "69_1340317678.734" 
    .const 'Sub' $P2609 = "70_1340317678.734" 
    .const 'Sub' $P2610 = "71_1340317678.734" 
    .const 'Sub' $P2611 = "72_1340317678.734" 
    .const 'Sub' $P2612 = "73_1340317678.734" 
    .const 'Sub' $P2613 = "74_1340317678.734" 
    .const 'Sub' $P2614 = "75_1340317678.734" 
    .const 'Sub' $P2615 = "76_1340317678.734" 
    .const 'Sub' $P2616 = "77_1340317678.734" 
    .const 'Sub' $P2617 = "78_1340317678.734" 
    .const 'Sub' $P2618 = "79_1340317678.734" 
    .const 'Sub' $P2619 = "80_1340317678.734" 
    .const 'Sub' $P2620 = "81_1340317678.734" 
    .const 'Sub' $P2621 = "82_1340317678.734" 
    .const 'Sub' $P2622 = "83_1340317678.734" 
    .const 'Sub' $P2623 = "84_1340317678.734" 
    .const 'Sub' $P2624 = "85_1340317678.734" 
    .const 'Sub' $P2625 = "86_1340317678.734" 
    .const 'Sub' $P2626 = "87_1340317678.734" 
    .const 'Sub' $P2627 = "88_1340317678.734" 
    .const 'Sub' $P2628 = "89_1340317678.734" 
    .const 'Sub' $P2629 = "90_1340317678.734" 
    .const 'Sub' $P2630 = "91_1340317678.734" 
    .const 'Sub' $P2631 = "92_1340317678.734" 
    .const 'Sub' $P2632 = "93_1340317678.734" 
    .const 'Sub' $P2633 = "94_1340317678.734" 
    .const 'Sub' $P2634 = "95_1340317678.734" 
    .const 'Sub' $P2635 = "96_1340317678.734" 
    .const 'Sub' $P2636 = "97_1340317678.734" 
    .const 'Sub' $P2637 = "98_1340317678.734" 
    .const 'Sub' $P2638 = "99_1340317678.734" 
    .const 'Sub' $P2639 = "100_1340317678.734" 
    .const 'Sub' $P2640 = "101_1340317678.734" 
    .const 'Sub' $P2641 = "102_1340317678.734" 
    .const 'Sub' $P2642 = "103_1340317678.734" 
    .const 'Sub' $P2643 = "104_1340317678.734" 
    .const 'Sub' $P2644 = "105_1340317678.734" 
    .const 'Sub' $P2645 = "106_1340317678.734" 
    .const 'Sub' $P2646 = "107_1340317678.734" 
    .const 'Sub' $P2647 = "108_1340317678.734" 
    .const 'Sub' $P2648 = "109_1340317678.734" 
    .const 'Sub' $P2649 = "110_1340317678.734" 
    .const 'Sub' $P2650 = "111_1340317678.734" 
    .const 'Sub' $P2651 = "112_1340317678.734" 
    .const 'Sub' $P2652 = "113_1340317678.734" 
    .const 'Sub' $P2653 = "114_1340317678.734" 
    .const 'Sub' $P2654 = "115_1340317678.734" 
    .const 'Sub' $P2655 = "116_1340317678.734" 
    .const 'Sub' $P2656 = "117_1340317678.734" 
    .const 'Sub' $P2657 = "118_1340317678.734" 
    .const 'Sub' $P2658 = "119_1340317678.734" 
    .const 'Sub' $P2659 = "120_1340317678.734" 
    .const 'Sub' $P2660 = "121_1340317678.734" 
    .const 'Sub' $P2661 = "122_1340317678.734" 
    .const 'Sub' $P2662 = "123_1340317678.734" 
    .const 'Sub' $P2663 = "124_1340317678.734" 
    .const 'Sub' $P2664 = "125_1340317678.734" 
    .const 'Sub' $P2665 = "126_1340317678.734" 
    .const 'Sub' $P2666 = "127_1340317678.734" 
    .const 'Sub' $P2667 = "128_1340317678.734" 
    .const 'Sub' $P2668 = "129_1340317678.734" 
    .const 'Sub' $P2669 = "130_1340317678.734" 
    .const 'Sub' $P2670 = "131_1340317678.734" 
    .const 'Sub' $P2671 = "132_1340317678.734" 
    .const 'Sub' $P2672 = "133_1340317678.734" 
    .const 'Sub' $P2673 = "134_1340317678.734" 
    .const 'Sub' $P2674 = "135_1340317678.734" 
    .const 'Sub' $P2675 = "136_1340317678.734" 
    .const 'Sub' $P2676 = "137_1340317678.734" 
    .const 'Sub' $P2677 = "138_1340317678.734" 
    .const 'Sub' $P2678 = "139_1340317678.734" 
    .const 'Sub' $P2679 = "140_1340317678.734" 
    .const 'Sub' $P2680 = "141_1340317678.734" 
    .const 'Sub' $P2681 = "142_1340317678.734" 
    .const 'Sub' $P2682 = "143_1340317678.734" 
    .const 'Sub' $P2683 = "144_1340317678.734" 
    .const 'Sub' $P2684 = "145_1340317678.734" 
    .const 'Sub' $P2685 = "146_1340317678.734" 
    .const 'Sub' $P2686 = "147_1340317678.734" 
    .const 'Sub' $P2687 = "148_1340317678.734" 
    .const 'Sub' $P2688 = "149_1340317678.734" 
    .const 'Sub' $P2689 = "150_1340317678.734" 
    .const 'Sub' $P2690 = "151_1340317678.734" 
    .const 'Sub' $P2691 = "152_1340317678.734" 
    .const 'Sub' $P2692 = "153_1340317678.734" 
    .const 'Sub' $P2693 = "154_1340317678.734" 
    .const 'Sub' $P2694 = "155_1340317678.734" 
    .const 'Sub' $P2695 = "156_1340317678.734" 
    .const 'Sub' $P2696 = "157_1340317678.734" 
    .const 'Sub' $P2697 = "158_1340317678.734" 
    .const 'Sub' $P2698 = "159_1340317678.734" 
    .const 'Sub' $P2699 = "160_1340317678.734" 
    .const 'Sub' $P2700 = "161_1340317678.734" 
    .const 'Sub' $P2701 = "162_1340317678.734" 
    .const 'Sub' $P2702 = "163_1340317678.734" 
    .const 'Sub' $P2703 = "164_1340317678.734" 
    .const 'Sub' $P2704 = "165_1340317678.734" 
    .const 'Sub' $P2705 = "166_1340317678.734" 
    .const 'Sub' $P2706 = "167_1340317678.734" 
    .const 'Sub' $P2707 = "168_1340317678.734" 
    .const 'Sub' $P2708 = "169_1340317678.734" 
    .const 'Sub' $P2709 = "170_1340317678.734" 
    .const 'Sub' $P2710 = "171_1340317678.734" 
    .const 'Sub' $P2711 = "172_1340317678.734" 
    .const 'Sub' $P2712 = "173_1340317678.734" 
    .const 'Sub' $P2713 = "174_1340317678.734" 
    .const 'Sub' $P2714 = "175_1340317678.734" 
    .const 'Sub' $P2715 = "176_1340317678.734" 
    .const 'Sub' $P2716 = "177_1340317678.734" 
    .const 'Sub' $P2717 = "178_1340317678.734" 
    .const 'Sub' $P2718 = "179_1340317678.734" 
    .const 'Sub' $P2719 = "180_1340317678.734" 
    .const 'Sub' $P2720 = "181_1340317678.734" 
    .const 'Sub' $P2721 = "182_1340317678.734" 
    .const 'Sub' $P2722 = "183_1340317678.734" 
    .const 'Sub' $P2723 = "184_1340317678.734" 
    .const 'Sub' $P2724 = "185_1340317678.734" 
    .const 'Sub' $P2725 = "186_1340317678.734" 
    .const 'Sub' $P2726 = "187_1340317678.734" 
    .const 'Sub' $P2727 = "188_1340317678.734" 
    .const 'Sub' $P2728 = "189_1340317678.734" 
    .const 'Sub' $P2729 = "190_1340317678.734" 
    new $P113, "ResizablePMCArray"
    push $P113, $P2560
    push $P113, $P2561
    push $P113, $P2562
    push $P113, $P2563
    push $P113, $P2564
    push $P113, $P2565
    push $P113, $P2566
    push $P113, $P2567
    push $P113, $P2568
    push $P113, $P2569
    push $P113, $P2570
    push $P113, $P2571
    push $P113, $P2572
    push $P113, $P2573
    push $P113, $P2574
    push $P113, $P2575
    push $P113, $P2576
    push $P113, $P2577
    push $P113, $P2578
    push $P113, $P2579
    push $P113, $P2580
    push $P113, $P2581
    push $P113, $P2582
    push $P113, $P2583
    push $P113, $P2584
    push $P113, $P2585
    push $P113, $P2586
    push $P113, $P2587
    push $P113, $P2588
    push $P113, $P2589
    push $P113, $P2590
    push $P113, $P2591
    push $P113, $P2592
    push $P113, $P2593
    push $P113, $P2594
    push $P113, $P2595
    push $P113, $P2596
    push $P113, $P2597
    push $P113, $P2598
    push $P113, $P2599
    push $P113, $P2600
    push $P113, $P2601
    push $P113, $P2602
    push $P113, $P2603
    push $P113, $P2604
    push $P113, $P2605
    push $P113, $P2606
    push $P113, $P2607
    push $P113, $P2608
    push $P113, $P2609
    push $P113, $P2610
    push $P113, $P2611
    push $P113, $P2612
    push $P113, $P2613
    push $P113, $P2614
    push $P113, $P2615
    push $P113, $P2616
    push $P113, $P2617
    push $P113, $P2618
    push $P113, $P2619
    push $P113, $P2620
    push $P113, $P2621
    push $P113, $P2622
    push $P113, $P2623
    push $P113, $P2624
    push $P113, $P2625
    push $P113, $P2626
    push $P113, $P2627
    push $P113, $P2628
    push $P113, $P2629
    push $P113, $P2630
    push $P113, $P2631
    push $P113, $P2632
    push $P113, $P2633
    push $P113, $P2634
    push $P113, $P2635
    push $P113, $P2636
    push $P113, $P2637
    push $P113, $P2638
    push $P113, $P2639
    push $P113, $P2640
    push $P113, $P2641
    push $P113, $P2642
    push $P113, $P2643
    push $P113, $P2644
    push $P113, $P2645
    push $P113, $P2646
    push $P113, $P2647
    push $P113, $P2648
    push $P113, $P2649
    push $P113, $P2650
    push $P113, $P2651
    push $P113, $P2652
    push $P113, $P2653
    push $P113, $P2654
    push $P113, $P2655
    push $P113, $P2656
    push $P113, $P2657
    push $P113, $P2658
    push $P113, $P2659
    push $P113, $P2660
    push $P113, $P2661
    push $P113, $P2662
    push $P113, $P2663
    push $P113, $P2664
    push $P113, $P2665
    push $P113, $P2666
    push $P113, $P2667
    push $P113, $P2668
    push $P113, $P2669
    push $P113, $P2670
    push $P113, $P2671
    push $P113, $P2672
    push $P113, $P2673
    push $P113, $P2674
    push $P113, $P2675
    push $P113, $P2676
    push $P113, $P2677
    push $P113, $P2678
    push $P113, $P2679
    push $P113, $P2680
    push $P113, $P2681
    push $P113, $P2682
    push $P113, $P2683
    push $P113, $P2684
    push $P113, $P2685
    push $P113, $P2686
    push $P113, $P2687
    push $P113, $P2688
    push $P113, $P2689
    push $P113, $P2690
    push $P113, $P2691
    push $P113, $P2692
    push $P113, $P2693
    push $P113, $P2694
    push $P113, $P2695
    push $P113, $P2696
    push $P113, $P2697
    push $P113, $P2698
    push $P113, $P2699
    push $P113, $P2700
    push $P113, $P2701
    push $P113, $P2702
    push $P113, $P2703
    push $P113, $P2704
    push $P113, $P2705
    push $P113, $P2706
    push $P113, $P2707
    push $P113, $P2708
    push $P113, $P2709
    push $P113, $P2710
    push $P113, $P2711
    push $P113, $P2712
    push $P113, $P2713
    push $P113, $P2714
    push $P113, $P2715
    push $P113, $P2716
    push $P113, $P2717
    push $P113, $P2718
    push $P113, $P2719
    push $P113, $P2720
    push $P113, $P2721
    push $P113, $P2722
    push $P113, $P2723
    push $P113, $P2724
    push $P113, $P2725
    push $P113, $P2726
    push $P113, $P2727
    push $P113, $P2728
    push $P113, $P2729
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1006"  :subid("192_1340317678.734") :outer("191_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 7
    .const 'Sub' $P1352 = "79_1340317678.734" 
    capture_lex $P1352
    .const 'Sub' $P1342 = "78_1340317678.734" 
    capture_lex $P1342
    .const 'Sub' $P1334 = "77_1340317678.734" 
    capture_lex $P1334
    .const 'Sub' $P1326 = "76_1340317678.734" 
    capture_lex $P1326
    .const 'Sub' $P1322 = "75_1340317678.734" 
    capture_lex $P1322
    .const 'Sub' $P1319 = "74_1340317678.734" 
    capture_lex $P1319
    .const 'Sub' $P1316 = "73_1340317678.734" 
    capture_lex $P1316
    .const 'Sub' $P1314 = "72_1340317678.734" 
    capture_lex $P1314
    .const 'Sub' $P1312 = "71_1340317678.734" 
    capture_lex $P1312
    .const 'Sub' $P1303 = "70_1340317678.734" 
    capture_lex $P1303
    .const 'Sub' $P1290 = "69_1340317678.734" 
    capture_lex $P1290
    .const 'Sub' $P1286 = "68_1340317678.734" 
    capture_lex $P1286
    .const 'Sub' $P1281 = "67_1340317678.734" 
    capture_lex $P1281
    .const 'Sub' $P1270 = "66_1340317678.734" 
    capture_lex $P1270
    .const 'Sub' $P1266 = "65_1340317678.734" 
    capture_lex $P1266
    .const 'Sub' $P1259 = "63_1340317678.734" 
    capture_lex $P1259
    .const 'Sub' $P1253 = "62_1340317678.734" 
    capture_lex $P1253
    .const 'Sub' $P1243 = "61_1340317678.734" 
    capture_lex $P1243
    .const 'Sub' $P1227 = "58_1340317678.734" 
    capture_lex $P1227
    .const 'Sub' $P1221 = "56_1340317678.734" 
    capture_lex $P1221
    .const 'Sub' $P1215 = "55_1340317678.734" 
    capture_lex $P1215
    .const 'Sub' $P1208 = "53_1340317678.734" 
    capture_lex $P1208
    .const 'Sub' $P1201 = "51_1340317678.734" 
    capture_lex $P1201
    .const 'Sub' $P1195 = "50_1340317678.734" 
    capture_lex $P1195
    .const 'Sub' $P1189 = "49_1340317678.734" 
    capture_lex $P1189
    .const 'Sub' $P1183 = "48_1340317678.734" 
    capture_lex $P1183
    .const 'Sub' $P1177 = "47_1340317678.734" 
    capture_lex $P1177
    .const 'Sub' $P1171 = "46_1340317678.734" 
    capture_lex $P1171
    .const 'Sub' $P1165 = "45_1340317678.734" 
    capture_lex $P1165
    .const 'Sub' $P1159 = "44_1340317678.734" 
    capture_lex $P1159
    .const 'Sub' $P1153 = "43_1340317678.734" 
    capture_lex $P1153
    .const 'Sub' $P1145 = "41_1340317678.734" 
    capture_lex $P1145
    .const 'Sub' $P1138 = "39_1340317678.734" 
    capture_lex $P1138
    .const 'Sub' $P1130 = "36_1340317678.734" 
    capture_lex $P1130
    .const 'Sub' $P1124 = "35_1340317678.734" 
    capture_lex $P1124
    .const 'Sub' $P1118 = "34_1340317678.734" 
    capture_lex $P1118
    .const 'Sub' $P1112 = "33_1340317678.734" 
    capture_lex $P1112
    .const 'Sub' $P1106 = "32_1340317678.734" 
    capture_lex $P1106
    .const 'Sub' $P1100 = "31_1340317678.734" 
    capture_lex $P1100
    .const 'Sub' $P1094 = "30_1340317678.734" 
    capture_lex $P1094
    .const 'Sub' $P1088 = "29_1340317678.734" 
    capture_lex $P1088
    .const 'Sub' $P1082 = "28_1340317678.734" 
    capture_lex $P1082
    .const 'Sub' $P1076 = "26_1340317678.734" 
    capture_lex $P1076
    .const 'Sub' $P1070 = "25_1340317678.734" 
    capture_lex $P1070
    .const 'Sub' $P1067 = "24_1340317678.734" 
    capture_lex $P1067
    .const 'Sub' $P1061 = "23_1340317678.734" 
    capture_lex $P1061
    .const 'Sub' $P1055 = "22_1340317678.734" 
    capture_lex $P1055
    .const 'Sub' $P1048 = "20_1340317678.734" 
    capture_lex $P1048
    .const 'Sub' $P1042 = "19_1340317678.734" 
    capture_lex $P1042
    .const 'Sub' $P1036 = "18_1340317678.734" 
    capture_lex $P1036
    .const 'Sub' $P1030 = "17_1340317678.734" 
    capture_lex $P1030
    .const 'Sub' $P1012 = "10_1340317678.734" 
    capture_lex $P1012
.annotate 'line', 8
    new $P101, "Undef"
    set $P1008, $P101
    .lex "$brackets", $P1008
.annotate 'line', 9
    new $P102, "Undef"
    set $P1009, $P102
    .lex "$cursor_class", $P1009
    .lex "$?PACKAGE", $P1010
    .lex "$?CLASS", $P1011
.annotate 'line', 8
    new $P103, "String"
    assign $P103, unicode:"<>[](){}\x{ab}\x{bb}\u0f3a\u0f3b\u0f3c\u0f3d\u169b\u169c\u2045\u2046\u207d\u207e\u208d\u208e\u2329\u232a\u2768\u2769\u276a\u276b\u276c\u276d\u276e\u276f\u2770\u2771\u2772\u2773\u2774\u2775\u27c5\u27c6\u27e6\u27e7\u27e8\u27e9\u27ea\u27eb\u2983\u2984\u2985\u2986\u2987\u2988\u2989\u298a\u298b\u298c\u298d\u298e\u298f\u2990\u2991\u2992\u2993\u2994\u2995\u2996\u2997\u2998\u29d8\u29d9\u29da\u29db\u29fc\u29fd\u3008\u3009\u300a\u300b\u300c\u300d\u300e\u300f\u3010\u3011\u3014\u3015\u3016\u3017\u3018\u3019\u301a\u301b\u301d\u301e\ufd3e\ufd3f\ufe17\ufe18\ufe35\ufe36\ufe37\ufe38\ufe39\ufe3a\ufe3b\ufe3c\ufe3d\ufe3e\ufe3f\ufe40\ufe41\ufe42\ufe43\ufe44\ufe47\ufe48\ufe59\ufe5a\ufe5b\ufe5c\ufe5d\ufe5e\uff08\uff09\uff3b\uff3d\uff5b\uff5d\uff5f\uff60\uff62\uff63"
    set $P1008, $P103
.annotate 'line', 9
    set $P103, $P1010
    get_who $P104, $P103
    set $P107, $P104["NQPCursor"]
    unless_null $P107, vivify_349
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["NQPCursor"]
  vivify_349:
    set $P1009, $P107
.annotate 'line', 847
    .const 'Sub' $P1352 = "79_1340317678.734" 
    newclosure $P1359, $P1352
.annotate 'line', 7
    .return ($P1359)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "termish"  :subid("10_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1013
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 11
    .lex "self", param_1013
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1014
    .lex "$/", $P1015
    .local string rx10_tgt
    .local int rx10_pos
    .local int rx10_off
    .local int rx10_eos
    .local int rx10_rep
    .local pmc rx10_cur
    .local pmc rx10_curclass
    .local pmc rx10_bstack
    .local pmc rx10_cstack
    (rx10_cur, rx10_tgt, rx10_pos, rx10_curclass, rx10_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx10_cur
    length rx10_eos, rx10_tgt
    eq $I19, 1, rx10_restart
    repr_get_attr_int $I11, self, rx10_curclass, "$!from"
    ne $I11, -1, rxscan11_done
    goto rxscan11_scan
  rxscan11_loop:
    inc rx10_pos
    gt rx10_pos, rx10_eos, rx10_fail
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!from", rx10_pos
  rxscan11_scan:
    nqp_rxmark rx10_bstack, rxscan11_loop, rx10_pos, 0
  rxscan11_done:
  # rx rxquantr12 ** 0..-1
    nqp_rxmark rx10_bstack, rxquantr12_done, rx10_pos, 0
  rxquantr12_loop:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."prefixish"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    goto rxsubrule13_pass
  rxsubrule13_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
  rxsubrule13_pass:
    rx10_cstack = rx10_cur."!cursor_capture"($P11, "prefixish")
    set_addr $I11, rxsubrule13_back
    push rx10_bstack, $I11
    push rx10_bstack, 0
    push rx10_bstack, rx10_pos
    elements $I11, rx10_cstack
    push rx10_bstack, $I11
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
    nqp_rxpeek $I19, rx10_bstack, rxquantr12_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr12_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr12_done, rx10_pos, rx10_rep
    goto rxquantr12_loop
  rxquantr12_done:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."term"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    nqp_rxmark rx10_bstack, rxsubrule14_pass, -1, 0
  rxsubrule14_pass:
    rx10_cstack = rx10_cur."!cursor_capture"($P11, "term")
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
  # rx rxquantr15 ** 0..-1
    nqp_rxmark rx10_bstack, rxquantr15_done, rx10_pos, 0
  rxquantr15_loop:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."postfixish"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    goto rxsubrule16_pass
  rxsubrule16_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
  rxsubrule16_pass:
    rx10_cstack = rx10_cur."!cursor_capture"($P11, "postfixish")
    set_addr $I11, rxsubrule16_back
    push rx10_bstack, $I11
    push rx10_bstack, 0
    push rx10_bstack, rx10_pos
    elements $I11, rx10_cstack
    push rx10_bstack, $I11
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
    nqp_rxpeek $I19, rx10_bstack, rxquantr15_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr15_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr15_done, rx10_pos, rx10_rep
    goto rxquantr15_loop
  rxquantr15_done:
    rx10_cur."!cursor_pass"(rx10_pos, "termish", 'backtrack'=>1)
    .return (rx10_cur)
  rx10_restart:
    repr_get_attr_obj rx10_cstack, rx10_cur, rx10_curclass, "$!cstack"
  rx10_fail:
    unless rx10_bstack, rx10_done
    pop $I19, rx10_bstack
    if_null rx10_cstack, rx10_cstack_done
    unless rx10_cstack, rx10_cstack_done
    dec $I19
    set $P11, rx10_cstack[$I19]
  rx10_cstack_done:
    pop rx10_rep, rx10_bstack
    pop rx10_pos, rx10_bstack
    pop $I19, rx10_bstack
    lt rx10_pos, -1, rx10_done
    lt rx10_pos, 0, rx10_fail
    eq $I19, 0, rx10_fail
    if_null rx10_cstack, rx10_jump
    elements $I18, rx10_bstack
    le $I18, 0, rx10_cut
    dec $I18
    set $I18, rx10_bstack[$I18]
  rx10_cut:
    assign rx10_cstack, $I18
  rx10_jump:
    jump $I19
  rx10_done:
    rx10_cur."!cursor_fail"()
    .return (rx10_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "10_1340317678.734_caps"  :subid("193_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 11
    new $P104, "Hash"
    set $P104["prefixish"], 2
    set $P104["term"], 0
    set $P104["postfixish"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "10_1340317678.734_nfa"  :subid("194_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 11
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "prefixish"
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "term"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "postfixish"
    push $P107, 3
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "term"  :subid("11_1340317678.734")
    .param pmc param_1019
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 17
    .lex "self", param_1019
    $P103 = param_1019."!protoregex"("term")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "infix"  :subid("12_1340317678.734")
    .param pmc param_1021
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 18
    .lex "self", param_1021
    $P103 = param_1021."!protoregex"("infix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "prefix"  :subid("13_1340317678.734")
    .param pmc param_1023
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 19
    .lex "self", param_1023
    $P103 = param_1023."!protoregex"("prefix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "postfix"  :subid("14_1340317678.734")
    .param pmc param_1025
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 20
    .lex "self", param_1025
    $P103 = param_1025."!protoregex"("postfix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "circumfix"  :subid("15_1340317678.734")
    .param pmc param_1027
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 21
    .lex "self", param_1027
    $P103 = param_1027."!protoregex"("circumfix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "postcircumfix"  :subid("16_1340317678.734")
    .param pmc param_1029
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 22
    .lex "self", param_1029
    $P103 = param_1029."!protoregex"("postcircumfix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "term:sym<circumfix>"  :subid("17_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1031
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 24
    .lex "self", param_1031
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1032
    .lex "$/", $P1033
    .local string rx17_tgt
    .local int rx17_pos
    .local int rx17_off
    .local int rx17_eos
    .local int rx17_rep
    .local pmc rx17_cur
    .local pmc rx17_curclass
    .local pmc rx17_bstack
    .local pmc rx17_cstack
    (rx17_cur, rx17_tgt, rx17_pos, rx17_curclass, rx17_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx17_cur
    length rx17_eos, rx17_tgt
    eq $I19, 1, rx17_restart
    repr_get_attr_int $I11, self, rx17_curclass, "$!from"
    ne $I11, -1, rxscan18_done
    goto rxscan18_scan
  rxscan18_loop:
    inc rx17_pos
    gt rx17_pos, rx17_eos, rx17_fail
    repr_bind_attr_int rx17_cur, rx17_curclass, "$!from", rx17_pos
  rxscan18_scan:
    nqp_rxmark rx17_bstack, rxscan18_loop, rx17_pos, 0
  rxscan18_done:
    repr_bind_attr_int rx17_cur, rx17_curclass, "$!pos", rx17_pos
    $P11 = rx17_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx17_curclass, "$!pos"
    lt $I11, 0, rx17_fail
    nqp_rxmark rx17_bstack, rxsubrule19_pass, -1, 0
  rxsubrule19_pass:
    rx17_cstack = rx17_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx17_pos, $P11, rx17_curclass, "$!pos"
    rx17_cur."!cursor_pass"(rx17_pos, "term:sym<circumfix>", 'backtrack'=>1)
    .return (rx17_cur)
  rx17_restart:
    repr_get_attr_obj rx17_cstack, rx17_cur, rx17_curclass, "$!cstack"
  rx17_fail:
    unless rx17_bstack, rx17_done
    pop $I19, rx17_bstack
    if_null rx17_cstack, rx17_cstack_done
    unless rx17_cstack, rx17_cstack_done
    dec $I19
    set $P11, rx17_cstack[$I19]
  rx17_cstack_done:
    pop rx17_rep, rx17_bstack
    pop rx17_pos, rx17_bstack
    pop $I19, rx17_bstack
    lt rx17_pos, -1, rx17_done
    lt rx17_pos, 0, rx17_fail
    eq $I19, 0, rx17_fail
    if_null rx17_cstack, rx17_jump
    elements $I18, rx17_bstack
    le $I18, 0, rx17_cut
    dec $I18
    set $I18, rx17_bstack[$I18]
  rx17_cut:
    assign rx17_cstack, $I18
  rx17_jump:
    jump $I19
  rx17_done:
    rx17_cur."!cursor_fail"()
    .return (rx17_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "17_1340317678.734_caps"  :subid("195_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 24
    new $P104, "Hash"
    set $P104["circumfix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "17_1340317678.734_nfa"  :subid("196_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 24
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "circumfix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "infixish"  :subid("18_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1037
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 26
    .lex "self", param_1037
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1038
    .lex "$/", $P1039
    .local string rx20_tgt
    .local int rx20_pos
    .local int rx20_off
    .local int rx20_eos
    .local int rx20_rep
    .local pmc rx20_cur
    .local pmc rx20_curclass
    .local pmc rx20_bstack
    .local pmc rx20_cstack
    (rx20_cur, rx20_tgt, rx20_pos, rx20_curclass, rx20_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx20_cur
    length rx20_eos, rx20_tgt
    eq $I19, 1, rx20_restart
    repr_get_attr_int $I11, self, rx20_curclass, "$!from"
    ne $I11, -1, rxscan21_done
    goto rxscan21_scan
  rxscan21_loop:
    inc rx20_pos
    gt rx20_pos, rx20_eos, rx20_fail
    repr_bind_attr_int rx20_cur, rx20_curclass, "$!from", rx20_pos
  rxscan21_scan:
    nqp_rxmark rx20_bstack, rxscan21_loop, rx20_pos, 0
  rxscan21_done:
    repr_bind_attr_int rx20_cur, rx20_curclass, "$!pos", rx20_pos
    $P11 = rx20_cur."infix"()
    repr_get_attr_int $I11, $P11, rx20_curclass, "$!pos"
    lt $I11, 0, rx20_fail
    nqp_rxmark rx20_bstack, rxsubrule22_pass, -1, 0
  rxsubrule22_pass:
    rx20_cstack = rx20_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx20_pos, $P11, rx20_curclass, "$!pos"
    rx20_cur."!cursor_pass"(rx20_pos, "infixish", 'backtrack'=>1)
    .return (rx20_cur)
  rx20_restart:
    repr_get_attr_obj rx20_cstack, rx20_cur, rx20_curclass, "$!cstack"
  rx20_fail:
    unless rx20_bstack, rx20_done
    pop $I19, rx20_bstack
    if_null rx20_cstack, rx20_cstack_done
    unless rx20_cstack, rx20_cstack_done
    dec $I19
    set $P11, rx20_cstack[$I19]
  rx20_cstack_done:
    pop rx20_rep, rx20_bstack
    pop rx20_pos, rx20_bstack
    pop $I19, rx20_bstack
    lt rx20_pos, -1, rx20_done
    lt rx20_pos, 0, rx20_fail
    eq $I19, 0, rx20_fail
    if_null rx20_cstack, rx20_jump
    elements $I18, rx20_bstack
    le $I18, 0, rx20_cut
    dec $I18
    set $I18, rx20_bstack[$I18]
  rx20_cut:
    assign rx20_cstack, $I18
  rx20_jump:
    jump $I19
  rx20_done:
    rx20_cur."!cursor_fail"()
    .return (rx20_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "18_1340317678.734_caps"  :subid("197_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 26
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["infix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "18_1340317678.734_nfa"  :subid("198_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 26
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "infix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "prefixish"  :subid("19_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1043
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 27
    .lex "self", param_1043
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1044
    .lex "$/", $P1045
    .local string rx23_tgt
    .local int rx23_pos
    .local int rx23_off
    .local int rx23_eos
    .local int rx23_rep
    .local pmc rx23_cur
    .local pmc rx23_curclass
    .local pmc rx23_bstack
    .local pmc rx23_cstack
    (rx23_cur, rx23_tgt, rx23_pos, rx23_curclass, rx23_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx23_cur
    length rx23_eos, rx23_tgt
    eq $I19, 1, rx23_restart
    repr_get_attr_int $I11, self, rx23_curclass, "$!from"
    ne $I11, -1, rxscan24_done
    goto rxscan24_scan
  rxscan24_loop:
    inc rx23_pos
    gt rx23_pos, rx23_eos, rx23_fail
    repr_bind_attr_int rx23_cur, rx23_curclass, "$!from", rx23_pos
  rxscan24_scan:
    nqp_rxmark rx23_bstack, rxscan24_loop, rx23_pos, 0
  rxscan24_done:
    repr_bind_attr_int rx23_cur, rx23_curclass, "$!pos", rx23_pos
    $P11 = rx23_cur."prefix"()
    repr_get_attr_int $I11, $P11, rx23_curclass, "$!pos"
    lt $I11, 0, rx23_fail
    nqp_rxmark rx23_bstack, rxsubrule25_pass, -1, 0
  rxsubrule25_pass:
    rx23_cstack = rx23_cur."!cursor_capture"($P11, "OPER=prefix")
    repr_get_attr_int rx23_pos, $P11, rx23_curclass, "$!pos"
    repr_bind_attr_int rx23_cur, rx23_curclass, "$!pos", rx23_pos
    $P11 = rx23_cur."ws"()
    repr_get_attr_int $I11, $P11, rx23_curclass, "$!pos"
    lt $I11, 0, rx23_fail
    repr_get_attr_int rx23_pos, $P11, rx23_curclass, "$!pos"
    rx23_cur."!cursor_pass"(rx23_pos, "prefixish", 'backtrack'=>1)
    .return (rx23_cur)
  rx23_restart:
    repr_get_attr_obj rx23_cstack, rx23_cur, rx23_curclass, "$!cstack"
  rx23_fail:
    unless rx23_bstack, rx23_done
    pop $I19, rx23_bstack
    if_null rx23_cstack, rx23_cstack_done
    unless rx23_cstack, rx23_cstack_done
    dec $I19
    set $P11, rx23_cstack[$I19]
  rx23_cstack_done:
    pop rx23_rep, rx23_bstack
    pop rx23_pos, rx23_bstack
    pop $I19, rx23_bstack
    lt rx23_pos, -1, rx23_done
    lt rx23_pos, 0, rx23_fail
    eq $I19, 0, rx23_fail
    if_null rx23_cstack, rx23_jump
    elements $I18, rx23_bstack
    le $I18, 0, rx23_cut
    dec $I18
    set $I18, rx23_bstack[$I18]
  rx23_cut:
    assign rx23_cstack, $I18
  rx23_jump:
    jump $I19
  rx23_done:
    rx23_cur."!cursor_fail"()
    .return (rx23_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "19_1340317678.734_caps"  :subid("199_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 27
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["prefix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "19_1340317678.734_nfa"  :subid("200_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 27
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "prefix"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "postfixish"  :subid("20_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1049
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 28
    .lex "self", param_1049
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1050
    .lex "$/", $P1051
    .local string rx27_tgt
    .local int rx27_pos
    .local int rx27_off
    .local int rx27_eos
    .local int rx27_rep
    .local pmc rx27_cur
    .local pmc rx27_curclass
    .local pmc rx27_bstack
    .local pmc rx27_cstack
    (rx27_cur, rx27_tgt, rx27_pos, rx27_curclass, rx27_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx27_cur
    length rx27_eos, rx27_tgt
    eq $I19, 1, rx27_restart
    repr_get_attr_int $I11, self, rx27_curclass, "$!from"
    ne $I11, -1, rxscan28_done
    goto rxscan28_scan
  rxscan28_loop:
    inc rx27_pos
    gt rx27_pos, rx27_eos, rx27_fail
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!from", rx27_pos
  rxscan28_scan:
    nqp_rxmark rx27_bstack, rxscan28_loop, rx27_pos, 0
  rxscan28_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt29_0
    nqp_push_label $P11, alt29_1
    nqp_rxmark rx27_bstack, alt29_end, -1, 0
    rx27_cur."!alt"(rx27_pos, ucs4:"alt_nfa_21_1340317678.767", $P11)
    goto rx27_fail
  alt29_0:
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."postfix"()
    repr_get_attr_int $I11, $P11, rx27_curclass, "$!pos"
    lt $I11, 0, rx27_fail
    nqp_rxmark rx27_bstack, rxsubrule30_pass, -1, 0
  rxsubrule30_pass:
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "OPER=postfix")
    repr_get_attr_int rx27_pos, $P11, rx27_curclass, "$!pos"
    goto alt29_end
  alt29_1:
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx27_curclass, "$!pos"
    lt $I11, 0, rx27_fail
    nqp_rxmark rx27_bstack, rxsubrule31_pass, -1, 0
  rxsubrule31_pass:
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "OPER=postcircumfix")
    repr_get_attr_int rx27_pos, $P11, rx27_curclass, "$!pos"
    goto alt29_end
  alt29_end:
    rx27_cur."!cursor_pass"(rx27_pos, "postfixish", 'backtrack'=>1)
    .return (rx27_cur)
  rx27_restart:
    repr_get_attr_obj rx27_cstack, rx27_cur, rx27_curclass, "$!cstack"
  rx27_fail:
    unless rx27_bstack, rx27_done
    pop $I19, rx27_bstack
    if_null rx27_cstack, rx27_cstack_done
    unless rx27_cstack, rx27_cstack_done
    dec $I19
    set $P11, rx27_cstack[$I19]
  rx27_cstack_done:
    pop rx27_rep, rx27_bstack
    pop rx27_pos, rx27_bstack
    pop $I19, rx27_bstack
    lt rx27_pos, -1, rx27_done
    lt rx27_pos, 0, rx27_fail
    eq $I19, 0, rx27_fail
    if_null rx27_cstack, rx27_jump
    elements $I18, rx27_bstack
    le $I18, 0, rx27_cut
    dec $I18
    set $I18, rx27_bstack[$I18]
  rx27_cut:
    assign rx27_cstack, $I18
  rx27_jump:
    jump $I19
  rx27_done:
    rx27_cur."!cursor_fail"()
    .return (rx27_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "20_1340317678.734_caps"  :subid("201_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 28
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["postfix"], 0
    set $P104["postcircumfix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "20_1340317678.734_nfa"  :subid("202_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 28
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "postfix"
    push $P105, 0
    push $P105, 8
    push $P105, "postcircumfix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "20_1340317678.734_alt_nfa_21_1340317678.767"  :subid("203_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 28
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "postfix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "postcircumfix"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P107
    push $P109, $P108
    new $P110, "ResizablePMCArray"
    push $P110, $P106
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "nullterm"  :subid("22_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1056
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 33
    .lex "self", param_1056
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1057
    .lex "$/", $P1058
    .local string rx32_tgt
    .local int rx32_pos
    .local int rx32_off
    .local int rx32_eos
    .local int rx32_rep
    .local pmc rx32_cur
    .local pmc rx32_curclass
    .local pmc rx32_bstack
    .local pmc rx32_cstack
    (rx32_cur, rx32_tgt, rx32_pos, rx32_curclass, rx32_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx32_cur
    length rx32_eos, rx32_tgt
    eq $I19, 1, rx32_restart
    repr_get_attr_int $I11, self, rx32_curclass, "$!from"
    ne $I11, -1, rxscan33_done
    goto rxscan33_scan
  rxscan33_loop:
    inc rx32_pos
    gt rx32_pos, rx32_eos, rx32_fail
    repr_bind_attr_int rx32_cur, rx32_curclass, "$!from", rx32_pos
  rxscan33_scan:
    nqp_rxmark rx32_bstack, rxscan33_loop, rx32_pos, 0
  rxscan33_done:
    rx32_cur."!cursor_pass"(rx32_pos, "nullterm", 'backtrack'=>1)
    .return (rx32_cur)
  rx32_restart:
    repr_get_attr_obj rx32_cstack, rx32_cur, rx32_curclass, "$!cstack"
  rx32_fail:
    unless rx32_bstack, rx32_done
    pop $I19, rx32_bstack
    if_null rx32_cstack, rx32_cstack_done
    unless rx32_cstack, rx32_cstack_done
    dec $I19
    set $P11, rx32_cstack[$I19]
  rx32_cstack_done:
    pop rx32_rep, rx32_bstack
    pop rx32_pos, rx32_bstack
    pop $I19, rx32_bstack
    lt rx32_pos, -1, rx32_done
    lt rx32_pos, 0, rx32_fail
    eq $I19, 0, rx32_fail
    if_null rx32_cstack, rx32_jump
    elements $I18, rx32_bstack
    le $I18, 0, rx32_cut
    dec $I18
    set $I18, rx32_bstack[$I18]
  rx32_cut:
    assign rx32_cstack, $I18
  rx32_jump:
    jump $I19
  rx32_done:
    rx32_cur."!cursor_fail"()
    .return (rx32_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "22_1340317678.734_caps"  :subid("204_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 33
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "22_1340317678.734_nfa"  :subid("205_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 33
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "nullterm_alt"  :subid("23_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1062
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 34
    .lex "self", param_1062
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1063
    .lex "$/", $P1064
    .local string rx35_tgt
    .local int rx35_pos
    .local int rx35_off
    .local int rx35_eos
    .local int rx35_rep
    .local pmc rx35_cur
    .local pmc rx35_curclass
    .local pmc rx35_bstack
    .local pmc rx35_cstack
    (rx35_cur, rx35_tgt, rx35_pos, rx35_curclass, rx35_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx35_cur
    length rx35_eos, rx35_tgt
    eq $I19, 1, rx35_restart
    repr_get_attr_int $I11, self, rx35_curclass, "$!from"
    ne $I11, -1, rxscan36_done
    goto rxscan36_scan
  rxscan36_loop:
    inc rx35_pos
    gt rx35_pos, rx35_eos, rx35_fail
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!from", rx35_pos
  rxscan36_scan:
    nqp_rxmark rx35_bstack, rxscan36_loop, rx35_pos, 0
  rxscan36_done:
    repr_bind_attr_int rx35_cur, rx35_curclass, "$!pos", rx35_pos
    $P11 = rx35_cur."nullterm"()
    repr_get_attr_int $I11, $P11, rx35_curclass, "$!pos"
    lt $I11, 0, rx35_fail
    nqp_rxmark rx35_bstack, rxsubrule37_pass, -1, 0
  rxsubrule37_pass:
    rx35_cstack = rx35_cur."!cursor_capture"($P11, "term")
    repr_get_attr_int rx35_pos, $P11, rx35_curclass, "$!pos"
    rx35_cur."!cursor_pass"(rx35_pos, "nullterm_alt", 'backtrack'=>1)
    .return (rx35_cur)
  rx35_restart:
    repr_get_attr_obj rx35_cstack, rx35_cur, rx35_curclass, "$!cstack"
  rx35_fail:
    unless rx35_bstack, rx35_done
    pop $I19, rx35_bstack
    if_null rx35_cstack, rx35_cstack_done
    unless rx35_cstack, rx35_cstack_done
    dec $I19
    set $P11, rx35_cstack[$I19]
  rx35_cstack_done:
    pop rx35_rep, rx35_bstack
    pop rx35_pos, rx35_bstack
    pop $I19, rx35_bstack
    lt rx35_pos, -1, rx35_done
    lt rx35_pos, 0, rx35_fail
    eq $I19, 0, rx35_fail
    if_null rx35_cstack, rx35_jump
    elements $I18, rx35_bstack
    le $I18, 0, rx35_cut
    dec $I18
    set $I18, rx35_bstack[$I18]
  rx35_cut:
    assign rx35_cstack, $I18
  rx35_jump:
    jump $I19
  rx35_done:
    rx35_cur."!cursor_fail"()
    .return (rx35_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "23_1340317678.734_caps"  :subid("206_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 34
    new $P104, "Hash"
    set $P104["term"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "23_1340317678.734_nfa"  :subid("207_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 34
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "nullterm"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "nulltermish" :anon :subid("24_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1068
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 37
    .lex "self", param_1068
    set $P104, param_1068
    nqp_decontainerize $P105, $P104
    $P106 = $P105."termish"()
    unless $P106, unless_1069
    set $P103, $P106
    goto unless_1069_end
  unless_1069:
    set $P107, param_1068
    nqp_decontainerize $P108, $P107
    $P109 = $P108."nullterm_alt"()
    set $P103, $P109
  unless_1069_end:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_delimited"  :subid("25_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1071
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 40
    .lex "self", param_1071
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1072
    .lex "$/", $P1073
    .local string rx38_tgt
    .local int rx38_pos
    .local int rx38_off
    .local int rx38_eos
    .local int rx38_rep
    .local pmc rx38_cur
    .local pmc rx38_curclass
    .local pmc rx38_bstack
    .local pmc rx38_cstack
    (rx38_cur, rx38_tgt, rx38_pos, rx38_curclass, rx38_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx38_cur
    length rx38_eos, rx38_tgt
    eq $I19, 1, rx38_restart
    repr_get_attr_int $I11, self, rx38_curclass, "$!from"
    ne $I11, -1, rxscan39_done
    goto rxscan39_scan
  rxscan39_loop:
    inc rx38_pos
    gt rx38_pos, rx38_eos, rx38_fail
    repr_bind_attr_int rx38_cur, rx38_curclass, "$!from", rx38_pos
  rxscan39_scan:
    nqp_rxmark rx38_bstack, rxscan39_loop, rx38_pos, 0
  rxscan39_done:
    repr_bind_attr_int rx38_cur, rx38_curclass, "$!pos", rx38_pos
    $P11 = rx38_cur."starter"()
    repr_get_attr_int $I11, $P11, rx38_curclass, "$!pos"
    lt $I11, 0, rx38_fail
    nqp_rxmark rx38_bstack, rxsubrule40_pass, -1, 0
  rxsubrule40_pass:
    rx38_cstack = rx38_cur."!cursor_capture"($P11, "starter")
    repr_get_attr_int rx38_pos, $P11, rx38_curclass, "$!pos"
  # rx rxquantr41 ** 0..-1
    nqp_rxmark rx38_bstack, rxquantr41_done, rx38_pos, 0
  rxquantr41_loop:
    repr_bind_attr_int rx38_cur, rx38_curclass, "$!pos", rx38_pos
    $P11 = rx38_cur."quote_atom"()
    repr_get_attr_int $I11, $P11, rx38_curclass, "$!pos"
    lt $I11, 0, rx38_fail
    goto rxsubrule42_pass
  rxsubrule42_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx38_curclass, "$!pos"
    lt $I11, 0, rx38_fail
  rxsubrule42_pass:
    rx38_cstack = rx38_cur."!cursor_capture"($P11, "quote_atom")
    set_addr $I11, rxsubrule42_back
    push rx38_bstack, $I11
    push rx38_bstack, 0
    push rx38_bstack, rx38_pos
    elements $I11, rx38_cstack
    push rx38_bstack, $I11
    repr_get_attr_int rx38_pos, $P11, rx38_curclass, "$!pos"
    nqp_rxpeek $I19, rx38_bstack, rxquantr41_done
    inc $I19
    inc $I19
    set rx38_rep, rx38_bstack[$I19]
    nqp_rxcommit rx38_bstack, rxquantr41_done
    inc rx38_rep
    nqp_rxmark rx38_bstack, rxquantr41_done, rx38_pos, rx38_rep
    goto rxquantr41_loop
  rxquantr41_done:
    repr_bind_attr_int rx38_cur, rx38_curclass, "$!pos", rx38_pos
    $P11 = rx38_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx38_curclass, "$!pos"
    lt $I11, 0, rx38_fail
    nqp_rxmark rx38_bstack, rxsubrule43_pass, -1, 0
  rxsubrule43_pass:
    rx38_cstack = rx38_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx38_pos, $P11, rx38_curclass, "$!pos"
    rx38_cur."!cursor_pass"(rx38_pos, "quote_delimited", 'backtrack'=>1)
    .return (rx38_cur)
  rx38_restart:
    repr_get_attr_obj rx38_cstack, rx38_cur, rx38_curclass, "$!cstack"
  rx38_fail:
    unless rx38_bstack, rx38_done
    pop $I19, rx38_bstack
    if_null rx38_cstack, rx38_cstack_done
    unless rx38_cstack, rx38_cstack_done
    dec $I19
    set $P11, rx38_cstack[$I19]
  rx38_cstack_done:
    pop rx38_rep, rx38_bstack
    pop rx38_pos, rx38_bstack
    pop $I19, rx38_bstack
    lt rx38_pos, -1, rx38_done
    lt rx38_pos, 0, rx38_fail
    eq $I19, 0, rx38_fail
    if_null rx38_cstack, rx38_jump
    elements $I18, rx38_bstack
    le $I18, 0, rx38_cut
    dec $I18
    set $I18, rx38_bstack[$I18]
  rx38_cut:
    assign rx38_cstack, $I18
  rx38_jump:
    jump $I19
  rx38_done:
    rx38_cur."!cursor_fail"()
    .return (rx38_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "25_1340317678.734_caps"  :subid("208_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 40
    new $P104, "Hash"
    set $P104["starter"], 0
    set $P104["quote_atom"], 2
    set $P104["stopper"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "25_1340317678.734_nfa"  :subid("209_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 40
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "starter"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "quote_atom"
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "stopper"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_atom"  :subid("26_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1077
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 44
    .lex "self", param_1077
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1078
    .lex "$/", $P1079
    .local string rx44_tgt
    .local int rx44_pos
    .local int rx44_off
    .local int rx44_eos
    .local int rx44_rep
    .local pmc rx44_cur
    .local pmc rx44_curclass
    .local pmc rx44_bstack
    .local pmc rx44_cstack
    (rx44_cur, rx44_tgt, rx44_pos, rx44_curclass, rx44_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx44_cur
    length rx44_eos, rx44_tgt
    eq $I19, 1, rx44_restart
    repr_get_attr_int $I11, self, rx44_curclass, "$!from"
    ne $I11, -1, rxscan45_done
    goto rxscan45_scan
  rxscan45_loop:
    inc rx44_pos
    gt rx44_pos, rx44_eos, rx44_fail
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!from", rx44_pos
  rxscan45_scan:
    nqp_rxmark rx44_bstack, rxscan45_loop, rx44_pos, 0
  rxscan45_done:
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    $P11 = rx44_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx44_curclass, "$!pos"
    ge $I11, 0, rx44_fail
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt46_0
    nqp_push_label $P11, alt46_1
    nqp_rxmark rx44_bstack, alt46_end, -1, 0
    rx44_cur."!alt"(rx44_pos, ucs4:"alt_nfa_27_1340317678.804", $P11)
    goto rx44_fail
  alt46_0:
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    $P11 = rx44_cur."quote_escape"()
    repr_get_attr_int $I11, $P11, rx44_curclass, "$!pos"
    lt $I11, 0, rx44_fail
    nqp_rxmark rx44_bstack, rxsubrule47_pass, -1, 0
  rxsubrule47_pass:
    rx44_cstack = rx44_cur."!cursor_capture"($P11, "quote_escape")
    repr_get_attr_int rx44_pos, $P11, rx44_curclass, "$!pos"
    goto alt46_end
  alt46_1:
  # rx rxquantr48 ** 1..-1
    nqp_rxmark rx44_bstack, rxquantr48_done, -1, 0
  rxquantr48_loop:
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    $P11 = rx44_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx44_curclass, "$!pos"
    ge $I11, 0, rx44_fail
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    $P11 = rx44_cur."quote_escape"()
    repr_get_attr_int $I11, $P11, rx44_curclass, "$!pos"
    ge $I11, 0, rx44_fail
    ge rx44_pos, rx44_eos, rx44_fail
    add rx44_pos, 1
    nqp_rxpeek $I19, rx44_bstack, rxquantr48_done
    inc $I19
    inc $I19
    set rx44_rep, rx44_bstack[$I19]
    nqp_rxcommit rx44_bstack, rxquantr48_done
    inc rx44_rep
    nqp_rxmark rx44_bstack, rxquantr48_done, rx44_pos, rx44_rep
    goto rxquantr48_loop
  rxquantr48_done:
    goto alt46_end
  alt46_end:
    nqp_rxcommit rx44_bstack, alt46_end
    rx44_cur."!cursor_pass"(rx44_pos, "quote_atom", 'backtrack'=>1)
    .return (rx44_cur)
  rx44_restart:
    repr_get_attr_obj rx44_cstack, rx44_cur, rx44_curclass, "$!cstack"
  rx44_fail:
    unless rx44_bstack, rx44_done
    pop $I19, rx44_bstack
    if_null rx44_cstack, rx44_cstack_done
    unless rx44_cstack, rx44_cstack_done
    dec $I19
    set $P11, rx44_cstack[$I19]
  rx44_cstack_done:
    pop rx44_rep, rx44_bstack
    pop rx44_pos, rx44_bstack
    pop $I19, rx44_bstack
    lt rx44_pos, -1, rx44_done
    lt rx44_pos, 0, rx44_fail
    eq $I19, 0, rx44_fail
    if_null rx44_cstack, rx44_jump
    elements $I18, rx44_bstack
    le $I18, 0, rx44_cut
    dec $I18
    set $I18, rx44_bstack[$I18]
  rx44_cut:
    assign rx44_cstack, $I18
  rx44_jump:
    jump $I19
  rx44_done:
    rx44_cur."!cursor_fail"()
    .return (rx44_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "26_1340317678.734_caps"  :subid("210_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 44
    new $P104, "Hash"
    set $P104["quote_escape"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "26_1340317678.734_alt_nfa_27_1340317678.804"  :subid("211_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 44
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "quote_escape"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 2
    push $P110, 1
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    new $P112, "ResizablePMCArray"
    push $P112, $P106
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "decint"  :subid("28_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1083
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 52
    .lex "self", param_1083
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1084
    .lex "$/", $P1085
    .local string rx49_tgt
    .local int rx49_pos
    .local int rx49_off
    .local int rx49_eos
    .local int rx49_rep
    .local pmc rx49_cur
    .local pmc rx49_curclass
    .local pmc rx49_bstack
    .local pmc rx49_cstack
    (rx49_cur, rx49_tgt, rx49_pos, rx49_curclass, rx49_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx49_cur
    length rx49_eos, rx49_tgt
    eq $I19, 1, rx49_restart
    repr_get_attr_int $I11, self, rx49_curclass, "$!from"
    ne $I11, -1, rxscan50_done
    goto rxscan50_scan
  rxscan50_loop:
    inc rx49_pos
    gt rx49_pos, rx49_eos, rx49_fail
    repr_bind_attr_int rx49_cur, rx49_curclass, "$!from", rx49_pos
  rxscan50_scan:
    nqp_rxmark rx49_bstack, rxscan50_loop, rx49_pos, 0
  rxscan50_done:
  # rx rxquantr51 ** 1..-1
    nqp_rxmark rx49_bstack, rxquantr51_done, -1, 0
  rxquantr51_loop:
  # rx rxquantr52 ** 1..-1
    nqp_rxmark rx49_bstack, rxquantr52_done, -1, 0
  rxquantr52_loop:
    ge rx49_pos, rx49_eos, rx49_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx49_tgt, rx49_pos
    unless $I11, rx49_fail
    add rx49_pos, 1
    nqp_rxpeek $I19, rx49_bstack, rxquantr52_done
    inc $I19
    inc $I19
    set rx49_rep, rx49_bstack[$I19]
    nqp_rxcommit rx49_bstack, rxquantr52_done
    inc rx49_rep
    nqp_rxmark rx49_bstack, rxquantr52_done, rx49_pos, rx49_rep
    goto rxquantr52_loop
  rxquantr52_done:
    nqp_rxpeek $I19, rx49_bstack, rxquantr51_done
    inc $I19
    inc $I19
    set rx49_rep, rx49_bstack[$I19]
    nqp_rxcommit rx49_bstack, rxquantr51_done
    inc rx49_rep
    nqp_rxmark rx49_bstack, rxquantr51_done, rx49_pos, rx49_rep
    add $I11, rx49_pos, 1
    gt $I11, rx49_eos, rx49_fail
    substr $S10, rx49_tgt, rx49_pos, 1
    ne $S10, ucs4:"_", rx49_fail
    add rx49_pos, 1
    goto rxquantr51_loop
  rxquantr51_done:
    rx49_cur."!cursor_pass"(rx49_pos, "decint", 'backtrack'=>1)
    .return (rx49_cur)
  rx49_restart:
    repr_get_attr_obj rx49_cstack, rx49_cur, rx49_curclass, "$!cstack"
  rx49_fail:
    unless rx49_bstack, rx49_done
    pop $I19, rx49_bstack
    if_null rx49_cstack, rx49_cstack_done
    unless rx49_cstack, rx49_cstack_done
    dec $I19
    set $P11, rx49_cstack[$I19]
  rx49_cstack_done:
    pop rx49_rep, rx49_bstack
    pop rx49_pos, rx49_bstack
    pop $I19, rx49_bstack
    lt rx49_pos, -1, rx49_done
    lt rx49_pos, 0, rx49_fail
    eq $I19, 0, rx49_fail
    if_null rx49_cstack, rx49_jump
    elements $I18, rx49_bstack
    le $I18, 0, rx49_cut
    dec $I18
    set $I18, rx49_bstack[$I18]
  rx49_cut:
    assign rx49_cstack, $I18
  rx49_jump:
    jump $I19
  rx49_done:
    rx49_cur."!cursor_fail"()
    .return (rx49_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "28_1340317678.734_caps"  :subid("212_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 52
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "28_1340317678.734_nfa"  :subid("213_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 52
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 95
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "decints"  :subid("29_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1089
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 53
    .lex "self", param_1089
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1090
    .lex "$/", $P1091
    .local string rx53_tgt
    .local int rx53_pos
    .local int rx53_off
    .local int rx53_eos
    .local int rx53_rep
    .local pmc rx53_cur
    .local pmc rx53_curclass
    .local pmc rx53_bstack
    .local pmc rx53_cstack
    (rx53_cur, rx53_tgt, rx53_pos, rx53_curclass, rx53_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx53_cur
    length rx53_eos, rx53_tgt
    eq $I19, 1, rx53_restart
    repr_get_attr_int $I11, self, rx53_curclass, "$!from"
    ne $I11, -1, rxscan54_done
    goto rxscan54_scan
  rxscan54_loop:
    inc rx53_pos
    gt rx53_pos, rx53_eos, rx53_fail
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!from", rx53_pos
  rxscan54_scan:
    nqp_rxmark rx53_bstack, rxscan54_loop, rx53_pos, 0
  rxscan54_done:
  # rx rxquantr55 ** 1..-1
    nqp_rxmark rx53_bstack, rxquantr55_done, -1, 0
  rxquantr55_loop:
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."ws"()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."decint"()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail
    nqp_rxmark rx53_bstack, rxsubrule57_pass, -1, 0
  rxsubrule57_pass:
    rx53_cstack = rx53_cur."!cursor_capture"($P11, "decint")
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."ws"()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
    nqp_rxpeek $I19, rx53_bstack, rxquantr55_done
    inc $I19
    inc $I19
    set rx53_rep, rx53_bstack[$I19]
    nqp_rxcommit rx53_bstack, rxquantr55_done
    inc rx53_rep
    nqp_rxmark rx53_bstack, rxquantr55_done, rx53_pos, rx53_rep
    add $I11, rx53_pos, 1
    gt $I11, rx53_eos, rx53_fail
    substr $S10, rx53_tgt, rx53_pos, 1
    ne $S10, ucs4:",", rx53_fail
    add rx53_pos, 1
    goto rxquantr55_loop
  rxquantr55_done:
    rx53_cur."!cursor_pass"(rx53_pos, "decints", 'backtrack'=>1)
    .return (rx53_cur)
  rx53_restart:
    repr_get_attr_obj rx53_cstack, rx53_cur, rx53_curclass, "$!cstack"
  rx53_fail:
    unless rx53_bstack, rx53_done
    pop $I19, rx53_bstack
    if_null rx53_cstack, rx53_cstack_done
    unless rx53_cstack, rx53_cstack_done
    dec $I19
    set $P11, rx53_cstack[$I19]
  rx53_cstack_done:
    pop rx53_rep, rx53_bstack
    pop rx53_pos, rx53_bstack
    pop $I19, rx53_bstack
    lt rx53_pos, -1, rx53_done
    lt rx53_pos, 0, rx53_fail
    eq $I19, 0, rx53_fail
    if_null rx53_cstack, rx53_jump
    elements $I18, rx53_bstack
    le $I18, 0, rx53_cut
    dec $I18
    set $I18, rx53_bstack[$I18]
  rx53_cut:
    assign rx53_cstack, $I18
  rx53_jump:
    jump $I19
  rx53_done:
    rx53_cur."!cursor_fail"()
    .return (rx53_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "29_1340317678.734_caps"  :subid("214_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 53
    new $P104, "Hash"
    set $P104["decint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "29_1340317678.734_nfa"  :subid("215_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 53
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 44
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "decint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "hexint"  :subid("30_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1095
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 55
    .lex "self", param_1095
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1096
    .lex "$/", $P1097
    .local string rx59_tgt
    .local int rx59_pos
    .local int rx59_off
    .local int rx59_eos
    .local int rx59_rep
    .local pmc rx59_cur
    .local pmc rx59_curclass
    .local pmc rx59_bstack
    .local pmc rx59_cstack
    (rx59_cur, rx59_tgt, rx59_pos, rx59_curclass, rx59_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx59_cur
    length rx59_eos, rx59_tgt
    eq $I19, 1, rx59_restart
    repr_get_attr_int $I11, self, rx59_curclass, "$!from"
    ne $I11, -1, rxscan60_done
    goto rxscan60_scan
  rxscan60_loop:
    inc rx59_pos
    gt rx59_pos, rx59_eos, rx59_fail
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!from", rx59_pos
  rxscan60_scan:
    nqp_rxmark rx59_bstack, rxscan60_loop, rx59_pos, 0
  rxscan60_done:
  # rx rxquantr61 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr61_done, -1, 0
  rxquantr61_loop:
  # rx rxquantr62 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr62_done, -1, 0
  rxquantr62_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"0123456789abcdefABCDEF", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr62_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr62_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr62_done, rx59_pos, rx59_rep
    goto rxquantr62_loop
  rxquantr62_done:
    nqp_rxpeek $I19, rx59_bstack, rxquantr61_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr61_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr61_done, rx59_pos, rx59_rep
    add $I11, rx59_pos, 1
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 1
    ne $S10, ucs4:"_", rx59_fail
    add rx59_pos, 1
    goto rxquantr61_loop
  rxquantr61_done:
    rx59_cur."!cursor_pass"(rx59_pos, "hexint", 'backtrack'=>1)
    .return (rx59_cur)
  rx59_restart:
    repr_get_attr_obj rx59_cstack, rx59_cur, rx59_curclass, "$!cstack"
  rx59_fail:
    unless rx59_bstack, rx59_done
    pop $I19, rx59_bstack
    if_null rx59_cstack, rx59_cstack_done
    unless rx59_cstack, rx59_cstack_done
    dec $I19
    set $P11, rx59_cstack[$I19]
  rx59_cstack_done:
    pop rx59_rep, rx59_bstack
    pop rx59_pos, rx59_bstack
    pop $I19, rx59_bstack
    lt rx59_pos, -1, rx59_done
    lt rx59_pos, 0, rx59_fail
    eq $I19, 0, rx59_fail
    if_null rx59_cstack, rx59_jump
    elements $I18, rx59_bstack
    le $I18, 0, rx59_cut
    dec $I18
    set $I18, rx59_bstack[$I18]
  rx59_cut:
    assign rx59_cstack, $I18
  rx59_jump:
    jump $I19
  rx59_done:
    rx59_cur."!cursor_fail"()
    .return (rx59_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "30_1340317678.734_caps"  :subid("216_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 55
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "30_1340317678.734_nfa"  :subid("217_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 55
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 95
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "0123456789abcdefABCDEF"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "hexints"  :subid("31_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1101
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 56
    .lex "self", param_1101
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1102
    .lex "$/", $P1103
    .local string rx63_tgt
    .local int rx63_pos
    .local int rx63_off
    .local int rx63_eos
    .local int rx63_rep
    .local pmc rx63_cur
    .local pmc rx63_curclass
    .local pmc rx63_bstack
    .local pmc rx63_cstack
    (rx63_cur, rx63_tgt, rx63_pos, rx63_curclass, rx63_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx63_cur
    length rx63_eos, rx63_tgt
    eq $I19, 1, rx63_restart
    repr_get_attr_int $I11, self, rx63_curclass, "$!from"
    ne $I11, -1, rxscan64_done
    goto rxscan64_scan
  rxscan64_loop:
    inc rx63_pos
    gt rx63_pos, rx63_eos, rx63_fail
    repr_bind_attr_int rx63_cur, rx63_curclass, "$!from", rx63_pos
  rxscan64_scan:
    nqp_rxmark rx63_bstack, rxscan64_loop, rx63_pos, 0
  rxscan64_done:
  # rx rxquantr65 ** 1..-1
    nqp_rxmark rx63_bstack, rxquantr65_done, -1, 0
  rxquantr65_loop:
    repr_bind_attr_int rx63_cur, rx63_curclass, "$!pos", rx63_pos
    $P11 = rx63_cur."ws"()
    repr_get_attr_int $I11, $P11, rx63_curclass, "$!pos"
    lt $I11, 0, rx63_fail
    repr_get_attr_int rx63_pos, $P11, rx63_curclass, "$!pos"
    repr_bind_attr_int rx63_cur, rx63_curclass, "$!pos", rx63_pos
    $P11 = rx63_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx63_curclass, "$!pos"
    lt $I11, 0, rx63_fail
    nqp_rxmark rx63_bstack, rxsubrule67_pass, -1, 0
  rxsubrule67_pass:
    rx63_cstack = rx63_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx63_pos, $P11, rx63_curclass, "$!pos"
    repr_bind_attr_int rx63_cur, rx63_curclass, "$!pos", rx63_pos
    $P11 = rx63_cur."ws"()
    repr_get_attr_int $I11, $P11, rx63_curclass, "$!pos"
    lt $I11, 0, rx63_fail
    repr_get_attr_int rx63_pos, $P11, rx63_curclass, "$!pos"
    nqp_rxpeek $I19, rx63_bstack, rxquantr65_done
    inc $I19
    inc $I19
    set rx63_rep, rx63_bstack[$I19]
    nqp_rxcommit rx63_bstack, rxquantr65_done
    inc rx63_rep
    nqp_rxmark rx63_bstack, rxquantr65_done, rx63_pos, rx63_rep
    add $I11, rx63_pos, 1
    gt $I11, rx63_eos, rx63_fail
    substr $S10, rx63_tgt, rx63_pos, 1
    ne $S10, ucs4:",", rx63_fail
    add rx63_pos, 1
    goto rxquantr65_loop
  rxquantr65_done:
    rx63_cur."!cursor_pass"(rx63_pos, "hexints", 'backtrack'=>1)
    .return (rx63_cur)
  rx63_restart:
    repr_get_attr_obj rx63_cstack, rx63_cur, rx63_curclass, "$!cstack"
  rx63_fail:
    unless rx63_bstack, rx63_done
    pop $I19, rx63_bstack
    if_null rx63_cstack, rx63_cstack_done
    unless rx63_cstack, rx63_cstack_done
    dec $I19
    set $P11, rx63_cstack[$I19]
  rx63_cstack_done:
    pop rx63_rep, rx63_bstack
    pop rx63_pos, rx63_bstack
    pop $I19, rx63_bstack
    lt rx63_pos, -1, rx63_done
    lt rx63_pos, 0, rx63_fail
    eq $I19, 0, rx63_fail
    if_null rx63_cstack, rx63_jump
    elements $I18, rx63_bstack
    le $I18, 0, rx63_cut
    dec $I18
    set $I18, rx63_bstack[$I18]
  rx63_cut:
    assign rx63_cstack, $I18
  rx63_jump:
    jump $I19
  rx63_done:
    rx63_cur."!cursor_fail"()
    .return (rx63_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "31_1340317678.734_caps"  :subid("218_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 56
    new $P104, "Hash"
    set $P104["hexint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "31_1340317678.734_nfa"  :subid("219_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 56
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 44
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "hexint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "octint"  :subid("32_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1107
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 58
    .lex "self", param_1107
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1108
    .lex "$/", $P1109
    .local string rx69_tgt
    .local int rx69_pos
    .local int rx69_off
    .local int rx69_eos
    .local int rx69_rep
    .local pmc rx69_cur
    .local pmc rx69_curclass
    .local pmc rx69_bstack
    .local pmc rx69_cstack
    (rx69_cur, rx69_tgt, rx69_pos, rx69_curclass, rx69_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx69_cur
    length rx69_eos, rx69_tgt
    eq $I19, 1, rx69_restart
    repr_get_attr_int $I11, self, rx69_curclass, "$!from"
    ne $I11, -1, rxscan70_done
    goto rxscan70_scan
  rxscan70_loop:
    inc rx69_pos
    gt rx69_pos, rx69_eos, rx69_fail
    repr_bind_attr_int rx69_cur, rx69_curclass, "$!from", rx69_pos
  rxscan70_scan:
    nqp_rxmark rx69_bstack, rxscan70_loop, rx69_pos, 0
  rxscan70_done:
  # rx rxquantr71 ** 1..-1
    nqp_rxmark rx69_bstack, rxquantr71_done, -1, 0
  rxquantr71_loop:
  # rx rxquantr72 ** 1..-1
    nqp_rxmark rx69_bstack, rxquantr72_done, -1, 0
  rxquantr72_loop:
    ge rx69_pos, rx69_eos, rx69_fail
    substr $S11, rx69_tgt, rx69_pos, 1
    index $I11, ucs4:"01234567", $S11
    lt $I11, 0, rx69_fail
    inc rx69_pos
    nqp_rxpeek $I19, rx69_bstack, rxquantr72_done
    inc $I19
    inc $I19
    set rx69_rep, rx69_bstack[$I19]
    nqp_rxcommit rx69_bstack, rxquantr72_done
    inc rx69_rep
    nqp_rxmark rx69_bstack, rxquantr72_done, rx69_pos, rx69_rep
    goto rxquantr72_loop
  rxquantr72_done:
    nqp_rxpeek $I19, rx69_bstack, rxquantr71_done
    inc $I19
    inc $I19
    set rx69_rep, rx69_bstack[$I19]
    nqp_rxcommit rx69_bstack, rxquantr71_done
    inc rx69_rep
    nqp_rxmark rx69_bstack, rxquantr71_done, rx69_pos, rx69_rep
    add $I11, rx69_pos, 1
    gt $I11, rx69_eos, rx69_fail
    substr $S10, rx69_tgt, rx69_pos, 1
    ne $S10, ucs4:"_", rx69_fail
    add rx69_pos, 1
    goto rxquantr71_loop
  rxquantr71_done:
    rx69_cur."!cursor_pass"(rx69_pos, "octint", 'backtrack'=>1)
    .return (rx69_cur)
  rx69_restart:
    repr_get_attr_obj rx69_cstack, rx69_cur, rx69_curclass, "$!cstack"
  rx69_fail:
    unless rx69_bstack, rx69_done
    pop $I19, rx69_bstack
    if_null rx69_cstack, rx69_cstack_done
    unless rx69_cstack, rx69_cstack_done
    dec $I19
    set $P11, rx69_cstack[$I19]
  rx69_cstack_done:
    pop rx69_rep, rx69_bstack
    pop rx69_pos, rx69_bstack
    pop $I19, rx69_bstack
    lt rx69_pos, -1, rx69_done
    lt rx69_pos, 0, rx69_fail
    eq $I19, 0, rx69_fail
    if_null rx69_cstack, rx69_jump
    elements $I18, rx69_bstack
    le $I18, 0, rx69_cut
    dec $I18
    set $I18, rx69_bstack[$I18]
  rx69_cut:
    assign rx69_cstack, $I18
  rx69_jump:
    jump $I19
  rx69_done:
    rx69_cur."!cursor_fail"()
    .return (rx69_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "32_1340317678.734_caps"  :subid("220_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 58
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "32_1340317678.734_nfa"  :subid("221_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 58
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 95
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "01234567"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "octints"  :subid("33_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1113
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 59
    .lex "self", param_1113
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1114
    .lex "$/", $P1115
    .local string rx73_tgt
    .local int rx73_pos
    .local int rx73_off
    .local int rx73_eos
    .local int rx73_rep
    .local pmc rx73_cur
    .local pmc rx73_curclass
    .local pmc rx73_bstack
    .local pmc rx73_cstack
    (rx73_cur, rx73_tgt, rx73_pos, rx73_curclass, rx73_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx73_cur
    length rx73_eos, rx73_tgt
    eq $I19, 1, rx73_restart
    repr_get_attr_int $I11, self, rx73_curclass, "$!from"
    ne $I11, -1, rxscan74_done
    goto rxscan74_scan
  rxscan74_loop:
    inc rx73_pos
    gt rx73_pos, rx73_eos, rx73_fail
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!from", rx73_pos
  rxscan74_scan:
    nqp_rxmark rx73_bstack, rxscan74_loop, rx73_pos, 0
  rxscan74_done:
  # rx rxquantr75 ** 1..-1
    nqp_rxmark rx73_bstack, rxquantr75_done, -1, 0
  rxquantr75_loop:
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."ws"()
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail
    repr_get_attr_int rx73_pos, $P11, rx73_curclass, "$!pos"
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."octint"()
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail
    nqp_rxmark rx73_bstack, rxsubrule77_pass, -1, 0
  rxsubrule77_pass:
    rx73_cstack = rx73_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx73_pos, $P11, rx73_curclass, "$!pos"
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."ws"()
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail
    repr_get_attr_int rx73_pos, $P11, rx73_curclass, "$!pos"
    nqp_rxpeek $I19, rx73_bstack, rxquantr75_done
    inc $I19
    inc $I19
    set rx73_rep, rx73_bstack[$I19]
    nqp_rxcommit rx73_bstack, rxquantr75_done
    inc rx73_rep
    nqp_rxmark rx73_bstack, rxquantr75_done, rx73_pos, rx73_rep
    add $I11, rx73_pos, 1
    gt $I11, rx73_eos, rx73_fail
    substr $S10, rx73_tgt, rx73_pos, 1
    ne $S10, ucs4:",", rx73_fail
    add rx73_pos, 1
    goto rxquantr75_loop
  rxquantr75_done:
    rx73_cur."!cursor_pass"(rx73_pos, "octints", 'backtrack'=>1)
    .return (rx73_cur)
  rx73_restart:
    repr_get_attr_obj rx73_cstack, rx73_cur, rx73_curclass, "$!cstack"
  rx73_fail:
    unless rx73_bstack, rx73_done
    pop $I19, rx73_bstack
    if_null rx73_cstack, rx73_cstack_done
    unless rx73_cstack, rx73_cstack_done
    dec $I19
    set $P11, rx73_cstack[$I19]
  rx73_cstack_done:
    pop rx73_rep, rx73_bstack
    pop rx73_pos, rx73_bstack
    pop $I19, rx73_bstack
    lt rx73_pos, -1, rx73_done
    lt rx73_pos, 0, rx73_fail
    eq $I19, 0, rx73_fail
    if_null rx73_cstack, rx73_jump
    elements $I18, rx73_bstack
    le $I18, 0, rx73_cut
    dec $I18
    set $I18, rx73_bstack[$I18]
  rx73_cut:
    assign rx73_cstack, $I18
  rx73_jump:
    jump $I19
  rx73_done:
    rx73_cur."!cursor_fail"()
    .return (rx73_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "33_1340317678.734_caps"  :subid("222_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 59
    new $P104, "Hash"
    set $P104["octint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "33_1340317678.734_nfa"  :subid("223_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 59
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 44
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "octint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "binint"  :subid("34_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1119
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 61
    .lex "self", param_1119
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1120
    .lex "$/", $P1121
    .local string rx79_tgt
    .local int rx79_pos
    .local int rx79_off
    .local int rx79_eos
    .local int rx79_rep
    .local pmc rx79_cur
    .local pmc rx79_curclass
    .local pmc rx79_bstack
    .local pmc rx79_cstack
    (rx79_cur, rx79_tgt, rx79_pos, rx79_curclass, rx79_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx79_cur
    length rx79_eos, rx79_tgt
    eq $I19, 1, rx79_restart
    repr_get_attr_int $I11, self, rx79_curclass, "$!from"
    ne $I11, -1, rxscan80_done
    goto rxscan80_scan
  rxscan80_loop:
    inc rx79_pos
    gt rx79_pos, rx79_eos, rx79_fail
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!from", rx79_pos
  rxscan80_scan:
    nqp_rxmark rx79_bstack, rxscan80_loop, rx79_pos, 0
  rxscan80_done:
  # rx rxquantr81 ** 1..-1
    nqp_rxmark rx79_bstack, rxquantr81_done, -1, 0
  rxquantr81_loop:
  # rx rxquantr82 ** 1..-1
    nqp_rxmark rx79_bstack, rxquantr82_done, -1, 0
  rxquantr82_loop:
    ge rx79_pos, rx79_eos, rx79_fail
    substr $S11, rx79_tgt, rx79_pos, 1
    index $I11, ucs4:"01", $S11
    lt $I11, 0, rx79_fail
    inc rx79_pos
    nqp_rxpeek $I19, rx79_bstack, rxquantr82_done
    inc $I19
    inc $I19
    set rx79_rep, rx79_bstack[$I19]
    nqp_rxcommit rx79_bstack, rxquantr82_done
    inc rx79_rep
    nqp_rxmark rx79_bstack, rxquantr82_done, rx79_pos, rx79_rep
    goto rxquantr82_loop
  rxquantr82_done:
    nqp_rxpeek $I19, rx79_bstack, rxquantr81_done
    inc $I19
    inc $I19
    set rx79_rep, rx79_bstack[$I19]
    nqp_rxcommit rx79_bstack, rxquantr81_done
    inc rx79_rep
    nqp_rxmark rx79_bstack, rxquantr81_done, rx79_pos, rx79_rep
    add $I11, rx79_pos, 1
    gt $I11, rx79_eos, rx79_fail
    substr $S10, rx79_tgt, rx79_pos, 1
    ne $S10, ucs4:"_", rx79_fail
    add rx79_pos, 1
    goto rxquantr81_loop
  rxquantr81_done:
    rx79_cur."!cursor_pass"(rx79_pos, "binint", 'backtrack'=>1)
    .return (rx79_cur)
  rx79_restart:
    repr_get_attr_obj rx79_cstack, rx79_cur, rx79_curclass, "$!cstack"
  rx79_fail:
    unless rx79_bstack, rx79_done
    pop $I19, rx79_bstack
    if_null rx79_cstack, rx79_cstack_done
    unless rx79_cstack, rx79_cstack_done
    dec $I19
    set $P11, rx79_cstack[$I19]
  rx79_cstack_done:
    pop rx79_rep, rx79_bstack
    pop rx79_pos, rx79_bstack
    pop $I19, rx79_bstack
    lt rx79_pos, -1, rx79_done
    lt rx79_pos, 0, rx79_fail
    eq $I19, 0, rx79_fail
    if_null rx79_cstack, rx79_jump
    elements $I18, rx79_bstack
    le $I18, 0, rx79_cut
    dec $I18
    set $I18, rx79_bstack[$I18]
  rx79_cut:
    assign rx79_cstack, $I18
  rx79_jump:
    jump $I19
  rx79_done:
    rx79_cur."!cursor_fail"()
    .return (rx79_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "34_1340317678.734_caps"  :subid("224_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 61
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "34_1340317678.734_nfa"  :subid("225_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 61
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 95
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "01"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "binints"  :subid("35_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1125
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 62
    .lex "self", param_1125
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1126
    .lex "$/", $P1127
    .local string rx83_tgt
    .local int rx83_pos
    .local int rx83_off
    .local int rx83_eos
    .local int rx83_rep
    .local pmc rx83_cur
    .local pmc rx83_curclass
    .local pmc rx83_bstack
    .local pmc rx83_cstack
    (rx83_cur, rx83_tgt, rx83_pos, rx83_curclass, rx83_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx83_cur
    length rx83_eos, rx83_tgt
    eq $I19, 1, rx83_restart
    repr_get_attr_int $I11, self, rx83_curclass, "$!from"
    ne $I11, -1, rxscan84_done
    goto rxscan84_scan
  rxscan84_loop:
    inc rx83_pos
    gt rx83_pos, rx83_eos, rx83_fail
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!from", rx83_pos
  rxscan84_scan:
    nqp_rxmark rx83_bstack, rxscan84_loop, rx83_pos, 0
  rxscan84_done:
  # rx rxquantr85 ** 1..-1
    nqp_rxmark rx83_bstack, rxquantr85_done, -1, 0
  rxquantr85_loop:
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."ws"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."binint"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail
    nqp_rxmark rx83_bstack, rxsubrule87_pass, -1, 0
  rxsubrule87_pass:
    rx83_cstack = rx83_cur."!cursor_capture"($P11, "binint")
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."ws"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    nqp_rxpeek $I19, rx83_bstack, rxquantr85_done
    inc $I19
    inc $I19
    set rx83_rep, rx83_bstack[$I19]
    nqp_rxcommit rx83_bstack, rxquantr85_done
    inc rx83_rep
    nqp_rxmark rx83_bstack, rxquantr85_done, rx83_pos, rx83_rep
    add $I11, rx83_pos, 1
    gt $I11, rx83_eos, rx83_fail
    substr $S10, rx83_tgt, rx83_pos, 1
    ne $S10, ucs4:",", rx83_fail
    add rx83_pos, 1
    goto rxquantr85_loop
  rxquantr85_done:
    rx83_cur."!cursor_pass"(rx83_pos, "binints", 'backtrack'=>1)
    .return (rx83_cur)
  rx83_restart:
    repr_get_attr_obj rx83_cstack, rx83_cur, rx83_curclass, "$!cstack"
  rx83_fail:
    unless rx83_bstack, rx83_done
    pop $I19, rx83_bstack
    if_null rx83_cstack, rx83_cstack_done
    unless rx83_cstack, rx83_cstack_done
    dec $I19
    set $P11, rx83_cstack[$I19]
  rx83_cstack_done:
    pop rx83_rep, rx83_bstack
    pop rx83_pos, rx83_bstack
    pop $I19, rx83_bstack
    lt rx83_pos, -1, rx83_done
    lt rx83_pos, 0, rx83_fail
    eq $I19, 0, rx83_fail
    if_null rx83_cstack, rx83_jump
    elements $I18, rx83_bstack
    le $I18, 0, rx83_cut
    dec $I18
    set $I18, rx83_bstack[$I18]
  rx83_cut:
    assign rx83_cstack, $I18
  rx83_jump:
    jump $I19
  rx83_done:
    rx83_cur."!cursor_fail"()
    .return (rx83_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "35_1340317678.734_caps"  :subid("226_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 62
    new $P104, "Hash"
    set $P104["binint"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "35_1340317678.734_nfa"  :subid("227_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 62
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 44
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "binint"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "integer"  :subid("36_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1131
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    .lex "self", param_1131
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1132
    .lex "$/", $P1133
    .local string rx89_tgt
    .local int rx89_pos
    .local int rx89_off
    .local int rx89_eos
    .local int rx89_rep
    .local pmc rx89_cur
    .local pmc rx89_curclass
    .local pmc rx89_bstack
    .local pmc rx89_cstack
    (rx89_cur, rx89_tgt, rx89_pos, rx89_curclass, rx89_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx89_cur
    length rx89_eos, rx89_tgt
    eq $I19, 1, rx89_restart
    repr_get_attr_int $I11, self, rx89_curclass, "$!from"
    ne $I11, -1, rxscan90_done
    goto rxscan90_scan
  rxscan90_loop:
    inc rx89_pos
    gt rx89_pos, rx89_eos, rx89_fail
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!from", rx89_pos
  rxscan90_scan:
    nqp_rxmark rx89_bstack, rxscan90_loop, rx89_pos, 0
  rxscan90_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt91_0
    nqp_push_label $P11, alt91_1
    nqp_rxmark rx89_bstack, alt91_end, -1, 0
    rx89_cur."!alt"(rx89_pos, ucs4:"alt_nfa_37_1340317678.88", $P11)
    goto rx89_fail
  alt91_0:
    add $I11, rx89_pos, 1
    gt $I11, rx89_eos, rx89_fail
    substr $S10, rx89_tgt, rx89_pos, 1
    ne $S10, ucs4:"0", rx89_fail
    add rx89_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt92_0
    nqp_push_label $P11, alt92_1
    nqp_push_label $P11, alt92_2
    nqp_push_label $P11, alt92_3
    nqp_rxmark rx89_bstack, alt92_end, -1, 0
    rx89_cur."!alt"(rx89_pos, ucs4:"alt_nfa_38_1340317678.88", $P11)
    goto rx89_fail
  alt92_0:
    add $I11, rx89_pos, 1
    gt $I11, rx89_eos, rx89_fail
    substr $S10, rx89_tgt, rx89_pos, 1
    ne $S10, ucs4:"b", rx89_fail
    add rx89_pos, 1
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."binint"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail
    nqp_rxmark rx89_bstack, rxsubrule93_pass, -1, 0
  rxsubrule93_pass:
    rx89_cstack = rx89_cur."!cursor_capture"($P11, "VALUE=binint")
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    goto alt92_end
  alt92_1:
    add $I11, rx89_pos, 1
    gt $I11, rx89_eos, rx89_fail
    substr $S10, rx89_tgt, rx89_pos, 1
    ne $S10, ucs4:"o", rx89_fail
    add rx89_pos, 1
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."octint"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail
    nqp_rxmark rx89_bstack, rxsubrule94_pass, -1, 0
  rxsubrule94_pass:
    rx89_cstack = rx89_cur."!cursor_capture"($P11, "VALUE=octint")
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    goto alt92_end
  alt92_2:
    add $I11, rx89_pos, 1
    gt $I11, rx89_eos, rx89_fail
    substr $S10, rx89_tgt, rx89_pos, 1
    ne $S10, ucs4:"x", rx89_fail
    add rx89_pos, 1
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail
    nqp_rxmark rx89_bstack, rxsubrule95_pass, -1, 0
  rxsubrule95_pass:
    rx89_cstack = rx89_cur."!cursor_capture"($P11, "VALUE=hexint")
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    goto alt92_end
  alt92_3:
    add $I11, rx89_pos, 1
    gt $I11, rx89_eos, rx89_fail
    substr $S10, rx89_tgt, rx89_pos, 1
    ne $S10, ucs4:"d", rx89_fail
    add rx89_pos, 1
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."decint"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail
    nqp_rxmark rx89_bstack, rxsubrule96_pass, -1, 0
  rxsubrule96_pass:
    rx89_cstack = rx89_cur."!cursor_capture"($P11, "VALUE=decint")
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    goto alt92_end
  alt92_end:
    nqp_rxcommit rx89_bstack, alt92_end
    goto alt91_end
  alt91_1:
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!pos", rx89_pos
    $P11 = rx89_cur."decint"()
    repr_get_attr_int $I11, $P11, rx89_curclass, "$!pos"
    lt $I11, 0, rx89_fail
    nqp_rxmark rx89_bstack, rxsubrule97_pass, -1, 0
  rxsubrule97_pass:
    rx89_cstack = rx89_cur."!cursor_capture"($P11, "VALUE=decint")
    repr_get_attr_int rx89_pos, $P11, rx89_curclass, "$!pos"
    goto alt91_end
  alt91_end:
    nqp_rxcommit rx89_bstack, alt91_end
    rx89_cur."!cursor_pass"(rx89_pos, "integer", 'backtrack'=>1)
    .return (rx89_cur)
  rx89_restart:
    repr_get_attr_obj rx89_cstack, rx89_cur, rx89_curclass, "$!cstack"
  rx89_fail:
    unless rx89_bstack, rx89_done
    pop $I19, rx89_bstack
    if_null rx89_cstack, rx89_cstack_done
    unless rx89_cstack, rx89_cstack_done
    dec $I19
    set $P11, rx89_cstack[$I19]
  rx89_cstack_done:
    pop rx89_rep, rx89_bstack
    pop rx89_pos, rx89_bstack
    pop $I19, rx89_bstack
    lt rx89_pos, -1, rx89_done
    lt rx89_pos, 0, rx89_fail
    eq $I19, 0, rx89_fail
    if_null rx89_cstack, rx89_jump
    elements $I18, rx89_bstack
    le $I18, 0, rx89_cut
    dec $I18
    set $I18, rx89_bstack[$I18]
  rx89_cut:
    assign rx89_cstack, $I18
  rx89_jump:
    jump $I19
  rx89_done:
    rx89_cur."!cursor_fail"()
    .return (rx89_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "36_1340317678.734_caps"  :subid("228_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    new $P104, "Hash"
    set $P104["VALUE"], 0
    set $P104["binint"], 0
    set $P104["octint"], 0
    set $P104["hexint"], 0
    set $P104["decint"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "36_1340317678.734_nfa"  :subid("229_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 48
    push $P105, 2
    push $P105, 8
    push $P105, "decint"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 98
    push $P106, 3
    push $P106, 2
    push $P106, 111
    push $P106, 4
    push $P106, 2
    push $P106, 120
    push $P106, 5
    push $P106, 2
    push $P106, 100
    push $P106, 6
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "binint"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "octint"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "hexint"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "decint"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "36_1340317678.734_alt_nfa_38_1340317678.88"  :subid("230_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 98
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "binint"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    new $P108, "ResizablePMCArray"
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 111
    push $P109, 2
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "octint"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    new $P112, "ResizablePMCArray"
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 120
    push $P113, 2
    new $P114, "ResizablePMCArray"
    push $P114, 8
    push $P114, "hexint"
    push $P114, 0
    new $P115, "ResizablePMCArray"
    push $P115, $P112
    push $P115, $P113
    push $P115, $P114
    new $P116, "ResizablePMCArray"
    new $P117, "ResizablePMCArray"
    push $P117, 2
    push $P117, 100
    push $P117, 2
    new $P118, "ResizablePMCArray"
    push $P118, 8
    push $P118, "decint"
    push $P118, 0
    new $P119, "ResizablePMCArray"
    push $P119, $P116
    push $P119, $P117
    push $P119, $P118
    new $P120, "ResizablePMCArray"
    push $P120, $P107
    push $P120, $P111
    push $P120, $P115
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "36_1340317678.734_alt_nfa_37_1340317678.88"  :subid("231_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 64
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 48
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 98
    push $P106, 3
    push $P106, 2
    push $P106, 111
    push $P106, 4
    push $P106, 2
    push $P106, 120
    push $P106, 5
    push $P106, 2
    push $P106, 100
    push $P106, 6
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "binint"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "octint"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "hexint"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "decint"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    new $P112, "ResizablePMCArray"
    new $P113, "ResizablePMCArray"
    push $P113, 8
    push $P113, "decint"
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P112
    push $P114, $P113
    new $P115, "ResizablePMCArray"
    push $P115, $P111
    push $P115, $P114
    .return ($P115)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "dec_number"  :subid("39_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1139
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 75
    .lex "self", param_1139
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1140
    .lex "$/", $P1141
    .local string rx98_tgt
    .local int rx98_pos
    .local int rx98_off
    .local int rx98_eos
    .local int rx98_rep
    .local pmc rx98_cur
    .local pmc rx98_curclass
    .local pmc rx98_bstack
    .local pmc rx98_cstack
    (rx98_cur, rx98_tgt, rx98_pos, rx98_curclass, rx98_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx98_cur
    length rx98_eos, rx98_tgt
    eq $I19, 1, rx98_restart
    repr_get_attr_int $I11, self, rx98_curclass, "$!from"
    ne $I11, -1, rxscan99_done
    goto rxscan99_scan
  rxscan99_loop:
    inc rx98_pos
    gt rx98_pos, rx98_eos, rx98_fail
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!from", rx98_pos
  rxscan99_scan:
    nqp_rxmark rx98_bstack, rxscan99_loop, rx98_pos, 0
  rxscan99_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt100_0
    nqp_push_label $P11, alt100_1
    nqp_push_label $P11, alt100_2
    nqp_rxmark rx98_bstack, alt100_end, -1, 0
    rx98_cur."!alt"(rx98_pos, ucs4:"alt_nfa_40_1340317678.901", $P11)
    goto rx98_fail
  alt100_0:
    nqp_rxmark rx98_bstack, rxcap101_fail, rx98_pos, 0
    add $I11, rx98_pos, 1
    gt $I11, rx98_eos, rx98_fail
    substr $S10, rx98_tgt, rx98_pos, 1
    ne $S10, ucs4:".", rx98_fail
    add rx98_pos, 1
  # rx rxquantr102 ** 1..-1
    nqp_rxmark rx98_bstack, rxquantr102_done, -1, 0
  rxquantr102_loop:
    ge rx98_pos, rx98_eos, rx98_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx98_tgt, rx98_pos
    unless $I11, rx98_fail
    add rx98_pos, 1
    nqp_rxpeek $I19, rx98_bstack, rxquantr102_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr102_done
    inc rx98_rep
    nqp_rxmark rx98_bstack, rxquantr102_done, rx98_pos, rx98_rep
    goto rxquantr102_loop
  rxquantr102_done:
    nqp_rxpeek $I19, rx98_bstack, rxcap101_fail
    inc $I19
    set $I11, rx98_bstack[$I19]
    $P11 = rx98_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx98_pos)
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "coeff")
    goto rxcap101_done
  rxcap101_fail:
    goto rx98_fail
  rxcap101_done:
  # rx rxquantr103 ** 0..1
    nqp_rxmark rx98_bstack, rxquantr103_done, rx98_pos, 0
  rxquantr103_loop:
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."escale"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail
    goto rxsubrule104_pass
  rxsubrule104_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail
  rxsubrule104_pass:
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "escale")
    set_addr $I11, rxsubrule104_back
    push rx98_bstack, $I11
    push rx98_bstack, 0
    push rx98_bstack, rx98_pos
    elements $I11, rx98_cstack
    push rx98_bstack, $I11
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
    nqp_rxpeek $I19, rx98_bstack, rxquantr103_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr103_done
    inc rx98_rep
  rxquantr103_done:
    goto alt100_end
  alt100_1:
    nqp_rxmark rx98_bstack, rxcap105_fail, rx98_pos, 0
  # rx rxquantr106 ** 1..-1
    nqp_rxmark rx98_bstack, rxquantr106_done, -1, 0
  rxquantr106_loop:
    ge rx98_pos, rx98_eos, rx98_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx98_tgt, rx98_pos
    unless $I11, rx98_fail
    add rx98_pos, 1
    nqp_rxpeek $I19, rx98_bstack, rxquantr106_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr106_done
    inc rx98_rep
    nqp_rxmark rx98_bstack, rxquantr106_done, rx98_pos, rx98_rep
    goto rxquantr106_loop
  rxquantr106_done:
    add $I11, rx98_pos, 1
    gt $I11, rx98_eos, rx98_fail
    substr $S10, rx98_tgt, rx98_pos, 1
    ne $S10, ucs4:".", rx98_fail
    add rx98_pos, 1
  # rx rxquantr107 ** 1..-1
    nqp_rxmark rx98_bstack, rxquantr107_done, -1, 0
  rxquantr107_loop:
    ge rx98_pos, rx98_eos, rx98_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx98_tgt, rx98_pos
    unless $I11, rx98_fail
    add rx98_pos, 1
    nqp_rxpeek $I19, rx98_bstack, rxquantr107_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr107_done
    inc rx98_rep
    nqp_rxmark rx98_bstack, rxquantr107_done, rx98_pos, rx98_rep
    goto rxquantr107_loop
  rxquantr107_done:
    nqp_rxpeek $I19, rx98_bstack, rxcap105_fail
    inc $I19
    set $I11, rx98_bstack[$I19]
    $P11 = rx98_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx98_pos)
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "coeff")
    goto rxcap105_done
  rxcap105_fail:
    goto rx98_fail
  rxcap105_done:
  # rx rxquantr108 ** 0..1
    nqp_rxmark rx98_bstack, rxquantr108_done, rx98_pos, 0
  rxquantr108_loop:
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."escale"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail
    goto rxsubrule109_pass
  rxsubrule109_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail
  rxsubrule109_pass:
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "escale")
    set_addr $I11, rxsubrule109_back
    push rx98_bstack, $I11
    push rx98_bstack, 0
    push rx98_bstack, rx98_pos
    elements $I11, rx98_cstack
    push rx98_bstack, $I11
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
    nqp_rxpeek $I19, rx98_bstack, rxquantr108_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr108_done
    inc rx98_rep
  rxquantr108_done:
    goto alt100_end
  alt100_2:
    nqp_rxmark rx98_bstack, rxcap110_fail, rx98_pos, 0
  # rx rxquantr111 ** 1..-1
    nqp_rxmark rx98_bstack, rxquantr111_done, -1, 0
  rxquantr111_loop:
    ge rx98_pos, rx98_eos, rx98_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx98_tgt, rx98_pos
    unless $I11, rx98_fail
    add rx98_pos, 1
    nqp_rxpeek $I19, rx98_bstack, rxquantr111_done
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr111_done
    inc rx98_rep
    nqp_rxmark rx98_bstack, rxquantr111_done, rx98_pos, rx98_rep
    goto rxquantr111_loop
  rxquantr111_done:
    nqp_rxpeek $I19, rx98_bstack, rxcap110_fail
    inc $I19
    set $I11, rx98_bstack[$I19]
    $P11 = rx98_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx98_pos)
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "coeff")
    goto rxcap110_done
  rxcap110_fail:
    goto rx98_fail
  rxcap110_done:
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."escale"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail
    nqp_rxmark rx98_bstack, rxsubrule112_pass, -1, 0
  rxsubrule112_pass:
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "escale")
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
    goto alt100_end
  alt100_end:
    rx98_cur."!cursor_pass"(rx98_pos, "dec_number", 'backtrack'=>1)
    .return (rx98_cur)
  rx98_restart:
    repr_get_attr_obj rx98_cstack, rx98_cur, rx98_curclass, "$!cstack"
  rx98_fail:
    unless rx98_bstack, rx98_done
    pop $I19, rx98_bstack
    if_null rx98_cstack, rx98_cstack_done
    unless rx98_cstack, rx98_cstack_done
    dec $I19
    set $P11, rx98_cstack[$I19]
  rx98_cstack_done:
    pop rx98_rep, rx98_bstack
    pop rx98_pos, rx98_bstack
    pop $I19, rx98_bstack
    lt rx98_pos, -1, rx98_done
    lt rx98_pos, 0, rx98_fail
    eq $I19, 0, rx98_fail
    if_null rx98_cstack, rx98_jump
    elements $I18, rx98_bstack
    le $I18, 0, rx98_cut
    dec $I18
    set $I18, rx98_bstack[$I18]
  rx98_cut:
    assign rx98_cstack, $I18
  rx98_jump:
    jump $I19
  rx98_done:
    rx98_cur."!cursor_fail"()
    .return (rx98_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "39_1340317678.734_caps"  :subid("232_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 75
    new $P104, "Hash"
    set $P104["coeff"], 0
    set $P104["escale"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "39_1340317678.734_nfa"  :subid("233_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 75
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 46
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 6
    push $P105, 1
    push $P105, 0
    push $P105, 13
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 4
    push $P107, 8
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    push $P108, 1
    push $P108, 0
    push $P108, 5
    push $P108, 8
    push $P108, "escale"
    push $P108, 0
    push $P108, 1
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 8
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 6
    push $P111, 1
    push $P111, 0
    push $P111, 8
    push $P111, 2
    push $P111, 46
    push $P111, 9
    new $P112, "ResizablePMCArray"
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 4
    push $P114, 8
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 1
    push $P115, 0
    push $P115, 10
    push $P115, 1
    push $P115, 0
    push $P115, 12
    push $P115, 8
    push $P115, "escale"
    push $P115, 0
    push $P115, 1
    push $P115, 0
    push $P115, 0
    new $P116, "ResizablePMCArray"
    new $P117, "ResizablePMCArray"
    push $P117, 4
    push $P117, 8
    push $P117, 14
    new $P118, "ResizablePMCArray"
    push $P118, 1
    push $P118, 0
    push $P118, 13
    push $P118, 1
    push $P118, 0
    push $P118, 15
    push $P118, 8
    push $P118, "escale"
    push $P118, 0
    new $P119, "ResizablePMCArray"
    new $P120, "ResizablePMCArray"
    push $P120, $P104
    push $P120, $P105
    push $P120, $P106
    push $P120, $P107
    push $P120, $P108
    push $P120, $P109
    push $P120, $P110
    push $P120, $P111
    push $P120, $P112
    push $P120, $P113
    push $P120, $P114
    push $P120, $P115
    push $P120, $P116
    push $P120, $P117
    push $P120, $P118
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "39_1340317678.734_alt_nfa_40_1340317678.901"  :subid("234_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 75
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 46
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 4
    push $P107, 8
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    push $P108, 1
    push $P108, 0
    push $P108, 5
    push $P108, 8
    push $P108, "escale"
    push $P108, 0
    push $P108, 1
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    new $P111, "ResizablePMCArray"
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 2
    new $P113, "ResizablePMCArray"
    push $P113, 4
    push $P113, 8
    push $P113, 3
    new $P114, "ResizablePMCArray"
    push $P114, 1
    push $P114, 0
    push $P114, 2
    push $P114, 1
    push $P114, 0
    push $P114, 4
    push $P114, 2
    push $P114, 46
    push $P114, 5
    new $P115, "ResizablePMCArray"
    new $P116, "ResizablePMCArray"
    push $P116, 1
    push $P116, 0
    push $P116, 6
    new $P117, "ResizablePMCArray"
    push $P117, 4
    push $P117, 8
    push $P117, 7
    new $P118, "ResizablePMCArray"
    push $P118, 1
    push $P118, 0
    push $P118, 6
    push $P118, 1
    push $P118, 0
    push $P118, 8
    push $P118, 8
    push $P118, "escale"
    push $P118, 0
    push $P118, 1
    push $P118, 0
    push $P118, 0
    new $P119, "ResizablePMCArray"
    new $P120, "ResizablePMCArray"
    push $P120, $P111
    push $P120, $P112
    push $P120, $P113
    push $P120, $P114
    push $P120, $P115
    push $P120, $P116
    push $P120, $P117
    push $P120, $P118
    push $P120, $P119
    new $P121, "ResizablePMCArray"
    new $P122, "ResizablePMCArray"
    push $P122, 1
    push $P122, 0
    push $P122, 2
    new $P123, "ResizablePMCArray"
    push $P123, 4
    push $P123, 8
    push $P123, 3
    new $P124, "ResizablePMCArray"
    push $P124, 1
    push $P124, 0
    push $P124, 2
    push $P124, 1
    push $P124, 0
    push $P124, 4
    push $P124, 8
    push $P124, "escale"
    push $P124, 0
    new $P125, "ResizablePMCArray"
    new $P126, "ResizablePMCArray"
    push $P126, $P121
    push $P126, $P122
    push $P126, $P123
    push $P126, $P124
    push $P126, $P125
    new $P127, "ResizablePMCArray"
    push $P127, $P110
    push $P127, $P120
    push $P127, $P126
    .return ($P127)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "escale"  :subid("41_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1146
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 81
    .lex "self", param_1146
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1147
    .lex "$/", $P1148
    .local string rx113_tgt
    .local int rx113_pos
    .local int rx113_off
    .local int rx113_eos
    .local int rx113_rep
    .local pmc rx113_cur
    .local pmc rx113_curclass
    .local pmc rx113_bstack
    .local pmc rx113_cstack
    (rx113_cur, rx113_tgt, rx113_pos, rx113_curclass, rx113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx113_cur
    length rx113_eos, rx113_tgt
    eq $I19, 1, rx113_restart
    repr_get_attr_int $I11, self, rx113_curclass, "$!from"
    ne $I11, -1, rxscan114_done
    goto rxscan114_scan
  rxscan114_loop:
    inc rx113_pos
    gt rx113_pos, rx113_eos, rx113_fail
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!from", rx113_pos
  rxscan114_scan:
    nqp_rxmark rx113_bstack, rxscan114_loop, rx113_pos, 0
  rxscan114_done:
    ge rx113_pos, rx113_eos, rx113_fail
    substr $S11, rx113_tgt, rx113_pos, 1
    index $I11, ucs4:"Ee", $S11
    lt $I11, 0, rx113_fail
    inc rx113_pos
  # rx rxquantr115 ** 0..1
    nqp_rxmark rx113_bstack, rxquantr115_done, rx113_pos, 0
  rxquantr115_loop:
  alt116_0:
    nqp_rxmark rx113_bstack, alt116_1, rx113_pos, 0
    add $I11, rx113_pos, 1
    gt $I11, rx113_eos, rx113_fail
    substr $S10, rx113_tgt, rx113_pos, 1
    ne $S10, ucs4:"-", rx113_fail
    add rx113_pos, 1
    goto alt116_end
  alt116_1:
    ge rx113_pos, rx113_eos, rx113_fail
    substr $S11, rx113_tgt, rx113_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx113_fail
    inc rx113_pos
  alt116_end:
    nqp_rxpeek $I19, rx113_bstack, rxquantr115_done
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr115_done
    inc rx113_rep
  rxquantr115_done:
  # rx rxquantr117 ** 1..-1
    nqp_rxmark rx113_bstack, rxquantr117_done, -1, 0
  rxquantr117_loop:
    ge rx113_pos, rx113_eos, rx113_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx113_tgt, rx113_pos
    unless $I11, rx113_fail
    add rx113_pos, 1
    nqp_rxpeek $I19, rx113_bstack, rxquantr117_done
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr117_done
    inc rx113_rep
    nqp_rxmark rx113_bstack, rxquantr117_done, rx113_pos, rx113_rep
    goto rxquantr117_loop
  rxquantr117_done:
    rx113_cur."!cursor_pass"(rx113_pos, "escale", 'backtrack'=>1)
    .return (rx113_cur)
  rx113_restart:
    repr_get_attr_obj rx113_cstack, rx113_cur, rx113_curclass, "$!cstack"
  rx113_fail:
    unless rx113_bstack, rx113_done
    pop $I19, rx113_bstack
    if_null rx113_cstack, rx113_cstack_done
    unless rx113_cstack, rx113_cstack_done
    dec $I19
    set $P11, rx113_cstack[$I19]
  rx113_cstack_done:
    pop rx113_rep, rx113_bstack
    pop rx113_pos, rx113_bstack
    pop $I19, rx113_bstack
    lt rx113_pos, -1, rx113_done
    lt rx113_pos, 0, rx113_fail
    eq $I19, 0, rx113_fail
    if_null rx113_cstack, rx113_jump
    elements $I18, rx113_bstack
    le $I18, 0, rx113_cut
    dec $I18
    set $I18, rx113_bstack[$I18]
  rx113_cut:
    assign rx113_cstack, $I18
  rx113_jump:
    jump $I19
  rx113_done:
    rx113_cur."!cursor_fail"()
    .return (rx113_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1340317678.734_caps"  :subid("235_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 81
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1340317678.734_nfa"  :subid("236_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 81
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "Ee"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape"  :subid("42_1340317678.734")
    .param pmc param_1152
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 83
    .lex "self", param_1152
    $P103 = param_1152."!protoregex"("quote_escape")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<backslash>"  :subid("43_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1154
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 84
    .lex "self", param_1154
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1155
    .lex "$/", $P1156
    .local string rx118_tgt
    .local int rx118_pos
    .local int rx118_off
    .local int rx118_eos
    .local int rx118_rep
    .local pmc rx118_cur
    .local pmc rx118_curclass
    .local pmc rx118_bstack
    .local pmc rx118_cstack
    (rx118_cur, rx118_tgt, rx118_pos, rx118_curclass, rx118_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx118_cur
    length rx118_eos, rx118_tgt
    eq $I19, 1, rx118_restart
    repr_get_attr_int $I11, self, rx118_curclass, "$!from"
    ne $I11, -1, rxscan119_done
    goto rxscan119_scan
  rxscan119_loop:
    inc rx118_pos
    gt rx118_pos, rx118_eos, rx118_fail
    repr_bind_attr_int rx118_cur, rx118_curclass, "$!from", rx118_pos
  rxscan119_scan:
    nqp_rxmark rx118_bstack, rxscan119_loop, rx118_pos, 0
  rxscan119_done:
    add $I11, rx118_pos, 2
    gt $I11, rx118_eos, rx118_fail
    substr $S10, rx118_tgt, rx118_pos, 2
    ne $S10, ucs4:"\\\\", rx118_fail
    add rx118_pos, 2
    repr_bind_attr_int rx118_cur, rx118_curclass, "$!pos", rx118_pos
    $P11 = rx118_cur."quotemod_check"("q")
    repr_get_attr_int $I11, $P11, rx118_curclass, "$!pos"
    lt $I11, 0, rx118_fail
    rx118_cur."!cursor_pass"(rx118_pos, "quote_escape:sym<backslash>", 'backtrack'=>1)
    .return (rx118_cur)
  rx118_restart:
    repr_get_attr_obj rx118_cstack, rx118_cur, rx118_curclass, "$!cstack"
  rx118_fail:
    unless rx118_bstack, rx118_done
    pop $I19, rx118_bstack
    if_null rx118_cstack, rx118_cstack_done
    unless rx118_cstack, rx118_cstack_done
    dec $I19
    set $P11, rx118_cstack[$I19]
  rx118_cstack_done:
    pop rx118_rep, rx118_bstack
    pop rx118_pos, rx118_bstack
    pop $I19, rx118_bstack
    lt rx118_pos, -1, rx118_done
    lt rx118_pos, 0, rx118_fail
    eq $I19, 0, rx118_fail
    if_null rx118_cstack, rx118_jump
    elements $I18, rx118_bstack
    le $I18, 0, rx118_cut
    dec $I18
    set $I18, rx118_bstack[$I18]
  rx118_cut:
    assign rx118_cstack, $I18
  rx118_jump:
    jump $I19
  rx118_done:
    rx118_cur."!cursor_fail"()
    .return (rx118_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1340317678.734_caps"  :subid("237_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 84
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1340317678.734_nfa"  :subid("238_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 84
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 92
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<stopper>"  :subid("44_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1160
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 85
    .lex "self", param_1160
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1161
    .lex "$/", $P1162
    .local string rx120_tgt
    .local int rx120_pos
    .local int rx120_off
    .local int rx120_eos
    .local int rx120_rep
    .local pmc rx120_cur
    .local pmc rx120_curclass
    .local pmc rx120_bstack
    .local pmc rx120_cstack
    (rx120_cur, rx120_tgt, rx120_pos, rx120_curclass, rx120_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx120_cur
    length rx120_eos, rx120_tgt
    eq $I19, 1, rx120_restart
    repr_get_attr_int $I11, self, rx120_curclass, "$!from"
    ne $I11, -1, rxscan121_done
    goto rxscan121_scan
  rxscan121_loop:
    inc rx120_pos
    gt rx120_pos, rx120_eos, rx120_fail
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!from", rx120_pos
  rxscan121_scan:
    nqp_rxmark rx120_bstack, rxscan121_loop, rx120_pos, 0
  rxscan121_done:
    add $I11, rx120_pos, 1
    gt $I11, rx120_eos, rx120_fail
    substr $S10, rx120_tgt, rx120_pos, 1
    ne $S10, ucs4:"\\", rx120_fail
    add rx120_pos, 1
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."quotemod_check"("q")
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail
    nqp_rxmark rx120_bstack, rxsubrule122_pass, -1, 0
  rxsubrule122_pass:
    rx120_cstack = rx120_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
    rx120_cur."!cursor_pass"(rx120_pos, "quote_escape:sym<stopper>", 'backtrack'=>1)
    .return (rx120_cur)
  rx120_restart:
    repr_get_attr_obj rx120_cstack, rx120_cur, rx120_curclass, "$!cstack"
  rx120_fail:
    unless rx120_bstack, rx120_done
    pop $I19, rx120_bstack
    if_null rx120_cstack, rx120_cstack_done
    unless rx120_cstack, rx120_cstack_done
    dec $I19
    set $P11, rx120_cstack[$I19]
  rx120_cstack_done:
    pop rx120_rep, rx120_bstack
    pop rx120_pos, rx120_bstack
    pop $I19, rx120_bstack
    lt rx120_pos, -1, rx120_done
    lt rx120_pos, 0, rx120_fail
    eq $I19, 0, rx120_fail
    if_null rx120_cstack, rx120_jump
    elements $I18, rx120_bstack
    le $I18, 0, rx120_cut
    dec $I18
    set $I18, rx120_bstack[$I18]
  rx120_cut:
    assign rx120_cstack, $I18
  rx120_jump:
    jump $I19
  rx120_done:
    rx120_cur."!cursor_fail"()
    .return (rx120_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1340317678.734_caps"  :subid("239_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 85
    new $P104, "Hash"
    set $P104["stopper"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1340317678.734_nfa"  :subid("240_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 85
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "quotemod_check"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<bs>"  :subid("45_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1166
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 87
    .lex "self", param_1166
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1167
    .lex "$/", $P1168
    .local string rx123_tgt
    .local int rx123_pos
    .local int rx123_off
    .local int rx123_eos
    .local int rx123_rep
    .local pmc rx123_cur
    .local pmc rx123_curclass
    .local pmc rx123_bstack
    .local pmc rx123_cstack
    (rx123_cur, rx123_tgt, rx123_pos, rx123_curclass, rx123_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx123_cur
    length rx123_eos, rx123_tgt
    eq $I19, 1, rx123_restart
    repr_get_attr_int $I11, self, rx123_curclass, "$!from"
    ne $I11, -1, rxscan124_done
    goto rxscan124_scan
  rxscan124_loop:
    inc rx123_pos
    gt rx123_pos, rx123_eos, rx123_fail
    repr_bind_attr_int rx123_cur, rx123_curclass, "$!from", rx123_pos
  rxscan124_scan:
    nqp_rxmark rx123_bstack, rxscan124_loop, rx123_pos, 0
  rxscan124_done:
    add $I11, rx123_pos, 2
    gt $I11, rx123_eos, rx123_fail
    substr $S10, rx123_tgt, rx123_pos, 2
    ne $S10, ucs4:"\\b", rx123_fail
    add rx123_pos, 2
    repr_bind_attr_int rx123_cur, rx123_curclass, "$!pos", rx123_pos
    $P11 = rx123_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx123_curclass, "$!pos"
    lt $I11, 0, rx123_fail
    rx123_cur."!cursor_pass"(rx123_pos, "quote_escape:sym<bs>", 'backtrack'=>1)
    .return (rx123_cur)
  rx123_restart:
    repr_get_attr_obj rx123_cstack, rx123_cur, rx123_curclass, "$!cstack"
  rx123_fail:
    unless rx123_bstack, rx123_done
    pop $I19, rx123_bstack
    if_null rx123_cstack, rx123_cstack_done
    unless rx123_cstack, rx123_cstack_done
    dec $I19
    set $P11, rx123_cstack[$I19]
  rx123_cstack_done:
    pop rx123_rep, rx123_bstack
    pop rx123_pos, rx123_bstack
    pop $I19, rx123_bstack
    lt rx123_pos, -1, rx123_done
    lt rx123_pos, 0, rx123_fail
    eq $I19, 0, rx123_fail
    if_null rx123_cstack, rx123_jump
    elements $I18, rx123_bstack
    le $I18, 0, rx123_cut
    dec $I18
    set $I18, rx123_bstack[$I18]
  rx123_cut:
    assign rx123_cstack, $I18
  rx123_jump:
    jump $I19
  rx123_done:
    rx123_cur."!cursor_fail"()
    .return (rx123_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "45_1340317678.734_caps"  :subid("241_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 87
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "45_1340317678.734_nfa"  :subid("242_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 87
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 98
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<nl>"  :subid("46_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1172
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 88
    .lex "self", param_1172
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1173
    .lex "$/", $P1174
    .local string rx125_tgt
    .local int rx125_pos
    .local int rx125_off
    .local int rx125_eos
    .local int rx125_rep
    .local pmc rx125_cur
    .local pmc rx125_curclass
    .local pmc rx125_bstack
    .local pmc rx125_cstack
    (rx125_cur, rx125_tgt, rx125_pos, rx125_curclass, rx125_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx125_cur
    length rx125_eos, rx125_tgt
    eq $I19, 1, rx125_restart
    repr_get_attr_int $I11, self, rx125_curclass, "$!from"
    ne $I11, -1, rxscan126_done
    goto rxscan126_scan
  rxscan126_loop:
    inc rx125_pos
    gt rx125_pos, rx125_eos, rx125_fail
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!from", rx125_pos
  rxscan126_scan:
    nqp_rxmark rx125_bstack, rxscan126_loop, rx125_pos, 0
  rxscan126_done:
    add $I11, rx125_pos, 2
    gt $I11, rx125_eos, rx125_fail
    substr $S10, rx125_tgt, rx125_pos, 2
    ne $S10, ucs4:"\\n", rx125_fail
    add rx125_pos, 2
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail
    rx125_cur."!cursor_pass"(rx125_pos, "quote_escape:sym<nl>", 'backtrack'=>1)
    .return (rx125_cur)
  rx125_restart:
    repr_get_attr_obj rx125_cstack, rx125_cur, rx125_curclass, "$!cstack"
  rx125_fail:
    unless rx125_bstack, rx125_done
    pop $I19, rx125_bstack
    if_null rx125_cstack, rx125_cstack_done
    unless rx125_cstack, rx125_cstack_done
    dec $I19
    set $P11, rx125_cstack[$I19]
  rx125_cstack_done:
    pop rx125_rep, rx125_bstack
    pop rx125_pos, rx125_bstack
    pop $I19, rx125_bstack
    lt rx125_pos, -1, rx125_done
    lt rx125_pos, 0, rx125_fail
    eq $I19, 0, rx125_fail
    if_null rx125_cstack, rx125_jump
    elements $I18, rx125_bstack
    le $I18, 0, rx125_cut
    dec $I18
    set $I18, rx125_bstack[$I18]
  rx125_cut:
    assign rx125_cstack, $I18
  rx125_jump:
    jump $I19
  rx125_done:
    rx125_cur."!cursor_fail"()
    .return (rx125_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1340317678.734_caps"  :subid("243_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 88
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1340317678.734_nfa"  :subid("244_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 88
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 110
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<cr>"  :subid("47_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1178
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 89
    .lex "self", param_1178
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1179
    .lex "$/", $P1180
    .local string rx127_tgt
    .local int rx127_pos
    .local int rx127_off
    .local int rx127_eos
    .local int rx127_rep
    .local pmc rx127_cur
    .local pmc rx127_curclass
    .local pmc rx127_bstack
    .local pmc rx127_cstack
    (rx127_cur, rx127_tgt, rx127_pos, rx127_curclass, rx127_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx127_cur
    length rx127_eos, rx127_tgt
    eq $I19, 1, rx127_restart
    repr_get_attr_int $I11, self, rx127_curclass, "$!from"
    ne $I11, -1, rxscan128_done
    goto rxscan128_scan
  rxscan128_loop:
    inc rx127_pos
    gt rx127_pos, rx127_eos, rx127_fail
    repr_bind_attr_int rx127_cur, rx127_curclass, "$!from", rx127_pos
  rxscan128_scan:
    nqp_rxmark rx127_bstack, rxscan128_loop, rx127_pos, 0
  rxscan128_done:
    add $I11, rx127_pos, 2
    gt $I11, rx127_eos, rx127_fail
    substr $S10, rx127_tgt, rx127_pos, 2
    ne $S10, ucs4:"\\r", rx127_fail
    add rx127_pos, 2
    repr_bind_attr_int rx127_cur, rx127_curclass, "$!pos", rx127_pos
    $P11 = rx127_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx127_curclass, "$!pos"
    lt $I11, 0, rx127_fail
    rx127_cur."!cursor_pass"(rx127_pos, "quote_escape:sym<cr>", 'backtrack'=>1)
    .return (rx127_cur)
  rx127_restart:
    repr_get_attr_obj rx127_cstack, rx127_cur, rx127_curclass, "$!cstack"
  rx127_fail:
    unless rx127_bstack, rx127_done
    pop $I19, rx127_bstack
    if_null rx127_cstack, rx127_cstack_done
    unless rx127_cstack, rx127_cstack_done
    dec $I19
    set $P11, rx127_cstack[$I19]
  rx127_cstack_done:
    pop rx127_rep, rx127_bstack
    pop rx127_pos, rx127_bstack
    pop $I19, rx127_bstack
    lt rx127_pos, -1, rx127_done
    lt rx127_pos, 0, rx127_fail
    eq $I19, 0, rx127_fail
    if_null rx127_cstack, rx127_jump
    elements $I18, rx127_bstack
    le $I18, 0, rx127_cut
    dec $I18
    set $I18, rx127_bstack[$I18]
  rx127_cut:
    assign rx127_cstack, $I18
  rx127_jump:
    jump $I19
  rx127_done:
    rx127_cur."!cursor_fail"()
    .return (rx127_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "47_1340317678.734_caps"  :subid("245_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 89
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "47_1340317678.734_nfa"  :subid("246_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 89
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 114
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<tab>"  :subid("48_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1184
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 90
    .lex "self", param_1184
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1185
    .lex "$/", $P1186
    .local string rx129_tgt
    .local int rx129_pos
    .local int rx129_off
    .local int rx129_eos
    .local int rx129_rep
    .local pmc rx129_cur
    .local pmc rx129_curclass
    .local pmc rx129_bstack
    .local pmc rx129_cstack
    (rx129_cur, rx129_tgt, rx129_pos, rx129_curclass, rx129_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx129_cur
    length rx129_eos, rx129_tgt
    eq $I19, 1, rx129_restart
    repr_get_attr_int $I11, self, rx129_curclass, "$!from"
    ne $I11, -1, rxscan130_done
    goto rxscan130_scan
  rxscan130_loop:
    inc rx129_pos
    gt rx129_pos, rx129_eos, rx129_fail
    repr_bind_attr_int rx129_cur, rx129_curclass, "$!from", rx129_pos
  rxscan130_scan:
    nqp_rxmark rx129_bstack, rxscan130_loop, rx129_pos, 0
  rxscan130_done:
    add $I11, rx129_pos, 2
    gt $I11, rx129_eos, rx129_fail
    substr $S10, rx129_tgt, rx129_pos, 2
    ne $S10, ucs4:"\\t", rx129_fail
    add rx129_pos, 2
    repr_bind_attr_int rx129_cur, rx129_curclass, "$!pos", rx129_pos
    $P11 = rx129_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx129_curclass, "$!pos"
    lt $I11, 0, rx129_fail
    rx129_cur."!cursor_pass"(rx129_pos, "quote_escape:sym<tab>", 'backtrack'=>1)
    .return (rx129_cur)
  rx129_restart:
    repr_get_attr_obj rx129_cstack, rx129_cur, rx129_curclass, "$!cstack"
  rx129_fail:
    unless rx129_bstack, rx129_done
    pop $I19, rx129_bstack
    if_null rx129_cstack, rx129_cstack_done
    unless rx129_cstack, rx129_cstack_done
    dec $I19
    set $P11, rx129_cstack[$I19]
  rx129_cstack_done:
    pop rx129_rep, rx129_bstack
    pop rx129_pos, rx129_bstack
    pop $I19, rx129_bstack
    lt rx129_pos, -1, rx129_done
    lt rx129_pos, 0, rx129_fail
    eq $I19, 0, rx129_fail
    if_null rx129_cstack, rx129_jump
    elements $I18, rx129_bstack
    le $I18, 0, rx129_cut
    dec $I18
    set $I18, rx129_bstack[$I18]
  rx129_cut:
    assign rx129_cstack, $I18
  rx129_jump:
    jump $I19
  rx129_done:
    rx129_cur."!cursor_fail"()
    .return (rx129_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "48_1340317678.734_caps"  :subid("247_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 90
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "48_1340317678.734_nfa"  :subid("248_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 90
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 116
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<ff>"  :subid("49_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1190
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 91
    .lex "self", param_1190
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1191
    .lex "$/", $P1192
    .local string rx131_tgt
    .local int rx131_pos
    .local int rx131_off
    .local int rx131_eos
    .local int rx131_rep
    .local pmc rx131_cur
    .local pmc rx131_curclass
    .local pmc rx131_bstack
    .local pmc rx131_cstack
    (rx131_cur, rx131_tgt, rx131_pos, rx131_curclass, rx131_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx131_cur
    length rx131_eos, rx131_tgt
    eq $I19, 1, rx131_restart
    repr_get_attr_int $I11, self, rx131_curclass, "$!from"
    ne $I11, -1, rxscan132_done
    goto rxscan132_scan
  rxscan132_loop:
    inc rx131_pos
    gt rx131_pos, rx131_eos, rx131_fail
    repr_bind_attr_int rx131_cur, rx131_curclass, "$!from", rx131_pos
  rxscan132_scan:
    nqp_rxmark rx131_bstack, rxscan132_loop, rx131_pos, 0
  rxscan132_done:
    add $I11, rx131_pos, 2
    gt $I11, rx131_eos, rx131_fail
    substr $S10, rx131_tgt, rx131_pos, 2
    ne $S10, ucs4:"\\f", rx131_fail
    add rx131_pos, 2
    repr_bind_attr_int rx131_cur, rx131_curclass, "$!pos", rx131_pos
    $P11 = rx131_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx131_curclass, "$!pos"
    lt $I11, 0, rx131_fail
    rx131_cur."!cursor_pass"(rx131_pos, "quote_escape:sym<ff>", 'backtrack'=>1)
    .return (rx131_cur)
  rx131_restart:
    repr_get_attr_obj rx131_cstack, rx131_cur, rx131_curclass, "$!cstack"
  rx131_fail:
    unless rx131_bstack, rx131_done
    pop $I19, rx131_bstack
    if_null rx131_cstack, rx131_cstack_done
    unless rx131_cstack, rx131_cstack_done
    dec $I19
    set $P11, rx131_cstack[$I19]
  rx131_cstack_done:
    pop rx131_rep, rx131_bstack
    pop rx131_pos, rx131_bstack
    pop $I19, rx131_bstack
    lt rx131_pos, -1, rx131_done
    lt rx131_pos, 0, rx131_fail
    eq $I19, 0, rx131_fail
    if_null rx131_cstack, rx131_jump
    elements $I18, rx131_bstack
    le $I18, 0, rx131_cut
    dec $I18
    set $I18, rx131_bstack[$I18]
  rx131_cut:
    assign rx131_cstack, $I18
  rx131_jump:
    jump $I19
  rx131_done:
    rx131_cur."!cursor_fail"()
    .return (rx131_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1340317678.734_caps"  :subid("249_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 91
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1340317678.734_nfa"  :subid("250_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 91
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 102
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("50_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1196
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 92
    .lex "self", param_1196
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1197
    .lex "$/", $P1198
    .local string rx133_tgt
    .local int rx133_pos
    .local int rx133_off
    .local int rx133_eos
    .local int rx133_rep
    .local pmc rx133_cur
    .local pmc rx133_curclass
    .local pmc rx133_bstack
    .local pmc rx133_cstack
    (rx133_cur, rx133_tgt, rx133_pos, rx133_curclass, rx133_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx133_cur
    length rx133_eos, rx133_tgt
    eq $I19, 1, rx133_restart
    repr_get_attr_int $I11, self, rx133_curclass, "$!from"
    ne $I11, -1, rxscan134_done
    goto rxscan134_scan
  rxscan134_loop:
    inc rx133_pos
    gt rx133_pos, rx133_eos, rx133_fail
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!from", rx133_pos
  rxscan134_scan:
    nqp_rxmark rx133_bstack, rxscan134_loop, rx133_pos, 0
  rxscan134_done:
    add $I11, rx133_pos, 2
    gt $I11, rx133_eos, rx133_fail
    substr $S10, rx133_tgt, rx133_pos, 2
    ne $S10, ucs4:"\\e", rx133_fail
    add rx133_pos, 2
    repr_bind_attr_int rx133_cur, rx133_curclass, "$!pos", rx133_pos
    $P11 = rx133_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx133_curclass, "$!pos"
    lt $I11, 0, rx133_fail
    rx133_cur."!cursor_pass"(rx133_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx133_cur)
  rx133_restart:
    repr_get_attr_obj rx133_cstack, rx133_cur, rx133_curclass, "$!cstack"
  rx133_fail:
    unless rx133_bstack, rx133_done
    pop $I19, rx133_bstack
    if_null rx133_cstack, rx133_cstack_done
    unless rx133_cstack, rx133_cstack_done
    dec $I19
    set $P11, rx133_cstack[$I19]
  rx133_cstack_done:
    pop rx133_rep, rx133_bstack
    pop rx133_pos, rx133_bstack
    pop $I19, rx133_bstack
    lt rx133_pos, -1, rx133_done
    lt rx133_pos, 0, rx133_fail
    eq $I19, 0, rx133_fail
    if_null rx133_cstack, rx133_jump
    elements $I18, rx133_bstack
    le $I18, 0, rx133_cut
    dec $I18
    set $I18, rx133_bstack[$I18]
  rx133_cut:
    assign rx133_cstack, $I18
  rx133_jump:
    jump $I19
  rx133_done:
    rx133_cur."!cursor_fail"()
    .return (rx133_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1340317678.734_caps"  :subid("251_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 92
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1340317678.734_nfa"  :subid("252_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 92
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<hex>"  :subid("51_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1202
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 93
    .lex "self", param_1202
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1203
    .lex "$/", $P1204
    .local string rx135_tgt
    .local int rx135_pos
    .local int rx135_off
    .local int rx135_eos
    .local int rx135_rep
    .local pmc rx135_cur
    .local pmc rx135_curclass
    .local pmc rx135_bstack
    .local pmc rx135_cstack
    (rx135_cur, rx135_tgt, rx135_pos, rx135_curclass, rx135_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx135_cur
    length rx135_eos, rx135_tgt
    eq $I19, 1, rx135_restart
    repr_get_attr_int $I11, self, rx135_curclass, "$!from"
    ne $I11, -1, rxscan136_done
    goto rxscan136_scan
  rxscan136_loop:
    inc rx135_pos
    gt rx135_pos, rx135_eos, rx135_fail
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!from", rx135_pos
  rxscan136_scan:
    nqp_rxmark rx135_bstack, rxscan136_loop, rx135_pos, 0
  rxscan136_done:
    add $I11, rx135_pos, 2
    gt $I11, rx135_eos, rx135_fail
    substr $S10, rx135_tgt, rx135_pos, 2
    ne $S10, ucs4:"\\x", rx135_fail
    add rx135_pos, 2
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt137_0
    nqp_push_label $P11, alt137_1
    nqp_rxmark rx135_bstack, alt137_end, -1, 0
    rx135_cur."!alt"(rx135_pos, ucs4:"alt_nfa_52_1340317678.98", $P11)
    goto rx135_fail
  alt137_0:
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail
    nqp_rxmark rx135_bstack, rxsubrule138_pass, -1, 0
  rxsubrule138_pass:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    goto alt137_end
  alt137_1:
    add $I11, rx135_pos, 1
    gt $I11, rx135_eos, rx135_fail
    substr $S10, rx135_tgt, rx135_pos, 1
    ne $S10, ucs4:"[", rx135_fail
    add rx135_pos, 1
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail
    nqp_rxmark rx135_bstack, rxsubrule139_pass, -1, 0
  rxsubrule139_pass:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    add $I11, rx135_pos, 1
    gt $I11, rx135_eos, rx135_fail
    substr $S10, rx135_tgt, rx135_pos, 1
    ne $S10, ucs4:"]", rx135_fail
    add rx135_pos, 1
    goto alt137_end
  alt137_end:
    nqp_rxcommit rx135_bstack, alt137_end
    rx135_cur."!cursor_pass"(rx135_pos, "quote_escape:sym<hex>", 'backtrack'=>1)
    .return (rx135_cur)
  rx135_restart:
    repr_get_attr_obj rx135_cstack, rx135_cur, rx135_curclass, "$!cstack"
  rx135_fail:
    unless rx135_bstack, rx135_done
    pop $I19, rx135_bstack
    if_null rx135_cstack, rx135_cstack_done
    unless rx135_cstack, rx135_cstack_done
    dec $I19
    set $P11, rx135_cstack[$I19]
  rx135_cstack_done:
    pop rx135_rep, rx135_bstack
    pop rx135_pos, rx135_bstack
    pop $I19, rx135_bstack
    lt rx135_pos, -1, rx135_done
    lt rx135_pos, 0, rx135_fail
    eq $I19, 0, rx135_fail
    if_null rx135_cstack, rx135_jump
    elements $I18, rx135_bstack
    le $I18, 0, rx135_cut
    dec $I18
    set $I18, rx135_bstack[$I18]
  rx135_cut:
    assign rx135_cstack, $I18
  rx135_jump:
    jump $I19
  rx135_done:
    rx135_cur."!cursor_fail"()
    .return (rx135_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "51_1340317678.734_caps"  :subid("253_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 93
    new $P104, "Hash"
    set $P104["hexint"], 0
    set $P104["hexints"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "51_1340317678.734_nfa"  :subid("254_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 93
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 120
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "51_1340317678.734_alt_nfa_52_1340317678.98"  :subid("255_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 93
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "hexint"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 91
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "hexints"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 93
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    new $P112, "ResizablePMCArray"
    push $P112, $P106
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<oct>"  :subid("53_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1209
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 97
    .lex "self", param_1209
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1210
    .lex "$/", $P1211
    .local string rx140_tgt
    .local int rx140_pos
    .local int rx140_off
    .local int rx140_eos
    .local int rx140_rep
    .local pmc rx140_cur
    .local pmc rx140_curclass
    .local pmc rx140_bstack
    .local pmc rx140_cstack
    (rx140_cur, rx140_tgt, rx140_pos, rx140_curclass, rx140_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx140_cur
    length rx140_eos, rx140_tgt
    eq $I19, 1, rx140_restart
    repr_get_attr_int $I11, self, rx140_curclass, "$!from"
    ne $I11, -1, rxscan141_done
    goto rxscan141_scan
  rxscan141_loop:
    inc rx140_pos
    gt rx140_pos, rx140_eos, rx140_fail
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!from", rx140_pos
  rxscan141_scan:
    nqp_rxmark rx140_bstack, rxscan141_loop, rx140_pos, 0
  rxscan141_done:
    add $I11, rx140_pos, 2
    gt $I11, rx140_eos, rx140_fail
    substr $S10, rx140_tgt, rx140_pos, 2
    ne $S10, ucs4:"\\o", rx140_fail
    add rx140_pos, 2
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    $P11 = rx140_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt142_0
    nqp_push_label $P11, alt142_1
    nqp_rxmark rx140_bstack, alt142_end, -1, 0
    rx140_cur."!alt"(rx140_pos, ucs4:"alt_nfa_54_1340317678.993", $P11)
    goto rx140_fail
  alt142_0:
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    $P11 = rx140_cur."octint"()
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail
    nqp_rxmark rx140_bstack, rxsubrule143_pass, -1, 0
  rxsubrule143_pass:
    rx140_cstack = rx140_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx140_pos, $P11, rx140_curclass, "$!pos"
    goto alt142_end
  alt142_1:
    add $I11, rx140_pos, 1
    gt $I11, rx140_eos, rx140_fail
    substr $S10, rx140_tgt, rx140_pos, 1
    ne $S10, ucs4:"[", rx140_fail
    add rx140_pos, 1
    repr_bind_attr_int rx140_cur, rx140_curclass, "$!pos", rx140_pos
    $P11 = rx140_cur."octints"()
    repr_get_attr_int $I11, $P11, rx140_curclass, "$!pos"
    lt $I11, 0, rx140_fail
    nqp_rxmark rx140_bstack, rxsubrule144_pass, -1, 0
  rxsubrule144_pass:
    rx140_cstack = rx140_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx140_pos, $P11, rx140_curclass, "$!pos"
    add $I11, rx140_pos, 1
    gt $I11, rx140_eos, rx140_fail
    substr $S10, rx140_tgt, rx140_pos, 1
    ne $S10, ucs4:"]", rx140_fail
    add rx140_pos, 1
    goto alt142_end
  alt142_end:
    nqp_rxcommit rx140_bstack, alt142_end
    rx140_cur."!cursor_pass"(rx140_pos, "quote_escape:sym<oct>", 'backtrack'=>1)
    .return (rx140_cur)
  rx140_restart:
    repr_get_attr_obj rx140_cstack, rx140_cur, rx140_curclass, "$!cstack"
  rx140_fail:
    unless rx140_bstack, rx140_done
    pop $I19, rx140_bstack
    if_null rx140_cstack, rx140_cstack_done
    unless rx140_cstack, rx140_cstack_done
    dec $I19
    set $P11, rx140_cstack[$I19]
  rx140_cstack_done:
    pop rx140_rep, rx140_bstack
    pop rx140_pos, rx140_bstack
    pop $I19, rx140_bstack
    lt rx140_pos, -1, rx140_done
    lt rx140_pos, 0, rx140_fail
    eq $I19, 0, rx140_fail
    if_null rx140_cstack, rx140_jump
    elements $I18, rx140_bstack
    le $I18, 0, rx140_cut
    dec $I18
    set $I18, rx140_bstack[$I18]
  rx140_cut:
    assign rx140_cstack, $I18
  rx140_jump:
    jump $I19
  rx140_done:
    rx140_cur."!cursor_fail"()
    .return (rx140_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "53_1340317678.734_caps"  :subid("256_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 97
    new $P104, "Hash"
    set $P104["octint"], 0
    set $P104["octints"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "53_1340317678.734_nfa"  :subid("257_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 97
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 111
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "53_1340317678.734_alt_nfa_54_1340317678.993"  :subid("258_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 97
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "octint"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 91
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "octints"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 93
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    new $P112, "ResizablePMCArray"
    push $P112, $P106
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<chr>"  :subid("55_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1216
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 101
    .lex "self", param_1216
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1217
    .lex "$/", $P1218
    .local string rx145_tgt
    .local int rx145_pos
    .local int rx145_off
    .local int rx145_eos
    .local int rx145_rep
    .local pmc rx145_cur
    .local pmc rx145_curclass
    .local pmc rx145_bstack
    .local pmc rx145_cstack
    (rx145_cur, rx145_tgt, rx145_pos, rx145_curclass, rx145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx145_cur
    length rx145_eos, rx145_tgt
    eq $I19, 1, rx145_restart
    repr_get_attr_int $I11, self, rx145_curclass, "$!from"
    ne $I11, -1, rxscan146_done
    goto rxscan146_scan
  rxscan146_loop:
    inc rx145_pos
    gt rx145_pos, rx145_eos, rx145_fail
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!from", rx145_pos
  rxscan146_scan:
    nqp_rxmark rx145_bstack, rxscan146_loop, rx145_pos, 0
  rxscan146_done:
    add $I11, rx145_pos, 2
    gt $I11, rx145_eos, rx145_fail
    substr $S10, rx145_tgt, rx145_pos, 2
    ne $S10, ucs4:"\\c", rx145_fail
    add rx145_pos, 2
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail
    nqp_rxmark rx145_bstack, rxsubrule147_pass, -1, 0
  rxsubrule147_pass:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    rx145_cur."!cursor_pass"(rx145_pos, "quote_escape:sym<chr>", 'backtrack'=>1)
    .return (rx145_cur)
  rx145_restart:
    repr_get_attr_obj rx145_cstack, rx145_cur, rx145_curclass, "$!cstack"
  rx145_fail:
    unless rx145_bstack, rx145_done
    pop $I19, rx145_bstack
    if_null rx145_cstack, rx145_cstack_done
    unless rx145_cstack, rx145_cstack_done
    dec $I19
    set $P11, rx145_cstack[$I19]
  rx145_cstack_done:
    pop rx145_rep, rx145_bstack
    pop rx145_pos, rx145_bstack
    pop $I19, rx145_bstack
    lt rx145_pos, -1, rx145_done
    lt rx145_pos, 0, rx145_fail
    eq $I19, 0, rx145_fail
    if_null rx145_cstack, rx145_jump
    elements $I18, rx145_bstack
    le $I18, 0, rx145_cut
    dec $I18
    set $I18, rx145_bstack[$I18]
  rx145_cut:
    assign rx145_cstack, $I18
  rx145_jump:
    jump $I19
  rx145_done:
    rx145_cur."!cursor_fail"()
    .return (rx145_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1340317678.734_caps"  :subid("259_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 101
    new $P104, "Hash"
    set $P104["charspec"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1340317678.734_nfa"  :subid("260_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 101
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 99
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<0>"  :subid("56_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1222
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 102
    .lex "self", param_1222
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1223
    .lex "$/", $P1224
    .local string rx148_tgt
    .local int rx148_pos
    .local int rx148_off
    .local int rx148_eos
    .local int rx148_rep
    .local pmc rx148_cur
    .local pmc rx148_curclass
    .local pmc rx148_bstack
    .local pmc rx148_cstack
    (rx148_cur, rx148_tgt, rx148_pos, rx148_curclass, rx148_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx148_cur
    length rx148_eos, rx148_tgt
    eq $I19, 1, rx148_restart
    repr_get_attr_int $I11, self, rx148_curclass, "$!from"
    ne $I11, -1, rxscan149_done
    goto rxscan149_scan
  rxscan149_loop:
    inc rx148_pos
    gt rx148_pos, rx148_eos, rx148_fail
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!from", rx148_pos
  rxscan149_scan:
    nqp_rxmark rx148_bstack, rxscan149_loop, rx148_pos, 0
  rxscan149_done:
    add $I11, rx148_pos, 1
    gt $I11, rx148_eos, rx148_fail
    substr $S10, rx148_tgt, rx148_pos, 1
    ne $S10, ucs4:"\\", rx148_fail
    add rx148_pos, 1
    nqp_rxmark rx148_bstack, rxcap150_fail, rx148_pos, 0
    add $I11, rx148_pos, 1
    gt $I11, rx148_eos, rx148_fail
    substr $S10, rx148_tgt, rx148_pos, 1
    ne $S10, ucs4:"0", rx148_fail
    add rx148_pos, 1
    nqp_rxpeek $I19, rx148_bstack, rxcap150_fail
    inc $I19
    set $I11, rx148_bstack[$I19]
    $P11 = rx148_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx148_pos)
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "sym")
    goto rxcap150_done
  rxcap150_fail:
    goto rx148_fail
  rxcap150_done:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail
    rx148_cur."!cursor_pass"(rx148_pos, "quote_escape:sym<0>", 'backtrack'=>1)
    .return (rx148_cur)
  rx148_restart:
    repr_get_attr_obj rx148_cstack, rx148_cur, rx148_curclass, "$!cstack"
  rx148_fail:
    unless rx148_bstack, rx148_done
    pop $I19, rx148_bstack
    if_null rx148_cstack, rx148_cstack_done
    unless rx148_cstack, rx148_cstack_done
    dec $I19
    set $P11, rx148_cstack[$I19]
  rx148_cstack_done:
    pop rx148_rep, rx148_bstack
    pop rx148_pos, rx148_bstack
    pop $I19, rx148_bstack
    lt rx148_pos, -1, rx148_done
    lt rx148_pos, 0, rx148_fail
    eq $I19, 0, rx148_fail
    if_null rx148_cstack, rx148_jump
    elements $I18, rx148_bstack
    le $I18, 0, rx148_cut
    dec $I18
    set $I18, rx148_bstack[$I18]
  rx148_cut:
    assign rx148_cstack, $I18
  rx148_jump:
    jump $I19
  rx148_done:
    rx148_cur."!cursor_fail"()
    .return (rx148_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "56_1340317678.734_caps"  :subid("261_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 102
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "56_1340317678.734_nfa"  :subid("262_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 102
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 48
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_escape:sym<misc>"  :subid("58_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1228
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    .const 'Sub' $P1241 = "268_1340317678.734" 
    capture_lex $P1241
    .const 'Sub' $P1236 = "57_1340317678.734" 
    capture_lex $P1236
    .const 'Sub' $P1234 = "265_1340317678.734" 
    capture_lex $P1234
    .lex "self", param_1228
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1229
    .lex "$/", $P1230
    .local string rx151_tgt
    .local int rx151_pos
    .local int rx151_off
    .local int rx151_eos
    .local int rx151_rep
    .local pmc rx151_cur
    .local pmc rx151_curclass
    .local pmc rx151_bstack
    .local pmc rx151_cstack
    (rx151_cur, rx151_tgt, rx151_pos, rx151_curclass, rx151_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx151_cur
    length rx151_eos, rx151_tgt
    eq $I19, 1, rx151_restart
    repr_get_attr_int $I11, self, rx151_curclass, "$!from"
    ne $I11, -1, rxscan152_done
    goto rxscan152_scan
  rxscan152_loop:
    inc rx151_pos
    gt rx151_pos, rx151_eos, rx151_fail
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!from", rx151_pos
  rxscan152_scan:
    nqp_rxmark rx151_bstack, rxscan152_loop, rx151_pos, 0
  rxscan152_done:
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    store_lex unicode:"$\x{a2}", rx151_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 104
    .const 'Sub' $P1234 = "265_1340317678.734" 
    capture_lex $P1234
    $P106 = $P1234()
.annotate 'line', 103
    add $I11, rx151_pos, 1
    gt $I11, rx151_eos, rx151_fail
    substr $S10, rx151_tgt, rx151_pos, 1
    ne $S10, ucs4:"\\", rx151_fail
    add rx151_pos, 1
  alt153_0:
    nqp_rxmark rx151_bstack, alt153_1, rx151_pos, 0
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    $P11 = rx151_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx151_curclass, "$!pos"
    lt $I11, 0, rx151_fail
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt154_0
    nqp_push_label $P11, alt154_1
    nqp_rxmark rx151_bstack, alt154_end, -1, 0
    rx151_cur."!alt"(rx151_pos, ucs4:"alt_nfa_59_1340317679.04", $P11)
    goto rx151_fail
  alt154_0:
    .const 'Sub' $P1236 = "57_1340317678.734" 
    capture_lex $P1236
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    $P11 = rx151_cur.$P1236()
    repr_get_attr_int $I11, $P11, rx151_curclass, "$!pos"
    lt $I11, 0, rx151_fail
    nqp_rxmark rx151_bstack, rxsubrule157_pass, -1, 0
  rxsubrule157_pass:
    rx151_cstack = rx151_cur."!cursor_capture"($P11, "textqq")
    repr_get_attr_int rx151_pos, $P11, rx151_curclass, "$!pos"
    goto alt154_end
  alt154_1:
    nqp_rxmark rx151_bstack, rxcap158_fail, rx151_pos, 0
    ge rx151_pos, rx151_eos, rx151_fail
    is_cclass $I11, .CCLASS_WORD, rx151_tgt, rx151_pos
    unless $I11, rx151_fail
    add rx151_pos, 1
    nqp_rxpeek $I19, rx151_bstack, rxcap158_fail
    inc $I19
    set $I11, rx151_bstack[$I19]
    $P11 = rx151_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx151_pos)
    rx151_cstack = rx151_cur."!cursor_capture"($P11, "x")
    goto rxcap158_done
  rxcap158_fail:
    goto rx151_fail
  rxcap158_done:
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    store_lex unicode:"$\x{a2}", rx151_cur
    find_lex $P107, unicode:"$\x{a2}"
    $P108 = $P107."MATCH"()
    store_lex "$/", $P108
.annotate 'line', 109
    .const 'Sub' $P1241 = "268_1340317678.734" 
    capture_lex $P1241
    $P109 = $P1241()
.annotate 'line', 103
    goto alt154_end
  alt154_end:
    nqp_rxcommit rx151_bstack, alt154_end
    goto alt153_end
  alt153_1:
    nqp_rxmark rx151_bstack, rxcap159_fail, rx151_pos, 0
    ge rx151_pos, rx151_eos, rx151_fail
    add rx151_pos, 1
    nqp_rxpeek $I19, rx151_bstack, rxcap159_fail
    inc $I19
    set $I11, rx151_bstack[$I19]
    $P11 = rx151_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx151_pos)
    rx151_cstack = rx151_cur."!cursor_capture"($P11, "textq")
    goto rxcap159_done
  rxcap159_fail:
    goto rx151_fail
  rxcap159_done:
  alt153_end:
    rx151_cur."!cursor_pass"(rx151_pos, "quote_escape:sym<misc>", 'backtrack'=>1)
    .return (rx151_cur)
  rx151_restart:
    repr_get_attr_obj rx151_cstack, rx151_cur, rx151_curclass, "$!cstack"
  rx151_fail:
    unless rx151_bstack, rx151_done
    pop $I19, rx151_bstack
    if_null rx151_cstack, rx151_cstack_done
    unless rx151_cstack, rx151_cstack_done
    dec $I19
    set $P11, rx151_cstack[$I19]
  rx151_cstack_done:
    pop rx151_rep, rx151_bstack
    pop rx151_pos, rx151_bstack
    pop $I19, rx151_bstack
    lt rx151_pos, -1, rx151_done
    lt rx151_pos, 0, rx151_fail
    eq $I19, 0, rx151_fail
    if_null rx151_cstack, rx151_jump
    elements $I18, rx151_bstack
    le $I18, 0, rx151_cut
    dec $I18
    set $I18, rx151_bstack[$I18]
  rx151_cut:
    assign rx151_cstack, $I18
  rx151_jump:
    jump $I19
  rx151_done:
    rx151_cur."!cursor_fail"()
    .return (rx151_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "58_1340317678.734_caps"  :subid("263_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    new $P104, "Hash"
    set $P104["textqq"], 0
    set $P104["x"], 0
    set $P104["textq"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "58_1340317678.734_alt_nfa_59_1340317679.04"  :subid("264_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 5
    push $P105, 8192
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8192
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    new $P111, "ResizablePMCArray"
    push $P111, $P106
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1233"  :anon :subid("265_1340317678.734") :outer("58_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 104
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1235"  :anon :subid("57_1340317678.734") :method :outer("58_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    .lex unicode:"$\x{a2}", $P1239
    .local string rx155_tgt
    .local int rx155_pos
    .local int rx155_off
    .local int rx155_eos
    .local int rx155_rep
    .local pmc rx155_cur
    .local pmc rx155_curclass
    .local pmc rx155_bstack
    .local pmc rx155_cstack
    (rx155_cur, rx155_tgt, rx155_pos, rx155_curclass, rx155_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx155_cur
    length rx155_eos, rx155_tgt
    eq $I19, 1, rx155_restart
    repr_get_attr_int $I11, self, rx155_curclass, "$!from"
    ne $I11, -1, rxscan156_done
    goto rxscan156_scan
  rxscan156_loop:
    inc rx155_pos
    gt rx155_pos, rx155_eos, rx155_fail
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!from", rx155_pos
  rxscan156_scan:
    nqp_rxmark rx155_bstack, rxscan156_loop, rx155_pos, 0
  rxscan156_done:
    ge rx155_pos, rx155_eos, rx155_fail
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, rx155_pos
    if $I11, rx155_fail
    add rx155_pos, 1
    rx155_cur."!cursor_pass"(rx155_pos, 'backtrack'=>1)
    .return (rx155_cur)
  rx155_restart:
    repr_get_attr_obj rx155_cstack, rx155_cur, rx155_curclass, "$!cstack"
  rx155_fail:
    unless rx155_bstack, rx155_done
    pop $I19, rx155_bstack
    if_null rx155_cstack, rx155_cstack_done
    unless rx155_cstack, rx155_cstack_done
    dec $I19
    set $P11, rx155_cstack[$I19]
  rx155_cstack_done:
    pop rx155_rep, rx155_bstack
    pop rx155_pos, rx155_bstack
    pop $I19, rx155_bstack
    lt rx155_pos, -1, rx155_done
    lt rx155_pos, 0, rx155_fail
    eq $I19, 0, rx155_fail
    if_null rx155_cstack, rx155_jump
    elements $I18, rx155_bstack
    le $I18, 0, rx155_cut
    dec $I18
    set $I18, rx155_bstack[$I18]
  rx155_cut:
    assign rx155_cstack, $I18
  rx155_jump:
    jump $I19
  rx155_done:
    rx155_cur."!cursor_fail"()
    .return (rx155_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "57_1340317678.734_caps"  :subid("266_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    new $P107, "Hash"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "57_1340317678.734_nfa"  :subid("267_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 103
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 5
    push $P108, 8192
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1240"  :anon :subid("268_1340317678.734") :outer("58_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 109
    find_lex $P109, "$/"
    unless_null $P109, vivify_350
    new $P109, "Undef"
  vivify_350:
    $P110 = $P109."CURSOR"()
    new $P111, "String"
    assign $P111, "Unrecognized backslash sequence: '\\"
    find_lex $P1242, "$/"
    unless_null $P1242, vivify_351
    $P1242 = root_new ['parrot';'Hash']
  vivify_351:
    set $P112, $P1242["x"]
    unless_null $P112, vivify_352
    new $P112, "Undef"
  vivify_352:
    $S100 = $P112."Str"()
    concat $P113, $P111, $S100
    concat $P114, $P113, "'"
    $P115 = $P110."panic"($P114)
    .return ($P115)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "charname"  :subid("61_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1244
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    .const 'Sub' $P1249 = "60_1340317678.734" 
    capture_lex $P1249
    .lex "self", param_1244
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1245
    .lex "$/", $P1246
    .local string rx160_tgt
    .local int rx160_pos
    .local int rx160_off
    .local int rx160_eos
    .local int rx160_rep
    .local pmc rx160_cur
    .local pmc rx160_curclass
    .local pmc rx160_bstack
    .local pmc rx160_cstack
    (rx160_cur, rx160_tgt, rx160_pos, rx160_curclass, rx160_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx160_cur
    length rx160_eos, rx160_tgt
    eq $I19, 1, rx160_restart
    repr_get_attr_int $I11, self, rx160_curclass, "$!from"
    ne $I11, -1, rxscan161_done
    goto rxscan161_scan
  rxscan161_loop:
    inc rx160_pos
    gt rx160_pos, rx160_eos, rx160_fail
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!from", rx160_pos
  rxscan161_scan:
    nqp_rxmark rx160_bstack, rxscan161_loop, rx160_pos, 0
  rxscan161_done:
  alt162_0:
    nqp_rxmark rx160_bstack, alt162_1, rx160_pos, 0
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!pos", rx160_pos
    $P11 = rx160_cur."integer"()
    repr_get_attr_int $I11, $P11, rx160_curclass, "$!pos"
    lt $I11, 0, rx160_fail
    nqp_rxmark rx160_bstack, rxsubrule163_pass, -1, 0
  rxsubrule163_pass:
    rx160_cstack = rx160_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx160_pos, $P11, rx160_curclass, "$!pos"
    goto alt162_end
  alt162_1:
    ge rx160_pos, rx160_eos, rx160_fail
    substr $S11, rx160_tgt, rx160_pos, 1
    index $I11, ucs4:"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", $S11
    lt $I11, 0, rx160_fail
    inc rx160_pos
  # rx rxquantf164 ** 0..-1
    set rx160_rep, 0
    nqp_rxmark rx160_bstack, rxquantf164_loop, rx160_pos, rx160_rep
    goto rxquantf164_done
  rxquantf164_loop:
    set $I12, rx160_rep
    nqp_rxmark rx160_bstack, rxconj165_fail, rx160_pos, 0
    goto rxconj165_first
  rxconj165_fail:
    goto rx160_fail
  rxconj165_first:
    add $I11, rx160_pos, 1
    gt $I11, rx160_eos, rx160_fail
    substr $S10, rx160_tgt, rx160_pos, 1
    eq $S10, ucs4:"]", rx160_fail
    add rx160_pos, 1
    nqp_rxpeek $I19, rx160_bstack, rxconj165_fail
    inc $I19
    set $I11, rx160_bstack[$I19]
    nqp_rxmark rx160_bstack, rxconj165_fail, $I11, rx160_pos
    set rx160_pos, $I11
    ge rx160_pos, rx160_eos, rx160_fail
    substr $S11, rx160_tgt, rx160_pos, 1
    index $I11, ucs4:",#", $S11
    ge $I11, 0, rx160_fail
    inc rx160_pos
    nqp_rxpeek $I19, rx160_bstack, rxconj165_fail
    inc $I19
    set $I11, rx160_bstack[$I19]
    inc $I19
    set $I12, rx160_bstack[$I19]
    ne rx160_pos, $I12, rx160_fail
    set rx160_pos, $I11
    ge rx160_pos, rx160_eos, rx160_fail
    add rx160_pos, 1
    set rx160_rep, $I12
    inc rx160_rep
    nqp_rxmark rx160_bstack, rxquantf164_loop, rx160_pos, rx160_rep
  rxquantf164_done:
    ge rx160_pos, rx160_eos, rx160_fail
    substr $S11, rx160_tgt, rx160_pos, 1
    index $I11, ucs4:"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ)", $S11
    lt $I11, 0, rx160_fail
    inc rx160_pos
    .const 'Sub' $P1249 = "60_1340317678.734" 
    capture_lex $P1249
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!pos", rx160_pos
    $P11 = rx160_cur."before"($P1249)
    repr_get_attr_int $I11, $P11, rx160_curclass, "$!pos"
    lt $I11, 0, rx160_fail
  alt162_end:
    rx160_cur."!cursor_pass"(rx160_pos, "charname", 'backtrack'=>1)
    .return (rx160_cur)
  rx160_restart:
    repr_get_attr_obj rx160_cstack, rx160_cur, rx160_curclass, "$!cstack"
  rx160_fail:
    unless rx160_bstack, rx160_done
    pop $I19, rx160_bstack
    if_null rx160_cstack, rx160_cstack_done
    unless rx160_cstack, rx160_cstack_done
    dec $I19
    set $P11, rx160_cstack[$I19]
  rx160_cstack_done:
    pop rx160_rep, rx160_bstack
    pop rx160_pos, rx160_bstack
    pop $I19, rx160_bstack
    lt rx160_pos, -1, rx160_done
    lt rx160_pos, 0, rx160_fail
    eq $I19, 0, rx160_fail
    if_null rx160_cstack, rx160_jump
    elements $I18, rx160_bstack
    le $I18, 0, rx160_cut
    dec $I18
    set $I18, rx160_bstack[$I18]
  rx160_cut:
    assign rx160_cstack, $I18
  rx160_jump:
    jump $I19
  rx160_done:
    rx160_cur."!cursor_fail"()
    .return (rx160_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "61_1340317678.734_caps"  :subid("269_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    new $P104, "Hash"
    set $P104["integer"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1248"  :anon :subid("60_1340317678.734") :method :outer("61_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    .lex unicode:"$\x{a2}", $P1252
    .local string rx166_tgt
    .local int rx166_pos
    .local int rx166_off
    .local int rx166_eos
    .local int rx166_rep
    .local pmc rx166_cur
    .local pmc rx166_curclass
    .local pmc rx166_bstack
    .local pmc rx166_cstack
    (rx166_cur, rx166_tgt, rx166_pos, rx166_curclass, rx166_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx166_cur
    length rx166_eos, rx166_tgt
    eq $I19, 1, rx166_restart
    repr_get_attr_int $I11, self, rx166_curclass, "$!from"
    ne $I11, -1, rxscan167_done
    goto rxscan167_scan
  rxscan167_loop:
    inc rx166_pos
    gt rx166_pos, rx166_eos, rx166_fail
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!from", rx166_pos
  rxscan167_scan:
    nqp_rxmark rx166_bstack, rxscan167_loop, rx166_pos, 0
  rxscan167_done:
  # rx rxquantr168 ** 0..-1
    nqp_rxmark rx166_bstack, rxquantr168_done, rx166_pos, 0
  rxquantr168_loop:
    ge rx166_pos, rx166_eos, rx166_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx166_tgt, rx166_pos
    unless $I11, rx166_fail
    add rx166_pos, 1
    nqp_rxpeek $I19, rx166_bstack, rxquantr168_done
    inc $I19
    inc $I19
    set rx166_rep, rx166_bstack[$I19]
    nqp_rxcommit rx166_bstack, rxquantr168_done
    inc rx166_rep
    nqp_rxmark rx166_bstack, rxquantr168_done, rx166_pos, rx166_rep
    goto rxquantr168_loop
  rxquantr168_done:
  alt169_0:
    nqp_rxmark rx166_bstack, alt169_1, rx166_pos, 0
    add $I11, rx166_pos, 1
    gt $I11, rx166_eos, rx166_fail
    substr $S10, rx166_tgt, rx166_pos, 1
    ne $S10, ucs4:"]", rx166_fail
    add rx166_pos, 1
    goto alt169_end
  alt169_1:
    ge rx166_pos, rx166_eos, rx166_fail
    substr $S11, rx166_tgt, rx166_pos, 1
    index $I11, ucs4:",#", $S11
    lt $I11, 0, rx166_fail
    inc rx166_pos
  alt169_end:
    rx166_cur."!cursor_pass"(rx166_pos, 'backtrack'=>1)
    .return (rx166_cur)
  rx166_restart:
    repr_get_attr_obj rx166_cstack, rx166_cur, rx166_curclass, "$!cstack"
  rx166_fail:
    unless rx166_bstack, rx166_done
    pop $I19, rx166_bstack
    if_null rx166_cstack, rx166_cstack_done
    unless rx166_cstack, rx166_cstack_done
    dec $I19
    set $P11, rx166_cstack[$I19]
  rx166_cstack_done:
    pop rx166_rep, rx166_bstack
    pop rx166_pos, rx166_bstack
    pop $I19, rx166_bstack
    lt rx166_pos, -1, rx166_done
    lt rx166_pos, 0, rx166_fail
    eq $I19, 0, rx166_fail
    if_null rx166_cstack, rx166_jump
    elements $I18, rx166_bstack
    le $I18, 0, rx166_cut
    dec $I18
    set $I18, rx166_bstack[$I18]
  rx166_cut:
    assign rx166_cstack, $I18
  rx166_jump:
    jump $I19
  rx166_done:
    rx166_cur."!cursor_fail"()
    .return (rx166_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1340317678.734_caps"  :subid("270_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1340317678.734_nfa"  :subid("271_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 115
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 4
    push $P105, 32
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "charnames"  :subid("62_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1254
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 120
    .lex "self", param_1254
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1255
    .lex "$/", $P1256
    .local string rx170_tgt
    .local int rx170_pos
    .local int rx170_off
    .local int rx170_eos
    .local int rx170_rep
    .local pmc rx170_cur
    .local pmc rx170_curclass
    .local pmc rx170_bstack
    .local pmc rx170_cstack
    (rx170_cur, rx170_tgt, rx170_pos, rx170_curclass, rx170_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx170_cur
    length rx170_eos, rx170_tgt
    eq $I19, 1, rx170_restart
    repr_get_attr_int $I11, self, rx170_curclass, "$!from"
    ne $I11, -1, rxscan171_done
    goto rxscan171_scan
  rxscan171_loop:
    inc rx170_pos
    gt rx170_pos, rx170_eos, rx170_fail
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!from", rx170_pos
  rxscan171_scan:
    nqp_rxmark rx170_bstack, rxscan171_loop, rx170_pos, 0
  rxscan171_done:
  # rx rxquantr172 ** 1..-1
    nqp_rxmark rx170_bstack, rxquantr172_done, -1, 0
  rxquantr172_loop:
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    $P11 = rx170_cur."ws"()
    repr_get_attr_int $I11, $P11, rx170_curclass, "$!pos"
    lt $I11, 0, rx170_fail
    repr_get_attr_int rx170_pos, $P11, rx170_curclass, "$!pos"
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    $P11 = rx170_cur."charname"()
    repr_get_attr_int $I11, $P11, rx170_curclass, "$!pos"
    lt $I11, 0, rx170_fail
    nqp_rxmark rx170_bstack, rxsubrule174_pass, -1, 0
  rxsubrule174_pass:
    rx170_cstack = rx170_cur."!cursor_capture"($P11, "charname")
    repr_get_attr_int rx170_pos, $P11, rx170_curclass, "$!pos"
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!pos", rx170_pos
    $P11 = rx170_cur."ws"()
    repr_get_attr_int $I11, $P11, rx170_curclass, "$!pos"
    lt $I11, 0, rx170_fail
    repr_get_attr_int rx170_pos, $P11, rx170_curclass, "$!pos"
    nqp_rxpeek $I19, rx170_bstack, rxquantr172_done
    inc $I19
    inc $I19
    set rx170_rep, rx170_bstack[$I19]
    nqp_rxcommit rx170_bstack, rxquantr172_done
    inc rx170_rep
    nqp_rxmark rx170_bstack, rxquantr172_done, rx170_pos, rx170_rep
    add $I11, rx170_pos, 1
    gt $I11, rx170_eos, rx170_fail
    substr $S10, rx170_tgt, rx170_pos, 1
    ne $S10, ucs4:",", rx170_fail
    add rx170_pos, 1
    goto rxquantr172_loop
  rxquantr172_done:
    rx170_cur."!cursor_pass"(rx170_pos, "charnames", 'backtrack'=>1)
    .return (rx170_cur)
  rx170_restart:
    repr_get_attr_obj rx170_cstack, rx170_cur, rx170_curclass, "$!cstack"
  rx170_fail:
    unless rx170_bstack, rx170_done
    pop $I19, rx170_bstack
    if_null rx170_cstack, rx170_cstack_done
    unless rx170_cstack, rx170_cstack_done
    dec $I19
    set $P11, rx170_cstack[$I19]
  rx170_cstack_done:
    pop rx170_rep, rx170_bstack
    pop rx170_pos, rx170_bstack
    pop $I19, rx170_bstack
    lt rx170_pos, -1, rx170_done
    lt rx170_pos, 0, rx170_fail
    eq $I19, 0, rx170_fail
    if_null rx170_cstack, rx170_jump
    elements $I18, rx170_bstack
    le $I18, 0, rx170_cut
    dec $I18
    set $I18, rx170_bstack[$I18]
  rx170_cut:
    assign rx170_cstack, $I18
  rx170_jump:
    jump $I19
  rx170_done:
    rx170_cur."!cursor_fail"()
    .return (rx170_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "62_1340317678.734_caps"  :subid("272_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 120
    new $P104, "Hash"
    set $P104["charname"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "62_1340317678.734_nfa"  :subid("273_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 120
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 44
    push $P107, 2
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "charname"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "charspec"  :subid("63_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1260
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 121
    .lex "self", param_1260
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1261
    .lex "$/", $P1262
    .local string rx176_tgt
    .local int rx176_pos
    .local int rx176_off
    .local int rx176_eos
    .local int rx176_rep
    .local pmc rx176_cur
    .local pmc rx176_curclass
    .local pmc rx176_bstack
    .local pmc rx176_cstack
    (rx176_cur, rx176_tgt, rx176_pos, rx176_curclass, rx176_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx176_cur
    length rx176_eos, rx176_tgt
    eq $I19, 1, rx176_restart
    repr_get_attr_int $I11, self, rx176_curclass, "$!from"
    ne $I11, -1, rxscan177_done
    goto rxscan177_scan
  rxscan177_loop:
    inc rx176_pos
    gt rx176_pos, rx176_eos, rx176_fail
    repr_bind_attr_int rx176_cur, rx176_curclass, "$!from", rx176_pos
  rxscan177_scan:
    nqp_rxmark rx176_bstack, rxscan177_loop, rx176_pos, 0
  rxscan177_done:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt178_0
    nqp_push_label $P11, alt178_1
    nqp_push_label $P11, alt178_2
    nqp_push_label $P11, alt178_3
    nqp_rxmark rx176_bstack, alt178_end, -1, 0
    rx176_cur."!alt"(rx176_pos, ucs4:"alt_nfa_64_1340317679.084", $P11)
    goto rx176_fail
  alt178_0:
    add $I11, rx176_pos, 1
    gt $I11, rx176_eos, rx176_fail
    substr $S10, rx176_tgt, rx176_pos, 1
    ne $S10, ucs4:"[", rx176_fail
    add rx176_pos, 1
    repr_bind_attr_int rx176_cur, rx176_curclass, "$!pos", rx176_pos
    $P11 = rx176_cur."charnames"()
    repr_get_attr_int $I11, $P11, rx176_curclass, "$!pos"
    lt $I11, 0, rx176_fail
    nqp_rxmark rx176_bstack, rxsubrule179_pass, -1, 0
  rxsubrule179_pass:
    rx176_cstack = rx176_cur."!cursor_capture"($P11, "charnames")
    repr_get_attr_int rx176_pos, $P11, rx176_curclass, "$!pos"
    add $I11, rx176_pos, 1
    gt $I11, rx176_eos, rx176_fail
    substr $S10, rx176_tgt, rx176_pos, 1
    ne $S10, ucs4:"]", rx176_fail
    add rx176_pos, 1
    goto alt178_end
  alt178_1:
  # rx rxquantr180 ** 1..-1
    nqp_rxmark rx176_bstack, rxquantr180_done, -1, 0
  rxquantr180_loop:
    ge rx176_pos, rx176_eos, rx176_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx176_tgt, rx176_pos
    unless $I11, rx176_fail
    add rx176_pos, 1
    nqp_rxpeek $I19, rx176_bstack, rxquantr180_done
    inc $I19
    inc $I19
    set rx176_rep, rx176_bstack[$I19]
    nqp_rxcommit rx176_bstack, rxquantr180_done
    inc rx176_rep
    nqp_rxmark rx176_bstack, rxquantr180_done, rx176_pos, rx176_rep
    goto rxquantr180_loop
  rxquantr180_done:
  # rx rxquantr181 ** 0..-1
    nqp_rxmark rx176_bstack, rxquantr181_done, rx176_pos, 0
  rxquantr181_loop:
    add $I11, rx176_pos, 1
    gt $I11, rx176_eos, rx176_fail
    substr $S10, rx176_tgt, rx176_pos, 1
    ne $S10, ucs4:"_", rx176_fail
    add rx176_pos, 1
  # rx rxquantr182 ** 1..-1
    nqp_rxmark rx176_bstack, rxquantr182_done, -1, 0
  rxquantr182_loop:
    ge rx176_pos, rx176_eos, rx176_fail
    is_cclass $I11, .CCLASS_NUMERIC, rx176_tgt, rx176_pos
    unless $I11, rx176_fail
    add rx176_pos, 1
    nqp_rxpeek $I19, rx176_bstack, rxquantr182_done
    inc $I19
    inc $I19
    set rx176_rep, rx176_bstack[$I19]
    nqp_rxcommit rx176_bstack, rxquantr182_done
    inc rx176_rep
    nqp_rxmark rx176_bstack, rxquantr182_done, rx176_pos, rx176_rep
    goto rxquantr182_loop
  rxquantr182_done:
    nqp_rxpeek $I19, rx176_bstack, rxquantr181_done
    inc $I19
    inc $I19
    set rx176_rep, rx176_bstack[$I19]
    nqp_rxcommit rx176_bstack, rxquantr181_done
    inc rx176_rep
    nqp_rxmark rx176_bstack, rxquantr181_done, rx176_pos, rx176_rep
    goto rxquantr181_loop
  rxquantr181_done:
    goto alt178_end
  alt178_2:
    ge rx176_pos, rx176_eos, rx176_fail
    substr $S11, rx176_tgt, rx176_pos, 1
    index $I11, ucs4:"?@ABCDEFGHIJKLMNOPQRSTUVWXYZ", $S11
    lt $I11, 0, rx176_fail
    inc rx176_pos
    goto alt178_end
  alt178_3:
    repr_bind_attr_int rx176_cur, rx176_curclass, "$!pos", rx176_pos
    $P11 = rx176_cur."panic"("Unrecognized \\c character")
    repr_get_attr_int $I11, $P11, rx176_curclass, "$!pos"
    lt $I11, 0, rx176_fail
    repr_get_attr_int rx176_pos, $P11, rx176_curclass, "$!pos"
    goto alt178_end
  alt178_end:
    nqp_rxcommit rx176_bstack, alt178_end
    rx176_cur."!cursor_pass"(rx176_pos, "charspec", 'backtrack'=>1)
    .return (rx176_cur)
  rx176_restart:
    repr_get_attr_obj rx176_cstack, rx176_cur, rx176_curclass, "$!cstack"
  rx176_fail:
    unless rx176_bstack, rx176_done
    pop $I19, rx176_bstack
    if_null rx176_cstack, rx176_cstack_done
    unless rx176_cstack, rx176_cstack_done
    dec $I19
    set $P11, rx176_cstack[$I19]
  rx176_cstack_done:
    pop rx176_rep, rx176_bstack
    pop rx176_pos, rx176_bstack
    pop $I19, rx176_bstack
    lt rx176_pos, -1, rx176_done
    lt rx176_pos, 0, rx176_fail
    eq $I19, 0, rx176_fail
    if_null rx176_cstack, rx176_jump
    elements $I18, rx176_bstack
    le $I18, 0, rx176_cut
    dec $I18
    set $I18, rx176_bstack[$I18]
  rx176_cut:
    assign rx176_cstack, $I18
  rx176_jump:
    jump $I19
  rx176_done:
    rx176_cur."!cursor_fail"()
    .return (rx176_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "63_1340317678.734_caps"  :subid("274_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 121
    new $P104, "Hash"
    set $P104["charnames"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "63_1340317678.734_nfa"  :subid("275_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 121
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 91
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 4
    push $P105, 6
    push $P105, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P105, 0
    push $P105, 8
    push $P105, "panic"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "charnames"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 93
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    push $P109, 1
    push $P109, 0
    push $P109, 6
    push $P109, 2
    push $P109, 95
    push $P109, 7
    push $P109, 1
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 4
    push $P112, 8
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 8
    push $P113, 1
    push $P113, 0
    push $P113, 5
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "63_1340317678.734_alt_nfa_64_1340317679.084"  :subid("276_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 121
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 91
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "charnames"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 93
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 2
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 8
    push $P111, 3
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 2
    push $P112, 1
    push $P112, 0
    push $P112, 4
    push $P112, 2
    push $P112, 95
    push $P112, 5
    push $P112, 1
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    new $P114, "ResizablePMCArray"
    push $P114, 1
    push $P114, 0
    push $P114, 6
    new $P115, "ResizablePMCArray"
    push $P115, 4
    push $P115, 8
    push $P115, 7
    new $P116, "ResizablePMCArray"
    push $P116, 1
    push $P116, 0
    push $P116, 6
    push $P116, 1
    push $P116, 0
    push $P116, 3
    new $P117, "ResizablePMCArray"
    push $P117, $P109
    push $P117, $P110
    push $P117, $P111
    push $P117, $P112
    push $P117, $P113
    push $P117, $P114
    push $P117, $P115
    push $P117, $P116
    new $P118, "ResizablePMCArray"
    new $P119, "ResizablePMCArray"
    push $P119, 6
    push $P119, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P119, 0
    new $P120, "ResizablePMCArray"
    push $P120, $P118
    push $P120, $P119
    new $P121, "ResizablePMCArray"
    new $P122, "ResizablePMCArray"
    push $P122, 8
    push $P122, "panic"
    push $P122, 0
    new $P123, "ResizablePMCArray"
    push $P123, $P121
    push $P123, $P122
    new $P124, "ResizablePMCArray"
    push $P124, $P108
    push $P124, $P117
    push $P124, $P120
    push $P124, $P123
    .return ($P124)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "O" :anon :subid("65_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1267
    .param pmc param_1268
    .param pmc param_1269 :optional
    .param int has_param_1269 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 172
    .lex "self", param_1267
    .lex "$spec", param_1268
    if has_param_1269, optparam_353
    new $P103, "Undef"
    set param_1269, $P103
  optparam_353:
    .lex "$save", param_1269
.annotate 'line', 173

            .local pmc self, cur_class
            .local string spec, save
            .local int has_save
            self = find_lex 'self'
            cur_class = find_lex '$cursor_class'
            $P0 = find_lex '$spec'
            spec = $P0
            has_save = 0
            $P0 = find_lex '$save'
            unless $P0 goto no_save
            save = $P0
            has_save = 1
          no_save:

            # First, get the hash cache.  Right now we have one
            # cache for all grammars; eventually we may need a way to
            # separate them out by cursor type.
            .local pmc ohash
            ohash = get_global '%!ohash'
            unless null ohash goto have_ohash
            ohash = new ['Hash']
            set_global '%!ohash', ohash
          have_ohash:

            # See if we've already created a Hash for the current
            # specification string -- if so, use that.
            .local pmc hash
            hash = ohash[spec]
            unless null hash goto hash_done

            # Otherwise, we need to build a new one.
            hash = new ['Hash']
            .local int pos, eos
            pos = 0
            eos = length spec
          spec_loop:
            pos = find_not_cclass .CCLASS_WHITESPACE, spec, pos, eos
            if pos >= eos goto spec_done
            $S0 = substr spec, pos, 1
            if $S0 == ',' goto spec_comma
            if $S0 == ':' goto spec_pair

            # If whatever we found doesn't start with a colon, treat it
            # as a lookup of a previously saved hash to be merged in.
            .local string lookup
            .local int lpos
            # Find the first whitespace or comma
            lpos = find_cclass .CCLASS_WHITESPACE, spec, pos, eos
            $I0 = index spec, ',', pos
            if $I0 < 0 goto have_lookup_lpos
            if $I0 >= lpos goto have_lookup_lpos
            lpos = $I0
          have_lookup_lpos:
            $I0 = lpos - pos
            lookup = substr spec, pos, $I0
            .local pmc lhash, lhash_it
            lhash = ohash[lookup]
            if null lhash goto err_lookup
            lhash_it = iter lhash
          lhash_loop:
            unless lhash_it goto lhash_done
            $S0 = shift lhash_it
            $P0 = lhash[$S0]
            hash[$S0] = $P0
            goto lhash_loop
          lhash_done:
            pos = lpos
            goto spec_loop

            # We just ignore commas between elements for now.
          spec_comma:
            inc pos
            goto spec_loop

            # If we see a colon, then we want to parse whatever
            # comes next like a pair.
          spec_pair:
            # eat colon
            inc pos
            .local string name
            .local pmc value
            value = new ['Boolean']

            # If the pair is of the form :!name, then reverse the value
            # and skip the colon.
            $S0 = substr spec, pos, 1
            $I0 = iseq $S0, '!'
            pos += $I0
            $I0 = not $I0
            value = $I0

            # Get the name of the pair.
            lpos = find_not_cclass .CCLASS_WORD, spec, pos, eos
            $I0 = lpos - pos
            name = substr spec, pos, $I0
            pos = lpos

            # Look for a <...> that follows.
            $S0 = substr spec, pos, 1
            unless $S0 == '<' goto have_value
            inc pos
            lpos = index spec, '>', pos
            $I0 = lpos - pos
            $S0 = substr spec, pos, $I0
            value = box $S0
            pos = lpos + 1
          have_value:
            # Done processing the pair, store it in the hash.
            hash[name] = value
            goto spec_loop
          spec_done:
            # Done processing the spec string, cache the hash for later.
            ohash[spec] = hash
          hash_done:

            # If we've been called as a subrule, then build a pass-cursor
            # to indicate success and set the hash as the subrule's match object.
            if has_save goto save_hash
            ($P0, $S0, $I0) = self.'!cursor_start'()
            $P0.'!cursor_pass'($I0, '')
            setattribute $P0, cur_class, '$!match', hash
            .return ($P0)

            # save the hash under a new entry
          save_hash:
            ohash[save] = hash
            .return (self)

          err_lookup:
            self.'panic'('Unknown operator precedence specification "', lookup, '"')
        
.annotate 'line', 172
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "panic" :anon :subid("66_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1271
    .param pmc param_1272 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 318
    .lex "self", param_1271
    .lex "@args", param_1272
.annotate 'line', 319
    new $P103, "Undef"
    set $P1273, $P103
    .lex "$pos", $P1273
.annotate 'line', 320
    new $P104, "Undef"
    set $P1274, $P104
    .lex "$target", $P1274
.annotate 'line', 319
    set $P105, param_1271
    nqp_decontainerize $P106, $P105
    $P107 = $P106."pos"()
    set $P1273, $P107
.annotate 'line', 320
    set $P105, param_1271
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?PACKAGE"
    get_who $P108, $P107
    set $P111, $P108["NQPCursor"]
    unless_null $P111, vivify_354
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["NQPCursor"]
  vivify_354:
    repr_get_attr_str $S100, $P106, $P111, "$!target"
    new $P112, 'String'
    set $P112, $S100
    set $P1274, $P112
.annotate 'line', 321
    set $P1275, param_1272
    unless_null $P1275, vivify_355
    $P1275 = root_new ['parrot';'ResizablePMCArray']
  vivify_355:
    $P1275."push"(" at line ")
.annotate 'line', 322
    set $P1276, param_1272
    unless_null $P1276, vivify_356
    $P1276 = root_new ['parrot';'ResizablePMCArray']
  vivify_356:
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "HLL"
    get_who $P107, $P106
    set $P108, $P107["Compiler"]
    set $P109, $P1274
    unless_null $P109, vivify_357
    new $P109, "Undef"
  vivify_357:
    set $P110, $P1273
    unless_null $P110, vivify_358
    new $P110, "Undef"
  vivify_358:
    $P111 = $P108."lineof"($P109, $P110)
    add $P112, $P111, 1
    $P1276."push"($P112)
.annotate 'line', 323
    set $P1277, param_1272
    unless_null $P1277, vivify_359
    $P1277 = root_new ['parrot';'ResizablePMCArray']
  vivify_359:
    $P1277."push"(", near \"")
.annotate 'line', 324
    set $P1278, param_1272
    unless_null $P1278, vivify_360
    $P1278 = root_new ['parrot';'ResizablePMCArray']
  vivify_360:
    set $P105, $P1274
    unless_null $P105, vivify_361
    new $P105, "Undef"
  vivify_361:
    set $S100, $P105
    set $P106, $P1273
    unless_null $P106, vivify_362
    new $P106, "Undef"
  vivify_362:
    set $I100, $P106
    substr $S101, $S100, $I100, 10
    escape $S102, $S101
    $P1278."push"($S102)
.annotate 'line', 325
    set $P1279, param_1272
    unless_null $P1279, vivify_363
    $P1279 = root_new ['parrot';'ResizablePMCArray']
  vivify_363:
    $P1279."push"("\"")
.annotate 'line', 326
    set $P1280, param_1272
    unless_null $P1280, vivify_364
    $P1280 = root_new ['parrot';'ResizablePMCArray']
  vivify_364:
    join $S100, "", $P1280
    new $P105, 'String'
    set $P105, $S100
    die $P105
.annotate 'line', 318
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "FAILGOAL" :anon :subid("67_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1282
    .param pmc param_1283
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 329
    .lex "self", param_1282
    .lex "$goal", param_1283
.annotate 'line', 330
    new $P103, "Undef"
    set $P1284, $P103
    .lex "$sub", $P1284

            $P1285 = getinterp
            $P1285 = $P1285['sub';1]
        
    set $P1284, $P1285
.annotate 'line', 334
    set $P104, param_1282
    nqp_decontainerize $P105, $P104
    set $P106, $P1284
    unless_null $P106, vivify_365
    new $P106, "Undef"
  vivify_365:
    set $S100, $P106
    new $P107, 'String'
    set $P107, ", couldn't find final "
    set $P108, param_1283
    unless_null $P108, vivify_366
    new $P108, "Undef"
  vivify_366:
    concat $P109, $P107, $P108
    $P110 = $P105."panic"("Unable to parse ", $S100, $P109)
.annotate 'line', 329
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "peek_delimiters" :anon :subid("68_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1287
    .param pmc param_1288
    .param pmc param_1289
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 347
    .lex "self", param_1287
    .lex "$target", param_1288
    .lex "$pos", param_1289
.annotate 'line', 348

            .local pmc self
            self = find_lex 'self'
            .local string target
            $P0 = find_lex '$target'
            target = $P0
            .local int pos
            $P0 = find_lex '$pos'
            pos = $P0

            .local string brackets, start, stop
            $P0 = find_lex '$brackets'
            brackets = $P0

            # peek at the next character
            start = substr target, pos, 1
            # colon and word characters aren't valid delimiters
            if start == ':' goto err_colon_delim
            $I0 = is_cclass .CCLASS_WORD, start, 0
            if $I0 goto err_word_delim
            $I0 = is_cclass .CCLASS_WHITESPACE, start, 0
            if $I0 goto err_ws_delim

            # assume stop delim is same as start, for the moment
            stop = start

            # see if we have an opener or closer
            $I0 = index brackets, start
            if $I0 < 0 goto bracket_end
            # if it's a closing bracket, that's an error also
            $I1 = $I0 % 2
            if $I1 goto err_close
            # it's an opener, so get the closing bracket
            inc $I0
            stop = substr brackets, $I0, 1

            # see if the opening bracket is repeated
            .local int len
            len = 0
          bracket_loop:
            inc pos
            inc len
            $S0 = substr target, pos, 1
            if $S0 == start goto bracket_loop
            if len == 1 goto bracket_end
            start = repeat start, len
            stop = repeat stop, len
          bracket_end:
            .return (start, stop, pos)

          err_colon_delim:
            self.'panic'('Colons may not be used to delimit quoting constructs')
          err_word_delim:
            self.'panic'('Alphanumeric character is not allowed as a delimiter')
          err_ws_delim:
            self.'panic'('Whitespace character is not allowed as a delimiter')
          err_close:
            self.'panic'('Use of a closing delimiter for an opener is reserved')
        
.annotate 'line', 347
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quote_EXPR"  :subid("69_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1291
    .param pmc param_1292 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 409
    .const 'Sub' $P1302 = "279_1340317678.734" 
    capture_lex $P1302
    .lex "self", param_1291
    .lex "@args", param_1292
.annotate 'line', 410
    $P1294 = root_new ['parrot';'Hash']
    set $P1293, $P1294
    .lex "%*QUOTEMOD", $P1293
.annotate 'line', 411
    new $P103, "Undef"
    set $P1295, $P103
    .lex "$*QUOTE_START", $P1295
.annotate 'line', 412
    new $P104, "Undef"
    set $P1296, $P104
    .lex "$*QUOTE_STOP", $P1296
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1297
    .lex "$/", $P1298
.annotate 'line', 409
    .local string rx184_tgt
    .local int rx184_pos
    .local int rx184_off
    .local int rx184_eos
    .local int rx184_rep
    .local pmc rx184_cur
    .local pmc rx184_curclass
    .local pmc rx184_bstack
    .local pmc rx184_cstack
    (rx184_cur, rx184_tgt, rx184_pos, rx184_curclass, rx184_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx184_cur
    length rx184_eos, rx184_tgt
    eq $I19, 1, rx184_restart
    repr_get_attr_int $I11, self, rx184_curclass, "$!from"
    ne $I11, -1, rxscan185_done
    goto rxscan185_scan
  rxscan185_loop:
    inc rx184_pos
    gt rx184_pos, rx184_eos, rx184_fail
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!from", rx184_pos
  rxscan185_scan:
    nqp_rxmark rx184_bstack, rxscan185_loop, rx184_pos, 0
  rxscan185_done:
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    store_lex unicode:"$\x{a2}", rx184_cur
    set $P108, $P1293
    unless_null $P108, vivify_367
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["%QUOTEMOD"]
    unless_null $P108, vivify_368
    die "Contextual %*QUOTEMOD not found"
  vivify_368:
  vivify_367:
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    store_lex unicode:"$\x{a2}", rx184_cur
    set $P111, $P1295
    unless_null $P111, vivify_369
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$QUOTE_START"]
    unless_null $P111, vivify_370
    die "Contextual $*QUOTE_START not found"
  vivify_370:
  vivify_369:
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    store_lex unicode:"$\x{a2}", rx184_cur
    set $P114, $P1296
    unless_null $P114, vivify_371
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["$QUOTE_STOP"]
    unless_null $P114, vivify_372
    die "Contextual $*QUOTE_STOP not found"
  vivify_372:
  vivify_371:
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    store_lex unicode:"$\x{a2}", rx184_cur
    find_lex $P115, unicode:"$\x{a2}"
    $P116 = $P115."MATCH"()
    store_lex "$/", $P116
.annotate 'line', 413
    .const 'Sub' $P1302 = "279_1340317678.734" 
    capture_lex $P1302
    $P117 = $P1302()
.annotate 'line', 409
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    $P11 = rx184_cur."quote_delimited"()
    repr_get_attr_int $I11, $P11, rx184_curclass, "$!pos"
    lt $I11, 0, rx184_fail
    nqp_rxmark rx184_bstack, rxsubrule186_pass, -1, 0
  rxsubrule186_pass:
    rx184_cstack = rx184_cur."!cursor_capture"($P11, "quote_delimited")
    repr_get_attr_int rx184_pos, $P11, rx184_curclass, "$!pos"
    rx184_cur."!cursor_pass"(rx184_pos, "quote_EXPR", 'backtrack'=>1)
    .return (rx184_cur)
  rx184_restart:
    repr_get_attr_obj rx184_cstack, rx184_cur, rx184_curclass, "$!cstack"
  rx184_fail:
    unless rx184_bstack, rx184_done
    pop $I19, rx184_bstack
    if_null rx184_cstack, rx184_cstack_done
    unless rx184_cstack, rx184_cstack_done
    dec $I19
    set $P11, rx184_cstack[$I19]
  rx184_cstack_done:
    pop rx184_rep, rx184_bstack
    pop rx184_pos, rx184_bstack
    pop $I19, rx184_bstack
    lt rx184_pos, -1, rx184_done
    lt rx184_pos, 0, rx184_fail
    eq $I19, 0, rx184_fail
    if_null rx184_cstack, rx184_jump
    elements $I18, rx184_bstack
    le $I18, 0, rx184_cut
    dec $I18
    set $I18, rx184_bstack[$I18]
  rx184_cut:
    assign rx184_cstack, $I18
  rx184_jump:
    jump $I19
  rx184_done:
    rx184_cur."!cursor_fail"()
    .return (rx184_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "69_1340317678.734_caps"  :subid("277_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 409
    new $P106, "Hash"
    set $P106["quote_delimited"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "69_1340317678.734_nfa"  :subid("278_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 409
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 0
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1301"  :anon :subid("279_1340317678.734") :outer("69_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 414
            
                .local pmc self, cur_class, args
                self = find_lex 'self'
                cur_class = find_lex '$cursor_class'
                args = find_lex '@args'

                .local pmc quotemod, true
                quotemod = find_lex '%*QUOTEMOD'
                true = box 1

              args_loop:
                unless args goto args_done
                .local string mod
                mod = shift args
                mod = substr mod, 1
                quotemod[mod] = true
                if mod == 'qq' goto opt_qq
                if mod == 'b' goto opt_b
                goto args_loop
              opt_qq:
                quotemod['s'] = true
                quotemod['a'] = true
                quotemod['h'] = true
                quotemod['f'] = true
                quotemod['c'] = true
                quotemod['b'] = true
              opt_b:
                quotemod['q'] = true
                goto args_loop
              args_done:

                .local pmc start, stop
                .local string target
                .local int pos
                target = repr_get_attr_str self, cur_class, '$!target'
                pos = repr_get_attr_int self, cur_class, '$!pos'
                (start, stop) = self.'peek_delimiters'(target, pos)
                store_lex '$*QUOTE_START', start
                store_lex '$*QUOTE_STOP', stop
            
.annotate 'line', 413
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "quotemod_check"  :subid("70_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1304
    .param pmc param_1305
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 458
    .const 'Sub' $P1311 = "282_1340317678.734" 
    capture_lex $P1311
    .lex "self", param_1304
    .lex "$mod", param_1305
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1306
    .lex "$/", $P1307
    .local string rx187_tgt
    .local int rx187_pos
    .local int rx187_off
    .local int rx187_eos
    .local int rx187_rep
    .local pmc rx187_cur
    .local pmc rx187_curclass
    .local pmc rx187_bstack
    .local pmc rx187_cstack
    (rx187_cur, rx187_tgt, rx187_pos, rx187_curclass, rx187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx187_cur
    length rx187_eos, rx187_tgt
    eq $I19, 1, rx187_restart
    repr_get_attr_int $I11, self, rx187_curclass, "$!from"
    ne $I11, -1, rxscan188_done
    goto rxscan188_scan
  rxscan188_loop:
    inc rx187_pos
    gt rx187_pos, rx187_eos, rx187_fail
    repr_bind_attr_int rx187_cur, rx187_curclass, "$!from", rx187_pos
  rxscan188_scan:
    nqp_rxmark rx187_bstack, rxscan188_loop, rx187_pos, 0
  rxscan188_done:
    repr_bind_attr_int rx187_cur, rx187_curclass, "$!pos", rx187_pos
    store_lex unicode:"$\x{a2}", rx187_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 459
    .const 'Sub' $P1311 = "282_1340317678.734" 
    capture_lex $P1311
    $P106 = $P1311()
.annotate 'line', 458
    unless $P106, rx187_fail
    rx187_cur."!cursor_pass"(rx187_pos, "quotemod_check", 'backtrack'=>1)
    .return (rx187_cur)
  rx187_restart:
    repr_get_attr_obj rx187_cstack, rx187_cur, rx187_curclass, "$!cstack"
  rx187_fail:
    unless rx187_bstack, rx187_done
    pop $I19, rx187_bstack
    if_null rx187_cstack, rx187_cstack_done
    unless rx187_cstack, rx187_cstack_done
    dec $I19
    set $P11, rx187_cstack[$I19]
  rx187_cstack_done:
    pop rx187_rep, rx187_bstack
    pop rx187_pos, rx187_bstack
    pop $I19, rx187_bstack
    lt rx187_pos, -1, rx187_done
    lt rx187_pos, 0, rx187_fail
    eq $I19, 0, rx187_fail
    if_null rx187_cstack, rx187_jump
    elements $I18, rx187_bstack
    le $I18, 0, rx187_cut
    dec $I18
    set $I18, rx187_bstack[$I18]
  rx187_cut:
    assign rx187_cstack, $I18
  rx187_jump:
    jump $I19
  rx187_done:
    rx187_cur."!cursor_fail"()
    .return (rx187_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "70_1340317678.734_caps"  :subid("280_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 458
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "70_1340317678.734_nfa"  :subid("281_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 458
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "_block1310"  :anon :subid("282_1340317678.734") :outer("70_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 459
    find_lex $P106, "$mod"
    unless_null $P106, vivify_373
    new $P106, "Undef"
  vivify_373:
    find_dynamic_lex $P109, "%*QUOTEMOD"
    unless_null $P109, vivify_374
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%QUOTEMOD"]
    unless_null $P109, vivify_375
    die "Contextual %*QUOTEMOD not found"
  vivify_375:
  vivify_374:
    set $P110, $P109[$P106]
    unless_null $P110, vivify_376
    new $P110, "Undef"
  vivify_376:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "starter" :anon :subid("71_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1313
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 462
    .lex "self", param_1313
.annotate 'line', 463

            .local pmc self, cur
            .local string target, start
            .local int pos
            self = find_lex 'self'

            (cur, target, pos) = self.'!cursor_start'()

            $P0 = find_dynamic_lex '$*QUOTE_START'
            if null $P0 goto fail
            start = $P0

            $I0 = length start
            $S0 = substr target, pos, $I0
            unless $S0 == start goto fail
            pos += $I0
            cur.'!cursor_pass'(pos, 'starter')
          fail:
            .return (cur)
        
.annotate 'line', 462
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "stopper" :anon :subid("72_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1315
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 485
    .lex "self", param_1315
.annotate 'line', 486

            .local pmc self, cur
            .local string target, stop
            .local int pos
            self = find_lex 'self'

            (cur, target, pos) = self.'!cursor_start'()

            $P0 = find_dynamic_lex '$*QUOTE_STOP'
            if null $P0 goto fail
            stop = $P0

            $I0 = length stop
            $S0 = substr target, pos, $I0
            unless $S0 == stop goto fail
            pos += $I0
            cur.'!cursor_pass'(pos, 'stopper')
          fail:
            .return (cur)
        
.annotate 'line', 485
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "split_words"  :subid("73_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1317
    .param pmc param_1318
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 508
    .lex "self", param_1317
    .lex "$words", param_1318
.annotate 'line', 509

            .include 'src/Regex/constants.pir'
            .local string words
            $P0 = find_lex '$words'
            words = $P0
            .local int pos, eos
            .local pmc result
            pos = 0
            eos = length words
            result = new ['ResizablePMCArray']
          split_loop:
            pos = find_not_cclass .CCLASS_WHITESPACE, words, pos, eos
            unless pos < eos goto split_done
            $I0 = find_cclass .CCLASS_WHITESPACE, words, pos, eos
            $I1 = $I0 - pos
            $S0 = substr words, pos, $I1
            push result, $S0
            pos = $I0
            goto split_loop
          split_done:
            .return (result)
        
.annotate 'line', 508
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "EXPR" :anon :subid("74_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1320
    .param pmc param_1321 :optional
    .param int has_param_1321 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 541
    .lex "self", param_1320
    if has_param_1321, optparam_377
    new $P103, "String"
    assign $P103, ""
    set param_1321, $P103
  optparam_377:
    .lex "$preclim", param_1321
.annotate 'line', 542

            .local pmc self, cur_class
            self = find_lex 'self'
            cur_class = find_lex '$cursor_class'

            .local string preclim
            $P0 = find_lex '$preclim'
            preclim = $P0
            
            .local pmc here
            .local string tgt
            .local int pos
            (here, tgt, pos) = self.'!cursor_start'()

            .local string termishrx
            termishrx = 'termish'

            .local pmc opstack, termstack
            opstack = new ['ResizablePMCArray']
            .lex '@opstack', opstack
            termstack = new ['ResizablePMCArray']
            .lex '@termstack', termstack

          term_loop:
            .local pmc termcur
            repr_bind_attr_int here, cur_class, "$!pos", pos
            termcur = here.termishrx()
            pos = repr_get_attr_int termcur, cur_class, "$!pos"
            repr_bind_attr_int here, cur_class, "$!pos", pos
            if pos < 0 goto fail
            .local pmc termish
            termish = termcur.'MATCH'()

            # interleave any prefix/postfix we might have found
            .local pmc termOPER, prefixish, postfixish
            termOPER = termish
          termOPER_loop:
            $I0 = exists termOPER['OPER']
            unless $I0 goto termOPER_done
            termOPER = termOPER['OPER']
            goto termOPER_loop
          termOPER_done:
            prefixish = termOPER['prefixish']
            postfixish = termOPER['postfixish']
            if null prefixish goto prefix_done

          prepostfix_loop:
            unless prefixish goto prepostfix_done
            unless postfixish goto prepostfix_done
            .local pmc preO, postO
            .local string preprec, postprec
            $P0 = prefixish[0]
            $P0 = $P0['OPER']
            preO = $P0['O']
            preprec = preO['prec']
            $P0 = postfixish[-1]
            $P0 = $P0['OPER']
            postO = $P0['O']
            postprec = postO['prec']
            if postprec < preprec goto post_shift
            if postprec > preprec goto pre_shift
            $S0 = postO['uassoc']
            if $S0 == 'right' goto pre_shift
          post_shift:
            $P0 = pop postfixish
            push opstack, $P0
            goto prepostfix_loop
          pre_shift:
            $P0 = shift prefixish
            push opstack, $P0
            goto prepostfix_loop
          prepostfix_done:

          prefix_loop:
            unless prefixish goto prefix_done
            $P0 = shift prefixish
            push opstack, $P0
            goto prefix_loop
          prefix_done:
            delete termish['prefixish']

          postfix_loop:
            if null postfixish goto postfix_done
            unless postfixish goto postfix_done
            $P0 = pop postfixish
            push opstack, $P0
            goto postfix_loop
          postfix_done:
            delete termish['postfixish']

            $P0 = termish['term']
            push termstack, $P0

            # Now see if we can fetch an infix operator
            .local pmc wscur, infixcur, infix
            
            # First, we need ws to match.
            repr_bind_attr_int here, cur_class, "$!pos", pos
            wscur = here.'ws'()
            pos = repr_get_attr_int wscur, cur_class, '$!pos'
            if pos < 0 goto term_done
            repr_bind_attr_int here, cur_class, "$!pos", pos
            
            # Next, try the infix itself.
            infixcur = here.'infixish'()
            pos = repr_get_attr_int infixcur, cur_class, '$!pos'
            if pos < 0 goto term_done
            infix = infixcur.'MATCH'()

            # We got an infix.
            .local pmc inO
            $P0 = infix['OPER']
            inO = $P0['O']
            termishrx = inO['nextterm']
            if termishrx goto have_termishrx
          nonextterm:
            termishrx = 'termish'
          have_termishrx:

            .local string inprec, inassoc, opprec
            inprec = inO['prec']
            unless inprec goto err_inprec
            if inprec < preclim goto term_done
            inassoc = inO['assoc']

            $P0 = inO['sub']
            if null $P0 goto subprec_done
            inO['prec'] = $P0
          subprec_done:

          reduce_loop:
            unless opstack goto reduce_done
            $P0 = opstack[-1]
            $P0 = $P0['OPER']
            $P0 = $P0['O']
            opprec = $P0['prec']
            unless opprec > inprec goto reduce_gt_done
            self.'EXPR_reduce'(termstack, opstack)
            goto reduce_loop
          reduce_gt_done:

            unless opprec == inprec goto reduce_done
            # equal precedence, use associativity to decide
            unless inassoc == 'left' goto reduce_done
            # left associative, reduce immediately
            self.'EXPR_reduce'(termstack, opstack)
          reduce_done:

            push opstack, infix        # The Shift
            repr_bind_attr_int here, cur_class, "$!pos", pos
            wscur = here.'ws'()
            pos = repr_get_attr_int wscur, cur_class, '$!pos'
            repr_bind_attr_int here, cur_class, "$!pos", pos
            if pos < 0 goto fail
            goto term_loop
          term_done:

          opstack_loop:
            unless opstack goto opstack_done
            self.'EXPR_reduce'(termstack, opstack)
            goto opstack_loop
          opstack_done:

          expr_done:
            .local pmc term
            term = pop termstack
            pos = here.'pos'()
            here = self.'!cursor_start'()
            here.'!cursor_pass'(pos)
            repr_bind_attr_int here, cur_class, '$!pos', pos
            setattribute here, cur_class, '$!match', term
            here.'!reduce'('EXPR')
            goto done

          fail:
          done:
            .return (here)

          err_internal:
            $I0 = termstack
            here.'panic'('Internal operator parser error, @termstack == ', $I0)
          err_inprec:
            infixcur.'panic'('Missing infixish operator precedence')
        
.annotate 'line', 541
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "EXPR_reduce" :anon :subid("75_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1323
    .param pmc param_1324
    .param pmc param_1325
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 728
    .lex "self", param_1323
    .lex "$termstack", param_1324
    .lex "$opstack", param_1325
.annotate 'line', 729

            .local pmc self, termstack, opstack
            self = find_lex 'self'
            termstack = find_lex '$termstack'
            opstack = find_lex '$opstack'

            .local pmc op, opOPER, opO
            .local string opassoc
            op = pop opstack
            
            # Give it a fresh capture list, since we'll have assumed it has
            # no positional captures and not taken them.
            .local pmc cap_class
            cap_class = find_lex 'NQPCapture'
            $P0 = new ['ResizablePMCArray']
            setattribute op, cap_class, '@!array', $P0
            
            opOPER = op['OPER']
            opO = opOPER['O']
            $P0 = opO['assoc']
            opassoc = $P0
            if opassoc == 'unary' goto op_unary
            if opassoc == 'list' goto op_list
          op_infix:
            .local pmc right, left
            right = pop termstack
            left = pop termstack
            op[0] = left
            op[1] = right
            $P0 = opO['reducecheck']
            if null $P0 goto op_infix_1
            $S0 = $P0
            self.$S0(op)
          op_infix_1:
            self.'!reduce_with_match'('EXPR', 'INFIX', op)
            goto done

          op_unary:
            .local pmc arg, afrom, ofrom
            arg = pop termstack
            op[0] = arg
            afrom = arg.'from'()
            ofrom = op.'from'()
            if afrom < ofrom goto op_postfix
          op_prefix:
            self.'!reduce_with_match'('EXPR', 'PREFIX', op)
            goto done
          op_postfix:
            self.'!reduce_with_match'('EXPR', 'POSTFIX', op)
            goto done

          op_list:
            .local string sym
            sym = ''
            $P0 = opOPER['sym']
            if null $P0 goto op_list_1
            sym = $P0
          op_list_1:
            arg = pop termstack
            unshift op, arg
          op_sym_loop:
            unless opstack goto op_sym_done
            $S0 = ''
            $P0 = opstack[-1]
            $P0 = $P0['OPER']
            $P0 = $P0['sym']
            if null $P0 goto op_sym_1
            $S0 = $P0
          op_sym_1:
            if sym != $S0 goto op_sym_done
            arg = pop termstack
            unshift op, arg
            $P0 = pop opstack
            goto op_sym_loop
          op_sym_done:
            arg = pop termstack
            unshift op, arg
            self.'!reduce_with_match'('EXPR', 'LIST', op)
            goto done

          done:
            push termstack, op
        
.annotate 'line', 728
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "ternary" :anon :subid("76_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1327
    .param pmc param_1328
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 814
    .lex "self", param_1327
    .lex "$match", param_1328
.annotate 'line', 815
    set $P1329, param_1328
    unless_null $P1329, vivify_378
    $P1329 = root_new ['parrot';'ResizablePMCArray']
  vivify_378:
    set $P103, $P1329[1]
    unless_null $P103, vivify_379
    new $P103, "Undef"
  vivify_379:
    set $P1330, param_1328
    unless_null $P1330, vivify_380
    $P1330 = root_new ['parrot';'ResizablePMCArray']
    set param_1328, $P1330
  vivify_380:
    set $P1330[2], $P103
.annotate 'line', 816
    set $P1331, param_1328
    unless_null $P1331, vivify_381
    $P1331 = root_new ['parrot';'Hash']
  vivify_381:
    set $P1332, $P1331["infix"]
    unless_null $P1332, vivify_382
    $P1332 = root_new ['parrot';'Hash']
  vivify_382:
    set $P103, $P1332["EXPR"]
    unless_null $P103, vivify_383
    new $P103, "Undef"
  vivify_383:
    set $P1333, param_1328
    unless_null $P1333, vivify_384
    $P1333 = root_new ['parrot';'ResizablePMCArray']
    set param_1328, $P1333
  vivify_384:
    set $P1333[1], $P103
.annotate 'line', 814
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "MARKER" :anon :subid("77_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1335
    .param pmc param_1336
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 819
    .lex "self", param_1335
    .lex "$markname", param_1336
.annotate 'line', 820
    $P1338 = root_new ['parrot';'Hash']
    set $P1337, $P1338
    .lex "%markhash", $P1337
.annotate 'line', 827
    new $P103, "Undef"
    set $P1339, $P103
    .lex "$cur", $P1339
.annotate 'line', 820

            $P1340 = get_global '%!MARKHASH'
            unless null $P1340 goto have_markhash
            $P1340 = new ['Hash']
            set_global '%!MARKHASH', $P1340
          have_markhash:
        
    set $P1337, $P1340
.annotate 'line', 827
    set $P104, param_1335
    nqp_decontainerize $P105, $P104
    $P106 = $P105."!cursor_start"()
    set $P1339, $P106
.annotate 'line', 828
    set $P104, $P1339
    unless_null $P104, vivify_385
    new $P104, "Undef"
  vivify_385:
    set $P105, param_1335
    nqp_decontainerize $P106, $P105
    $P107 = $P106."pos"()
    $P104."!cursor_pass"($P107)
.annotate 'line', 829
    set $P104, $P1339
    unless_null $P104, vivify_386
    new $P104, "Undef"
  vivify_386:
    set $P105, param_1336
    unless_null $P105, vivify_387
    new $P105, "Undef"
  vivify_387:
    set $P1341, $P1337
    unless_null $P1341, vivify_388
    $P1341 = root_new ['parrot';'Hash']
    set $P1337, $P1341
  vivify_388:
    set $P1341[$P105], $P104
.annotate 'line', 819
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "MARKED" :anon :subid("78_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1343
    .param pmc param_1344
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 832
    .lex "self", param_1343
    .lex "$markname", param_1344
.annotate 'line', 833
    $P1346 = root_new ['parrot';'Hash']
    set $P1345, $P1346
    .lex "%markhash", $P1345
.annotate 'line', 840
    new $P103, "Undef"
    set $P1347, $P103
    .lex "$cur", $P1347
.annotate 'line', 833

            $P1348 = get_global '%!MARKHASH'
            unless null $P1348 goto have_markhash
            $P1348 = new ['Hash']
            set_global '%!MARKHASH', $P1348
          have_markhash:
        
    set $P1345, $P1348
.annotate 'line', 840
    set $P104, param_1344
    unless_null $P104, vivify_389
    new $P104, "Undef"
  vivify_389:
    set $P1349, $P1345
    unless_null $P1349, vivify_390
    $P1349 = root_new ['parrot';'Hash']
  vivify_390:
    set $P105, $P1349[$P104]
    unless_null $P105, vivify_391
    new $P105, "Undef"
  vivify_391:
    set $P1347, $P105
.annotate 'line', 841
    set $P105, $P1347
    unless_null $P105, vivify_392
    new $P105, "Undef"
  vivify_392:
    find_lex $P106, "$?PACKAGE"
    get_who $P107, $P106
    set $P110, $P107["NQPCursor"]
    unless_null $P110, vivify_393
    get_hll_global $P108, "GLOBAL"
    get_who $P109, $P108
    set $P110, $P109["NQPCursor"]
  vivify_393:
    type_check $I100, $P105, $P110
    if $I100, if_1351
    new $P104, 'Integer'
    set $P104, $I100
    goto if_1351_end
  if_1351:
    set $P111, $P1347
    unless_null $P111, vivify_394
    new $P111, "Undef"
  vivify_394:
    $N100 = $P111."pos"()
    set $P112, param_1343
    nqp_decontainerize $P113, $P112
    $N101 = $P113."pos"()
    iseq $I101, $N100, $N101
    new $P104, 'Integer'
    set $P104, $I101
  if_1351_end:
    if $P104, unless_1350_end
.annotate 'line', 842
    set $P114, param_1343
    nqp_decontainerize $P115, $P114
    $P116 = $P115."!cursor_start"()
    set $P1347, $P116
  unless_1350_end:
.annotate 'line', 832
    set $P104, $P1347
    unless_null $P104, vivify_395
    new $P104, "Undef"
  vivify_395:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Grammar"]
.sub "LANG" :anon :subid("79_1340317678.734") :outer("192_1340317678.734")
    .param pmc param_1353
    .param pmc param_1354
    .param pmc param_1355
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 847
    .lex "self", param_1353
    .lex "$lang", param_1354
    .lex "$regex", param_1355
.annotate 'line', 848
    new $P103, "Undef"
    set $P1356, $P103
    .lex "$lang_cursor", $P1356
.annotate 'line', 852
    new $P104, "Undef"
    set $P1357, $P104
    .lex "$*ACTIONS", $P1357
.annotate 'line', 848
    set $P105, param_1354
    unless_null $P105, vivify_396
    new $P105, "Undef"
  vivify_396:
    find_dynamic_lex $P108, "%*LANG"
    unless_null $P108, vivify_397
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["%LANG"]
    unless_null $P108, vivify_398
    die "Contextual %*LANG not found"
  vivify_398:
  vivify_397:
    set $P109, $P108[$P105]
    unless_null $P109, vivify_399
    new $P109, "Undef"
  vivify_399:
    set $P110, param_1353
    nqp_decontainerize $P111, $P110
    $P112 = $P111."target"()
    set $P113, param_1353
    nqp_decontainerize $P114, $P113
    $P115 = $P114."pos"()
    $P116 = $P109."!cursor_init"($P112, $P115 :named("p"))
    set $P1356, $P116
.annotate 'line', 849
    set $P105, param_1353
    nqp_decontainerize $P106, $P105
    get_how $P107, $P106
    set $P108, param_1353
    nqp_decontainerize $P109, $P108
    $P110 = $P107."traced"($P109)
    unless $P110, if_1358_end
.annotate 'line', 850
    set $P111, $P1356
    unless_null $P111, vivify_400
    new $P111, "Undef"
  vivify_400:
    get_how $P112, $P111
    set $P113, $P1356
    unless_null $P113, vivify_401
    new $P113, "Undef"
  vivify_401:
    set $P114, param_1353
    nqp_decontainerize $P115, $P114
    get_how $P116, $P115
    set $P117, param_1353
    nqp_decontainerize $P118, $P117
    $P119 = $P116."trace_depth"($P118)
    $P112."trace-on"($P113, $P119)
  if_1358_end:
.annotate 'line', 852
    set $P105, param_1354
    unless_null $P105, vivify_402
    new $P105, "Undef"
  vivify_402:
    concat $P106, $P105, "-actions"
    find_dynamic_lex $P109, "%*LANG"
    unless_null $P109, vivify_403
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%LANG"]
    unless_null $P109, vivify_404
    die "Contextual %*LANG not found"
  vivify_404:
  vivify_403:
    set $P110, $P109[$P106]
    unless_null $P110, vivify_405
    new $P110, "Undef"
  vivify_405:
    set $P1357, $P110
.annotate 'line', 853
    set $P105, $P1356
    unless_null $P105, vivify_406
    new $P105, "Undef"
  vivify_406:
    set $P106, param_1355
    unless_null $P106, vivify_407
    new $P106, "Undef"
  vivify_407:
    set $S100, $P106
    $P107 = $P105.$S100()
.annotate 'line', 847
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1360"  :subid("283_1340317678.734") :outer("191_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 858
    .const 'Sub' $P1600 = "112_1340317678.734" 
    capture_lex $P1600
    .const 'Sub' $P1591 = "111_1340317678.734" 
    capture_lex $P1591
    .const 'Sub' $P1583 = "110_1340317678.734" 
    capture_lex $P1583
    .const 'Sub' $P1576 = "109_1340317678.734" 
    capture_lex $P1576
    .const 'Sub' $P1573 = "108_1340317678.734" 
    capture_lex $P1573
    .const 'Sub' $P1569 = "107_1340317678.734" 
    capture_lex $P1569
    .const 'Sub' $P1561 = "106_1340317678.734" 
    capture_lex $P1561
    .const 'Sub' $P1553 = "105_1340317678.734" 
    capture_lex $P1553
    .const 'Sub' $P1550 = "104_1340317678.734" 
    capture_lex $P1550
    .const 'Sub' $P1547 = "103_1340317678.734" 
    capture_lex $P1547
    .const 'Sub' $P1544 = "102_1340317678.734" 
    capture_lex $P1544
    .const 'Sub' $P1541 = "101_1340317678.734" 
    capture_lex $P1541
    .const 'Sub' $P1538 = "100_1340317678.734" 
    capture_lex $P1538
    .const 'Sub' $P1535 = "99_1340317678.734" 
    capture_lex $P1535
    .const 'Sub' $P1531 = "98_1340317678.734" 
    capture_lex $P1531
    .const 'Sub' $P1528 = "97_1340317678.734" 
    capture_lex $P1528
    .const 'Sub' $P1522 = "96_1340317678.734" 
    capture_lex $P1522
    .const 'Sub' $P1495 = "95_1340317678.734" 
    capture_lex $P1495
    .const 'Sub' $P1475 = "94_1340317678.734" 
    capture_lex $P1475
    .const 'Sub' $P1472 = "93_1340317678.734" 
    capture_lex $P1472
    .const 'Sub' $P1469 = "92_1340317678.734" 
    capture_lex $P1469
    .const 'Sub' $P1466 = "91_1340317678.734" 
    capture_lex $P1466
    .const 'Sub' $P1463 = "90_1340317678.734" 
    capture_lex $P1463
    .const 'Sub' $P1460 = "89_1340317678.734" 
    capture_lex $P1460
    .const 'Sub' $P1456 = "88_1340317678.734" 
    capture_lex $P1456
    .const 'Sub' $P1452 = "87_1340317678.734" 
    capture_lex $P1452
    .const 'Sub' $P1449 = "86_1340317678.734" 
    capture_lex $P1449
    .const 'Sub' $P1445 = "85_1340317678.734" 
    capture_lex $P1445
    .const 'Sub' $P1441 = "84_1340317678.734" 
    capture_lex $P1441
    .const 'Sub' $P1400 = "83_1340317678.734" 
    capture_lex $P1400
    .const 'Sub' $P1384 = "82_1340317678.734" 
    capture_lex $P1384
    .const 'Sub' $P1382 = "81_1340317678.734" 
    capture_lex $P1382
    .const 'Sub' $P1371 = "80_1340317678.734" 
    capture_lex $P1371
    .const 'Sub' $P1363 = "284_1340317678.734" 
    capture_lex $P1363
.annotate 'line', 859
    .const 'Sub' $P1363 = "284_1340317678.734" 
    newclosure $P1368, $P1363
    set $P1362, $P1368
    .lex "string_to_int", $P1362
.annotate 'line', 858
    set $P102, $P1362
    find_lex $P103, "$?PACKAGE"
    get_who $P105, $P103
    set $P105["string_to_int"], $P102
    .lex "$?PACKAGE", $P1369
    .lex "$?CLASS", $P1370
    set $P106, $P1362
.annotate 'line', 1039
    .const 'Sub' $P1600 = "112_1340317678.734" 
    newclosure $P1606, $P1600
.annotate 'line', 858
    .return ($P1606)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "string_to_int"  :subid("284_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1364
    .param pmc param_1365
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 859
    .lex "$src", param_1364
    .lex "$base", param_1365
.annotate 'line', 860
    new $P101, "Undef"
    set $P1366, $P101
    .lex "$res", $P1366
    set $P102, param_1365
    unless_null $P102, vivify_408
    new $P102, "Undef"
  vivify_408:
    set $I100, $P102
    set $P103, param_1364
    unless_null $P103, vivify_409
    new $P103, "Undef"
  vivify_409:
    set $S100, $P103
    nqp_radix $P104, $I100, $S100, 0, 2
    set $P1366, $P104
.annotate 'line', 862
    new $P103, "Float"
    assign $P103, 2
    set $S100, $P103
    set $P102, $P1366
    unless_null $P102, vivify_410
    new $P102, "Undef"
  vivify_410:
    set $P104, $P102[$S100]
    set $N100, $P104
    set $P105, param_1364
    unless_null $P105, vivify_411
    new $P105, "Undef"
  vivify_411:
    set $S101, $P105
    length $I100, $S101
    set $N101, $I100
    iseq $I101, $N100, $N101
    if $I101, unless_1367_end
.annotate 'line', 861
    set $P106, param_1364
    unless_null $P106, vivify_412
    new $P106, "Undef"
  vivify_412:
    $P107 = $P106."CURSOR"()
    new $P108, 'String'
    set $P108, "'"
    set $P109, param_1364
    unless_null $P109, vivify_413
    new $P109, "Undef"
  vivify_413:
    concat $P110, $P108, $P109
    concat $P111, $P110, "' is not a valid number"
    $P107."panic"($P111)
  unless_1367_end:
.annotate 'line', 863
    new $P103, "Float"
    assign $P103, 0
    set $S100, $P103
    set $P102, $P1366
    unless_null $P102, vivify_414
    new $P102, "Undef"
  vivify_414:
    set $P104, $P102[$S100]
.annotate 'line', 859
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "ints_to_string" :anon :subid("80_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1372
    .param pmc param_1373
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 866
    .const 'Sub' $P1376 = "285_1340317678.734" 
    capture_lex $P1376
    .lex "self", param_1372
    .lex "$ints", param_1373
.annotate 'line', 867
    set $P107, param_1373
    unless_null $P107, vivify_415
    new $P107, "Undef"
  vivify_415:
    does $I100, $P107, "array"
    if $I100, if_1374
.annotate 'line', 874
    set $P111, param_1373
    unless_null $P111, vivify_416
    new $P111, "Undef"
  vivify_416:
    $I101 = $P111."ast"()
    chr $S100, $I101
    new $P112, 'String'
    set $P112, $S100
.annotate 'line', 873
    set $P106, $P112
.annotate 'line', 867
    goto if_1374_end
  if_1374:
    .const 'Sub' $P1376 = "285_1340317678.734" 
    capture_lex $P1376
    $P110 = $P1376()
    set $P106, $P110
  if_1374_end:
.annotate 'line', 866
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "_block1375"  :anon :subid("285_1340317678.734") :outer("80_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 867
    .const 'Sub' $P1379 = "286_1340317678.734" 
    capture_lex $P1379
.annotate 'line', 868
    new $P108, "Undef"
    set $P1377, $P108
    .lex "$result", $P1377
    new $P109, "String"
    assign $P109, ""
    set $P1377, $P109
.annotate 'line', 869
    find_lex $P110, "$ints"
    unless_null $P110, vivify_417
    new $P110, "Undef"
  vivify_417:
    defined $I101, $P110
    unless $I101, for_undef_418
    iter $P109, $P110
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop1381_handler
    push_eh $P112
  loop1381_test:
    unless $P109, loop1381_done
    shift $P111, $P109
  loop1381_redo:
    .const 'Sub' $P1379 = "286_1340317678.734" 
    capture_lex $P1379
    $P1379($P111)
  loop1381_next:
    goto loop1381_test
  loop1381_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop1381_next
    eq $P113, .CONTROL_LOOP_REDO, loop1381_redo
  loop1381_done:
    pop_eh 
  for_undef_418:
.annotate 'line', 867
    set $P109, $P1377
    unless_null $P109, vivify_421
    new $P109, "Undef"
  vivify_421:
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1378"  :anon :subid("286_1340317678.734") :outer("285_1340317678.734")
    .param pmc param_1380
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 869
    .lex "$_", param_1380
.annotate 'line', 870
    find_lex $P112, "$result"
    unless_null $P112, vivify_419
    new $P112, "Undef"
  vivify_419:
    find_lex $P113, "$_"
    unless_null $P113, vivify_420
    new $P113, "Undef"
  vivify_420:
    $I102 = $P113."ast"()
    chr $S100, $I102
    concat $P114, $P112, $S100
    store_lex "$result", $P114
.annotate 'line', 869
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "CTXSAVE" :anon :subid("81_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1383
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 879
    .lex "self", param_1383
.annotate 'line', 880
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Op"]
.annotate 'line', 886
    new $P110, "ResizablePMCArray"
    push $P110, "    $P0 = find_dynamic_lex \"$*CTXSAVE\""
    push $P110, "    if null $P0 goto ctxsave_done"
    push $P110, "    $I0 = can $P0, \"ctxsave\""
    push $P110, "    unless $I0 goto ctxsave_done"
    push $P110, "    $P0.\"ctxsave\"()"
    push $P110, "  ctxsave_done:"
.annotate 'line', 880
    $P111 = $P109."new"($P110 :named("inline"))
.annotate 'line', 879
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "SET_BLOCK_OUTER_CTX" :anon :subid("82_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1385
    .param pmc param_1386
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 893
    .const 'Sub' $P1391 = "287_1340317678.734" 
    capture_lex $P1391
    .lex "self", param_1385
    .lex "$block", param_1386
.annotate 'line', 894
    new $P106, "Undef"
    set $P1387, $P106
    .lex "$outer_ctx", $P1387
    find_dynamic_lex $P109, "%*COMPILING"
    unless_null $P109, vivify_422
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%COMPILING"]
    unless_null $P109, vivify_423
    die "Contextual %*COMPILING not found"
  vivify_423:
  vivify_422:
    set $P1388, $P109["%?OPTIONS"]
    unless_null $P1388, vivify_424
    $P1388 = root_new ['parrot';'Hash']
  vivify_424:
    set $P110, $P1388["outer_ctx"]
    unless_null $P110, vivify_425
    new $P110, "Undef"
  vivify_425:
    set $P1387, $P110
.annotate 'line', 895
    set $P108, $P1387
    unless_null $P108, vivify_426
    new $P108, "Undef"
  vivify_426:
    defined $I100, $P108
    if $I100, if_1389
    new $P107, 'Integer'
    set $P107, $I100
    goto if_1389_end
  if_1389:
    .const 'Sub' $P1391 = "287_1340317678.734" 
    capture_lex $P1391
    $P110 = $P1391()
    set $P107, $P110
  if_1389_end:
.annotate 'line', 893
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "_block1390"  :anon :subid("287_1340317678.734") :outer("82_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 895
    .const 'Sub' $P1397 = "288_1340317678.734" 
    capture_lex $P1397
.annotate 'line', 896
    $P1393 = root_new ['parrot';'ResizablePMCArray']
    set $P1392, $P1393
    .lex "@ns", $P1392
    find_lex $P109, "$outer_ctx"
    unless_null $P109, vivify_427
    new $P109, "Undef"
  vivify_427:
    getattribute $P110, $P109, "current_namespace"
    $P111 = $P110."get_name"()
    set $P1392, $P111
.annotate 'line', 897
    set $P1394, $P1392
    unless_null $P1394, vivify_428
    $P1394 = root_new ['parrot';'ResizablePMCArray']
  vivify_428:
    $P1394."shift"()
.annotate 'line', 898
    find_lex $P109, "$block"
    unless_null $P109, vivify_429
    new $P109, "Undef"
  vivify_429:
    set $P1395, $P1392
    unless_null $P1395, vivify_430
    $P1395 = root_new ['parrot';'ResizablePMCArray']
  vivify_430:
    $P109."namespace"($P1395)
.annotate 'line', 899
    find_lex $P110, "$outer_ctx"
    unless_null $P110, vivify_431
    new $P110, "Undef"
  vivify_431:
    $P111 = $P110."lexpad_full"()
    defined $I101, $P111
    unless $I101, for_undef_432
    iter $P109, $P111
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1399_handler
    push_eh $P113
  loop1399_test:
    unless $P109, loop1399_done
    shift $P112, $P109
  loop1399_redo:
    .const 'Sub' $P1397 = "288_1340317678.734" 
    capture_lex $P1397
    $P1397($P112)
  loop1399_next:
    goto loop1399_test
  loop1399_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1399_next
    eq $P114, .CONTROL_LOOP_REDO, loop1399_redo
  loop1399_done:
    pop_eh 
  for_undef_432:
.annotate 'line', 895
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1396"  :anon :subid("288_1340317678.734") :outer("287_1340317678.734")
    .param pmc param_1398
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 899
    .lex "$_", param_1398
.annotate 'line', 900
    find_lex $P113, "$block"
    unless_null $P113, vivify_433
    new $P113, "Undef"
  vivify_433:
    find_lex $P114, "$_"
    unless_null $P114, vivify_434
    new $P114, "Undef"
  vivify_434:
    $P115 = $P114."key"()
    find_lex $P116, "$_"
    unless_null $P116, vivify_435
    new $P116, "Undef"
  vivify_435:
    $P117 = $P116."value"()
    $P118 = $P113."symbol"($P115, "lexical" :named("scope"), $P117 :named("value"))
.annotate 'line', 899
    .return ($P118)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "EXPR" :anon :subid("83_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1403
    .param pmc param_1404
    .param pmc param_1405 :optional
    .param int has_param_1405 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 906
    .const 'Sub' $P1437 = "290_1340317678.734" 
    capture_lex $P1437
    .const 'Sub' $P1429 = "289_1340317678.734" 
    capture_lex $P1429
    new $P1402, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1402, control_1401
    push_eh $P1402
    .lex "self", param_1403
    .lex "$/", param_1404
    if has_param_1405, optparam_436
    new $P106, "Undef"
    set param_1405, $P106
  optparam_436:
    .lex "$key", param_1405
.annotate 'line', 908
    new $P107, "Undef"
    set $P1406, $P107
    .lex "$past", $P1406
.annotate 'line', 907
    set $P108, param_1405
    unless_null $P108, vivify_437
    new $P108, "Undef"
  vivify_437:
    if $P108, unless_1407_end
    new $P109, "Exception"
    set $P109['type'], .CONTROL_RETURN
    new $P110, "Float"
    assign $P110, 0
    setattribute $P109, 'payload', $P110
    throw $P109
  unless_1407_end:
.annotate 'line', 908
    set $P108, param_1404
    unless_null $P108, vivify_438
    new $P108, "Undef"
  vivify_438:
    $P109 = $P108."ast"()
    set $P1408, $P109
    defined $I1410, $P1408
    if $I1410, default_1409
    set $P1411, param_1404
    unless_null $P1411, vivify_439
    $P1411 = root_new ['parrot';'Hash']
  vivify_439:
    set $P110, $P1411["OPER"]
    unless_null $P110, vivify_440
    new $P110, "Undef"
  vivify_440:
    $P111 = $P110."ast"()
    set $P1408, $P111
  default_1409:
    set $P1406, $P1408
.annotate 'line', 909
    set $P108, $P1406
    unless_null $P108, vivify_441
    new $P108, "Undef"
  vivify_441:
    if $P108, unless_1412_end
.annotate 'line', 910
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
    set $P113, param_1404
    unless_null $P113, vivify_442
    new $P113, "Undef"
  vivify_442:
    $P114 = $P112."new"($P113 :named("node"))
    set $P1406, $P114
.annotate 'line', 911
    set $P1414, param_1404
    unless_null $P1414, vivify_443
    $P1414 = root_new ['parrot';'Hash']
  vivify_443:
    set $P1415, $P1414["OPER"]
    unless_null $P1415, vivify_444
    $P1415 = root_new ['parrot';'Hash']
  vivify_444:
    set $P1416, $P1415["O"]
    unless_null $P1416, vivify_445
    $P1416 = root_new ['parrot';'Hash']
  vivify_445:
    set $P109, $P1416["pasttype"]
    unless_null $P109, vivify_446
    new $P109, "Undef"
  vivify_446:
    if $P109, if_1413
.annotate 'line', 912
    set $P1421, param_1404
    unless_null $P1421, vivify_447
    $P1421 = root_new ['parrot';'Hash']
  vivify_447:
    set $P1422, $P1421["OPER"]
    unless_null $P1422, vivify_448
    $P1422 = root_new ['parrot';'Hash']
  vivify_448:
    set $P1423, $P1422["O"]
    unless_null $P1423, vivify_449
    $P1423 = root_new ['parrot';'Hash']
  vivify_449:
    set $P110, $P1423["pirop"]
    unless_null $P110, vivify_450
    new $P110, "Undef"
  vivify_450:
    unless $P110, if_1420_end
    set $P111, $P1406
    unless_null $P111, vivify_451
    new $P111, "Undef"
  vivify_451:
    set $P1424, param_1404
    unless_null $P1424, vivify_452
    $P1424 = root_new ['parrot';'Hash']
  vivify_452:
    set $P1425, $P1424["OPER"]
    unless_null $P1425, vivify_453
    $P1425 = root_new ['parrot';'Hash']
  vivify_453:
    set $P1426, $P1425["O"]
    unless_null $P1426, vivify_454
    $P1426 = root_new ['parrot';'Hash']
  vivify_454:
    set $P112, $P1426["pirop"]
    unless_null $P112, vivify_455
    new $P112, "Undef"
  vivify_455:
    set $S100, $P112
    $P111."pirop"($S100)
  if_1420_end:
    goto if_1413_end
  if_1413:
.annotate 'line', 911
    set $P110, $P1406
    unless_null $P110, vivify_456
    new $P110, "Undef"
  vivify_456:
    set $P1417, param_1404
    unless_null $P1417, vivify_457
    $P1417 = root_new ['parrot';'Hash']
  vivify_457:
    set $P1418, $P1417["OPER"]
    unless_null $P1418, vivify_458
    $P1418 = root_new ['parrot';'Hash']
  vivify_458:
    set $P1419, $P1418["O"]
    unless_null $P1419, vivify_459
    $P1419 = root_new ['parrot';'Hash']
  vivify_459:
    set $P111, $P1419["pasttype"]
    unless_null $P111, vivify_460
    new $P111, "Undef"
  vivify_460:
    set $S100, $P111
    $P110."pasttype"($S100)
  if_1413_end:
.annotate 'line', 913
    set $P109, $P1406
    unless_null $P109, vivify_461
    new $P109, "Undef"
  vivify_461:
    $P110 = $P109."name"()
    if $P110, unless_1427_end
    .const 'Sub' $P1429 = "289_1340317678.734" 
    capture_lex $P1429
    $P1429()
  unless_1427_end:
  unless_1412_end:
.annotate 'line', 919
    set $P108, param_1405
    unless_null $P108, vivify_469
    new $P108, "Undef"
  vivify_469:
    set $S100, $P108
    iseq $I100, $S100, "POSTFIX"
    if $I100, if_1434
.annotate 'line', 921
    set $P110, param_1404
    unless_null $P110, vivify_470
    new $P110, "Undef"
  vivify_470:
    $P111 = $P110."list"()
    defined $I101, $P111
    unless $I101, for_undef_471
    iter $P109, $P111
    new $P114, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P114, loop1440_handler
    push_eh $P114
  loop1440_test:
    unless $P109, loop1440_done
    shift $P112, $P109
  loop1440_redo:
    .const 'Sub' $P1437 = "290_1340317678.734" 
    capture_lex $P1437
    $P1437($P112)
  loop1440_next:
    goto loop1440_test
  loop1440_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop1440_next
    eq $P115, .CONTROL_LOOP_REDO, loop1440_redo
  loop1440_done:
    pop_eh 
  for_undef_471:
.annotate 'line', 920
    goto if_1434_end
  if_1434:
.annotate 'line', 919
    set $P109, $P1406
    unless_null $P109, vivify_475
    new $P109, "Undef"
  vivify_475:
    set $P1435, param_1404
    unless_null $P1435, vivify_476
    $P1435 = root_new ['parrot';'ResizablePMCArray']
  vivify_476:
    set $P110, $P1435[0]
    unless_null $P110, vivify_477
    new $P110, "Undef"
  vivify_477:
    $P111 = $P110."ast"()
    $P109."unshift"($P111)
  if_1434_end:
.annotate 'line', 923
    set $P108, param_1404
    set $P109, $P1406
    unless_null $P109, vivify_478
    new $P109, "Undef"
  vivify_478:
    $P110 = $P108."!make"($P109)
.annotate 'line', 906
    .return ($P110)
  control_1401:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1428"  :anon :subid("289_1340317678.734") :outer("83_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 915
    new $P111, "Undef"
    set $P1430, $P111
    .lex "$name", $P1430
.annotate 'line', 914
    find_lex $P112, "$key"
    unless_null $P112, vivify_462
    new $P112, "Undef"
  vivify_462:
    set $S100, $P112
    iseq $I100, $S100, "LIST"
    unless $I100, if_1431_end
    new $P113, "String"
    assign $P113, "infix"
    store_lex "$key", $P113
  if_1431_end:
.annotate 'line', 915
    find_lex $P112, "$key"
    unless_null $P112, vivify_463
    new $P112, "Undef"
  vivify_463:
    set $S100, $P112
    downcase $S101, $S100
    new $P113, 'String'
    set $P113, $S101
    concat $P114, $P113, ":<"
    find_lex $P1432, "$/"
    unless_null $P1432, vivify_464
    $P1432 = root_new ['parrot';'Hash']
  vivify_464:
    set $P1433, $P1432["OPER"]
    unless_null $P1433, vivify_465
    $P1433 = root_new ['parrot';'Hash']
  vivify_465:
    set $P115, $P1433["sym"]
    unless_null $P115, vivify_466
    new $P115, "Undef"
  vivify_466:
    concat $P116, $P114, $P115
    concat $P117, $P116, ">"
    set $P1430, $P117
.annotate 'line', 916
    find_lex $P112, "$past"
    unless_null $P112, vivify_467
    new $P112, "Undef"
  vivify_467:
    new $P113, "String"
    assign $P113, "&"
    set $P114, $P1430
    unless_null $P114, vivify_468
    new $P114, "Undef"
  vivify_468:
    concat $P115, $P113, $P114
    $P116 = $P112."name"($P115)
.annotate 'line', 913
    .return ($P116)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1436"  :anon :subid("290_1340317678.734") :outer("83_1340317678.734")
    .param pmc param_1438
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 921
    .lex "$_", param_1438
    find_lex $P114, "$_"
    unless_null $P114, vivify_472
    new $P114, "Undef"
  vivify_472:
    $P115 = $P114."ast"()
    defined $I102, $P115
    if $I102, if_1439
    new $P113, 'Integer'
    set $P113, $I102
    goto if_1439_end
  if_1439:
    find_lex $P116, "$past"
    unless_null $P116, vivify_473
    new $P116, "Undef"
  vivify_473:
    find_lex $P117, "$_"
    unless_null $P117, vivify_474
    new $P117, "Undef"
  vivify_474:
    $P118 = $P117."ast"()
    $P119 = $P116."push"($P118)
    set $P113, $P119
  if_1439_end:
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "term:sym<circumfix>" :anon :subid("84_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1442
    .param pmc param_1443
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 926
    .lex "self", param_1442
    .lex "$/", param_1443
    set $P106, param_1443
    set $P1444, param_1443
    unless_null $P1444, vivify_479
    $P1444 = root_new ['parrot';'Hash']
  vivify_479:
    set $P107, $P1444["circumfix"]
    unless_null $P107, vivify_480
    new $P107, "Undef"
  vivify_480:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "termish" :anon :subid("85_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1446
    .param pmc param_1447
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 928
    .lex "self", param_1446
    .lex "$/", param_1447
    set $P106, param_1447
    set $P1448, param_1447
    unless_null $P1448, vivify_481
    $P1448 = root_new ['parrot';'Hash']
  vivify_481:
    set $P107, $P1448["term"]
    unless_null $P107, vivify_482
    new $P107, "Undef"
  vivify_482:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "nullterm" :anon :subid("86_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1450
    .param pmc param_1451
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 929
    .lex "self", param_1450
    .lex "$/", param_1451
    set $P106, param_1451
    new $P107, "Undef"
    $P108 = $P106."!make"($P107)
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "nullterm_alt" :anon :subid("87_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1453
    .param pmc param_1454
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 930
    .lex "self", param_1453
    .lex "$/", param_1454
    set $P106, param_1454
    set $P1455, param_1454
    unless_null $P1455, vivify_483
    $P1455 = root_new ['parrot';'Hash']
  vivify_483:
    set $P107, $P1455["term"]
    unless_null $P107, vivify_484
    new $P107, "Undef"
  vivify_484:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "integer" :anon :subid("88_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1457
    .param pmc param_1458
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 932
    .lex "self", param_1457
    .lex "$/", param_1458
    set $P106, param_1458
    set $P1459, param_1458
    unless_null $P1459, vivify_485
    $P1459 = root_new ['parrot';'Hash']
  vivify_485:
    set $P107, $P1459["VALUE"]
    unless_null $P107, vivify_486
    new $P107, "Undef"
  vivify_486:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "dec_number" :anon :subid("89_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1461
    .param pmc param_1462
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 934
    .lex "self", param_1461
    .lex "$/", param_1462
    set $P106, param_1462
    set $P107, param_1462
    unless_null $P107, vivify_487
    new $P107, "Undef"
  vivify_487:
    set $N100, $P107
    $P108 = $P106."!make"($N100)
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "decint" :anon :subid("90_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1464
    .param pmc param_1465
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 936
    .lex "self", param_1464
    .lex "$/", param_1465
    set $P106, param_1465
    set $P107, param_1465
    unless_null $P107, vivify_488
    new $P107, "Undef"
  vivify_488:
    $P108 = "string_to_int"($P107, 10)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "hexint" :anon :subid("91_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1467
    .param pmc param_1468
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 937
    .lex "self", param_1467
    .lex "$/", param_1468
    set $P106, param_1468
    set $P107, param_1468
    unless_null $P107, vivify_489
    new $P107, "Undef"
  vivify_489:
    $P108 = "string_to_int"($P107, 16)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "octint" :anon :subid("92_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1470
    .param pmc param_1471
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 938
    .lex "self", param_1470
    .lex "$/", param_1471
    set $P106, param_1471
    set $P107, param_1471
    unless_null $P107, vivify_490
    new $P107, "Undef"
  vivify_490:
    $P108 = "string_to_int"($P107, 8)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "binint" :anon :subid("93_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1473
    .param pmc param_1474
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 939
    .lex "self", param_1473
    .lex "$/", param_1474
    set $P106, param_1474
    set $P107, param_1474
    unless_null $P107, vivify_491
    new $P107, "Undef"
  vivify_491:
    $P108 = "string_to_int"($P107, 2)
    $P109 = $P106."!make"($P108)
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_EXPR" :anon :subid("94_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1476
    .param pmc param_1477
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 941
    .const 'Sub' $P1483 = "291_1340317678.734" 
    capture_lex $P1483
    .lex "self", param_1476
    .lex "$/", param_1477
.annotate 'line', 942
    new $P106, "Undef"
    set $P1478, $P106
    .lex "$past", $P1478
    set $P1479, param_1477
    unless_null $P1479, vivify_492
    $P1479 = root_new ['parrot';'Hash']
  vivify_492:
    set $P107, $P1479["quote_delimited"]
    unless_null $P107, vivify_493
    new $P107, "Undef"
  vivify_493:
    $P108 = $P107."ast"()
    set $P1478, $P108
.annotate 'line', 943
    find_dynamic_lex $P109, "%*QUOTEMOD"
    unless_null $P109, vivify_494
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["%QUOTEMOD"]
    unless_null $P109, vivify_495
    die "Contextual %*QUOTEMOD not found"
  vivify_495:
  vivify_494:
    set $P110, $P109["w"]
    unless_null $P110, vivify_496
    new $P110, "Undef"
  vivify_496:
    unless $P110, if_1480_end
.annotate 'line', 944
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Node"]
    set $P115, $P1478
    unless_null $P115, vivify_497
    new $P115, "Undef"
  vivify_497:
    $P116 = $P114."ACCEPTS"($P115)
    if $P116, if_1481
.annotate 'line', 947
    .const 'Sub' $P1483 = "291_1340317678.734" 
    capture_lex $P1483
    $P1483()
    goto if_1481_end
  if_1481:
.annotate 'line', 945
    set $P117, param_1477
    unless_null $P117, vivify_508
    new $P117, "Undef"
  vivify_508:
    $P118 = $P117."CURSOR"()
    $P118."panic"("Can't form :w list from non-constant strings (yet)")
  if_1481_end:
  if_1480_end:
.annotate 'line', 958
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Node"]
    set $P111, $P1478
    unless_null $P111, vivify_509
    new $P111, "Undef"
  vivify_509:
    $P112 = $P110."ACCEPTS"($P111)
    isfalse $I100, $P112
    unless $I100, if_1494_end
.annotate 'line', 959
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Val"]
    set $P117, $P1478
    unless_null $P117, vivify_510
    new $P117, "Undef"
  vivify_510:
    set $S100, $P117
    $P118 = $P116."new"($S100 :named("value"))
    set $P1478, $P118
  if_1494_end:
.annotate 'line', 961
    set $P107, param_1477
    set $P108, $P1478
    unless_null $P108, vivify_511
    new $P108, "Undef"
  vivify_511:
    $P109 = $P107."!make"($P108)
.annotate 'line', 941
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "_block1482"  :anon :subid("291_1340317678.734") :outer("94_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 947
    .const 'Sub' $P1490 = "292_1340317678.734" 
    capture_lex $P1490
.annotate 'line', 948
    $P1485 = root_new ['parrot';'ResizablePMCArray']
    set $P1484, $P1485
    .lex "@words", $P1484
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "HLL"
    nqp_get_package_through_who $P119, $P118, "Grammar"
    get_who $P120, $P119
    set $P121, $P120["split_words"]
    find_lex $P122, "$/"
    unless_null $P122, vivify_498
    new $P122, "Undef"
  vivify_498:
    find_lex $P123, "$past"
    unless_null $P123, vivify_499
    new $P123, "Undef"
  vivify_499:
    $P124 = $P121($P122, $P123)
    set $P1484, $P124
.annotate 'line', 949
    set $P1487, $P1484
    unless_null $P1487, vivify_500
    $P1487 = root_new ['parrot';'ResizablePMCArray']
  vivify_500:
    set $N100, $P1487
    set $N101, 1
    isne $I100, $N100, $N101
    if $I100, if_1486
.annotate 'line', 954
    set $P1493, $P1484
    unless_null $P1493, vivify_501
    $P1493 = root_new ['parrot';'ResizablePMCArray']
  vivify_501:
    set $P119, $P1493[0]
    unless_null $P119, vivify_502
    new $P119, "Undef"
  vivify_502:
    set $S100, $P119
    new $P120, 'String'
    set $P120, $S100
    store_lex "$past", $P120
.annotate 'line', 953
    set $P117, $P120
.annotate 'line', 949
    goto if_1486_end
  if_1486:
.annotate 'line', 950
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Op"]
    find_lex $P122, "$/"
    unless_null $P122, vivify_503
    new $P122, "Undef"
  vivify_503:
    $P123 = $P121."new"("list" :named("pasttype"), $P122 :named("node"))
    store_lex "$past", $P123
.annotate 'line', 951
    set $P1488, $P1484
    unless_null $P1488, vivify_504
    $P1488 = root_new ['parrot';'ResizablePMCArray']
  vivify_504:
    defined $I101, $P1488
    unless $I101, for_undef_505
    iter $P118, $P1488
    new $P120, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P120, loop1492_handler
    push_eh $P120
  loop1492_test:
    unless $P118, loop1492_done
    shift $P119, $P118
  loop1492_redo:
    .const 'Sub' $P1490 = "292_1340317678.734" 
    capture_lex $P1490
    $P1490($P119)
  loop1492_next:
    goto loop1492_test
  loop1492_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P121, exception, 'type'
    eq $P121, .CONTROL_LOOP_NEXT, loop1492_next
    eq $P121, .CONTROL_LOOP_REDO, loop1492_redo
  loop1492_done:
    pop_eh 
  for_undef_505:
.annotate 'line', 949
    set $P117, $P118
  if_1486_end:
.annotate 'line', 947
    .return ($P117)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1489"  :anon :subid("292_1340317678.734") :outer("291_1340317678.734")
    .param pmc param_1491
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 951
    .lex "$_", param_1491
    find_lex $P120, "$past"
    unless_null $P120, vivify_506
    new $P120, "Undef"
  vivify_506:
    find_lex $P121, "$_"
    unless_null $P121, vivify_507
    new $P121, "Undef"
  vivify_507:
    $P122 = $P120."push"($P121)
    .return ($P122)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "quote_delimited" :anon :subid("95_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1496
    .param pmc param_1497
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 964
    .const 'Sub' $P1505 = "293_1340317678.734" 
    capture_lex $P1505
    .lex "self", param_1496
    .lex "$/", param_1497
.annotate 'line', 965
    $P1499 = root_new ['parrot';'ResizablePMCArray']
    set $P1498, $P1499
    .lex "@parts", $P1498
.annotate 'line', 966
    new $P106, "Undef"
    set $P1500, $P106
    .lex "$lastlit", $P1500
.annotate 'line', 982
    new $P107, "Undef"
    set $P1501, $P107
    .lex "$past", $P1501
.annotate 'line', 964
    set $P1502, $P1498
    unless_null $P1502, vivify_512
    $P1502 = root_new ['parrot';'ResizablePMCArray']
  vivify_512:
.annotate 'line', 966
    new $P108, "String"
    assign $P108, ""
    set $P1500, $P108
.annotate 'line', 967
    set $P1503, param_1497
    unless_null $P1503, vivify_513
    $P1503 = root_new ['parrot';'Hash']
  vivify_513:
    set $P109, $P1503["quote_atom"]
    unless_null $P109, vivify_514
    new $P109, "Undef"
  vivify_514:
    defined $I100, $P109
    unless $I100, for_undef_515
    iter $P108, $P109
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1513_handler
    push_eh $P113
  loop1513_test:
    unless $P108, loop1513_done
    shift $P110, $P108
  loop1513_redo:
    .const 'Sub' $P1505 = "293_1340317678.734" 
    capture_lex $P1505
    $P1505($P110)
  loop1513_next:
    goto loop1513_test
  loop1513_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1513_next
    eq $P114, .CONTROL_LOOP_REDO, loop1513_redo
  loop1513_done:
    pop_eh 
  for_undef_515:
.annotate 'line', 981
    set $P108, $P1500
    unless_null $P108, vivify_528
    new $P108, "Undef"
  vivify_528:
    set $S100, $P108
    isgt $I100, $S100, ""
    unless $I100, if_1514_end
    set $P1515, $P1498
    unless_null $P1515, vivify_529
    $P1515 = root_new ['parrot';'ResizablePMCArray']
  vivify_529:
    set $P109, $P1500
    unless_null $P109, vivify_530
    new $P109, "Undef"
  vivify_530:
    $P1515."push"($P109)
  if_1514_end:
.annotate 'line', 982
    set $P1517, $P1498
    unless_null $P1517, vivify_531
    $P1517 = root_new ['parrot';'ResizablePMCArray']
  vivify_531:
    if $P1517, if_1516
    new $P110, "String"
    assign $P110, ""
    set $P108, $P110
    goto if_1516_end
  if_1516:
    set $P1518, $P1498
    unless_null $P1518, vivify_532
    $P1518 = root_new ['parrot';'ResizablePMCArray']
  vivify_532:
    $P109 = $P1518."shift"()
    set $P108, $P109
  if_1516_end:
    set $P1501, $P108
.annotate 'line', 983
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1521_handler
    push_eh $P108
  loop1521_test:
    set $P1519, $P1498
    unless_null $P1519, vivify_533
    $P1519 = root_new ['parrot';'ResizablePMCArray']
  vivify_533:
    unless $P1519, loop1521_done
  loop1521_redo:
.annotate 'line', 984
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Op"]
    set $P112, $P1501
    unless_null $P112, vivify_534
    new $P112, "Undef"
  vivify_534:
    set $P1520, $P1498
    unless_null $P1520, vivify_535
    $P1520 = root_new ['parrot';'ResizablePMCArray']
  vivify_535:
    $P113 = $P1520."shift"()
    $P114 = $P111."new"($P112, $P113, "concat" :named("pirop"))
    set $P1501, $P114
  loop1521_next:
.annotate 'line', 983
    goto loop1521_test
  loop1521_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1521_next
    eq $P109, .CONTROL_LOOP_REDO, loop1521_redo
  loop1521_done:
    pop_eh 
.annotate 'line', 986
    set $P108, param_1497
    set $P109, $P1501
    unless_null $P109, vivify_536
    new $P109, "Undef"
  vivify_536:
    $P110 = $P108."!make"($P109)
.annotate 'line', 964
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1504"  :anon :subid("293_1340317678.734") :outer("95_1340317678.734")
    .param pmc param_1507
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 968
    new $P111, "Undef"
    set $P1506, $P111
    .lex "$ast", $P1506
    .lex "$_", param_1507
    find_lex $P112, "$_"
    unless_null $P112, vivify_516
    new $P112, "Undef"
  vivify_516:
    $P113 = $P112."ast"()
    set $P1506, $P113
.annotate 'line', 969
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Node"]
    set $P117, $P1506
    unless_null $P117, vivify_517
    new $P117, "Undef"
  vivify_517:
    $P118 = $P116."ACCEPTS"($P117)
    isfalse $I101, $P118
    if $I101, if_1508
.annotate 'line', 972
    set $P120, $P1506
    unless_null $P120, vivify_518
    new $P120, "Undef"
  vivify_518:
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Val"]
    $P126 = $P120."isa"($P125)
    if $P126, if_1509
.annotate 'line', 976
    find_lex $P127, "$lastlit"
    unless_null $P127, vivify_519
    new $P127, "Undef"
  vivify_519:
    set $S100, $P127
    isgt $I102, $S100, ""
    unless $I102, if_1510_end
    find_lex $P1511, "@parts"
    unless_null $P1511, vivify_520
    $P1511 = root_new ['parrot';'ResizablePMCArray']
  vivify_520:
    find_lex $P128, "$lastlit"
    unless_null $P128, vivify_521
    new $P128, "Undef"
  vivify_521:
    $P1511."push"($P128)
  if_1510_end:
.annotate 'line', 977
    find_lex $P1512, "@parts"
    unless_null $P1512, vivify_522
    $P1512 = root_new ['parrot';'ResizablePMCArray']
  vivify_522:
    set $P127, $P1506
    unless_null $P127, vivify_523
    new $P127, "Undef"
  vivify_523:
    $P1512."push"($P127)
.annotate 'line', 978
    new $P127, "String"
    assign $P127, ""
    store_lex "$lastlit", $P127
.annotate 'line', 975
    set $P119, $P127
.annotate 'line', 972
    goto if_1509_end
  if_1509:
.annotate 'line', 973
    find_lex $P127, "$lastlit"
    unless_null $P127, vivify_524
    new $P127, "Undef"
  vivify_524:
    set $P128, $P1506
    unless_null $P128, vivify_525
    new $P128, "Undef"
  vivify_525:
    $S100 = $P128."value"()
    concat $P129, $P127, $S100
    store_lex "$lastlit", $P129
.annotate 'line', 972
    set $P119, $P129
  if_1509_end:
    set $P112, $P119
.annotate 'line', 969
    goto if_1508_end
  if_1508:
.annotate 'line', 970
    find_lex $P119, "$lastlit"
    unless_null $P119, vivify_526
    new $P119, "Undef"
  vivify_526:
    set $P120, $P1506
    unless_null $P120, vivify_527
    new $P120, "Undef"
  vivify_527:
    concat $P121, $P119, $P120
    store_lex "$lastlit", $P121
.annotate 'line', 969
    set $P112, $P121
  if_1508_end:
.annotate 'line', 967
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_atom" :anon :subid("96_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1523
    .param pmc param_1524
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 989
    .lex "self", param_1523
    .lex "$/", param_1524
.annotate 'line', 990
    set $P106, param_1524
    set $P1526, param_1524
    unless_null $P1526, vivify_537
    $P1526 = root_new ['parrot';'Hash']
  vivify_537:
    set $P108, $P1526["quote_escape"]
    unless_null $P108, vivify_538
    new $P108, "Undef"
  vivify_538:
    if $P108, if_1525
    set $P111, param_1524
    unless_null $P111, vivify_539
    new $P111, "Undef"
  vivify_539:
    set $S100, $P111
    new $P107, 'String'
    set $P107, $S100
    goto if_1525_end
  if_1525:
    set $P1527, param_1524
    unless_null $P1527, vivify_540
    $P1527 = root_new ['parrot';'Hash']
  vivify_540:
    set $P109, $P1527["quote_escape"]
    unless_null $P109, vivify_541
    new $P109, "Undef"
  vivify_541:
    $P110 = $P109."ast"()
    set $P107, $P110
  if_1525_end:
    $P112 = $P106."!make"($P107)
.annotate 'line', 989
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<backslash>" :anon :subid("97_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1529
    .param pmc param_1530
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 993
    .lex "self", param_1529
    .lex "$/", param_1530
    set $P106, param_1530
    $P107 = $P106."!make"("\\")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<stopper>" :anon :subid("98_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1532
    .param pmc param_1533
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 994
    .lex "self", param_1532
    .lex "$/", param_1533
    set $P106, param_1533
    set $P1534, param_1533
    unless_null $P1534, vivify_542
    $P1534 = root_new ['parrot';'Hash']
  vivify_542:
    set $P107, $P1534["stopper"]
    unless_null $P107, vivify_543
    new $P107, "Undef"
  vivify_543:
    set $S100, $P107
    $P108 = $P106."!make"($S100)
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<bs>" :anon :subid("99_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1536
    .param pmc param_1537
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 996
    .lex "self", param_1536
    .lex "$/", param_1537
    set $P106, param_1537
    $P107 = $P106."!make"("\b")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<nl>" :anon :subid("100_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1539
    .param pmc param_1540
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 997
    .lex "self", param_1539
    .lex "$/", param_1540
    set $P106, param_1540
    $P107 = $P106."!make"("\n")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<cr>" :anon :subid("101_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1542
    .param pmc param_1543
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 998
    .lex "self", param_1542
    .lex "$/", param_1543
    set $P106, param_1543
    $P107 = $P106."!make"("\r")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<tab>" :anon :subid("102_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1545
    .param pmc param_1546
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 999
    .lex "self", param_1545
    .lex "$/", param_1546
    set $P106, param_1546
    $P107 = $P106."!make"("\t")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<ff>" :anon :subid("103_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1548
    .param pmc param_1549
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1000
    .lex "self", param_1548
    .lex "$/", param_1549
    set $P106, param_1549
    $P107 = $P106."!make"("\f")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<esc>" :anon :subid("104_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1551
    .param pmc param_1552
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1001
    .lex "self", param_1551
    .lex "$/", param_1552
    set $P106, param_1552
    $P107 = $P106."!make"("\e")
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<hex>" :anon :subid("105_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1554
    .param pmc param_1555
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1003
    .lex "self", param_1554
    .lex "$/", param_1555
.annotate 'line', 1004
    set $P106, param_1555
    set $P107, param_1554
    nqp_decontainerize $P108, $P107
    set $P1557, param_1555
    unless_null $P1557, vivify_544
    $P1557 = root_new ['parrot';'Hash']
  vivify_544:
    set $P110, $P1557["hexint"]
    unless_null $P110, vivify_545
    new $P110, "Undef"
  vivify_545:
    if $P110, if_1556
    set $P1559, param_1555
    unless_null $P1559, vivify_546
    $P1559 = root_new ['parrot';'Hash']
  vivify_546:
    set $P1560, $P1559["hexints"]
    unless_null $P1560, vivify_547
    $P1560 = root_new ['parrot';'Hash']
  vivify_547:
    set $P112, $P1560["hexint"]
    unless_null $P112, vivify_548
    new $P112, "Undef"
  vivify_548:
    set $P109, $P112
    goto if_1556_end
  if_1556:
    set $P1558, param_1555
    unless_null $P1558, vivify_549
    $P1558 = root_new ['parrot';'Hash']
  vivify_549:
    set $P111, $P1558["hexint"]
    unless_null $P111, vivify_550
    new $P111, "Undef"
  vivify_550:
    set $P109, $P111
  if_1556_end:
    $P113 = $P108."ints_to_string"($P109)
    $P114 = $P106."!make"($P113)
.annotate 'line', 1003
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<oct>" :anon :subid("106_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1562
    .param pmc param_1563
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1007
    .lex "self", param_1562
    .lex "$/", param_1563
.annotate 'line', 1008
    set $P106, param_1563
    set $P107, param_1562
    nqp_decontainerize $P108, $P107
    set $P1565, param_1563
    unless_null $P1565, vivify_551
    $P1565 = root_new ['parrot';'Hash']
  vivify_551:
    set $P110, $P1565["octint"]
    unless_null $P110, vivify_552
    new $P110, "Undef"
  vivify_552:
    if $P110, if_1564
    set $P1567, param_1563
    unless_null $P1567, vivify_553
    $P1567 = root_new ['parrot';'Hash']
  vivify_553:
    set $P1568, $P1567["octints"]
    unless_null $P1568, vivify_554
    $P1568 = root_new ['parrot';'Hash']
  vivify_554:
    set $P112, $P1568["octint"]
    unless_null $P112, vivify_555
    new $P112, "Undef"
  vivify_555:
    set $P109, $P112
    goto if_1564_end
  if_1564:
    set $P1566, param_1563
    unless_null $P1566, vivify_556
    $P1566 = root_new ['parrot';'Hash']
  vivify_556:
    set $P111, $P1566["octint"]
    unless_null $P111, vivify_557
    new $P111, "Undef"
  vivify_557:
    set $P109, $P111
  if_1564_end:
    $P113 = $P108."ints_to_string"($P109)
    $P114 = $P106."!make"($P113)
.annotate 'line', 1007
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<chr>" :anon :subid("107_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1570
    .param pmc param_1571
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1011
    .lex "self", param_1570
    .lex "$/", param_1571
.annotate 'line', 1012
    set $P106, param_1571
    set $P1572, param_1571
    unless_null $P1572, vivify_558
    $P1572 = root_new ['parrot';'Hash']
  vivify_558:
    set $P107, $P1572["charspec"]
    unless_null $P107, vivify_559
    new $P107, "Undef"
  vivify_559:
    $P108 = $P107."ast"()
    $P109 = $P106."!make"($P108)
.annotate 'line', 1011
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<0>" :anon :subid("108_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1574
    .param pmc param_1575
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1015
    .lex "self", param_1574
    .lex "$/", param_1575
.annotate 'line', 1016
    set $P106, param_1575
    $P107 = $P106."!make"(unicode:"\x{0}")
.annotate 'line', 1015
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "quote_escape:sym<misc>" :anon :subid("109_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1577
    .param pmc param_1578
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1019
    .lex "self", param_1577
    .lex "$/", param_1578
.annotate 'line', 1020
    set $P106, param_1578
    set $P1580, param_1578
    unless_null $P1580, vivify_560
    $P1580 = root_new ['parrot';'Hash']
  vivify_560:
    set $P108, $P1580["textq"]
    unless_null $P108, vivify_561
    new $P108, "Undef"
  vivify_561:
    if $P108, if_1579
    set $P1582, param_1578
    unless_null $P1582, vivify_562
    $P1582 = root_new ['parrot';'Hash']
  vivify_562:
    set $P112, $P1582["textqq"]
    unless_null $P112, vivify_563
    new $P112, "Undef"
  vivify_563:
    $P113 = $P112."Str"()
    set $P107, $P113
    goto if_1579_end
  if_1579:
    new $P109, "String"
    assign $P109, "\\"
    set $P1581, param_1578
    unless_null $P1581, vivify_564
    $P1581 = root_new ['parrot';'Hash']
  vivify_564:
    set $P110, $P1581["textq"]
    unless_null $P110, vivify_565
    new $P110, "Undef"
  vivify_565:
    $S100 = $P110."Str"()
    concat $P111, $P109, $S100
    set $P107, $P111
  if_1579_end:
    $P114 = $P106."!make"($P107)
.annotate 'line', 1019
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "charname" :anon :subid("110_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1584
    .param pmc param_1585
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1023
    .lex "self", param_1584
    .lex "$/", param_1585
.annotate 'line', 1024
    new $P106, "Undef"
    set $P1586, $P106
    .lex "$codepoint", $P1586
.annotate 'line', 1025
    set $P1588, param_1585
    unless_null $P1588, vivify_566
    $P1588 = root_new ['parrot';'Hash']
  vivify_566:
    set $P108, $P1588["integer"]
    unless_null $P108, vivify_567
    new $P108, "Undef"
  vivify_567:
    if $P108, if_1587
.annotate 'line', 1027
    set $P111, param_1585
    unless_null $P111, vivify_568
    new $P111, "Undef"
  vivify_568:
    set $S100, $P111
.annotate 'line', 1028
    find_encoding $I100, "utf8"
    trans_encoding $S101, $S100, $I100
.annotate 'line', 1027
    find_codepoint $I101, $S101
.annotate 'line', 1026
    new $P107, 'Integer'
    set $P107, $I101
.annotate 'line', 1025
    goto if_1587_end
  if_1587:
    set $P1589, param_1585
    unless_null $P1589, vivify_569
    $P1589 = root_new ['parrot';'Hash']
  vivify_569:
    set $P109, $P1589["integer"]
    unless_null $P109, vivify_570
    new $P109, "Undef"
  vivify_570:
    $P110 = $P109."ast"()
    set $P107, $P110
  if_1587_end:
    set $P1586, $P107
.annotate 'line', 1029
    set $P107, $P1586
    unless_null $P107, vivify_571
    new $P107, "Undef"
  vivify_571:
    set $N100, $P107
    set $N101, 0
    islt $I100, $N100, $N101
    unless $I100, if_1590_end
    set $P108, param_1585
    unless_null $P108, vivify_572
    new $P108, "Undef"
  vivify_572:
    $P109 = $P108."CURSOR"()
    new $P110, 'String'
    set $P110, "Unrecognized character name "
    set $P111, param_1585
    unless_null $P111, vivify_573
    new $P111, "Undef"
  vivify_573:
    concat $P112, $P110, $P111
    $P109."panic"($P112)
  if_1590_end:
.annotate 'line', 1030
    set $P107, param_1585
    set $P108, $P1586
    unless_null $P108, vivify_574
    new $P108, "Undef"
  vivify_574:
    set $I100, $P108
    chr $S100, $I100
    $P109 = $P107."!make"($S100)
.annotate 'line', 1023
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.include "except_types.pasm"
.sub "charnames" :anon :subid("111_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1592
    .param pmc param_1593
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1033
    .const 'Sub' $P1597 = "294_1340317678.734" 
    capture_lex $P1597
    .lex "self", param_1592
    .lex "$/", param_1593
.annotate 'line', 1034
    new $P106, "Undef"
    set $P1594, $P106
    .lex "$str", $P1594
    new $P107, "String"
    assign $P107, ""
    set $P1594, $P107
.annotate 'line', 1035
    set $P1595, param_1593
    unless_null $P1595, vivify_575
    $P1595 = root_new ['parrot';'Hash']
  vivify_575:
    set $P108, $P1595["charname"]
    unless_null $P108, vivify_576
    new $P108, "Undef"
  vivify_576:
    defined $I100, $P108
    unless $I100, for_undef_577
    iter $P107, $P108
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1599_handler
    push_eh $P110
  loop1599_test:
    unless $P107, loop1599_done
    shift $P109, $P107
  loop1599_redo:
    .const 'Sub' $P1597 = "294_1340317678.734" 
    capture_lex $P1597
    $P1597($P109)
  loop1599_next:
    goto loop1599_test
  loop1599_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1599_next
    eq $P111, .CONTROL_LOOP_REDO, loop1599_redo
  loop1599_done:
    pop_eh 
  for_undef_577:
.annotate 'line', 1036
    set $P107, param_1593
    set $P108, $P1594
    unless_null $P108, vivify_580
    new $P108, "Undef"
  vivify_580:
    $P109 = $P107."!make"($P108)
.annotate 'line', 1033
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "_block1596"  :anon :subid("294_1340317678.734") :outer("111_1340317678.734")
    .param pmc param_1598
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1035
    .lex "$_", param_1598
    find_lex $P110, "$str"
    unless_null $P110, vivify_578
    new $P110, "Undef"
  vivify_578:
    find_lex $P111, "$_"
    unless_null $P111, vivify_579
    new $P111, "Undef"
  vivify_579:
    $S100 = $P111."ast"()
    concat $P112, $P110, $S100
    store_lex "$str", $P112
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Actions"]
.sub "charspec" :anon :subid("112_1340317678.734") :outer("283_1340317678.734")
    .param pmc param_1601
    .param pmc param_1602
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1039
    .lex "self", param_1601
    .lex "$/", param_1602
.annotate 'line', 1040
    set $P106, param_1602
    set $P1604, param_1602
    unless_null $P1604, vivify_581
    $P1604 = root_new ['parrot';'Hash']
  vivify_581:
    set $P108, $P1604["charnames"]
    unless_null $P108, vivify_582
    new $P108, "Undef"
  vivify_582:
    if $P108, if_1603
    set $P111, param_1602
    unless_null $P111, vivify_583
    new $P111, "Undef"
  vivify_583:
    $I100 = "string_to_int"($P111, 10)
    chr $S100, $I100
    new $P107, 'String'
    set $P107, $S100
    goto if_1603_end
  if_1603:
    set $P1605, param_1602
    unless_null $P1605, vivify_584
    $P1605 = root_new ['parrot';'Hash']
  vivify_584:
    set $P109, $P1605["charnames"]
    unless_null $P109, vivify_585
    new $P109, "Undef"
  vivify_585:
    $P110 = $P109."ast"()
    set $P107, $P110
  if_1603_end:
    $P112 = $P106."!make"($P107)
.annotate 'line', 1039
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1607"  :subid("295_1340317678.734") :outer("191_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1053
    .const 'Sub' $P2263 = "155_1340317678.734" 
    capture_lex $P2263
    .const 'Sub' $P2260 = "154_1340317678.734" 
    capture_lex $P2260
    .const 'Sub' $P2255 = "153_1340317678.734" 
    capture_lex $P2255
    .const 'Sub' $P2250 = "152_1340317678.734" 
    capture_lex $P2250
    .const 'Sub' $P2226 = "151_1340317678.734" 
    capture_lex $P2226
    .const 'Sub' $P2192 = "150_1340317678.734" 
    capture_lex $P2192
    .const 'Sub' $P2179 = "149_1340317678.734" 
    capture_lex $P2179
    .const 'Sub' $P2161 = "148_1340317678.734" 
    capture_lex $P2161
    .const 'Sub' $P2149 = "147_1340317678.734" 
    capture_lex $P2149
    .const 'Sub' $P2138 = "146_1340317678.734" 
    capture_lex $P2138
    .const 'Sub' $P2134 = "145_1340317678.734" 
    capture_lex $P2134
    .const 'Sub' $P2122 = "144_1340317678.734" 
    capture_lex $P2122
    .const 'Sub' $P2117 = "143_1340317678.734" 
    capture_lex $P2117
    .const 'Sub' $P2112 = "142_1340317678.734" 
    capture_lex $P2112
    .const 'Sub' $P2110 = "141_1340317678.734" 
    capture_lex $P2110
    .const 'Sub' $P2105 = "140_1340317678.734" 
    capture_lex $P2105
    .const 'Sub' $P2099 = "139_1340317678.734" 
    capture_lex $P2099
    .const 'Sub' $P2066 = "138_1340317678.734" 
    capture_lex $P2066
    .const 'Sub' $P2040 = "137_1340317678.734" 
    capture_lex $P2040
    .const 'Sub' $P1985 = "136_1340317678.734" 
    capture_lex $P1985
    .const 'Sub' $P1958 = "135_1340317678.734" 
    capture_lex $P1958
    .const 'Sub' $P1863 = "134_1340317678.734" 
    capture_lex $P1863
    .const 'Sub' $P1841 = "133_1340317678.734" 
    capture_lex $P1841
    .const 'Sub' $P1833 = "132_1340317678.734" 
    capture_lex $P1833
    .const 'Sub' $P1829 = "131_1340317678.734" 
    capture_lex $P1829
    .const 'Sub' $P1827 = "130_1340317678.734" 
    capture_lex $P1827
    .const 'Sub' $P1825 = "129_1340317678.734" 
    capture_lex $P1825
    .const 'Sub' $P1819 = "128_1340317678.734" 
    capture_lex $P1819
    .const 'Sub' $P1813 = "127_1340317678.734" 
    capture_lex $P1813
    .const 'Sub' $P1805 = "126_1340317678.734" 
    capture_lex $P1805
    .const 'Sub' $P1801 = "125_1340317678.734" 
    capture_lex $P1801
    .const 'Sub' $P1798 = "124_1340317678.734" 
    capture_lex $P1798
    .const 'Sub' $P1775 = "123_1340317678.734" 
    capture_lex $P1775
    .const 'Sub' $P1706 = "122_1340317678.734" 
    capture_lex $P1706
    .const 'Sub' $P1702 = "121_1340317678.734" 
    capture_lex $P1702
    .const 'Sub' $P1687 = "120_1340317678.734" 
    capture_lex $P1687
    .const 'Sub' $P1684 = "119_1340317678.734" 
    capture_lex $P1684
    .const 'Sub' $P1681 = "118_1340317678.734" 
    capture_lex $P1681
    .const 'Sub' $P1677 = "117_1340317678.734" 
    capture_lex $P1677
    .const 'Sub' $P1670 = "116_1340317678.734" 
    capture_lex $P1670
    .const 'Sub' $P1628 = "115_1340317678.734" 
    capture_lex $P1628
    .const 'Sub' $P1621 = "114_1340317678.734" 
    capture_lex $P1621
    .const 'Sub' $P1618 = "113_1340317678.734" 
    capture_lex $P1618
    .const 'Sub' $P1610 = "296_1340317678.734" 
    capture_lex $P1610
.annotate 'line', 1089
    .const 'Sub' $P1610 = "296_1340317678.734" 
    newclosure $P1614, $P1610
    set $P1609, $P1614
    .lex "value_type", $P1609
.annotate 'line', 1053
    .lex "$?PACKAGE", $P1615
    .lex "$?CLASS", $P1616
    set $P102, $P1615
    get_who $P103, $P102
    set $P1617, $P103["%parrot_config"]
    unless_null $P1617, vivify_588
    $P1617 = root_new ['parrot';'Hash']
  vivify_588:
    set $P102, $P1609
.annotate 'line', 1722
    .const 'Sub' $P2263 = "155_1340317678.734" 
    newclosure $P2266, $P2263
.annotate 'line', 1053
    .return ($P2266)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "value_type"  :subid("296_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1611
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1089
    .lex "$value", param_1611
.annotate 'line', 1090
    set $P102, param_1611
    unless_null $P102, vivify_586
    new $P102, "Undef"
  vivify_586:
    isa $I100, $P102, "NameSpace"
    if $I100, if_1612
.annotate 'line', 1092
    set $P105, param_1611
    unless_null $P105, vivify_587
    new $P105, "Undef"
  vivify_587:
    isa $I101, $P105, "Sub"
    if $I101, if_1613
    new $P107, "String"
    assign $P107, "var"
    set $P104, $P107
    goto if_1613_end
  if_1613:
    new $P106, "String"
    assign $P106, "sub"
    set $P104, $P106
  if_1613_end:
    set $P101, $P104
.annotate 'line', 1090
    goto if_1612_end
  if_1612:
    new $P103, "String"
    assign $P103, "namespace"
    set $P101, $P103
  if_1612_end:
.annotate 'line', 1089
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "new" :anon :subid("113_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1619
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1069
    .lex "self", param_1619
.annotate 'line', 1070
    new $P102, "Undef"
    set $P1620, $P102
    .lex "$obj", $P1620
    set $P103, param_1619
    nqp_decontainerize $P104, $P103
    repr_instance_of $P105, $P104
    set $P1620, $P105
.annotate 'line', 1071
    set $P103, $P1620
    unless_null $P103, vivify_589
    new $P103, "Undef"
  vivify_589:
    $P103."BUILD"()
.annotate 'line', 1069
    set $P103, $P1620
    unless_null $P103, vivify_590
    new $P103, "Undef"
  vivify_590:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "BUILD" :anon :subid("114_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1622
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1075
    .const 'Sub' $P1625 = "297_1340317678.734" 
    capture_lex $P1625
    .lex "self", param_1622
.annotate 'line', 1077
    split $P102, " ", "parse past post pir evalpmc"
    set $P103, param_1622
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P104, $P105, "@!stages", 0, $P102
.annotate 'line', 1080
    split $P102, " ", "e=s help|h target=s dumper=s trace|t=s encoding=s output|o=s combine version|v show-config stagestats ll-exception rxtrace nqpevent=s profile profile-compile"
    set $P103, param_1622
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P104, $P105, "@!cmdoptions", 3, $P102
.annotate 'line', 1081
    new $P102, "String"
    assign $P102, "This compiler is based on HLL::Compiler.\n\nOptions:\n"
    set $P103, param_1622
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P104, $P105, "$!usage", 4, $P102
.annotate 'line', 1082
    set $P103, param_1622
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P1623, $P104, $P105, "@!cmdoptions", 3
    unless_null $P1623, vivify_591
    $P1623 = root_new ['parrot';'ResizablePMCArray']
  vivify_591:
    defined $I100, $P1623
    unless $I100, for_undef_592
    iter $P102, $P1623
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1627_handler
    push_eh $P107
  loop1627_test:
    unless $P102, loop1627_done
    shift $P106, $P102
  loop1627_redo:
    .const 'Sub' $P1625 = "297_1340317678.734" 
    capture_lex $P1625
    $P1625($P106)
  loop1627_next:
    goto loop1627_test
  loop1627_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1627_next
    eq $P108, .CONTROL_LOOP_REDO, loop1627_redo
  loop1627_done:
    pop_eh 
  for_undef_592:
.annotate 'line', 1085
    getinterp $P102
    set $P103, $P102[.IGLOBALS_CONFIG_HASH]
    unless_null $P103, vivify_595
    new $P103, "Undef"
  vivify_595:
    find_lex $P104, "$?PACKAGE"
    get_who $P105, $P104
    set $P105["%parrot_config"], $P103
.annotate 'line', 1086
    new $P102, "Hash"
    set $P103, param_1622
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P104, $P105, "%!config", 7, $P102
.annotate 'line', 1075
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1624"  :anon :subid("297_1340317678.734") :outer("114_1340317678.734")
    .param pmc param_1626
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1082
    .lex "$_", param_1626
.annotate 'line', 1083
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P110, $P108, $P109, "$!usage", 4
    unless_null $P110, vivify_593
    new $P110, "Undef"
  vivify_593:
    new $P111, 'String'
    set $P111, "    "
    find_lex $P112, "$_"
    unless_null $P112, vivify_594
    new $P112, "Undef"
  vivify_594:
    concat $P113, $P111, $P112
    concat $P114, $P113, "\n"
    concat $P115, $P110, $P114
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    nqp_get_sc_object $P118, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P117, $P118, "$!usage", 4, $P115
.annotate 'line', 1082
    .return ($P115)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "get_exports" :anon :subid("115_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1629
    .param pmc param_1630
    .param pmc param_1632 :slurpy
    .param pmc param_1631 :optional :named("tagset")
    .param int has_param_1631 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1095
    .const 'Sub' $P1663 = "299_1340317678.734" 
    capture_lex $P1663
    .const 'Sub' $P1654 = "298_1340317678.734" 
    capture_lex $P1654
    .lex "self", param_1629
    .lex "$module", param_1630
    if has_param_1631, optparam_596
    new $P102, "Undef"
    set param_1631, $P102
  optparam_596:
    .lex "$tagset", param_1631
    .lex "@symbols", param_1632
.annotate 'line', 1102
    $P1634 = root_new ['parrot';'Hash']
    set $P1633, $P1634
    .lex "%exports", $P1633
.annotate 'line', 1103
    $P1636 = root_new ['parrot';'Hash']
    set $P1635, $P1636
    .lex "%source", $P1635
.annotate 'line', 1097
    set $P103, param_1630
    unless_null $P103, vivify_597
    new $P103, "Undef"
  vivify_597:
    does $I100, $P103, "hash"
    new $P104, 'Integer'
    set $P104, $I100
    isfalse $I101, $P104
    unless $I101, if_1637_end
.annotate 'line', 1098
    set $P105, param_1629
    nqp_decontainerize $P106, $P105
    set $P107, param_1630
    unless_null $P107, vivify_598
    new $P107, "Undef"
  vivify_598:
    $P108 = $P106."get_module"($P107)
    set param_1630, $P108
  if_1637_end:
.annotate 'line', 1101
    set $P103, param_1631
    unless_null $P103, vivify_599
    new $P103, "Undef"
  vivify_599:
    set $P1638, $P103
    defined $I1640, $P1638
    if $I1640, default_1639
    set $P1642, param_1632
    unless_null $P1642, vivify_600
    $P1642 = root_new ['parrot';'ResizablePMCArray']
  vivify_600:
    if $P1642, if_1641
    new $P106, "String"
    assign $P106, "DEFAULT"
    set $P104, $P106
    goto if_1641_end
  if_1641:
    new $P105, "String"
    assign $P105, "ALL"
    set $P104, $P105
  if_1641_end:
    set $P1638, $P104
  default_1639:
    set param_1631, $P1638
.annotate 'line', 1095
    set $P1643, $P1633
    unless_null $P1643, vivify_601
    $P1643 = root_new ['parrot';'Hash']
  vivify_601:
.annotate 'line', 1103
    set $P103, param_1631
    unless_null $P103, vivify_602
    new $P103, "Undef"
  vivify_602:
    set $S100, $P103
    set $P1644, param_1630
    unless_null $P1644, vivify_603
    $P1644 = root_new ['parrot';'Hash']
  vivify_603:
    set $P1645, $P1644["EXPORT"]
    unless_null $P1645, vivify_604
    $P1645 = root_new ['parrot';'Hash']
  vivify_604:
    set $P104, $P1645[$S100]
    unless_null $P104, vivify_605
    new $P104, "Undef"
  vivify_605:
    set $P1635, $P104
.annotate 'line', 1104
    set $P1647, $P1635
    unless_null $P1647, vivify_606
    $P1647 = root_new ['parrot';'Hash']
  vivify_606:
    defined $I100, $P1647
    new $P103, 'Integer'
    set $P103, $I100
    isfalse $I101, $P103
    unless $I101, if_1646_end
.annotate 'line', 1105
    set $P105, param_1631
    unless_null $P105, vivify_607
    new $P105, "Undef"
  vivify_607:
    set $S100, $P105
    iseq $I102, $S100, "ALL"
    if $I102, if_1648
    $P1649 = root_new ['parrot';'Hash']
    set $P104, $P1649
    goto if_1648_end
  if_1648:
    set $P106, param_1630
    unless_null $P106, vivify_608
    new $P106, "Undef"
  vivify_608:
    set $P104, $P106
  if_1648_end:
    set $P1635, $P104
  if_1646_end:
.annotate 'line', 1107
    set $P1651, param_1632
    unless_null $P1651, vivify_609
    $P1651 = root_new ['parrot';'ResizablePMCArray']
  vivify_609:
    if $P1651, if_1650
.annotate 'line', 1114
    set $P1661, $P1635
    unless_null $P1661, vivify_610
    $P1661 = root_new ['parrot';'Hash']
  vivify_610:
    defined $I100, $P1661
    unless $I100, for_undef_611
    iter $P103, $P1661
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1668_handler
    push_eh $P107
  loop1668_test:
    unless $P103, loop1668_done
    shift $P104, $P103
  loop1668_redo:
    .const 'Sub' $P1663 = "299_1340317678.734" 
    capture_lex $P1663
    $P1663($P104)
  loop1668_next:
    goto loop1668_test
  loop1668_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1668_next
    eq $P108, .CONTROL_LOOP_REDO, loop1668_redo
  loop1668_done:
    pop_eh 
  for_undef_611:
.annotate 'line', 1113
    goto if_1650_end
  if_1650:
.annotate 'line', 1108
    set $P1652, param_1632
    unless_null $P1652, vivify_618
    $P1652 = root_new ['parrot';'ResizablePMCArray']
  vivify_618:
    defined $I100, $P1652
    unless $I100, for_undef_619
    iter $P103, $P1652
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1660_handler
    push_eh $P107
  loop1660_test:
    unless $P103, loop1660_done
    shift $P104, $P103
  loop1660_redo:
    .const 'Sub' $P1654 = "298_1340317678.734" 
    capture_lex $P1654
    $P1654($P104)
  loop1660_next:
    goto loop1660_test
  loop1660_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1660_next
    eq $P108, .CONTROL_LOOP_REDO, loop1660_redo
  loop1660_done:
    pop_eh 
  for_undef_619:
  if_1650_end:
.annotate 'line', 1095
    set $P1669, $P1633
    unless_null $P1669, vivify_628
    $P1669 = root_new ['parrot';'Hash']
  vivify_628:
    .return ($P1669)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1662"  :anon :subid("299_1340317678.734") :outer("115_1340317678.734")
    .param pmc param_1665
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1115
    new $P105, "Undef"
    set $P1664, $P105
    .lex "$value", $P1664
    .lex "$_", param_1665
    find_lex $P106, "$_"
    unless_null $P106, vivify_612
    new $P106, "Undef"
  vivify_612:
    $P107 = $P106."value"()
    set $P1664, $P107
.annotate 'line', 1116
    set $P106, $P1664
    unless_null $P106, vivify_613
    new $P106, "Undef"
  vivify_613:
    find_lex $P107, "$_"
    unless_null $P107, vivify_614
    new $P107, "Undef"
  vivify_614:
    $P108 = $P107."key"()
    set $P109, $P1664
    unless_null $P109, vivify_615
    new $P109, "Undef"
  vivify_615:
    $P110 = "value_type"($P109)
    find_lex $P1666, "%exports"
    unless_null $P1666, vivify_616
    $P1666 = root_new ['parrot';'Hash']
    store_lex "%exports", $P1666
  vivify_616:
    set $P1667, $P1666[$P110]
    unless_null $P1667, vivify_617
    $P1667 = root_new ['parrot';'Hash']
    set $P1666[$P110], $P1667
  vivify_617:
    set $P1667[$P108], $P106
.annotate 'line', 1114
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1653"  :anon :subid("298_1340317678.734") :outer("115_1340317678.734")
    .param pmc param_1656
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1109
    new $P105, "Undef"
    set $P1655, $P105
    .lex "$value", $P1655
    .lex "$_", param_1656
    find_lex $P106, "$_"
    unless_null $P106, vivify_620
    new $P106, "Undef"
  vivify_620:
    set $S100, $P106
    find_lex $P1657, "%source"
    unless_null $P1657, vivify_621
    $P1657 = root_new ['parrot';'Hash']
  vivify_621:
    set $P107, $P1657[$S100]
    unless_null $P107, vivify_622
    new $P107, "Undef"
  vivify_622:
    set $P1655, $P107
.annotate 'line', 1110
    set $P106, $P1655
    unless_null $P106, vivify_623
    new $P106, "Undef"
  vivify_623:
    find_lex $P107, "$_"
    unless_null $P107, vivify_624
    new $P107, "Undef"
  vivify_624:
    set $P108, $P1655
    unless_null $P108, vivify_625
    new $P108, "Undef"
  vivify_625:
    $P109 = "value_type"($P108)
    find_lex $P1658, "%exports"
    unless_null $P1658, vivify_626
    $P1658 = root_new ['parrot';'Hash']
    store_lex "%exports", $P1658
  vivify_626:
    set $P1659, $P1658[$P109]
    unless_null $P1659, vivify_627
    $P1659 = root_new ['parrot';'Hash']
    set $P1658[$P109], $P1659
  vivify_627:
    set $P1659[$P107], $P106
.annotate 'line', 1108
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "get_module" :anon :subid("116_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1671
    .param pmc param_1672
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1122
    .lex "self", param_1671
    .lex "$name", param_1672
.annotate 'line', 1123
    $P1674 = root_new ['parrot';'ResizablePMCArray']
    set $P1673, $P1674
    .lex "@name", $P1673
    set $P102, param_1671
    nqp_decontainerize $P103, $P102
    set $P104, param_1672
    unless_null $P104, vivify_629
    new $P104, "Undef"
  vivify_629:
    $P105 = $P103."parse_name"($P104)
    set $P1673, $P105
.annotate 'line', 1124
    set $P1675, $P1673
    unless_null $P1675, vivify_630
    $P1675 = root_new ['parrot';'ResizablePMCArray']
  vivify_630:
    set $P102, param_1671
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P105, $P103, $P104, "$!language", 6
    unless_null $P105, vivify_631
    new $P105, "Undef"
  vivify_631:
    set $S100, $P105
    downcase $S101, $S100
    $P1675."unshift"($S101)
.annotate 'line', 1125
    set $P1676, $P1673
    unless_null $P1676, vivify_632
    $P1676 = root_new ['parrot';'ResizablePMCArray']
  vivify_632:
    get_root_namespace $P102, $P1676
.annotate 'line', 1122
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "language" :anon :subid("117_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1678
    .param pmc param_1679 :optional
    .param int has_param_1679 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1128
    .lex "self", param_1678
    if has_param_1679, optparam_633
    new $P102, "Undef"
    set param_1679, $P102
  optparam_633:
    .lex "$name", param_1679
.annotate 'line', 1129
    set $P103, param_1679
    unless_null $P103, vivify_634
    new $P103, "Undef"
  vivify_634:
    unless $P103, if_1680_end
.annotate 'line', 1130
    set $P104, param_1679
    unless_null $P104, vivify_635
    new $P104, "Undef"
  vivify_635:
    set $P105, param_1678
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P106, $P107, "$!language", 6, $P104
.annotate 'line', 1131
    set $P104, param_1679
    unless_null $P104, vivify_636
    new $P104, "Undef"
  vivify_636:
    set $S100, $P104
    set $P105, param_1678
    nqp_decontainerize $P106, $P105
    compreg $S100, $P106
  if_1680_end:
.annotate 'line', 1128
    set $P103, param_1678
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P106, $P104, $P105, "$!language", 6
    unless_null $P106, vivify_637
    new $P106, "Undef"
  vivify_637:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "compiler" :anon :subid("118_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1682
    .param pmc param_1683
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1136
    .lex "self", param_1682
    .lex "$name", param_1683
.annotate 'line', 1137
    set $P102, param_1683
    unless_null $P102, vivify_638
    new $P102, "Undef"
  vivify_638:
    set $S100, $P102
    compreg $P103, $S100
.annotate 'line', 1136
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "config" :anon :subid("119_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1685
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1140
    .lex "self", param_1685
    set $P102, param_1685
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P1686, $P103, $P104, "%!config", 7
    unless_null $P1686, vivify_639
    $P1686 = root_new ['parrot';'Hash']
  vivify_639:
    .return ($P1686)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "load_module" :anon :subid("120_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1688
    .param pmc param_1689
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1142
    .const 'Sub' $P1693 = "300_1340317678.734" 
    capture_lex $P1693
    .lex "self", param_1688
    .lex "$name", param_1689
.annotate 'line', 1143
    new $P102, "Undef"
    set $P1690, $P102
    .lex "$base", $P1690
.annotate 'line', 1144
    new $P103, "Undef"
    set $P1691, $P103
    .lex "$loaded", $P1691
.annotate 'line', 1143
    set $P104, param_1688
    nqp_decontainerize $P105, $P104
    set $P106, param_1689
    unless_null $P106, vivify_640
    new $P106, "Undef"
  vivify_640:
    $P107 = $P105."parse_name"($P106)
    join $S100, "/", $P107
    new $P108, 'String'
    set $P108, $S100
    set $P1690, $P108
.annotate 'line', 1144
    new $P104, "Float"
    assign $P104, 0
    set $P1691, $P104
.annotate 'line', 1145
    .const 'Sub' $P1693 = "300_1340317678.734" 
    capture_lex $P1693
    $P1693()
.annotate 'line', 1146
    set $P104, $P1691
    unless_null $P104, vivify_642
    new $P104, "Undef"
  vivify_642:
    if $P104, unless_1701_end
    set $P105, $P1690
    unless_null $P105, vivify_643
    new $P105, "Undef"
  vivify_643:
    concat $P106, $P105, ".pir"
    set $S100, $P106
    load_bytecode $S100
    new $P105, "Float"
    assign $P105, 1
    set $P1691, $P105
  unless_1701_end:
.annotate 'line', 1147
    set $P104, param_1688
    nqp_decontainerize $P105, $P104
    set $P106, param_1689
    unless_null $P106, vivify_644
    new $P106, "Undef"
  vivify_644:
    $P107 = $P105."get_module"($P106)
.annotate 'line', 1142
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1692"  :anon :subid("300_1340317678.734") :outer("120_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1145
    new $P1696, 'ExceptionHandler'
    set_label $P1696, control_1695
    $P1696."handle_types_except"(.CONTROL_ALL)
    push_eh $P1696
    find_lex $P104, "$base"
    unless_null $P104, vivify_641
    new $P104, "Undef"
  vivify_641:
    concat $P105, $P104, ".pbc"
    set $S100, $P105
    load_bytecode $S100
    new $P104, "Float"
    assign $P104, 1
    store_lex "$loaded", $P104
    pop_eh 
    goto skip_handler_1694
  control_1695:
    peek_exception $P1697
    .local pmc exception 
    .get_results (exception) 
    new $P1699, 'Integer'
    set $P1699, 1
    set exception["handled"], $P1699
    set $I1700, exception["handled"]
    eq $I1700, 1, handled_1698
    rethrow exception
  handled_1698:
    finalize $P1697
    .return (exception)
  skip_handler_1694:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "autoprint" :anon :subid("121_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1703
    .param pmc param_1704
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1150
    .lex "self", param_1703
    .lex "$value", param_1704
.annotate 'line', 1152
    getinterp $P103
    $P104 = $P103."stdout_handle"()
    $N100 = $P104."tell"()
    find_dynamic_lex $P107, "$*AUTOPRINTPOS"
    unless_null $P107, vivify_645
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$AUTOPRINTPOS"]
    unless_null $P107, vivify_646
    die "Contextual $*AUTOPRINTPOS not found"
  vivify_646:
  vivify_645:
    set $N101, $P107
    isgt $I100, $N100, $N101
    unless $I100, unless_1705
    new $P102, 'Integer'
    set $P102, $I100
    goto unless_1705_end
  unless_1705:
.annotate 'line', 1151
    set $P108, param_1704
    unless_null $P108, vivify_647
    new $P108, "Undef"
  vivify_647:
    set $S100, $P108
    say $S100
  unless_1705_end:
.annotate 'line', 1150
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "interactive" :anon :subid("122_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1707
    .param pmc param_1708 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1155
    .const 'Sub' $P1728 = "302_1340317678.734" 
    capture_lex $P1728
    .const 'Sub' $P1710 = "301_1340317678.734" 
    capture_lex $P1710
    .lex "self", param_1707
    .lex "%adverbs", param_1708
.annotate 'line', 1161
    .const 'Sub' $P1710 = "301_1340317678.734" 
    newclosure $P1715, $P1710
    set $P1709, $P1715
    .lex "blank_context", $P1709
.annotate 'line', 1170
    new $P102, "Undef"
    set $P1716, $P102
    .lex "$interactive_ctx", $P1716
.annotate 'line', 1171
    $P1718 = root_new ['parrot';'Hash']
    set $P1717, $P1718
    .lex "%interactive_pad", $P1717
.annotate 'line', 1174
    new $P104, "Undef"
    set $P1719, $P104
    .lex "$target", $P1719
.annotate 'line', 1178
    new $P105, "Undef"
    set $P1720, $P105
    .lex "$stdin", $P1720
.annotate 'line', 1179
    new $P106, "Undef"
    set $P1721, $P106
    .lex "$encoding", $P1721
.annotate 'line', 1184
    new $P107, "Undef"
    set $P1722, $P107
    .lex "$save_ctx", $P1722
.annotate 'line', 1155
    set $P108, $P1709
.annotate 'line', 1169
    set $P108, $P1709
    null $P109
    $P108."set_outer"($P109)
.annotate 'line', 1170
    $P108 = "blank_context"()
    set $P1716, $P108
.annotate 'line', 1172
    set $P108, $P1716
    unless_null $P108, vivify_652
    new $P108, "Undef"
  vivify_652:
    getattribute $P109, $P108, "lex_pad"
    set $P1717, $P109
.annotate 'line', 1174
    set $P1723, param_1708
    unless_null $P1723, vivify_653
    $P1723 = root_new ['parrot';'Hash']
  vivify_653:
    set $P108, $P1723["target"]
    unless_null $P108, vivify_654
    new $P108, "Undef"
  vivify_654:
    set $S100, $P108
    downcase $S101, $S100
    new $P109, 'String'
    set $P109, $S101
    set $P1719, $P109
.annotate 'line', 1176
    getinterp $P108
    $P109 = $P108."stderr_handle"()
    set $P110, param_1707
    nqp_decontainerize $P111, $P110
    $P112 = $P111."interactive_banner"()
    print $P109, $P112
.annotate 'line', 1178
    getinterp $P108
    $P109 = $P108."stdin_handle"()
    set $P1720, $P109
.annotate 'line', 1179
    set $P1724, param_1708
    unless_null $P1724, vivify_655
    $P1724 = root_new ['parrot';'Hash']
  vivify_655:
    set $P108, $P1724["encoding"]
    unless_null $P108, vivify_656
    new $P108, "Undef"
  vivify_656:
    set $S100, $P108
    new $P109, 'String'
    set $P109, $S100
    set $P1721, $P109
.annotate 'line', 1180
    set $P109, $P1721
    unless_null $P109, vivify_657
    new $P109, "Undef"
  vivify_657:
    if $P109, if_1726
    set $P108, $P109
    goto if_1726_end
  if_1726:
    set $P110, $P1721
    unless_null $P110, vivify_658
    new $P110, "Undef"
  vivify_658:
    set $S100, $P110
    isne $I100, $S100, "fixed_8"
    new $P108, 'Integer'
    set $P108, $I100
  if_1726_end:
    unless $P108, if_1725_end
.annotate 'line', 1181
    set $P111, $P1720
    unless_null $P111, vivify_659
    new $P111, "Undef"
  vivify_659:
    set $P112, $P1721
    unless_null $P112, vivify_660
    new $P112, "Undef"
  vivify_660:
    $P111."encoding"($P112)
  if_1725_end:
.annotate 'line', 1155
    set $P108, $P1722
    unless_null $P108, vivify_661
    new $P108, "Undef"
  vivify_661:
.annotate 'line', 1185
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1774_handler
    push_eh $P115
  loop1774_test:
    new $P108, "Float"
    assign $P108, 1
    unless $P108, loop1774_done
  loop1774_redo:
    .const 'Sub' $P1728 = "302_1340317678.734" 
    capture_lex $P1728
    $P1728()
  loop1774_next:
    goto loop1774_test
  loop1774_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1774_next
    eq $P116, .CONTROL_LOOP_REDO, loop1774_redo
  loop1774_done:
    pop_eh 
.annotate 'line', 1155
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "blank_context"  :subid("301_1340317678.734") :outer("122_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1163
    $P1712 = root_new ['parrot';'Hash']
    set $P1711, $P1712
    .lex "%blank_pad", $P1711
.annotate 'line', 1161
    set $P1713, $P1711
    unless_null $P1713, vivify_648
    $P1713 = root_new ['parrot';'Hash']
  vivify_648:
.annotate 'line', 1165
    getinterp $P102
    set $P103, $P102["context"]
    unless_null $P103, vivify_649
    new $P103, "Undef"
  vivify_649:
    getattribute $P104, $P103, "lex_pad"
    set $P1714, $P1711
    unless_null $P1714, vivify_650
    $P1714 = root_new ['parrot';'Hash']
  vivify_650:
    copy $P104, $P1714
.annotate 'line', 1167
    getinterp $P102
    set $P103, $P102["context"]
    unless_null $P103, vivify_651
    new $P103, "Undef"
  vivify_651:
.annotate 'line', 1161
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1727"  :anon :subid("302_1340317678.734") :outer("122_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1185
    .const 'Sub' $P1742 = "303_1340317678.734" 
    capture_lex $P1742
.annotate 'line', 1188
    new $P109, "Undef"
    set $P1729, $P109
    .lex "$prompt", $P1729
.annotate 'line', 1189
    new $P110, "Undef"
    set $P1730, $P110
    .lex "$code", $P1730
.annotate 'line', 1198
    new $P111, "Undef"
    set $P1731, $P111
    .lex "$*AUTOPRINTPOS", $P1731
.annotate 'line', 1199
    new $P112, "Undef"
    set $P1732, $P112
    .lex "$*CTXSAVE", $P1732
.annotate 'line', 1200
    new $P113, "Undef"
    set $P1733, $P113
    .lex "$*MAIN_CTX", $P1733
.annotate 'line', 1186
    find_lex $P114, "$stdin"
    unless_null $P114, vivify_662
    new $P114, "Undef"
  vivify_662:
    if $P114, unless_1734_end
    die 0, .CONTROL_LOOP_LAST
  unless_1734_end:
.annotate 'line', 1188
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    $P116 = $P115."interactive_prompt"()
    set $P1735, $P116
    defined $I1737, $P1735
    if $I1737, default_1736
    new $P117, "String"
    assign $P117, "> "
    set $P1735, $P117
  default_1736:
    set $P1729, $P1735
.annotate 'line', 1189
    find_lex $P114, "$stdin"
    unless_null $P114, vivify_663
    new $P114, "Undef"
  vivify_663:
    set $P115, $P1729
    unless_null $P115, vivify_664
    new $P115, "Undef"
  vivify_664:
    set $S100, $P115
    $P116 = $P114."readline_interactive"($S100)
    set $P1730, $P116
.annotate 'line', 1191
    set $P114, $P1730
    unless_null $P114, vivify_665
    new $P114, "Undef"
  vivify_665:
    isnull $I100, $P114
    unless $I100, if_1738_end
    die 0, .CONTROL_LOOP_LAST
  if_1738_end:
.annotate 'line', 1192
    set $P114, $P1730
    unless_null $P114, vivify_666
    new $P114, "Undef"
  vivify_666:
    defined $I100, $P114
    if $I100, unless_1739_end
.annotate 'line', 1193
    print "\n"
.annotate 'line', 1194
    die 0, .CONTROL_LOOP_LAST
  unless_1739_end:
.annotate 'line', 1198
    getinterp $P114
    $P115 = $P114."stdout_handle"()
    $P116 = $P115."tell"()
    set $P1731, $P116
.annotate 'line', 1199
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    set $P1732, $P115
.annotate 'line', 1185
    set $P116, $P1733
    unless_null $P116, vivify_667
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$MAIN_CTX"]
    unless_null $P116, vivify_668
    die "Contextual $*MAIN_CTX not found"
  vivify_668:
  vivify_667:
.annotate 'line', 1202
    set $P115, $P1730
    unless_null $P115, vivify_669
    new $P115, "Undef"
  vivify_669:
    if $P115, if_1740
    set $P114, $P115
    goto if_1740_end
  if_1740:
    .const 'Sub' $P1742 = "303_1340317678.734" 
    capture_lex $P1742
    $P118 = $P1742()
    set $P114, $P118
  if_1740_end:
.annotate 'line', 1185
    .return ($P114)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1741"  :anon :subid("303_1340317678.734") :outer("302_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1202
    .const 'Sub' $P1766 = "306_1340317678.734" 
    capture_lex $P1766
    .const 'Sub' $P1745 = "304_1340317678.734" 
    capture_lex $P1745
.annotate 'line', 1204
    new $P116, "Undef"
    set $P1743, $P116
    .lex "$output", $P1743
.annotate 'line', 1203
    find_lex $P117, "$code"
    unless_null $P117, vivify_670
    new $P117, "Undef"
  vivify_670:
    concat $P118, $P117, "\n"
    store_lex "$code", $P118
.annotate 'line', 1202
    set $P117, $P1743
    unless_null $P117, vivify_671
    new $P117, "Undef"
  vivify_671:
.annotate 'line', 1205
    .const 'Sub' $P1745 = "304_1340317678.734" 
    capture_lex $P1745
    $P1745()
.annotate 'line', 1212
    find_dynamic_lex $P119, "$*MAIN_CTX"
    unless_null $P119, vivify_676
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$MAIN_CTX"]
    unless_null $P119, vivify_677
    die "Contextual $*MAIN_CTX not found"
  vivify_677:
  vivify_676:
    defined $I100, $P119
    unless $I100, if_1764_end
.annotate 'line', 1213
    find_dynamic_lex $P123, "$*MAIN_CTX"
    unless_null $P123, vivify_678
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$MAIN_CTX"]
    unless_null $P123, vivify_679
    die "Contextual $*MAIN_CTX not found"
  vivify_679:
  vivify_678:
    $P124 = $P123."lexpad_full"()
    defined $I101, $P124
    unless $I101, for_undef_680
    iter $P120, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop1769_handler
    push_eh $P126
  loop1769_test:
    unless $P120, loop1769_done
    shift $P125, $P120
  loop1769_redo:
    .const 'Sub' $P1766 = "306_1340317678.734" 
    capture_lex $P1766
    $P1766($P125)
  loop1769_next:
    goto loop1769_test
  loop1769_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P128, exception, 'type'
    eq $P128, .CONTROL_LOOP_NEXT, loop1769_next
    eq $P128, .CONTROL_LOOP_REDO, loop1769_redo
  loop1769_done:
    pop_eh 
  for_undef_680:
.annotate 'line', 1216
    find_lex $P120, "$interactive_ctx"
    unless_null $P120, vivify_684
    new $P120, "Undef"
  vivify_684:
    store_lex "$save_ctx", $P120
  if_1764_end:
.annotate 'line', 1218
    set $P117, $P1743
    unless_null $P117, vivify_685
    new $P117, "Undef"
  vivify_685:
    isnull $I100, $P117
    unless $I100, if_1770_end
    die 0, .CONTROL_LOOP_NEXT
  if_1770_end:
.annotate 'line', 1220
    find_lex $P118, "$target"
    unless_null $P118, vivify_686
    new $P118, "Undef"
  vivify_686:
    isfalse $I100, $P118
    if $I100, if_1771
.annotate 'line', 1222
    find_lex $P120, "$target"
    unless_null $P120, vivify_687
    new $P120, "Undef"
  vivify_687:
    set $S100, $P120
    iseq $I101, $S100, "pir"
    if $I101, if_1772
.annotate 'line', 1225
    find_lex $P121, "self"
    nqp_decontainerize $P123, $P121
    set $P124, $P1743
    unless_null $P124, vivify_688
    new $P124, "Undef"
  vivify_688:
    find_lex $P125, "$target"
    unless_null $P125, vivify_689
    new $P125, "Undef"
  vivify_689:
    find_lex $P1773, "%adverbs"
    unless_null $P1773, vivify_690
    $P1773 = root_new ['parrot';'Hash']
  vivify_690:
    $P126 = $P123."dumper"($P124, $P125, $P1773 :flat)
.annotate 'line', 1224
    set $P119, $P126
.annotate 'line', 1222
    goto if_1772_end
  if_1772:
.annotate 'line', 1223
    set $P121, $P1743
    unless_null $P121, vivify_691
    new $P121, "Undef"
  vivify_691:
    say $P121
  if_1772_end:
.annotate 'line', 1222
    set $P117, $P119
.annotate 'line', 1220
    goto if_1771_end
  if_1771:
.annotate 'line', 1221
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    set $P121, $P1743
    unless_null $P121, vivify_692
    new $P121, "Undef"
  vivify_692:
    $P122 = $P120."autoprint"($P121)
.annotate 'line', 1220
    set $P117, $P122
  if_1771_end:
.annotate 'line', 1202
    .return ($P117)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1744"  :anon :subid("304_1340317678.734") :outer("303_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1205
    .const 'Sub' $P1753 = "305_1340317678.734" 
    capture_lex $P1753
    new $P1749, 'ExceptionHandler'
    set_label $P1749, control_1748
    $P1749."handle_types_except"(.CONTROL_ALL)
    push_eh $P1749
.annotate 'line', 1206
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$code"
    unless_null $P119, vivify_672
    new $P119, "Undef"
  vivify_672:
    find_lex $P120, "$save_ctx"
    unless_null $P120, vivify_673
    new $P120, "Undef"
  vivify_673:
    find_lex $P1746, "%adverbs"
    unless_null $P1746, vivify_674
    $P1746 = root_new ['parrot';'Hash']
  vivify_674:
    $P121 = $P118."eval"($P119, $P1746 :flat, $P120 :named("outer_ctx"))
    store_lex "$output", $P121
.annotate 'line', 1205
    pop_eh 
    goto skip_handler_1747
  control_1748:
    peek_exception $P1750
.annotate 'line', 1207
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1753 = "305_1340317678.734" 
    newclosure $P1761, $P1753
    $P1761(exception)
    new $P1762, 'Integer'
    set $P1762, 1
    set exception["handled"], $P1762
    set $I1763, exception["handled"]
    eq $I1763, 1, handled_1751
    rethrow exception
  handled_1751:
    finalize $P1750
    .return (exception)
  skip_handler_1747:
.annotate 'line', 1205
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1752"  :anon :subid("305_1340317678.734") :outer("304_1340317678.734")
    .param pmc param_1754
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1207
    .lex "$_", param_1754
    find_lex $P1755, "$_"
    set $P1756, $P1755
    .lex "$!", $P1756
.annotate 'line', 1208
    find_lex $P1757, "$!"
    unless_null $P1757, vivify_675
    new $P1757, "Undef"
  vivify_675:
    set $S1758, $P1757
    new $P1759, 'String'
    set $P1759, $S1758
    concat $P1760, $P1759, "\n"
    print $P1760
.annotate 'line', 1209
    die 0, .CONTROL_LOOP_NEXT
.annotate 'line', 1207
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1765"  :anon :subid("306_1340317678.734") :outer("303_1340317678.734")
    .param pmc param_1767
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1213
    .lex "$_", param_1767
.annotate 'line', 1214
    find_lex $P126, "$_"
    unless_null $P126, vivify_681
    new $P126, "Undef"
  vivify_681:
    $P127 = $P126."value"()
    find_lex $P128, "$_"
    unless_null $P128, vivify_682
    new $P128, "Undef"
  vivify_682:
    $P129 = $P128."key"()
    find_lex $P1768, "%interactive_pad"
    unless_null $P1768, vivify_683
    $P1768 = root_new ['parrot';'Hash']
    store_lex "%interactive_pad", $P1768
  vivify_683:
    set $P1768[$P129], $P127
.annotate 'line', 1213
    .return ($P127)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "eval" :anon :subid("123_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1776
    .param pmc param_1777
    .param pmc param_1778 :slurpy
    .param pmc param_1779 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1231
    .const 'Sub' $P1789 = "307_1340317678.734" 
    capture_lex $P1789
    .lex "self", param_1776
    .lex "$code", param_1777
    .lex "@args", param_1778
    .lex "%adverbs", param_1779
.annotate 'line', 1232
    new $P102, "Undef"
    set $P1780, $P102
    .lex "$output", $P1780
.annotate 'line', 1234
    new $P103, "Undef"
    set $P1781, $P103
    .lex "$old_runcore", $P1781
.annotate 'line', 1231
    set $P104, $P1780
    unless_null $P104, vivify_693
    new $P104, "Undef"
  vivify_693:
.annotate 'line', 1234
    interpinfo $S100, .INTERPINFO_CURRENT_RUNCORE
    new $P104, 'String'
    set $P104, $S100
    set $P1781, $P104
.annotate 'line', 1235
    set $P1783, param_1779
    unless_null $P1783, vivify_694
    $P1783 = root_new ['parrot';'Hash']
  vivify_694:
    set $P104, $P1783["profile-compile"]
    unless_null $P104, vivify_695
    new $P104, "Undef"
  vivify_695:
    unless $P104, if_1782_end
.annotate 'line', 1236
    set_runcore "subprof_hll"
  if_1782_end:
.annotate 'line', 1238
    set $P104, param_1776
    nqp_decontainerize $P105, $P104
    set $P106, param_1777
    unless_null $P106, vivify_696
    new $P106, "Undef"
  vivify_696:
    set $P1784, param_1779
    unless_null $P1784, vivify_697
    $P1784 = root_new ['parrot';'Hash']
  vivify_697:
    $P107 = $P105."compile"($P106, $P1784 :flat)
    set $P1780, $P107
.annotate 'line', 1240
    set $P105, $P1780
    unless_null $P105, vivify_698
    new $P105, "Undef"
  vivify_698:
    isa $I100, $P105, "String"
    new $P106, 'Integer'
    set $P106, $I100
    isfalse $I101, $P106
    if $I101, if_1786
    new $P104, 'Integer'
    set $P104, $I101
    goto if_1786_end
  if_1786:
.annotate 'line', 1241
    set $P1787, param_1779
    unless_null $P1787, vivify_699
    $P1787 = root_new ['parrot';'Hash']
  vivify_699:
    set $P107, $P1787["target"]
    unless_null $P107, vivify_700
    new $P107, "Undef"
  vivify_700:
    set $S100, $P107
    iseq $I102, $S100, ""
    new $P104, 'Integer'
    set $P104, $I102
  if_1786_end:
    unless $P104, if_1785_end
    .const 'Sub' $P1789 = "307_1340317678.734" 
    capture_lex $P1789
    $P1789()
  if_1785_end:
.annotate 'line', 1254
    set $P104, $P1781
    unless_null $P104, vivify_713
    new $P104, "Undef"
  vivify_713:
    set $S100, $P104
    set_runcore $S100
.annotate 'line', 1231
    set $P104, $P1780
    unless_null $P104, vivify_714
    new $P104, "Undef"
  vivify_714:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1788"  :anon :subid("307_1340317678.734") :outer("123_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1242
    new $P108, "Undef"
    set $P1790, $P108
    .lex "$outer_ctx", $P1790
    find_lex $P1791, "%adverbs"
    unless_null $P1791, vivify_701
    $P1791 = root_new ['parrot';'Hash']
  vivify_701:
    set $P109, $P1791["outer_ctx"]
    unless_null $P109, vivify_702
    new $P109, "Undef"
  vivify_702:
    set $P1790, $P109
.annotate 'line', 1243
    set $P109, $P1790
    unless_null $P109, vivify_703
    new $P109, "Undef"
  vivify_703:
    defined $I103, $P109
    unless $I103, if_1792_end
.annotate 'line', 1244
    find_lex $P1793, "$output"
    unless_null $P1793, vivify_704
    $P1793 = root_new ['parrot';'ResizablePMCArray']
  vivify_704:
    set $P110, $P1793[0]
    unless_null $P110, vivify_705
    new $P110, "Undef"
  vivify_705:
    set $P111, $P1790
    unless_null $P111, vivify_706
    new $P111, "Undef"
  vivify_706:
    $P110."set_outer_ctx"($P111)
  if_1792_end:
.annotate 'line', 1247
    find_lex $P1795, "%adverbs"
    unless_null $P1795, vivify_707
    $P1795 = root_new ['parrot';'Hash']
  vivify_707:
    set $P109, $P1795["profile"]
    unless_null $P109, vivify_708
    new $P109, "Undef"
  vivify_708:
    unless $P109, if_1794_end
.annotate 'line', 1248
    set_runcore "subprof_hll"
  if_1794_end:
.annotate 'line', 1250
    find_lex $P1796, "%adverbs"
    unless_null $P1796, vivify_709
    $P1796 = root_new ['parrot';'Hash']
  vivify_709:
    set $P109, $P1796["trace"]
    unless_null $P109, vivify_710
    new $P109, "Undef"
  vivify_710:
    set $I103, $P109
    trace $I103
.annotate 'line', 1251
    find_lex $P109, "$output"
    unless_null $P109, vivify_711
    new $P109, "Undef"
  vivify_711:
    find_lex $P1797, "@args"
    unless_null $P1797, vivify_712
    $P1797 = root_new ['parrot';'ResizablePMCArray']
  vivify_712:
    $P110 = $P109($P1797 :flat)
    store_lex "$output", $P110
.annotate 'line', 1252
    trace 0
.annotate 'line', 1241
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "ctxsave" :anon :subid("124_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1799
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1259
    .lex "self", param_1799
.annotate 'line', 1261

                $P0 = getinterp
                $P1800 = $P0['context';1]
            
    store_dynamic_lex "$*MAIN_CTX", $P1800
.annotate 'line', 1265
    new $P102, "Float"
    assign $P102, 0
    store_dynamic_lex "$*CTXSAVE", $P102
.annotate 'line', 1259
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "panic" :anon :subid("125_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1802
    .param pmc param_1803 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1268
    .lex "self", param_1802
    .lex "@args", param_1803
.annotate 'line', 1269
    set $P1804, param_1803
    unless_null $P1804, vivify_715
    $P1804 = root_new ['parrot';'ResizablePMCArray']
  vivify_715:
    join $S100, "", $P1804
    new $P102, 'String'
    set $P102, $S100
    die $P102
.annotate 'line', 1268
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "stages" :anon :subid("126_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1806
    .param pmc param_1807 :optional
    .param int has_param_1807 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1272
    .lex "self", param_1806
    if has_param_1807, optparam_716
    $P1808 = root_new ['parrot';'ResizablePMCArray']
    set param_1807, $P1808
  optparam_716:
    .lex "@value", param_1807
.annotate 'line', 1273
    set $P1810, param_1807
    unless_null $P1810, vivify_717
    $P1810 = root_new ['parrot';'ResizablePMCArray']
  vivify_717:
    set $N100, $P1810
    unless $N100, if_1809_end
.annotate 'line', 1274
    set $P1811, param_1807
    unless_null $P1811, vivify_718
    $P1811 = root_new ['parrot';'ResizablePMCArray']
  vivify_718:
    set $P102, param_1806
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P103, $P104, "@!stages", 0, $P1811
  if_1809_end:
.annotate 'line', 1272
    set $P102, param_1806
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P1812, $P103, $P104, "@!stages", 0
    unless_null $P1812, vivify_719
    $P1812 = root_new ['parrot';'ResizablePMCArray']
  vivify_719:
    .return ($P1812)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "parsegrammar" :anon :subid("127_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1814
    .param pmc param_1815 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1279
    .lex "self", param_1814
    .lex "@value", param_1815
.annotate 'line', 1280
    set $P1817, param_1815
    unless_null $P1817, vivify_720
    $P1817 = root_new ['parrot';'ResizablePMCArray']
  vivify_720:
    set $N100, $P1817
    unless $N100, if_1816_end
.annotate 'line', 1281
    set $P1818, param_1815
    unless_null $P1818, vivify_721
    $P1818 = root_new ['parrot';'ResizablePMCArray']
  vivify_721:
    set $P102, $P1818[0]
    unless_null $P102, vivify_722
    new $P102, "Undef"
  vivify_722:
    set $P103, param_1814
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P104, $P105, "$!parsegrammar", 1, $P102
  if_1816_end:
.annotate 'line', 1279
    set $P102, param_1814
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P105, $P103, $P104, "$!parsegrammar", 1
    unless_null $P105, vivify_723
    new $P105, "Undef"
  vivify_723:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "parseactions" :anon :subid("128_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1820
    .param pmc param_1821 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1286
    .lex "self", param_1820
    .lex "@value", param_1821
.annotate 'line', 1287
    set $P1823, param_1821
    unless_null $P1823, vivify_724
    $P1823 = root_new ['parrot';'ResizablePMCArray']
  vivify_724:
    set $N100, $P1823
    unless $N100, if_1822_end
.annotate 'line', 1288
    set $P1824, param_1821
    unless_null $P1824, vivify_725
    $P1824 = root_new ['parrot';'ResizablePMCArray']
  vivify_725:
    set $P102, $P1824[0]
    unless_null $P102, vivify_726
    new $P102, "Undef"
  vivify_726:
    set $P103, param_1820
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P104, $P105, "$!parseactions", 2, $P102
  if_1822_end:
.annotate 'line', 1286
    set $P102, param_1820
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P105, $P103, $P104, "$!parseactions", 2
    unless_null $P105, vivify_727
    new $P105, "Undef"
  vivify_727:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "interactive_banner" :anon :subid("129_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1826
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1293
    .lex "self", param_1826
    .return ("")
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "interactive_prompt" :anon :subid("130_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1828
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1295
    .lex "self", param_1828
    .return ("> ")
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "compiler_progname" :anon :subid("131_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1830
    .param pmc param_1831 :optional
    .param int has_param_1831 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1297
    .lex "self", param_1830
    if has_param_1831, optparam_728
    new $P102, "Undef"
    set param_1831, $P102
  optparam_728:
    .lex "$value", param_1831
.annotate 'line', 1298
    set $P103, param_1831
    unless_null $P103, vivify_729
    new $P103, "Undef"
  vivify_729:
    defined $I100, $P103
    unless $I100, if_1832_end
.annotate 'line', 1299
    set $P104, param_1831
    unless_null $P104, vivify_730
    new $P104, "Undef"
  vivify_730:
    set $P105, param_1830
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P106, $P107, "$!compiler_progname", 5, $P104
  if_1832_end:
.annotate 'line', 1297
    set $P103, param_1830
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P106, $P104, $P105, "$!compiler_progname", 5
    unless_null $P106, vivify_731
    new $P106, "Undef"
  vivify_731:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "commandline_options" :anon :subid("132_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1834
    .param pmc param_1835 :optional
    .param int has_param_1835 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1305
    .lex "self", param_1834
    if has_param_1835, optparam_732
    $P1836 = root_new ['parrot';'ResizablePMCArray']
    set param_1835, $P1836
  optparam_732:
    .lex "@value", param_1835
.annotate 'line', 1306
    set $P1838, param_1835
    unless_null $P1838, vivify_733
    $P1838 = root_new ['parrot';'ResizablePMCArray']
  vivify_733:
    set $N100, $P1838
    unless $N100, if_1837_end
.annotate 'line', 1307
    set $P1839, param_1835
    unless_null $P1839, vivify_734
    $P1839 = root_new ['parrot';'ResizablePMCArray']
  vivify_734:
    set $P102, param_1834
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P103, $P104, "@!cmdoptions", 3, $P1839
  if_1837_end:
.annotate 'line', 1305
    set $P102, param_1834
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P1840, $P103, $P104, "@!cmdoptions", 3
    unless_null $P1840, vivify_735
    $P1840 = root_new ['parrot';'ResizablePMCArray']
  vivify_735:
    .return ($P1840)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "command_line" :anon :subid("133_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1842
    .param pmc param_1843
    .param pmc param_1844 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1312
    .lex "self", param_1842
    .lex "@args", param_1843
    .lex "%adverbs", param_1844
.annotate 'line', 1325
    new $P102, "Undef"
    set $P1845, $P102
    .lex "$program-name", $P1845
.annotate 'line', 1326
    new $P103, "Undef"
    set $P1846, $P103
    .lex "$res", $P1846
.annotate 'line', 1327
    $P1848 = root_new ['parrot';'Hash']
    set $P1847, $P1848
    .lex "%opts", $P1847
.annotate 'line', 1328
    $P1850 = root_new ['parrot';'ResizablePMCArray']
    set $P1849, $P1850
    .lex "@a", $P1849
.annotate 'line', 1321
    set $P1852, param_1843
    unless_null $P1852, vivify_736
    $P1852 = root_new ['parrot';'ResizablePMCArray']
  vivify_736:
    set $P104, $P1852[2]
    unless_null $P104, vivify_737
    new $P104, "Undef"
  vivify_737:
    set $S100, $P104
    index $I100, $S100, "@INC"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    unless $I101, if_1851_end
.annotate 'line', 1322
    exit 0
  if_1851_end:
.annotate 'line', 1325
    set $P1853, param_1843
    unless_null $P1853, vivify_738
    $P1853 = root_new ['parrot';'ResizablePMCArray']
  vivify_738:
    set $P104, $P1853[0]
    unless_null $P104, vivify_739
    new $P104, "Undef"
  vivify_739:
    set $P1845, $P104
.annotate 'line', 1326
    set $P104, param_1842
    nqp_decontainerize $P105, $P104
    set $P1854, param_1843
    unless_null $P1854, vivify_740
    $P1854 = root_new ['parrot';'ResizablePMCArray']
  vivify_740:
    $P106 = $P105."process_args"($P1854)
    set $P1846, $P106
.annotate 'line', 1327
    set $P104, $P1846
    unless_null $P104, vivify_741
    new $P104, "Undef"
  vivify_741:
    $P105 = $P104."options"()
    set $P1847, $P105
.annotate 'line', 1328
    set $P104, $P1846
    unless_null $P104, vivify_742
    new $P104, "Undef"
  vivify_742:
    $P105 = $P104."arguments"()
    set $P1849, $P105
.annotate 'line', 1330
    set $P1855, param_1844
    unless_null $P1855, vivify_743
    $P1855 = root_new ['parrot';'Hash']
  vivify_743:
    set $P1856, $P1847
    unless_null $P1856, vivify_744
    $P1856 = root_new ['parrot';'Hash']
  vivify_744:
    $P1855."update"($P1856)
.annotate 'line', 1331
    set $P1859, param_1844
    unless_null $P1859, vivify_745
    $P1859 = root_new ['parrot';'Hash']
  vivify_745:
    set $P105, $P1859["help"]
    unless_null $P105, vivify_746
    new $P105, "Undef"
  vivify_746:
    unless $P105, unless_1858
    set $P104, $P105
    goto unless_1858_end
  unless_1858:
    set $P1860, param_1844
    unless_null $P1860, vivify_747
    $P1860 = root_new ['parrot';'Hash']
  vivify_747:
    set $P106, $P1860["h"]
    unless_null $P106, vivify_748
    new $P106, "Undef"
  vivify_748:
    set $P104, $P106
  unless_1858_end:
    unless $P104, if_1857_end
    set $P107, param_1842
    nqp_decontainerize $P108, $P107
    set $P109, $P1845
    unless_null $P109, vivify_749
    new $P109, "Undef"
  vivify_749:
    $P108."usage"($P109)
  if_1857_end:
.annotate 'line', 1333
    load_bytecode "dumper.pbc"
.annotate 'line', 1334
    load_bytecode "PGE/Dumper.pbc"
.annotate 'line', 1336
    set $P104, param_1842
    nqp_decontainerize $P105, $P104
    set $P1861, $P1849
    unless_null $P1861, vivify_750
    $P1861 = root_new ['parrot';'ResizablePMCArray']
  vivify_750:
    set $P1862, param_1844
    unless_null $P1862, vivify_751
    $P1862 = root_new ['parrot';'Hash']
  vivify_751:
    $P106 = $P105."command_eval"($P1861 :flat, $P1862 :flat)
.annotate 'line', 1312
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "command_eval" :anon :subid("134_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1864
    .param pmc param_1865 :slurpy
    .param pmc param_1866 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1340
    .const 'Sub' $P1956 = "313_1340317678.734" 
    capture_lex $P1956
    .const 'Sub' $P1882 = "308_1340317678.734" 
    capture_lex $P1882
    .lex "self", param_1864
    .lex "@a", param_1865
    .lex "%adverbs", param_1866
.annotate 'line', 1345
    new $P102, "Undef"
    set $P1867, $P102
    .lex "$result", $P1867
.annotate 'line', 1346
    new $P103, "Undef"
    set $P1868, $P103
    .lex "$error", $P1868
.annotate 'line', 1347
    new $P104, "Undef"
    set $P1869, $P104
    .lex "$has_error", $P1869
.annotate 'line', 1348
    new $P105, "Undef"
    set $P1870, $P105
    .lex "$target", $P1870
.annotate 'line', 1341
    set $P1873, param_1866
    unless_null $P1873, vivify_752
    $P1873 = root_new ['parrot';'Hash']
  vivify_752:
    set $P107, $P1873["version"]
    unless_null $P107, vivify_753
    new $P107, "Undef"
  vivify_753:
    unless $P107, unless_1872
    set $P106, $P107
    goto unless_1872_end
  unless_1872:
    set $P1874, param_1866
    unless_null $P1874, vivify_754
    $P1874 = root_new ['parrot';'Hash']
  vivify_754:
    set $P108, $P1874["v"]
    unless_null $P108, vivify_755
    new $P108, "Undef"
  vivify_755:
    set $P106, $P108
  unless_1872_end:
    unless $P106, if_1871_end
    set $P109, param_1864
    nqp_decontainerize $P110, $P109
    $P110."version"()
  if_1871_end:
.annotate 'line', 1342
    set $P1876, param_1866
    unless_null $P1876, vivify_756
    $P1876 = root_new ['parrot';'Hash']
  vivify_756:
    set $P106, $P1876["show-config"]
    unless_null $P106, vivify_757
    new $P106, "Undef"
  vivify_757:
    unless $P106, if_1875_end
    set $P107, param_1864
    nqp_decontainerize $P108, $P107
    $P108."show-config"()
  if_1875_end:
.annotate 'line', 1343
    set $P1878, param_1866
    unless_null $P1878, vivify_758
    $P1878 = root_new ['parrot';'Hash']
  vivify_758:
    set $P106, $P1878["nqpevent"]
    unless_null $P106, vivify_759
    new $P106, "Undef"
  vivify_759:
    unless $P106, if_1877_end
    set $P107, param_1864
    nqp_decontainerize $P108, $P107
    set $P1879, param_1866
    unless_null $P1879, vivify_760
    $P1879 = root_new ['parrot';'Hash']
  vivify_760:
    set $P109, $P1879["nqpevent"]
    unless_null $P109, vivify_761
    new $P109, "Undef"
  vivify_761:
    $P108."nqpevent"($P109)
  if_1877_end:
.annotate 'line', 1340
    set $P106, $P1867
    unless_null $P106, vivify_762
    new $P106, "Undef"
  vivify_762:
    set $P106, $P1868
    unless_null $P106, vivify_763
    new $P106, "Undef"
  vivify_763:
.annotate 'line', 1347
    new $P106, "Float"
    assign $P106, 0
    set $P1869, $P106
.annotate 'line', 1348
    set $P1880, param_1866
    unless_null $P1880, vivify_764
    $P1880 = root_new ['parrot';'Hash']
  vivify_764:
    set $P106, $P1880["target"]
    unless_null $P106, vivify_765
    new $P106, "Undef"
  vivify_765:
    set $S100, $P106
    downcase $S101, $S100
    new $P107, 'String'
    set $P107, $S101
    set $P1870, $P107
.annotate 'line', 1349
    .const 'Sub' $P1882 = "308_1340317678.734" 
    capture_lex $P1882
    $P1882()
.annotate 'line', 1385
    set $P106, $P1869
    unless_null $P106, vivify_803
    new $P106, "Undef"
  vivify_803:
    unless $P106, if_1951_end
.annotate 'line', 1386
    set $P1954, param_1866
    unless_null $P1954, vivify_804
    $P1954 = root_new ['parrot';'Hash']
  vivify_804:
    set $P108, $P1954["ll-exception"]
    unless_null $P108, vivify_805
    new $P108, "Undef"
  vivify_805:
    unless $P108, unless_1953
    set $P107, $P108
    goto unless_1953_end
  unless_1953:
    set $P109, param_1864
    nqp_decontainerize $P110, $P109
    can $I100, $P110, "handle-exception"
    new $P111, 'Integer'
    set $P111, $I100
    isfalse $I101, $P111
    new $P107, 'Integer'
    set $P107, $I101
  unless_1953_end:
    if $P107, if_1952
.annotate 'line', 1393
    set $P113, param_1864
    nqp_decontainerize $P114, $P113
    set $P115, $P1868
    unless_null $P115, vivify_806
    new $P115, "Undef"
  vivify_806:
    $P114."handle-exception"($P115)
.annotate 'line', 1392
    goto if_1952_end
  if_1952:
.annotate 'line', 1386
    .const 'Sub' $P1956 = "313_1340317678.734" 
    capture_lex $P1956
    $P1956()
  if_1952_end:
  if_1951_end:
.annotate 'line', 1340
    set $P106, $P1867
    unless_null $P106, vivify_812
    new $P106, "Undef"
  vivify_812:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1881"  :anon :subid("308_1340317678.734") :outer("134_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1349
    .const 'Sub' $P1942 = "312_1340317678.734" 
    capture_lex $P1942
    .const 'Sub' $P1920 = "311_1340317678.734" 
    capture_lex $P1920
    .const 'Sub' $P1907 = "310_1340317678.734" 
    capture_lex $P1907
    .const 'Sub' $P1886 = "309_1340317678.734" 
    capture_lex $P1886
    new $P1916, 'ExceptionHandler', [.CONTROL_ALL]
    set_label $P1916, control_1915
    push_eh $P1916
    new $P1938, 'ExceptionHandler'
    set_label $P1938, control_1937
    $P1938."handle_types_except"(.CONTROL_ALL)
    push_eh $P1938
.annotate 'line', 1350
    find_lex $P1884, "%adverbs"
    unless_null $P1884, vivify_766
    $P1884 = root_new ['parrot';'Hash']
  vivify_766:
    set $P106, $P1884["e"]
    unless_null $P106, vivify_767
    new $P106, "Undef"
  vivify_767:
    defined $I100, $P106
    if $I100, if_1883
.annotate 'line', 1358
    find_lex $P1895, "@a"
    unless_null $P1895, vivify_768
    $P1895 = root_new ['parrot';'ResizablePMCArray']
  vivify_768:
    isfalse $I101, $P1895
    if $I101, if_1894
.annotate 'line', 1359
    find_lex $P1898, "%adverbs"
    unless_null $P1898, vivify_769
    $P1898 = root_new ['parrot';'Hash']
  vivify_769:
    set $P109, $P1898["combine"]
    unless_null $P109, vivify_770
    new $P109, "Undef"
  vivify_770:
    if $P109, if_1897
.annotate 'line', 1360
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P1901, "@a"
    unless_null $P1901, vivify_771
    $P1901 = root_new ['parrot';'ResizablePMCArray']
  vivify_771:
    set $P112, $P1901[0]
    unless_null $P112, vivify_772
    new $P112, "Undef"
  vivify_772:
    find_lex $P1902, "@a"
    unless_null $P1902, vivify_773
    $P1902 = root_new ['parrot';'ResizablePMCArray']
  vivify_773:
    find_lex $P1903, "%adverbs"
    unless_null $P1903, vivify_774
    $P1903 = root_new ['parrot';'Hash']
  vivify_774:
    $P113 = $P111."evalfiles"($P112, $P1902 :flat, $P1903 :flat)
    store_lex "$result", $P113
    goto if_1897_end
  if_1897:
.annotate 'line', 1359
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P1899, "@a"
    unless_null $P1899, vivify_775
    $P1899 = root_new ['parrot';'ResizablePMCArray']
  vivify_775:
    find_lex $P1900, "%adverbs"
    unless_null $P1900, vivify_776
    $P1900 = root_new ['parrot';'Hash']
  vivify_776:
    $P112 = $P111."evalfiles"($P1899, $P1900 :flat)
    store_lex "$result", $P112
  if_1897_end:
    goto if_1894_end
  if_1894:
.annotate 'line', 1358
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P1896, "%adverbs"
    unless_null $P1896, vivify_777
    $P1896 = root_new ['parrot';'Hash']
  vivify_777:
    $P111 = $P110."interactive"($P1896 :flat)
    store_lex "$result", $P111
  if_1894_end:
    goto if_1883_end
  if_1883:
.annotate 'line', 1350
    .const 'Sub' $P1886 = "309_1340317678.734" 
    capture_lex $P1886
    $P1886()
  if_1883_end:
.annotate 'line', 1362
    find_lex $P107, "$result"
    unless_null $P107, vivify_787
    new $P107, "Undef"
  vivify_787:
    isnull $I100, $P107
    new $P108, 'Integer'
    set $P108, $I100
    isfalse $I101, $P108
    if $I101, if_1905
    new $P106, 'Integer'
    set $P106, $I101
    goto if_1905_end
  if_1905:
    find_lex $P109, "$target"
    unless_null $P109, vivify_788
    new $P109, "Undef"
  vivify_788:
    set $S100, $P109
    iseq $I102, $S100, "pir"
    new $P106, 'Integer'
    set $P106, $I102
  if_1905_end:
    unless $P106, if_1904_end
    .const 'Sub' $P1907 = "310_1340317678.734" 
    capture_lex $P1907
    $P1907()
  if_1904_end:
.annotate 'line', 1349
    pop_eh 
    pop_eh 
    goto skip_handler_1914
  control_1915:
    peek_exception $P1917
.annotate 'line', 1375
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1920 = "311_1340317678.734" 
    newclosure $P1934, $P1920
    $P1934(exception)
    new $P1935, 'Integer'
    set $P1935, 1
    set exception["handled"], $P1935
    set $I1936, exception["handled"]
    eq $I1936, 1, handled_1918
    rethrow exception
  handled_1918:
    finalize $P1917
    .return (exception)
  control_1937:
    peek_exception $P1939
.annotate 'line', 1371
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1942 = "312_1340317678.734" 
    newclosure $P1948, $P1942
    $P1948(exception)
    new $P1949, 'Integer'
    set $P1949, 1
    set exception["handled"], $P1949
    set $I1950, exception["handled"]
    eq $I1950, 1, handled_1940
    rethrow exception
  handled_1940:
    finalize $P1939
    .return (exception)
  skip_handler_1914:
.annotate 'line', 1349
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1885"  :anon :subid("309_1340317678.734") :outer("308_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1352
    new $P107, "Undef"
    set $P1887, $P107
    .lex "$?FILES", $P1887
.annotate 'line', 1351
    new $P108, "String"
    assign $P108, "-e"
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P110, $P111, "$!user_progname", 8, $P108
.annotate 'line', 1352
    new $P108, "String"
    assign $P108, "-e"
    set $P1887, $P108
.annotate 'line', 1353
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P1888, "%adverbs"
    unless_null $P1888, vivify_778
    $P1888 = root_new ['parrot';'Hash']
  vivify_778:
    set $P110, $P1888["e"]
    unless_null $P110, vivify_779
    new $P110, "Undef"
  vivify_779:
    find_lex $P1889, "@a"
    unless_null $P1889, vivify_780
    $P1889 = root_new ['parrot';'ResizablePMCArray']
  vivify_780:
    find_lex $P1890, "%adverbs"
    unless_null $P1890, vivify_781
    $P1890 = root_new ['parrot';'Hash']
  vivify_781:
    $P111 = $P109."eval"($P110, "-e", $P1889 :flat, $P1890 :flat)
    store_lex "$result", $P111
.annotate 'line', 1354
    find_lex $P110, "$target"
    unless_null $P110, vivify_782
    new $P110, "Undef"
  vivify_782:
    set $S100, $P110
    iseq $I101, $S100, ""
    unless $I101, unless_1892
    new $P109, 'Integer'
    set $P109, $I101
    goto unless_1892_end
  unless_1892:
    find_lex $P111, "$target"
    unless_null $P111, vivify_783
    new $P111, "Undef"
  vivify_783:
    set $S101, $P111
    iseq $I102, $S101, "pir"
    new $P109, 'Integer'
    set $P109, $I102
  unless_1892_end:
    unless $P109, unless_1891
    set $P108, $P109
    goto unless_1891_end
  unless_1891:
.annotate 'line', 1355
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$result"
    unless_null $P114, vivify_784
    new $P114, "Undef"
  vivify_784:
    find_lex $P115, "$target"
    unless_null $P115, vivify_785
    new $P115, "Undef"
  vivify_785:
    find_lex $P1893, "%adverbs"
    unless_null $P1893, vivify_786
    $P1893 = root_new ['parrot';'Hash']
  vivify_786:
    $P116 = $P113."dumper"($P114, $P115, $P1893 :flat)
.annotate 'line', 1354
    set $P108, $P116
  unless_1891_end:
.annotate 'line', 1350
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1906"  :anon :subid("310_1340317678.734") :outer("308_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1363
    new $P110, "Undef"
    set $P1908, $P110
    .lex "$output", $P1908
.annotate 'line', 1364
    new $P111, "Undef"
    set $P1909, $P111
    .lex "$fh", $P1909
.annotate 'line', 1363
    find_lex $P1910, "%adverbs"
    unless_null $P1910, vivify_789
    $P1910 = root_new ['parrot';'Hash']
  vivify_789:
    set $P112, $P1910["output"]
    unless_null $P112, vivify_790
    new $P112, "Undef"
  vivify_790:
    set $P1908, $P112
.annotate 'line', 1364
    set $P114, $P1908
    unless_null $P114, vivify_791
    new $P114, "Undef"
  vivify_791:
    set $S101, $P114
    iseq $I103, $S101, ""
    unless $I103, unless_1912
    new $P113, 'Integer'
    set $P113, $I103
    goto unless_1912_end
  unless_1912:
    set $P115, $P1908
    unless_null $P115, vivify_792
    new $P115, "Undef"
  vivify_792:
    set $S102, $P115
    iseq $I104, $S102, "-"
    new $P113, 'Integer'
    set $P113, $I104
  unless_1912_end:
    if $P113, if_1911
.annotate 'line', 1366
    new $P118, "FileHandle"
    set $P119, $P1908
    unless_null $P119, vivify_793
    new $P119, "Undef"
  vivify_793:
    $P120 = $P118."open"($P119, "w")
    set $P112, $P120
.annotate 'line', 1364
    goto if_1911_end
  if_1911:
.annotate 'line', 1365
    getinterp $P116
    $P117 = $P116."stdout_handle"()
    set $P112, $P117
  if_1911_end:
    set $P1909, $P112
.annotate 'line', 1367
    set $P112, $P1909
    unless_null $P112, vivify_794
    new $P112, "Undef"
  vivify_794:
    if $P112, unless_1913_end
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    new $P115, 'String'
    set $P115, "Cannot write to "
    set $P116, $P1908
    unless_null $P116, vivify_795
    new $P116, "Undef"
  vivify_795:
    concat $P117, $P115, $P116
    $P114."panic"($P117)
  unless_1913_end:
.annotate 'line', 1368
    set $P112, $P1909
    unless_null $P112, vivify_796
    new $P112, "Undef"
  vivify_796:
    find_lex $P113, "$result"
    unless_null $P113, vivify_797
    new $P113, "Undef"
  vivify_797:
    print $P112, $P113
.annotate 'line', 1369
    set $P112, $P1909
    unless_null $P112, vivify_798
    new $P112, "Undef"
  vivify_798:
    $P113 = $P112."close"()
.annotate 'line', 1362
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1919"  :anon :subid("311_1340317678.734") :outer("308_1340317678.734")
    .param pmc param_1921
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1375
    .lex "$_", param_1921
    find_lex $P1922, "$_"
    set $P1923, $P1922
    .lex "$!", $P1923
.annotate 'line', 1376
    find_lex $P1925, "self"
    nqp_decontainerize $P1926, $P1925
    can $I1927, $P1926, "handle-control"
    if $I1927, if_1924
.annotate 'line', 1379
    find_lex $P1931, "$_"
    unless_null $P1931, vivify_799
    new $P1931, "Undef"
  vivify_799:
    rethrow $P1931
.annotate 'line', 1378
    goto if_1924_end
  if_1924:
.annotate 'line', 1377
    find_lex $P1928, "self"
    nqp_decontainerize $P1929, $P1928
    find_lex $P1930, "$_"
    unless_null $P1930, vivify_800
    new $P1930, "Undef"
  vivify_800:
    $P1929."handle-control"($P1930)
  if_1924_end:
.annotate 'line', 1381
    new $P1932, "Float"
    assign $P1932, 1
    store_lex "$has_error", $P1932
.annotate 'line', 1382
    find_lex $P1933, "$_"
    unless_null $P1933, vivify_801
    new $P1933, "Undef"
  vivify_801:
    store_lex "$error", $P1933
.annotate 'line', 1375
    .return ($P1933)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1941"  :anon :subid("312_1340317678.734") :outer("308_1340317678.734")
    .param pmc param_1943
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1371
    .lex "$_", param_1943
    find_lex $P1944, "$_"
    set $P1945, $P1944
    .lex "$!", $P1945
.annotate 'line', 1372
    new $P1946, "Float"
    assign $P1946, 1
    store_lex "$has_error", $P1946
.annotate 'line', 1373
    find_lex $P1947, "$_"
    unless_null $P1947, vivify_802
    new $P1947, "Undef"
  vivify_802:
    store_lex "$error", $P1947
.annotate 'line', 1371
    .return ($P1947)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1955"  :anon :subid("313_1340317678.734") :outer("134_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1387
    new $P112, "Undef"
    set $P1957, $P112
    .lex "$err", $P1957
    getstderr $P113
    set $P1957, $P113
.annotate 'line', 1388
    set $P113, $P1957
    unless_null $P113, vivify_807
    new $P113, "Undef"
  vivify_807:
    find_lex $P114, "$error"
    unless_null $P114, vivify_808
    new $P114, "Undef"
  vivify_808:
    $P113."print"($P114)
.annotate 'line', 1389
    set $P113, $P1957
    unless_null $P113, vivify_809
    new $P113, "Undef"
  vivify_809:
    $P113."print"("\n")
.annotate 'line', 1390
    set $P113, $P1957
    unless_null $P113, vivify_810
    new $P113, "Undef"
  vivify_810:
    find_lex $P114, "$error"
    unless_null $P114, vivify_811
    new $P114, "Undef"
  vivify_811:
    $P115 = $P114."backtrace_strings"()
    join $S100, "\n", $P115
    $P113."print"($S100)
.annotate 'line', 1391
    exit 1
.annotate 'line', 1386
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "process_args" :anon :subid("135_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1959
    .param pmc param_1960
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1399
    .const 'Sub' $P1966 = "314_1340317678.734" 
    capture_lex $P1966
    .lex "self", param_1959
    .lex "@args", param_1960
.annotate 'line', 1403
    new $P102, "Undef"
    set $P1961, $P102
    .lex "$p", $P1961
.annotate 'line', 1406
    new $P103, "Undef"
    set $P1962, $P103
    .lex "$res", $P1962
.annotate 'line', 1401
    set $P104, param_1959
    nqp_decontainerize $P105, $P104
    set $P1963, param_1960
    unless_null $P1963, vivify_813
    $P1963 = root_new ['parrot';'ResizablePMCArray']
  vivify_813:
    $P106 = $P1963."shift"()
    $P105."compiler_progname"($P106)
.annotate 'line', 1403
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "HLL"
    nqp_get_package_through_who $P106, $P105, "CommandLine"
    get_who $P107, $P106
    set $P108, $P107["Parser"]
    set $P109, param_1959
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P1964, $P110, $P111, "@!cmdoptions", 3
    unless_null $P1964, vivify_814
    $P1964 = root_new ['parrot';'ResizablePMCArray']
  vivify_814:
    $P112 = $P108."new"($P1964)
    set $P1961, $P112
.annotate 'line', 1404
    set $P104, $P1961
    unless_null $P104, vivify_815
    new $P104, "Undef"
  vivify_815:
    $P104."add-stopper"("-e")
.annotate 'line', 1405
    set $P104, $P1961
    unless_null $P104, vivify_816
    new $P104, "Undef"
  vivify_816:
    $P104."stop-after-first-arg"()
.annotate 'line', 1399
    set $P104, $P1962
    unless_null $P104, vivify_817
    new $P104, "Undef"
  vivify_817:
.annotate 'line', 1407
    .const 'Sub' $P1966 = "314_1340317678.734" 
    capture_lex $P1966
    $P1966()
.annotate 'line', 1415
    set $P104, $P1962
    unless_null $P104, vivify_821
    new $P104, "Undef"
  vivify_821:
    if $P104, if_1984
.annotate 'line', 1420
    new $P105, "Hash"
    set $P106, param_1959
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P107, $P108, "%!cli-options", 10, $P105
.annotate 'line', 1421
    new $P105, "ResizablePMCArray"
    set $P106, param_1959
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P107, $P108, "@!cli-arguments", 9, $P105
.annotate 'line', 1419
    goto if_1984_end
  if_1984:
.annotate 'line', 1416
    set $P105, $P1962
    unless_null $P105, vivify_822
    new $P105, "Undef"
  vivify_822:
    $P106 = $P105."options"()
    set $P107, param_1959
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P108, $P109, "%!cli-options", 10, $P106
.annotate 'line', 1417
    set $P105, $P1962
    unless_null $P105, vivify_823
    new $P105, "Undef"
  vivify_823:
    $P106 = $P105."arguments"()
    set $P107, param_1959
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P108, $P109, "@!cli-arguments", 9, $P106
  if_1984_end:
.annotate 'line', 1399
    set $P104, $P1962
    unless_null $P104, vivify_824
    new $P104, "Undef"
  vivify_824:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block1965"  :anon :subid("314_1340317678.734") :outer("135_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1407
    .const 'Sub' $P1974 = "315_1340317678.734" 
    capture_lex $P1974
    new $P1970, 'ExceptionHandler'
    set_label $P1970, control_1969
    $P1970."handle_types_except"(.CONTROL_ALL)
    push_eh $P1970
.annotate 'line', 1408
    find_lex $P104, "$p"
    unless_null $P104, vivify_818
    new $P104, "Undef"
  vivify_818:
    find_lex $P1967, "@args"
    unless_null $P1967, vivify_819
    $P1967 = root_new ['parrot';'ResizablePMCArray']
  vivify_819:
    $P105 = $P104."parse"($P1967)
    store_lex "$res", $P105
.annotate 'line', 1407
    pop_eh 
    goto skip_handler_1968
  control_1969:
    peek_exception $P1971
.annotate 'line', 1409
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P1974 = "315_1340317678.734" 
    newclosure $P1981, $P1974
    $P1981(exception)
    new $P1982, 'Integer'
    set $P1982, 1
    set exception["handled"], $P1982
    set $I1983, exception["handled"]
    eq $I1983, 1, handled_1972
    rethrow exception
  handled_1972:
    finalize $P1971
    .return (exception)
  skip_handler_1968:
.annotate 'line', 1407
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block1973"  :anon :subid("315_1340317678.734") :outer("314_1340317678.734")
    .param pmc param_1975
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1409
    .lex "$_", param_1975
    find_lex $P1976, "$_"
    set $P1977, $P1976
    .lex "$!", $P1977
.annotate 'line', 1410
    find_lex $P1978, "$_"
    unless_null $P1978, vivify_820
    new $P1978, "Undef"
  vivify_820:
    say $P1978
.annotate 'line', 1411
    find_lex $P1979, "self"
    nqp_decontainerize $P1980, $P1979
    $P1980."usage"()
.annotate 'line', 1412
    exit 1
.annotate 'line', 1409
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "evalfiles" :anon :subid("136_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_1988
    .param pmc param_1989
    .param pmc param_1990 :slurpy
    .param pmc param_1991 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1426
    .const 'Sub' $P2008 = "316_1340317678.734" 
    capture_lex $P2008
    new $P1987, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1987, control_1986
    push_eh $P1987
    .lex "self", param_1988
    .lex "$files", param_1989
    .lex "@args", param_1990
    .lex "%adverbs", param_1991
.annotate 'line', 1427
    new $P102, "Undef"
    set $P1992, $P102
    .lex "$target", $P1992
.annotate 'line', 1428
    new $P103, "Undef"
    set $P1993, $P103
    .lex "$encoding", $P1993
.annotate 'line', 1429
    $P1995 = root_new ['parrot';'ResizablePMCArray']
    set $P1994, $P1995
    .lex "@files", $P1994
.annotate 'line', 1431
    $P1997 = root_new ['parrot';'ResizablePMCArray']
    set $P1996, $P1997
    .lex "@codes", $P1996
.annotate 'line', 1448
    new $P104, "Undef"
    set $P1998, $P104
    .lex "$code", $P1998
.annotate 'line', 1449
    new $P105, "Undef"
    set $P1999, $P105
    .lex "$?FILES", $P1999
.annotate 'line', 1450
    new $P106, "Undef"
    set $P2000, $P106
    .lex "$r", $P2000
.annotate 'line', 1427
    set $P2001, param_1991
    unless_null $P2001, vivify_825
    $P2001 = root_new ['parrot';'Hash']
  vivify_825:
    set $P107, $P2001["target"]
    unless_null $P107, vivify_826
    new $P107, "Undef"
  vivify_826:
    set $S100, $P107
    downcase $S101, $S100
    new $P108, 'String'
    set $P108, $S101
    set $P1992, $P108
.annotate 'line', 1428
    set $P2002, param_1991
    unless_null $P2002, vivify_827
    $P2002 = root_new ['parrot';'Hash']
  vivify_827:
    set $P107, $P2002["encoding"]
    unless_null $P107, vivify_828
    new $P107, "Undef"
  vivify_828:
    set $P1993, $P107
.annotate 'line', 1429
    set $P108, param_1989
    unless_null $P108, vivify_829
    new $P108, "Undef"
  vivify_829:
    does $I100, $P108, "array"
    if $I100, if_2003
    set $P110, param_1989
    unless_null $P110, vivify_830
    new $P110, "Undef"
  vivify_830:
    new $P111, "ResizablePMCArray"
    push $P111, $P110
    set $P107, $P111
    goto if_2003_end
  if_2003:
    set $P109, param_1989
    unless_null $P109, vivify_831
    new $P109, "Undef"
  vivify_831:
    set $P107, $P109
  if_2003_end:
    set $P1994, $P107
.annotate 'line', 1430
    set $P2004, $P1994
    unless_null $P2004, vivify_832
    $P2004 = root_new ['parrot';'ResizablePMCArray']
  vivify_832:
    join $S100, ",", $P2004
    new $P107, 'String'
    set $P107, $S100
    set $P108, param_1988
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P109, $P110, "$!user_progname", 8, $P107
.annotate 'line', 1426
    set $P2005, $P1996
    unless_null $P2005, vivify_833
    $P2005 = root_new ['parrot';'ResizablePMCArray']
  vivify_833:
.annotate 'line', 1432
    set $P2006, $P1994
    unless_null $P2006, vivify_834
    $P2006 = root_new ['parrot';'ResizablePMCArray']
  vivify_834:
    defined $I100, $P2006
    unless $I100, for_undef_835
    iter $P107, $P2006
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop2032_handler
    push_eh $P112
  loop2032_test:
    unless $P107, loop2032_done
    shift $P108, $P107
  loop2032_redo:
    .const 'Sub' $P2008 = "316_1340317678.734" 
    capture_lex $P2008
    $P2008($P108)
  loop2032_next:
    goto loop2032_test
  loop2032_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop2032_next
    eq $P113, .CONTROL_LOOP_REDO, loop2032_redo
  loop2032_done:
    pop_eh 
  for_undef_835:
.annotate 'line', 1448
    set $P2033, $P1996
    unless_null $P2033, vivify_845
    $P2033 = root_new ['parrot';'ResizablePMCArray']
  vivify_845:
    join $S100, "", $P2033
    new $P107, 'String'
    set $P107, $S100
    set $P1998, $P107
.annotate 'line', 1449
    set $P2034, $P1994
    unless_null $P2034, vivify_846
    $P2034 = root_new ['parrot';'ResizablePMCArray']
  vivify_846:
    join $S100, " ", $P2034
    new $P107, 'String'
    set $P107, $S100
    set $P1999, $P107
.annotate 'line', 1450
    set $P107, param_1988
    nqp_decontainerize $P108, $P107
    set $P109, $P1998
    unless_null $P109, vivify_847
    new $P109, "Undef"
  vivify_847:
    set $P2035, param_1990
    unless_null $P2035, vivify_848
    $P2035 = root_new ['parrot';'ResizablePMCArray']
  vivify_848:
    set $P2036, param_1991
    unless_null $P2036, vivify_849
    $P2036 = root_new ['parrot';'Hash']
  vivify_849:
    $P110 = $P108."eval"($P109, $P2035 :flat, $P2036 :flat)
    set $P2000, $P110
.annotate 'line', 1451
    set $P109, $P1992
    unless_null $P109, vivify_850
    new $P109, "Undef"
  vivify_850:
    set $S100, $P109
    iseq $I100, $S100, ""
    unless $I100, unless_2038
    new $P108, 'Integer'
    set $P108, $I100
    goto unless_2038_end
  unless_2038:
    set $P110, $P1992
    unless_null $P110, vivify_851
    new $P110, "Undef"
  vivify_851:
    set $S101, $P110
    iseq $I101, $S101, "pir"
    new $P108, 'Integer'
    set $P108, $I101
  unless_2038_end:
    if $P108, if_2037
.annotate 'line', 1454
    new $P111, "Exception"
    set $P111['type'], .CONTROL_RETURN
    set $P112, param_1988
    nqp_decontainerize $P113, $P112
    set $P114, $P2000
    unless_null $P114, vivify_852
    new $P114, "Undef"
  vivify_852:
    set $P115, $P1992
    unless_null $P115, vivify_853
    new $P115, "Undef"
  vivify_853:
    set $P2039, param_1991
    unless_null $P2039, vivify_854
    $P2039 = root_new ['parrot';'Hash']
  vivify_854:
    $P116 = $P113."dumper"($P114, $P115, $P2039 :flat)
    setattribute $P111, 'payload', $P116
    throw $P111
.annotate 'line', 1453
    goto if_2037_end
  if_2037:
.annotate 'line', 1452
    new $P111, "Exception"
    set $P111['type'], .CONTROL_RETURN
    set $P112, $P2000
    unless_null $P112, vivify_855
    new $P112, "Undef"
  vivify_855:
    setattribute $P111, 'payload', $P112
    throw $P111
  if_2037_end:
.annotate 'line', 1426
    .return ($P107)
  control_1986:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2007"  :anon :subid("316_1340317678.734") :outer("136_1340317678.734")
    .param pmc param_2011
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1432
    .const 'Sub' $P2013 = "317_1340317678.734" 
    capture_lex $P2013
.annotate 'line', 1433
    new $P109, "Undef"
    set $P2009, $P109
    .lex "$in-handle", $P2009
.annotate 'line', 1434
    new $P110, "Undef"
    set $P2010, $P110
    .lex "$err", $P2010
    .lex "$_", param_2011
.annotate 'line', 1433
    new $P111, "FileHandle"
    set $P2009, $P111
.annotate 'line', 1434
    new $P111, "Float"
    assign $P111, 0
    set $P2010, $P111
.annotate 'line', 1435
    .const 'Sub' $P2013 = "317_1340317678.734" 
    capture_lex $P2013
    $P2013()
.annotate 'line', 1446
    set $P112, $P2010
    unless_null $P112, vivify_843
    new $P112, "Undef"
  vivify_843:
    if $P112, if_2031
    set $P111, $P112
    goto if_2031_end
  if_2031:
    set $P113, $P2010
    unless_null $P113, vivify_844
    new $P113, "Undef"
  vivify_844:
    die $P113
  if_2031_end:
.annotate 'line', 1432
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block2012"  :anon :subid("317_1340317678.734") :outer("316_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1435
    .const 'Sub' $P2021 = "318_1340317678.734" 
    capture_lex $P2021
    new $P2017, 'ExceptionHandler'
    set_label $P2017, control_2016
    $P2017."handle_types_except"(.CONTROL_ALL)
    push_eh $P2017
.annotate 'line', 1439
    find_lex $P111, "$in-handle"
    unless_null $P111, vivify_836
    new $P111, "Undef"
  vivify_836:
    find_lex $P112, "$encoding"
    unless_null $P112, vivify_837
    new $P112, "Undef"
  vivify_837:
    $P111."encoding"($P112)
.annotate 'line', 1440
    find_lex $P2014, "@codes"
    unless_null $P2014, vivify_838
    $P2014 = root_new ['parrot';'ResizablePMCArray']
  vivify_838:
    find_lex $P111, "$in-handle"
    unless_null $P111, vivify_839
    new $P111, "Undef"
  vivify_839:
    find_lex $P112, "$_"
    unless_null $P112, vivify_840
    new $P112, "Undef"
  vivify_840:
    $S100 = $P111."readall"($P112)
    push $P2014, $S100
.annotate 'line', 1441
    find_lex $P111, "$in-handle"
    unless_null $P111, vivify_841
    new $P111, "Undef"
  vivify_841:
    $P111."close"()
.annotate 'line', 1435
    pop_eh 
    goto skip_handler_2015
  control_2016:
    peek_exception $P2018
.annotate 'line', 1442
    .local pmc exception 
    .get_results (exception) 
    .const 'Sub' $P2021 = "318_1340317678.734" 
    newclosure $P2028, $P2021
    $P2028(exception)
    new $P2029, 'Integer'
    set $P2029, 1
    set exception["handled"], $P2029
    set $I2030, exception["handled"]
    eq $I2030, 1, handled_2019
    rethrow exception
  handled_2019:
    finalize $P2018
    .return (exception)
  skip_handler_2015:
.annotate 'line', 1435
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2020"  :anon :subid("318_1340317678.734") :outer("317_1340317678.734")
    .param pmc param_2022
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1442
    .lex "$_", param_2022
    find_lex $P2023, "$_"
    set $P2024, $P2023
    .lex "$!", $P2024
.annotate 'line', 1443
    new $P2025, 'String'
    set $P2025, "Error while reading from file: "
    find_lex $P2026, "$_"
    unless_null $P2026, vivify_842
    new $P2026, "Undef"
  vivify_842:
    concat $P2027, $P2025, $P2026
    store_lex "$err", $P2027
.annotate 'line', 1442
    .return ($P2027)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "compile" :anon :subid("137_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2043
    .param pmc param_2044
    .param pmc param_2045 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1458
    .const 'Sub' $P2054 = "319_1340317678.734" 
    capture_lex $P2054
    new $P2042, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2042, control_2041
    push_eh $P2042
    .lex "self", param_2043
    .lex "$source", param_2044
    .lex "%adverbs", param_2045
.annotate 'line', 1459
    $P2047 = root_new ['parrot';'Hash']
    set $P2046, $P2047
    .lex "%*COMPILING", $P2046
.annotate 'line', 1461
    new $P102, "Undef"
    set $P2048, $P102
    .lex "$target", $P2048
.annotate 'line', 1462
    new $P103, "Undef"
    set $P2049, $P103
    .lex "$result", $P2049
.annotate 'line', 1463
    new $P104, "Undef"
    set $P2050, $P104
    .lex "$stderr", $P2050
.annotate 'line', 1459
    set $P2051, param_2045
    unless_null $P2051, vivify_856
    $P2051 = root_new ['parrot';'Hash']
  vivify_856:
    set $P107, $P2046
    unless_null $P107, vivify_857
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["%COMPILING"]
    unless_null $P107, vivify_858
    die "Contextual %*COMPILING not found"
  vivify_858:
    set $P2046, $P107
  vivify_857:
    set $P107["%?OPTIONS"], $P2051
.annotate 'line', 1461
    set $P2052, param_2045
    unless_null $P2052, vivify_859
    $P2052 = root_new ['parrot';'Hash']
  vivify_859:
    set $P105, $P2052["target"]
    unless_null $P105, vivify_860
    new $P105, "Undef"
  vivify_860:
    set $S100, $P105
    downcase $S101, $S100
    new $P106, 'String'
    set $P106, $S101
    set $P2048, $P106
.annotate 'line', 1462
    set $P105, param_2044
    unless_null $P105, vivify_861
    new $P105, "Undef"
  vivify_861:
    set $P2049, $P105
.annotate 'line', 1463
    getinterp $P105
    $P106 = $P105."stderr_handle"()
    set $P2050, $P106
.annotate 'line', 1464
    set $P106, param_2043
    nqp_decontainerize $P107, $P106
    $P108 = $P107."stages"()
    defined $I100, $P108
    unless $I100, for_undef_862
    iter $P105, $P108
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2065_handler
    push_eh $P113
  loop2065_test:
    unless $P105, loop2065_done
    shift $P109, $P105
  loop2065_redo:
    .const 'Sub' $P2054 = "319_1340317678.734" 
    capture_lex $P2054
    $P2054($P109)
  loop2065_next:
    goto loop2065_test
  loop2065_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop2065_next
    eq $P114, .CONTROL_LOOP_REDO, loop2065_redo
  loop2065_done:
    pop_eh 
  for_undef_862:
.annotate 'line', 1474
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, $P2049
    unless_null $P106, vivify_875
    new $P106, "Undef"
  vivify_875:
    setattribute $P105, 'payload', $P106
    throw $P105
.annotate 'line', 1458
    .return ()
  control_2041:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2053"  :anon :subid("319_1340317678.734") :outer("137_1340317678.734")
    .param pmc param_2057
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1464
    .const 'Sub' $P2062 = "320_1340317678.734" 
    capture_lex $P2062
.annotate 'line', 1465
    new $P110, "Undef"
    set $P2055, $P110
    .lex "$timestamp", $P2055
.annotate 'line', 1467
    new $P111, "Undef"
    set $P2056, $P111
    .lex "$diff", $P2056
    .lex "$_", param_2057
.annotate 'line', 1465
    time $N100
    new $P112, 'Float'
    set $P112, $N100
    set $P2055, $P112
.annotate 'line', 1466
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$result"
    unless_null $P114, vivify_863
    new $P114, "Undef"
  vivify_863:
    find_lex $P2058, "%adverbs"
    unless_null $P2058, vivify_864
    $P2058 = root_new ['parrot';'Hash']
  vivify_864:
    find_lex $P115, "$_"
    unless_null $P115, vivify_865
    new $P115, "Undef"
  vivify_865:
    set $S100, $P115
    $P116 = $P113.$S100($P114, $P2058 :flat)
    store_lex "$result", $P116
.annotate 'line', 1467
    time $N100
    new $P112, 'Float'
    set $P112, $N100
    set $P113, $P2055
    unless_null $P113, vivify_866
    new $P113, "Undef"
  vivify_866:
    sub $P114, $P112, $P113
    set $P2056, $P114
.annotate 'line', 1468
    find_lex $P2060, "%adverbs"
    unless_null $P2060, vivify_867
    $P2060 = root_new ['parrot';'Hash']
  vivify_867:
    set $P112, $P2060["stagestats"]
    unless_null $P112, vivify_868
    new $P112, "Undef"
  vivify_868:
    unless $P112, if_2059_end
    .const 'Sub' $P2062 = "320_1340317678.734" 
    capture_lex $P2062
    $P2062()
  if_2059_end:
.annotate 'line', 1472
    find_lex $P113, "$_"
    unless_null $P113, vivify_873
    new $P113, "Undef"
  vivify_873:
    set $S100, $P113
    find_lex $P114, "$target"
    unless_null $P114, vivify_874
    new $P114, "Undef"
  vivify_874:
    set $S101, $P114
    iseq $I101, $S100, $S101
    if $I101, if_2064
    new $P112, 'Integer'
    set $P112, $I101
    goto if_2064_end
  if_2064:
    die 0, .CONTROL_LOOP_LAST
  if_2064_end:
.annotate 'line', 1464
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2061"  :anon :subid("320_1340317678.734") :outer("319_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1469
    new $P113, "Undef"
    set $P2063, $P113
    .lex "$difffmt", $P2063
    find_lex $P114, "$diff"
    unless_null $P114, vivify_869
    new $P114, "Undef"
  vivify_869:
    new $P115, "ResizablePMCArray"
    push $P115, $P114
    sprintf $S100, "%.3f", $P115
    new $P116, 'String'
    set $P116, $S100
    set $P2063, $P116
.annotate 'line', 1470
    find_lex $P114, "$stderr"
    unless_null $P114, vivify_870
    new $P114, "Undef"
  vivify_870:
    new $P115, 'String'
    set $P115, "Stage "
    find_lex $P116, "$_"
    unless_null $P116, vivify_871
    new $P116, "Undef"
  vivify_871:
    concat $P117, $P115, $P116
    concat $P118, $P117, ": "
    set $P119, $P2063
    unless_null $P119, vivify_872
    new $P119, "Undef"
  vivify_872:
    concat $P120, $P118, $P119
    concat $P121, $P120, "\n"
    $P122 = $P114."print"($P121)
.annotate 'line', 1468
    .return ($P122)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "parse" :anon :subid("138_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2069
    .param pmc param_2070
    .param pmc param_2071 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1477
    .const 'Sub' $P2080 = "321_1340317678.734" 
    capture_lex $P2080
    new $P2068, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2068, control_2067
    push_eh $P2068
    .lex "self", param_2069
    .lex "$source", param_2070
    .lex "%adverbs", param_2071
.annotate 'line', 1478
    new $P102, "Undef"
    set $P2072, $P102
    .lex "$s", $P2072
.annotate 'line', 1487
    new $P103, "Undef"
    set $P2073, $P103
    .lex "$grammar", $P2073
.annotate 'line', 1488
    new $P104, "Undef"
    set $P2074, $P104
    .lex "$actions", $P2074
.annotate 'line', 1491
    new $P105, "Undef"
    set $P2075, $P105
    .lex "$match", $P2075
.annotate 'line', 1478
    set $P106, param_2070
    unless_null $P106, vivify_876
    new $P106, "Undef"
  vivify_876:
    set $P2072, $P106
.annotate 'line', 1479
    set $P2077, param_2071
    unless_null $P2077, vivify_877
    $P2077 = root_new ['parrot';'Hash']
  vivify_877:
    set $P106, $P2077["transcode"]
    unless_null $P106, vivify_878
    new $P106, "Undef"
  vivify_878:
    unless $P106, if_2076_end
.annotate 'line', 1480
    set $P2078, param_2071
    unless_null $P2078, vivify_879
    $P2078 = root_new ['parrot';'Hash']
  vivify_879:
    set $P108, $P2078["transcode"]
    unless_null $P108, vivify_880
    new $P108, "Undef"
  vivify_880:
    set $S100, $P108
    split $P109, " ", $S100
    defined $I100, $P109
    unless $I100, for_undef_881
    iter $P107, $P109
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop2091_handler
    push_eh $P112
  loop2091_test:
    unless $P107, loop2091_done
    shift $P110, $P107
  loop2091_redo:
    .const 'Sub' $P2080 = "321_1340317678.734" 
    capture_lex $P2080
    $P2080($P110)
  loop2091_next:
    goto loop2091_test
  loop2091_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop2091_next
    eq $P113, .CONTROL_LOOP_REDO, loop2091_redo
  loop2091_done:
    pop_eh 
  for_undef_881:
  if_2076_end:
.annotate 'line', 1487
    set $P106, param_2069
    nqp_decontainerize $P107, $P106
    $P108 = $P107."parsegrammar"()
    set $P2073, $P108
.annotate 'line', 1477
    set $P106, $P2074
    unless_null $P106, vivify_884
    new $P106, "Undef"
  vivify_884:
.annotate 'line', 1489
    set $P2093, param_2071
    unless_null $P2093, vivify_885
    $P2093 = root_new ['parrot';'Hash']
  vivify_885:
    set $P106, $P2093["target"]
    unless_null $P106, vivify_886
    new $P106, "Undef"
  vivify_886:
    set $S100, $P106
    iseq $I100, $S100, "parse"
    if $I100, unless_2092_end
    set $P107, param_2069
    nqp_decontainerize $P108, $P107
    $P109 = $P108."parseactions"()
    set $P2074, $P109
  unless_2092_end:
.annotate 'line', 1490
    set $P2095, param_2071
    unless_null $P2095, vivify_887
    $P2095 = root_new ['parrot';'Hash']
  vivify_887:
    set $P106, $P2095["rxtrace"]
    unless_null $P106, vivify_888
    new $P106, "Undef"
  vivify_888:
    unless $P106, if_2094_end
    set $P107, $P2073
    unless_null $P107, vivify_889
    new $P107, "Undef"
  vivify_889:
    get_how $P108, $P107
    set $P109, $P2073
    unless_null $P109, vivify_890
    new $P109, "Undef"
  vivify_890:
    $P108."trace-on"($P109)
  if_2094_end:
.annotate 'line', 1491
    set $P106, $P2073
    unless_null $P106, vivify_891
    new $P106, "Undef"
  vivify_891:
    set $P107, $P2072
    unless_null $P107, vivify_892
    new $P107, "Undef"
  vivify_892:
    set $P108, $P2074
    unless_null $P108, vivify_893
    new $P108, "Undef"
  vivify_893:
    $P109 = $P106."parse"($P107, 0 :named("p"), $P108 :named("actions"))
    set $P2075, $P109
.annotate 'line', 1492
    set $P2097, param_2071
    unless_null $P2097, vivify_894
    $P2097 = root_new ['parrot';'Hash']
  vivify_894:
    set $P106, $P2097["rxtrace"]
    unless_null $P106, vivify_895
    new $P106, "Undef"
  vivify_895:
    unless $P106, if_2096_end
    set $P107, $P2073
    unless_null $P107, vivify_896
    new $P107, "Undef"
  vivify_896:
    get_how $P108, $P107
    set $P109, $P2073
    unless_null $P109, vivify_897
    new $P109, "Undef"
  vivify_897:
    $P108."trace-off"($P109)
  if_2096_end:
.annotate 'line', 1493
    set $P106, $P2075
    unless_null $P106, vivify_898
    new $P106, "Undef"
  vivify_898:
    if $P106, unless_2098_end
    set $P107, param_2069
    nqp_decontainerize $P108, $P107
    $P108."panic"("Unable to parse source")
  unless_2098_end:
.annotate 'line', 1494
    new $P106, "Exception"
    set $P106['type'], .CONTROL_RETURN
    set $P107, $P2075
    unless_null $P107, vivify_899
    new $P107, "Undef"
  vivify_899:
    setattribute $P106, 'payload', $P107
    throw $P106
.annotate 'line', 1477
    .return ()
  control_2067:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2079"  :anon :subid("321_1340317678.734") :outer("138_1340317678.734")
    .param pmc param_2081
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1480
    .const 'Sub' $P2083 = "322_1340317678.734" 
    capture_lex $P2083
    .lex "$_", param_2081
.annotate 'line', 1481
    .const 'Sub' $P2083 = "322_1340317678.734" 
    capture_lex $P2083
    $P111 = $P2083()
.annotate 'line', 1480
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block2082"  :anon :subid("322_1340317678.734") :outer("321_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1481
    new $P2086, 'ExceptionHandler'
    set_label $P2086, control_2085
    $P2086."handle_types_except"(.CONTROL_ALL)
    push_eh $P2086
.annotate 'line', 1482
    find_lex $P111, "$s"
    unless_null $P111, vivify_882
    new $P111, "Undef"
  vivify_882:
    set $S101, $P111
.annotate 'line', 1483
    find_lex $P112, "$_"
    unless_null $P112, vivify_883
    new $P112, "Undef"
  vivify_883:
    set $S102, $P112
    find_encoding $I101, $S102
    trans_encoding $S103, $S101, $I101
.annotate 'line', 1482
    new $P113, 'String'
    set $P113, $S103
    store_lex "$s", $P113
.annotate 'line', 1481
    pop_eh 
    goto skip_handler_2084
  control_2085:
    peek_exception $P2087
    .local pmc exception 
    .get_results (exception) 
    new $P2089, 'Integer'
    set $P2089, 1
    set exception["handled"], $P2089
    set $I2090, exception["handled"]
    eq $I2090, 1, handled_2088
    rethrow exception
  handled_2088:
    finalize $P2087
    .return (exception)
  skip_handler_2084:
    .return ($P113)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "past" :anon :subid("139_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2100
    .param pmc param_2101
    .param pmc param_2102 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1497
    .lex "self", param_2100
    .lex "$source", param_2101
    .lex "%adverbs", param_2102
.annotate 'line', 1498
    new $P102, "Undef"
    set $P2103, $P102
    .lex "$ast", $P2103
    set $P103, param_2101
    unless_null $P103, vivify_900
    new $P103, "Undef"
  vivify_900:
    $P104 = $P103."ast"()
    set $P2103, $P104
.annotate 'line', 1500
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "PAST"
    get_who $P105, $P104
    set $P106, $P105["Node"]
    set $P107, $P2103
    unless_null $P107, vivify_901
    new $P107, "Undef"
  vivify_901:
    $P108 = $P106."ACCEPTS"($P107)
    if $P108, unless_2104_end
.annotate 'line', 1499
    set $P109, param_2100
    nqp_decontainerize $P110, $P109
    new $P111, "String"
    assign $P111, "Unable to obtain ast from "
    set $P112, param_2101
    unless_null $P112, vivify_902
    new $P112, "Undef"
  vivify_902:
    typeof $S100, $P112
    concat $P113, $P111, $S100
    $P110."panic"($P113)
  unless_2104_end:
.annotate 'line', 1497
    set $P103, $P2103
    unless_null $P103, vivify_903
    new $P103, "Undef"
  vivify_903:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "post" :anon :subid("140_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2106
    .param pmc param_2107
    .param pmc param_2108 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1504
    .lex "self", param_2106
    .lex "$source", param_2107
    .lex "%adverbs", param_2108
.annotate 'line', 1505
    compreg $P102, "PAST"
    set $P103, param_2107
    unless_null $P103, vivify_904
    new $P103, "Undef"
  vivify_904:
    set $P2109, param_2108
    unless_null $P2109, vivify_905
    $P2109 = root_new ['parrot';'Hash']
  vivify_905:
    $P104 = $P102."to_post"($P103, $P2109 :flat)
.annotate 'line', 1504
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "pirbegin" :anon :subid("141_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2111
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1508
    .lex "self", param_2111
.annotate 'line', 1510
    new $P102, "String"
    assign $P102, ".include 'cclass.pasm'\n"
    concat $P103, $P102, ".include 'except_severity.pasm'\n"
    concat $P104, $P103, ".include 'except_types.pasm'\n"
.annotate 'line', 1511
    concat $P105, $P104, ".include 'iglobals.pasm'\n"
.annotate 'line', 1512
    concat $P106, $P105, ".include 'interpinfo.pasm'\n"
.annotate 'line', 1513
    concat $P107, $P106, ".include 'iterator.pasm'\n"
.annotate 'line', 1514
    concat $P108, $P107, ".include 'sysinfo.pasm'\n"
.annotate 'line', 1515
    concat $P109, $P108, ".include 'stat.pasm'\n"
.annotate 'line', 1516
    concat $P110, $P109, ".include 'datatypes.pasm'\n"
.annotate 'line', 1508
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "pir" :anon :subid("142_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2113
    .param pmc param_2114
    .param pmc param_2115 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1520
    .lex "self", param_2113
    .lex "$source", param_2114
    .lex "%adverbs", param_2115
.annotate 'line', 1521
    set $P102, param_2113
    nqp_decontainerize $P103, $P102
    $P104 = $P103."pirbegin"()
    compreg $P105, "POST"
    set $P106, param_2114
    unless_null $P106, vivify_906
    new $P106, "Undef"
  vivify_906:
    set $P2116, param_2115
    unless_null $P2116, vivify_907
    $P2116 = root_new ['parrot';'Hash']
  vivify_907:
    $S100 = $P105."to_pir"($P106, $P2116 :flat)
    concat $P107, $P104, $S100
.annotate 'line', 1520
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "evalpmc" :anon :subid("143_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2118
    .param pmc param_2119
    .param pmc param_2120 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1524
    .lex "self", param_2118
    .lex "$source", param_2119
    .lex "%adverbs", param_2120
.annotate 'line', 1525
    new $P102, "Undef"
    set $P2121, $P102
    .lex "$compiler", $P2121
    compreg $P103, "PIR"
    set $P2121, $P103
.annotate 'line', 1526
    set $P103, $P2121
    unless_null $P103, vivify_908
    new $P103, "Undef"
  vivify_908:
    set $P104, param_2119
    unless_null $P104, vivify_909
    new $P104, "Undef"
  vivify_909:
    $P105 = $P103($P104)
.annotate 'line', 1524
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "dumper" :anon :subid("144_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2123
    .param pmc param_2124
    .param pmc param_2125
    .param pmc param_2126 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1529
    .const 'Sub' $P2130 = "323_1340317678.734" 
    capture_lex $P2130
    .lex "self", param_2123
    .lex "$obj", param_2124
    .lex "$name", param_2125
    .lex "%options", param_2126
.annotate 'line', 1530
    set $P2128, param_2126
    unless_null $P2128, vivify_910
    $P2128 = root_new ['parrot';'Hash']
  vivify_910:
    set $P103, $P2128["dumper"]
    unless_null $P103, vivify_911
    new $P103, "Undef"
  vivify_911:
    if $P103, if_2127
.annotate 'line', 1536
    set $P106, param_2124
    unless_null $P106, vivify_912
    new $P106, "Undef"
  vivify_912:
    set $P107, param_2125
    unless_null $P107, vivify_913
    new $P107, "Undef"
  vivify_913:
    $P109 = "_dumper"($P106, $P107)
.annotate 'line', 1535
    set $P102, $P109
.annotate 'line', 1530
    goto if_2127_end
  if_2127:
    .const 'Sub' $P2130 = "323_1340317678.734" 
    capture_lex $P2130
    $P105 = $P2130()
    set $P102, $P105
  if_2127_end:
.annotate 'line', 1529
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2129"  :anon :subid("323_1340317678.734") :outer("144_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1532
    new $P104, "Undef"
    set $P2131, $P104
    .lex "$dumper", $P2131
.annotate 'line', 1531
    load_bytecode "PCT/Dumper.pbc"
.annotate 'line', 1532
    find_lex $P2132, "%options"
    unless_null $P2132, vivify_914
    $P2132 = root_new ['parrot';'Hash']
  vivify_914:
    set $P105, $P2132["dumper"]
    unless_null $P105, vivify_915
    new $P105, "Undef"
  vivify_915:
    set $S100, $P105
    downcase $S101, $S100
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PCT"
    get_who $P108, $P107
    set $P2133, $P108["Dumper"]
    unless_null $P2133, vivify_916
    $P2133 = root_new ['parrot';'Hash']
  vivify_916:
    set $P109, $P2133[$S101]
    unless_null $P109, vivify_917
    new $P109, "Undef"
  vivify_917:
    set $P2131, $P109
.annotate 'line', 1533
    set $P105, $P2131
    unless_null $P105, vivify_918
    new $P105, "Undef"
  vivify_918:
    find_lex $P106, "$obj"
    unless_null $P106, vivify_919
    new $P106, "Undef"
  vivify_919:
    find_lex $P107, "$name"
    unless_null $P107, vivify_920
    new $P107, "Undef"
  vivify_920:
    $P108 = $P105($P106, $P107)
.annotate 'line', 1530
    .return ($P108)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "usage" :anon :subid("145_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2135
    .param pmc param_2136 :optional
    .param int has_param_2136 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1540
    .lex "self", param_2135
    if has_param_2136, optparam_921
    new $P102, "Undef"
    set param_2136, $P102
  optparam_921:
    .lex "$name", param_2136
.annotate 'line', 1541
    set $P103, param_2136
    unless_null $P103, vivify_922
    new $P103, "Undef"
  vivify_922:
    unless $P103, if_2137_end
.annotate 'line', 1542
    set $P104, param_2136
    unless_null $P104, vivify_923
    new $P104, "Undef"
  vivify_923:
    "say"($P104)
  if_2137_end:
.annotate 'line', 1544
    set $P103, param_2135
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P106, $P104, $P105, "$!usage", 4
    unless_null $P106, vivify_924
    new $P106, "Undef"
  vivify_924:
    say $P106
.annotate 'line', 1545
    exit 0
.annotate 'line', 1540
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "version" :anon :subid("146_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2139
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1548
    .lex "self", param_2139
.annotate 'line', 1549
    new $P102, "Undef"
    set $P2140, $P102
    .lex "$version", $P2140
.annotate 'line', 1550
    new $P103, "Undef"
    set $P2141, $P103
    .lex "$parver", $P2141
.annotate 'line', 1551
    new $P104, "Undef"
    set $P2142, $P104
    .lex "$parrev", $P2142
.annotate 'line', 1549
    set $P105, param_2139
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P2143, $P106, $P107, "%!config", 7
    unless_null $P2143, vivify_925
    $P2143 = root_new ['parrot';'Hash']
  vivify_925:
    set $P108, $P2143["version"]
    unless_null $P108, vivify_926
    new $P108, "Undef"
  vivify_926:
    set $P2140, $P108
.annotate 'line', 1550
    find_lex $P105, "$?PACKAGE"
    get_who $P106, $P105
    set $P2144, $P106["%parrot_config"]
    unless_null $P2144, vivify_927
    $P2144 = root_new ['parrot';'Hash']
  vivify_927:
    set $P107, $P2144["VERSION"]
    unless_null $P107, vivify_928
    new $P107, "Undef"
  vivify_928:
    set $P2141, $P107
.annotate 'line', 1551
    find_lex $P105, "$?PACKAGE"
    get_who $P106, $P105
    set $P2146, $P106["%parrot_config"]
    unless_null $P2146, vivify_929
    $P2146 = root_new ['parrot';'Hash']
  vivify_929:
    set $P107, $P2146["git_describe"]
    unless_null $P107, vivify_930
    new $P107, "Undef"
  vivify_930:
    set $P2145, $P107
    defined $I2148, $P2145
    if $I2148, default_2147
    new $P108, "String"
    assign $P108, "(unknown)"
    set $P2145, $P108
  default_2147:
    set $P2142, $P2145
.annotate 'line', 1552
    new $P105, 'String'
    set $P105, "This is "
    set $P106, param_2139
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P109, $P107, $P108, "$!language", 6
    unless_null $P109, vivify_931
    new $P109, "Undef"
  vivify_931:
    concat $P110, $P105, $P109
    concat $P111, $P110, " version "
    set $P112, $P2140
    unless_null $P112, vivify_932
    new $P112, "Undef"
  vivify_932:
    concat $P113, $P111, $P112
    concat $P114, $P113, " built on parrot "
    set $P115, $P2141
    unless_null $P115, vivify_933
    new $P115, "Undef"
  vivify_933:
    concat $P116, $P114, $P115
    concat $P117, $P116, " revision "
    set $P118, $P2142
    unless_null $P118, vivify_934
    new $P118, "Undef"
  vivify_934:
    concat $P119, $P117, $P118
    say $P119
.annotate 'line', 1553
    exit 0
.annotate 'line', 1548
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "show-config" :anon :subid("147_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2150
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1556
    .const 'Sub' $P2158 = "325_1340317678.734" 
    capture_lex $P2158
    .const 'Sub' $P2153 = "324_1340317678.734" 
    capture_lex $P2153
    .lex "self", param_2150
.annotate 'line', 1557
    find_lex $P103, "$?PACKAGE"
    get_who $P104, $P103
    set $P2151, $P104["%parrot_config"]
    unless_null $P2151, vivify_935
    $P2151 = root_new ['parrot';'Hash']
  vivify_935:
    defined $I100, $P2151
    unless $I100, for_undef_936
    iter $P102, $P2151
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop2155_handler
    push_eh $P106
  loop2155_test:
    unless $P102, loop2155_done
    shift $P105, $P102
  loop2155_redo:
    .const 'Sub' $P2153 = "324_1340317678.734" 
    capture_lex $P2153
    $P2153($P105)
  loop2155_next:
    goto loop2155_test
  loop2155_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop2155_next
    eq $P107, .CONTROL_LOOP_REDO, loop2155_redo
  loop2155_done:
    pop_eh 
  for_undef_936:
.annotate 'line', 1560
    set $P103, param_2150
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P2156, $P104, $P105, "%!config", 7
    unless_null $P2156, vivify_939
    $P2156 = root_new ['parrot';'Hash']
  vivify_939:
    defined $I100, $P2156
    unless $I100, for_undef_940
    iter $P102, $P2156
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop2160_handler
    push_eh $P107
  loop2160_test:
    unless $P102, loop2160_done
    shift $P106, $P102
  loop2160_redo:
    .const 'Sub' $P2158 = "325_1340317678.734" 
    capture_lex $P2158
    $P2158($P106)
  loop2160_next:
    goto loop2160_test
  loop2160_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop2160_next
    eq $P108, .CONTROL_LOOP_REDO, loop2160_redo
  loop2160_done:
    pop_eh 
  for_undef_940:
.annotate 'line', 1563
    exit 0
.annotate 'line', 1556
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2152"  :anon :subid("324_1340317678.734") :outer("147_1340317678.734")
    .param pmc param_2154
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1557
    .lex "$_", param_2154
.annotate 'line', 1558
    new $P106, "String"
    assign $P106, "parrot::"
    find_lex $P107, "$_"
    unless_null $P107, vivify_937
    new $P107, "Undef"
  vivify_937:
    $S100 = $P107."key"()
    concat $P108, $P106, $S100
    concat $P109, $P108, "="
    find_lex $P110, "$_"
    unless_null $P110, vivify_938
    new $P110, "Undef"
  vivify_938:
    $S101 = $P110."value"()
    concat $P111, $P109, $S101
    say $P111
.annotate 'line', 1557
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2157"  :anon :subid("325_1340317678.734") :outer("147_1340317678.734")
    .param pmc param_2159
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1560
    .lex "$_", param_2159
.annotate 'line', 1561
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P110, $P108, $P109, "$!language", 6
    unless_null $P110, vivify_941
    new $P110, "Undef"
  vivify_941:
    concat $P111, $P110, "::"
    find_lex $P112, "$_"
    unless_null $P112, vivify_942
    new $P112, "Undef"
  vivify_942:
    $S100 = $P112."key"()
    concat $P113, $P111, $S100
    concat $P114, $P113, "="
    find_lex $P115, "$_"
    unless_null $P115, vivify_943
    new $P115, "Undef"
  vivify_943:
    $S101 = $P115."value"()
    concat $P116, $P114, $S101
    say $P116
.annotate 'line', 1560
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "nqpevent" :anon :subid("148_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2162
    .param pmc param_2163 :optional
    .param int has_param_2163 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1566
    .const 'Sub' $P2168 = "326_1340317678.734" 
    capture_lex $P2168
    .lex "self", param_2162
    if has_param_2163, optparam_944
    new $P102, "Undef"
    set param_2163, $P102
  optparam_944:
    .lex "$spec", param_2163
.annotate 'line', 1569
    new $P103, "Undef"
    set $P2164, $P103
    .lex "$fh", $P2164
.annotate 'line', 1568
    nqpevent "nqpevent: log finished"
.annotate 'line', 1569
    null $P104
    nqpevent_fh $P105, $P104
    set $P2164, $P105
.annotate 'line', 1570
    set $P104, $P2164
    unless_null $P104, vivify_945
    new $P104, "Undef"
  vivify_945:
    unless $P104, if_2165_end
    set $P105, $P2164
    unless_null $P105, vivify_946
    new $P105, "Undef"
  vivify_946:
    $P105."flush"()
  if_2165_end:
.annotate 'line', 1573
    set $P105, param_2163
    unless_null $P105, vivify_947
    new $P105, "Undef"
  vivify_947:
    if $P105, if_2166
    set $P104, $P105
    goto if_2166_end
  if_2166:
    .const 'Sub' $P2168 = "326_1340317678.734" 
    capture_lex $P2168
    $P108 = $P2168()
    set $P104, $P108
  if_2166_end:
.annotate 'line', 1566
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2167"  :anon :subid("326_1340317678.734") :outer("148_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1573
    .const 'Sub' $P2175 = "327_1340317678.734" 
    capture_lex $P2175
.annotate 'line', 1575
    new $P106, "Undef"
    set $P2169, $P106
    .lex "$file", $P2169
.annotate 'line', 1576
    new $P107, "Undef"
    set $P2170, $P107
    .lex "$flags", $P2170
.annotate 'line', 1574
    find_lex $P108, "$spec"
    unless_null $P108, vivify_948
    new $P108, "Undef"
  vivify_948:
    set $S100, $P108
    split $P109, ";", $S100
    store_lex "$spec", $P109
.annotate 'line', 1575
    find_lex $P2171, "$spec"
    unless_null $P2171, vivify_949
    $P2171 = root_new ['parrot';'ResizablePMCArray']
  vivify_949:
    set $P108, $P2171[0]
    unless_null $P108, vivify_950
    new $P108, "Undef"
  vivify_950:
    set $P2169, $P108
.annotate 'line', 1576
    find_lex $P2172, "$spec"
    unless_null $P2172, vivify_951
    $P2172 = root_new ['parrot';'ResizablePMCArray']
  vivify_951:
    set $P108, $P2172[1]
    unless_null $P108, vivify_952
    new $P108, "Undef"
  vivify_952:
    set $P2170, $P108
.annotate 'line', 1577
    set $P108, $P2169
    unless_null $P108, vivify_953
    new $P108, "Undef"
  vivify_953:
    set $S100, $P108
    isgt $I100, $S100, ""
    if $I100, if_2173
.annotate 'line', 1583
    getinterp $P110
    $P112 = $P110."stderr_handle"()
    nqpevent_fh $P113, $P112
.annotate 'line', 1582
    goto if_2173_end
  if_2173:
.annotate 'line', 1577
    .const 'Sub' $P2175 = "327_1340317678.734" 
    capture_lex $P2175
    $P2175()
  if_2173_end:
.annotate 'line', 1585
    set $P108, $P2170
    unless_null $P108, vivify_958
    new $P108, "Undef"
  vivify_958:
    set $S100, $P108
    iseq $I101, $S100, ""
    if $I101, if_2178
    set $P109, $P2170
    unless_null $P109, vivify_959
    new $P109, "Undef"
  vivify_959:
    set $I100, $P109
    goto if_2178_end
  if_2178:
    set $I100, 31
  if_2178_end:
    nqpdebflags $I102, $I100
.annotate 'line', 1586
    nqpevent "nqpevent: log started"
.annotate 'line', 1573
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2174"  :anon :subid("327_1340317678.734") :outer("326_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1578
    new $P109, "Undef"
    set $P2176, $P109
    .lex "$fh", $P2176
    new $P110, "FileHandle"
    set $P2176, $P110
.annotate 'line', 1579
    set $P110, $P2176
    unless_null $P110, vivify_954
    new $P110, "Undef"
  vivify_954:
    find_lex $P111, "$file"
    unless_null $P111, vivify_955
    new $P111, "Undef"
  vivify_955:
    $P112 = $P110."open"($P111, "w")
    if $P112, unless_2177_end
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    new $P115, 'String'
    set $P115, "Cannot write to "
    find_lex $P116, "$file"
    unless_null $P116, vivify_956
    new $P116, "Undef"
  vivify_956:
    concat $P117, $P115, $P116
    $P114."panic"($P117)
  unless_2177_end:
.annotate 'line', 1580
    set $P110, $P2176
    unless_null $P110, vivify_957
    new $P110, "Undef"
  vivify_957:
    nqpevent_fh $P111, $P110
.annotate 'line', 1577
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "removestage" :anon :subid("149_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2180
    .param pmc param_2181
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1590
    .const 'Sub' $P2186 = "328_1340317678.734" 
    capture_lex $P2186
    .lex "self", param_2180
    .lex "$stagename", param_2181
.annotate 'line', 1591
    $P2183 = root_new ['parrot';'ResizablePMCArray']
    set $P2182, $P2183
    .lex "@new_stages", $P2182
    new $P102, "ResizableStringArray"
    set $P2182, $P102
.annotate 'line', 1592
    set $P103, param_2180
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P2184, $P104, $P105, "@!stages", 0
    unless_null $P2184, vivify_960
    $P2184 = root_new ['parrot';'ResizablePMCArray']
  vivify_960:
    defined $I100, $P2184
    unless $I100, for_undef_961
    iter $P102, $P2184
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2190_handler
    push_eh $P108
  loop2190_test:
    unless $P102, loop2190_done
    shift $P106, $P102
  loop2190_redo:
    .const 'Sub' $P2186 = "328_1340317678.734" 
    capture_lex $P2186
    $P2186($P106)
  loop2190_next:
    goto loop2190_test
  loop2190_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2190_next
    eq $P109, .CONTROL_LOOP_REDO, loop2190_redo
  loop2190_done:
    pop_eh 
  for_undef_961:
.annotate 'line', 1597
    set $P2191, $P2182
    unless_null $P2191, vivify_966
    $P2191 = root_new ['parrot';'ResizablePMCArray']
  vivify_966:
    set $P102, param_2180
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_bind_attr_obj $P103, $P104, "@!stages", 0, $P2191
.annotate 'line', 1590
    .return ($P2191)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2185"  :anon :subid("328_1340317678.734") :outer("149_1340317678.734")
    .param pmc param_2187
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1592
    .lex "$_", param_2187
.annotate 'line', 1593
    find_lex $P108, "$_"
    unless_null $P108, vivify_962
    new $P108, "Undef"
  vivify_962:
    set $S100, $P108
    find_lex $P109, "$stagename"
    unless_null $P109, vivify_963
    new $P109, "Undef"
  vivify_963:
    set $S101, $P109
    isne $I101, $S100, $S101
    if $I101, if_2188
    new $P107, 'Integer'
    set $P107, $I101
    goto if_2188_end
  if_2188:
.annotate 'line', 1594
    find_lex $P2189, "@new_stages"
    unless_null $P2189, vivify_964
    $P2189 = root_new ['parrot';'ResizablePMCArray']
  vivify_964:
    find_lex $P110, "$_"
    unless_null $P110, vivify_965
    new $P110, "Undef"
  vivify_965:
    $P111 = $P2189."push"($P110)
.annotate 'line', 1593
    set $P107, $P111
  if_2188_end:
.annotate 'line', 1592
    .return ($P107)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "addstage" :anon :subid("150_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2195
    .param pmc param_2196
    .param pmc param_2197 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1600
    .const 'Sub' $P2215 = "330_1340317678.734" 
    capture_lex $P2215
    .const 'Sub' $P2209 = "329_1340317678.734" 
    capture_lex $P2209
    new $P2194, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2194, control_2193
    push_eh $P2194
    .lex "self", param_2195
    .lex "$stagename", param_2196
    .lex "%adverbs", param_2197
.annotate 'line', 1601
    new $P102, "Undef"
    set $P2198, $P102
    .lex "$position", $P2198
.annotate 'line', 1602
    new $P103, "Undef"
    set $P2199, $P103
    .lex "$where", $P2199
.annotate 'line', 1615
    $P2201 = root_new ['parrot';'ResizablePMCArray']
    set $P2200, $P2201
    .lex "@new-stages", $P2200
.annotate 'line', 1600
    set $P104, $P2198
    unless_null $P104, vivify_967
    new $P104, "Undef"
  vivify_967:
    set $P104, $P2199
    unless_null $P104, vivify_968
    new $P104, "Undef"
  vivify_968:
.annotate 'line', 1603
    set $P2203, param_2197
    unless_null $P2203, vivify_969
    $P2203 = root_new ['parrot';'Hash']
  vivify_969:
    set $P104, $P2203["before"]
    unless_null $P104, vivify_970
    new $P104, "Undef"
  vivify_970:
    if $P104, if_2202
.annotate 'line', 1606
    set $P2206, param_2197
    unless_null $P2206, vivify_971
    $P2206 = root_new ['parrot';'Hash']
  vivify_971:
    set $P105, $P2206["after"]
    unless_null $P105, vivify_972
    new $P105, "Undef"
  vivify_972:
    if $P105, if_2205
.annotate 'line', 1609
    .const 'Sub' $P2209 = "329_1340317678.734" 
    capture_lex $P2209
    $P2209()
    goto if_2205_end
  if_2205:
.annotate 'line', 1607
    set $P2207, param_2197
    unless_null $P2207, vivify_976
    $P2207 = root_new ['parrot';'Hash']
  vivify_976:
    set $P106, $P2207["after"]
    unless_null $P106, vivify_977
    new $P106, "Undef"
  vivify_977:
    set $P2199, $P106
.annotate 'line', 1608
    new $P106, "String"
    assign $P106, "after"
    set $P2198, $P106
  if_2205_end:
.annotate 'line', 1606
    goto if_2202_end
  if_2202:
.annotate 'line', 1604
    set $P2204, param_2197
    unless_null $P2204, vivify_978
    $P2204 = root_new ['parrot';'Hash']
  vivify_978:
    set $P105, $P2204["before"]
    unless_null $P105, vivify_979
    new $P105, "Undef"
  vivify_979:
    set $P2199, $P105
.annotate 'line', 1605
    new $P105, "String"
    assign $P105, "before"
    set $P2198, $P105
  if_2202_end:
.annotate 'line', 1615
    new $P104, "ResizableStringArray"
    set $P2200, $P104
.annotate 'line', 1616
    set $P105, param_2195
    nqp_decontainerize $P106, $P105
    $P107 = $P106."stages"()
    defined $I100, $P107
    unless $I100, for_undef_980
    iter $P104, $P107
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop2224_handler
    push_eh $P110
  loop2224_test:
    unless $P104, loop2224_done
    shift $P108, $P104
  loop2224_redo:
    .const 'Sub' $P2215 = "330_1340317678.734" 
    capture_lex $P2215
    $P2215($P108)
  loop2224_next:
    goto loop2224_test
  loop2224_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop2224_next
    eq $P111, .CONTROL_LOOP_REDO, loop2224_redo
  loop2224_done:
    pop_eh 
  for_undef_980:
.annotate 'line', 1629
    set $P104, param_2195
    nqp_decontainerize $P105, $P104
    set $P2225, $P2200
    unless_null $P2225, vivify_994
    $P2225 = root_new ['parrot';'ResizablePMCArray']
  vivify_994:
    $P106 = $P105."stages"($P2225)
.annotate 'line', 1600
    .return ($P106)
  control_2193:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P104, exception, "payload"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "_block2208"  :anon :subid("329_1340317678.734") :outer("150_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1610
    $P2211 = root_new ['parrot';'ResizablePMCArray']
    set $P2210, $P2211
    .lex "@new-stages", $P2210
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    $P108 = $P107."stages"()
    clone $P109, $P108
    set $P2210, $P109
.annotate 'line', 1611
    set $P2212, $P2210
    unless_null $P2212, vivify_973
    $P2212 = root_new ['parrot';'ResizablePMCArray']
  vivify_973:
    find_lex $P106, "$stagename"
    unless_null $P106, vivify_974
    new $P106, "Undef"
  vivify_974:
    set $S100, $P106
    push $P2212, $S100
.annotate 'line', 1612
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    set $P2213, $P2210
    unless_null $P2213, vivify_975
    $P2213 = root_new ['parrot';'ResizablePMCArray']
  vivify_975:
    $P107."stages"($P2213)
.annotate 'line', 1613
    new $P106, "Exception"
    set $P106['type'], .CONTROL_RETURN
    new $P107, "Float"
    assign $P107, 1
    setattribute $P106, 'payload', $P107
    throw $P106
.annotate 'line', 1609
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2214"  :anon :subid("330_1340317678.734") :outer("150_1340317678.734")
    .param pmc param_2216
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1616
    .lex "$_", param_2216
.annotate 'line', 1617
    find_lex $P110, "$_"
    unless_null $P110, vivify_981
    new $P110, "Undef"
  vivify_981:
    set $S100, $P110
    find_lex $P111, "$where"
    unless_null $P111, vivify_982
    new $P111, "Undef"
  vivify_982:
    set $S101, $P111
    iseq $I101, $S100, $S101
    if $I101, if_2217
.annotate 'line', 1626
    find_lex $P2223, "@new-stages"
    unless_null $P2223, vivify_983
    $P2223 = root_new ['parrot';'ResizablePMCArray']
  vivify_983:
    find_lex $P113, "$_"
    unless_null $P113, vivify_984
    new $P113, "Undef"
  vivify_984:
    set $S102, $P113
    push $P2223, $S102
.annotate 'line', 1625
    set $P109, $P2223
.annotate 'line', 1617
    goto if_2217_end
  if_2217:
.annotate 'line', 1618
    find_lex $P113, "$position"
    unless_null $P113, vivify_985
    new $P113, "Undef"
  vivify_985:
    set $S102, $P113
    iseq $I102, $S102, "before"
    if $I102, if_2218
.annotate 'line', 1622
    find_lex $P2221, "@new-stages"
    unless_null $P2221, vivify_986
    $P2221 = root_new ['parrot';'ResizablePMCArray']
  vivify_986:
    find_lex $P114, "$_"
    unless_null $P114, vivify_987
    new $P114, "Undef"
  vivify_987:
    set $S103, $P114
    push $P2221, $S103
.annotate 'line', 1623
    find_lex $P2222, "@new-stages"
    unless_null $P2222, vivify_988
    $P2222 = root_new ['parrot';'ResizablePMCArray']
  vivify_988:
    find_lex $P114, "$stagename"
    unless_null $P114, vivify_989
    new $P114, "Undef"
  vivify_989:
    set $S103, $P114
    push $P2222, $S103
.annotate 'line', 1621
    set $P112, $P2222
.annotate 'line', 1618
    goto if_2218_end
  if_2218:
.annotate 'line', 1619
    find_lex $P2219, "@new-stages"
    unless_null $P2219, vivify_990
    $P2219 = root_new ['parrot';'ResizablePMCArray']
  vivify_990:
    find_lex $P114, "$stagename"
    unless_null $P114, vivify_991
    new $P114, "Undef"
  vivify_991:
    set $S103, $P114
    push $P2219, $S103
.annotate 'line', 1620
    find_lex $P2220, "@new-stages"
    unless_null $P2220, vivify_992
    $P2220 = root_new ['parrot';'ResizablePMCArray']
  vivify_992:
    find_lex $P114, "$_"
    unless_null $P114, vivify_993
    new $P114, "Undef"
  vivify_993:
    set $S103, $P114
    push $P2220, $S103
.annotate 'line', 1618
    set $P112, $P2220
  if_2218_end:
.annotate 'line', 1617
    set $P109, $P112
  if_2217_end:
.annotate 'line', 1616
    .return ($P109)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.include "except_types.pasm"
.sub "parse_name" :anon :subid("151_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2227
    .param pmc param_2228
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1632
    .const 'Sub' $P2244 = "331_1340317678.734" 
    capture_lex $P2244
    .lex "self", param_2227
    .lex "$name", param_2228
.annotate 'line', 1633
    $P2230 = root_new ['parrot';'ResizablePMCArray']
    set $P2229, $P2230
    .lex "@ns", $P2229
.annotate 'line', 1634
    new $P102, "Undef"
    set $P2231, $P102
    .lex "$sigil", $P2231
.annotate 'line', 1637
    new $P103, "Undef"
    set $P2232, $P103
    .lex "$idx", $P2232
.annotate 'line', 1645
    $P2234 = root_new ['parrot';'ResizablePMCArray']
    set $P2233, $P2234
    .lex "@actual_ns", $P2233
.annotate 'line', 1633
    set $P104, param_2228
    unless_null $P104, vivify_995
    new $P104, "Undef"
  vivify_995:
    set $S100, $P104
    split $P105, "::", $S100
    set $P2229, $P105
.annotate 'line', 1634
    set $P2235, $P2229
    unless_null $P2235, vivify_996
    $P2235 = root_new ['parrot';'ResizablePMCArray']
  vivify_996:
    set $P104, $P2235[0]
    unless_null $P104, vivify_997
    new $P104, "Undef"
  vivify_997:
    set $S100, $P104
    substr $S101, $S100, 0, 1
    new $P105, 'String'
    set $P105, $S101
    set $P2231, $P105
.annotate 'line', 1637
    set $P104, $P2231
    unless_null $P104, vivify_998
    new $P104, "Undef"
  vivify_998:
    set $S100, $P104
    index $I100, "$@%&", $S100
    new $P105, 'Integer'
    set $P105, $I100
    set $P2232, $P105
.annotate 'line', 1638
    set $P104, $P2232
    unless_null $P104, vivify_999
    new $P104, "Undef"
  vivify_999:
    set $N100, $P104
    set $N101, 0
    isge $I100, $N100, $N101
    unless $I100, if_2236_end
.annotate 'line', 1639
    set $P2237, $P2229
    unless_null $P2237, vivify_1000
    $P2237 = root_new ['parrot';'ResizablePMCArray']
  vivify_1000:
    set $P105, $P2237[0]
    unless_null $P105, vivify_1001
    new $P105, "Undef"
  vivify_1001:
    set $S100, $P105
    substr $S101, $S100, 1
    new $P106, 'String'
    set $P106, $S101
    set $P2238, $P2229
    unless_null $P2238, vivify_1002
    $P2238 = root_new ['parrot';'ResizablePMCArray']
    set $P2229, $P2238
  vivify_1002:
    set $P2238[0], $P106
.annotate 'line', 1640
    set $P105, $P2231
    unless_null $P105, vivify_1003
    new $P105, "Undef"
  vivify_1003:
    set $P2239, $P2229
    unless_null $P2239, vivify_1004
    $P2239 = root_new ['parrot';'ResizablePMCArray']
  vivify_1004:
    set $P106, $P2239[-1]
    unless_null $P106, vivify_1005
    new $P106, "Undef"
  vivify_1005:
    concat $P107, $P105, $P106
    set $P2240, $P2229
    unless_null $P2240, vivify_1006
    $P2240 = root_new ['parrot';'ResizablePMCArray']
    set $P2229, $P2240
  vivify_1006:
    set $P2240[-1], $P107
  if_2236_end:
.annotate 'line', 1632
    set $P2241, $P2233
    unless_null $P2241, vivify_1007
    $P2241 = root_new ['parrot';'ResizablePMCArray']
  vivify_1007:
.annotate 'line', 1646
    set $P2242, $P2229
    unless_null $P2242, vivify_1008
    $P2242 = root_new ['parrot';'ResizablePMCArray']
  vivify_1008:
    defined $I100, $P2242
    unless $I100, for_undef_1009
    iter $P104, $P2242
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop2248_handler
    push_eh $P107
  loop2248_test:
    unless $P104, loop2248_done
    shift $P105, $P104
  loop2248_redo:
    .const 'Sub' $P2244 = "331_1340317678.734" 
    capture_lex $P2244
    $P2244($P105)
  loop2248_next:
    goto loop2248_test
  loop2248_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop2248_next
    eq $P108, .CONTROL_LOOP_REDO, loop2248_redo
  loop2248_done:
    pop_eh 
  for_undef_1009:
.annotate 'line', 1632
    set $P2249, $P2233
    unless_null $P2249, vivify_1013
    $P2249 = root_new ['parrot';'ResizablePMCArray']
  vivify_1013:
    .return ($P2249)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "_block2243"  :anon :subid("331_1340317678.734") :outer("151_1340317678.734")
    .param pmc param_2245
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1646
    .lex "$_", param_2245
.annotate 'line', 1647
    find_lex $P107, "$_"
    unless_null $P107, vivify_1010
    new $P107, "Undef"
  vivify_1010:
    set $S100, $P107
    iseq $I101, $S100, ""
    unless $I101, unless_2246
    new $P106, 'Integer'
    set $P106, $I101
    goto unless_2246_end
  unless_2246:
    find_lex $P2247, "@actual_ns"
    unless_null $P2247, vivify_1011
    $P2247 = root_new ['parrot';'ResizablePMCArray']
  vivify_1011:
    find_lex $P108, "$_"
    unless_null $P108, vivify_1012
    new $P108, "Undef"
  vivify_1012:
    set $S101, $P108
    push $P2247, $S101
    set $P106, $P2247
  unless_2246_end:
.annotate 'line', 1646
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "lineof" :anon :subid("152_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2251
    .param pmc param_2252
    .param pmc param_2253
    .param pmc param_2254 :optional :named("cache")
    .param int has_param_2254 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1652
    .lex "self", param_2251
    .lex "$target", param_2252
    .lex "$pos", param_2253
    if has_param_2254, optparam_1014
    new $P102, "Undef"
    set param_2254, $P102
  optparam_1014:
    .lex "$cache", param_2254
.annotate 'line', 1653

            .local pmc target, linepos
            .local int pos, cache
            target = find_lex '$target'
            $P0 = find_lex '$pos'
            pos = $P0
            $P0 = find_lex '$cache'
            cache = $P0

            # If we've previously cached C<linepos> for target, we use it.
            unless cache goto linepos_build
            linepos = getprop target, '!linepos'
            unless null linepos goto linepos_done

            # calculate a new linepos array.
        linepos_build:
            linepos = new ['ResizableIntegerArray']
            unless cache goto linepos_build_1
            setprop target, '!linepos', linepos
        linepos_build_1:
            .local string s
            .local int jpos, eos
            s = target
            eos = length s
            jpos = 0
            # Search for all of the newline markers in C<target>.  When we
            # find one, mark the ending offset of the line in C<linepos>.
        linepos_loop:
            jpos = find_cclass .CCLASS_NEWLINE, s, jpos, eos
            unless jpos < eos goto linepos_done_1
            $I0 = ord s, jpos
            inc jpos
            push linepos, jpos
            # Treat \r\n as a single logical newline.
            if $I0 != 13 goto linepos_loop
            $I0 = ord s, jpos
            if $I0 != 10 goto linepos_loop
            inc jpos
            goto linepos_loop
        linepos_done_1:
        linepos_done:

            # We have C<linepos>, so now we (binary) search the array
            # for the largest element that is not greater than C<pos>.
            .local int lo, hi, line
            lo = 0
            hi = elements linepos
        binary_loop:
            if lo >= hi goto binary_done
            line = lo + hi
            line = line / 2
            $I0 = linepos[line]
            if $I0 > pos goto binary_hi
            lo = line + 1
            goto binary_loop
        binary_hi:
            hi = line
            goto binary_loop
        binary_done:
            inc lo
            .return (lo)
        
.annotate 'line', 1652
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "user-progname" :anon :subid("153_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2256
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1718
    .lex "self", param_2256
    set $P102, param_2256
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P105, $P103, $P104, "$!user_progname", 8
    unless_null $P105, vivify_1015
    new $P105, "Undef"
  vivify_1015:
    set $P2257, $P105
    defined $I2259, $P2257
    if $I2259, default_2258
    new $P106, "String"
    assign $P106, "interactive"
    set $P2257, $P106
  default_2258:
    .return ($P2257)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "cli-options" :anon :subid("154_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2261
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1721
    .lex "self", param_2261
    set $P102, param_2261
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P2262, $P103, $P104, "%!cli-options", 10
    unless_null $P2262, vivify_1016
    $P2262 = root_new ['parrot';'Hash']
  vivify_1016:
    .return ($P2262)
.end


.HLL "nqp"

.namespace ["HLL";"Compiler"]
.sub "cli-arguments" :anon :subid("155_1340317678.734") :outer("295_1340317678.734")
    .param pmc param_2264
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1722
    .lex "self", param_2264
    set $P102, param_2264
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 95
    repr_get_attr_obj $P2265, $P103, $P104, "@!cli-arguments", 9
    unless_null $P2265, vivify_1017
    $P2265 = root_new ['parrot';'ResizablePMCArray']
  vivify_1017:
    .return ($P2265)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "_block2267"  :subid("332_1340317678.734") :outer("191_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1820
    .const 'Sub' $P2283 = "160_1340317678.734" 
    capture_lex $P2283
    .const 'Sub' $P2279 = "159_1340317678.734" 
    capture_lex $P2279
    .const 'Sub' $P2276 = "158_1340317678.734" 
    capture_lex $P2276
    .const 'Sub' $P2273 = "157_1340317678.734" 
    capture_lex $P2273
    .const 'Sub' $P2271 = "156_1340317678.734" 
    capture_lex $P2271
    .lex "$?PACKAGE", $P2269
    .lex "$?CLASS", $P2270
.annotate 'line', 1836
    .const 'Sub' $P2283 = "160_1340317678.734" 
    newclosure $P2295, $P2283
.annotate 'line', 1820
    .return ($P2295)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "init" :anon :subid("156_1340317678.734") :outer("332_1340317678.734")
    .param pmc param_2272
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1824
    .lex "self", param_2272
.annotate 'line', 1825
    new $P101, "ResizablePMCArray"
    set $P102, param_2272
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_bind_attr_obj $P103, $P104, "@!arguments", 0, $P101
.annotate 'line', 1826
    new $P101, "Hash"
    set $P102, param_2272
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_bind_attr_obj $P103, $P104, "%!options", 1, $P101
.annotate 'line', 1824
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "arguments" :anon :subid("157_1340317678.734") :outer("332_1340317678.734")
    .param pmc param_2274
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1829
    .lex "self", param_2274
    set $P101, param_2274
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_get_attr_obj $P2275, $P102, $P103, "@!arguments", 0
    unless_null $P2275, vivify_1019
    $P2275 = root_new ['parrot';'ResizablePMCArray']
  vivify_1019:
    .return ($P2275)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "options" :anon :subid("158_1340317678.734") :outer("332_1340317678.734")
    .param pmc param_2277
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1830
    .lex "self", param_2277
    set $P101, param_2277
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_get_attr_obj $P2278, $P102, $P103, "%!options", 1
    unless_null $P2278, vivify_1020
    $P2278 = root_new ['parrot';'Hash']
  vivify_1020:
    .return ($P2278)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "add-argument" :anon :subid("159_1340317678.734") :outer("332_1340317678.734")
    .param pmc param_2280
    .param pmc param_2281
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1832
    .lex "self", param_2280
    .lex "$x", param_2281
.annotate 'line', 1833
    set $P101, param_2280
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_get_attr_obj $P2282, $P102, $P103, "@!arguments", 0
    unless_null $P2282, vivify_1021
    $P2282 = root_new ['parrot';'ResizablePMCArray']
  vivify_1021:
    set $P104, param_2281
    unless_null $P104, vivify_1022
    new $P104, "Undef"
  vivify_1022:
    push $P2282, $P104
.annotate 'line', 1832
    .return ($P2282)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Result"]
.sub "add-option" :anon :subid("160_1340317678.734") :outer("332_1340317678.734")
    .param pmc param_2284
    .param pmc param_2285
    .param pmc param_2286
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1836
    .lex "self", param_2284
    .lex "$name", param_2285
    .lex "$value", param_2286
.annotate 'line', 1839
    set $P105, param_2285
    unless_null $P105, vivify_1023
    new $P105, "Undef"
  vivify_1023:
    set $S100, $P105
    set $P102, param_2284
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_get_attr_obj $P2288, $P103, $P104, "%!options", 1
    unless_null $P2288, vivify_1024
    $P2288 = root_new ['parrot';'Hash']
  vivify_1024:
    exists $I100, $P2288[$S100]
    if $I100, if_2287
.annotate 'line', 1846
    set $P107, param_2286
    unless_null $P107, vivify_1025
    new $P107, "Undef"
  vivify_1025:
    set $P108, param_2285
    unless_null $P108, vivify_1026
    new $P108, "Undef"
  vivify_1026:
    set $P109, param_2284
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_get_attr_obj $P2294, $P110, $P111, "%!options", 1
    unless_null $P2294, vivify_1027
    $P2294 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P110, $P111, "%!options", 1, $P2294
  vivify_1027:
    set $P2294[$P108], $P107
.annotate 'line', 1845
    set $P101, $P107
.annotate 'line', 1839
    goto if_2287_end
  if_2287:
.annotate 'line', 1840
    set $P107, param_2285
    unless_null $P107, vivify_1028
    new $P107, "Undef"
  vivify_1028:
    set $P108, param_2284
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_get_attr_obj $P2290, $P109, $P110, "%!options", 1
    unless_null $P2290, vivify_1029
    $P2290 = root_new ['parrot';'Hash']
  vivify_1029:
    set $P111, $P2290[$P107]
    unless_null $P111, vivify_1030
    new $P111, "Undef"
  vivify_1030:
    does $I101, $P111, "array"
    if $I101, if_2289
.annotate 'line', 1843
    set $P112, param_2285
    unless_null $P112, vivify_1031
    new $P112, "Undef"
  vivify_1031:
    set $P113, param_2284
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_get_attr_obj $P2292, $P114, $P115, "%!options", 1
    unless_null $P2292, vivify_1032
    $P2292 = root_new ['parrot';'Hash']
  vivify_1032:
    set $P117, $P2292[$P112]
    unless_null $P117, vivify_1033
    new $P117, "Undef"
  vivify_1033:
    set $P118, param_2286
    unless_null $P118, vivify_1034
    new $P118, "Undef"
  vivify_1034:
    new $P119, "ResizablePMCArray"
    push $P119, $P117
    push $P119, $P118
    set $P120, param_2285
    unless_null $P120, vivify_1035
    new $P120, "Undef"
  vivify_1035:
    set $P121, param_2284
    nqp_decontainerize $P122, $P121
    nqp_get_sc_object $P123, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_get_attr_obj $P2293, $P122, $P123, "%!options", 1
    unless_null $P2293, vivify_1036
    $P2293 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P122, $P123, "%!options", 1, $P2293
  vivify_1036:
    set $P2293[$P120], $P119
.annotate 'line', 1842
    set $P106, $P119
.annotate 'line', 1840
    goto if_2289_end
  if_2289:
.annotate 'line', 1841
    set $P112, param_2285
    unless_null $P112, vivify_1037
    new $P112, "Undef"
  vivify_1037:
    set $P113, param_2284
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 139
    repr_get_attr_obj $P2291, $P114, $P115, "%!options", 1
    unless_null $P2291, vivify_1038
    $P2291 = root_new ['parrot';'Hash']
  vivify_1038:
    set $P116, $P2291[$P112]
    unless_null $P116, vivify_1039
    new $P116, "Undef"
  vivify_1039:
    set $P117, param_2286
    unless_null $P117, vivify_1040
    new $P117, "Undef"
  vivify_1040:
    push $P116, $P117
.annotate 'line', 1840
    set $P106, $P116
  if_2289_end:
.annotate 'line', 1839
    set $P101, $P106
  if_2287_end:
.annotate 'line', 1836
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2296"  :subid("333_1340317678.734") :outer("191_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1851
    .const 'Sub' $P2357 = "170_1340317678.734" 
    capture_lex $P2357
    .const 'Sub' $P2352 = "169_1340317678.734" 
    capture_lex $P2352
    .const 'Sub' $P2347 = "168_1340317678.734" 
    capture_lex $P2347
    .const 'Sub' $P2339 = "167_1340317678.734" 
    capture_lex $P2339
    .const 'Sub' $P2324 = "166_1340317678.734" 
    capture_lex $P2324
    .const 'Sub' $P2321 = "165_1340317678.734" 
    capture_lex $P2321
    .const 'Sub' $P2317 = "164_1340317678.734" 
    capture_lex $P2317
    .const 'Sub' $P2307 = "163_1340317678.734" 
    capture_lex $P2307
    .const 'Sub' $P2305 = "162_1340317678.734" 
    capture_lex $P2305
    .const 'Sub' $P2300 = "161_1340317678.734" 
    capture_lex $P2300
    .lex "$?PACKAGE", $P2298
    .lex "$?CLASS", $P2299
.annotate 'line', 1916
    .const 'Sub' $P2357 = "170_1340317678.734" 
    newclosure $P2435, $P2357
.annotate 'line', 1851
    .return ($P2435)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "new" :anon :subid("161_1340317678.734") :outer("333_1340317678.734")
    .param pmc param_2301
    .param pmc param_2302
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1857
    .lex "self", param_2301
    .lex "@specs", param_2302
.annotate 'line', 1858
    new $P101, "Undef"
    set $P2303, $P101
    .lex "$obj", $P2303
    set $P102, param_2301
    nqp_decontainerize $P103, $P102
    $P104 = $P103."CREATE"()
    set $P2303, $P104
.annotate 'line', 1859
    set $P102, $P2303
    unless_null $P102, vivify_1041
    new $P102, "Undef"
  vivify_1041:
    set $P2304, param_2302
    unless_null $P2304, vivify_1042
    $P2304 = root_new ['parrot';'ResizablePMCArray']
  vivify_1042:
    $P102."BUILD"($P2304 :named("specs"))
.annotate 'line', 1857
    set $P102, $P2303
    unless_null $P102, vivify_1043
    new $P102, "Undef"
  vivify_1043:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "stop-after-first-arg" :anon :subid("162_1340317678.734") :outer("333_1340317678.734")
    .param pmc param_2306
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1863
    .lex "self", param_2306
.annotate 'line', 1864
    new $P101, "Float"
    assign $P101, 1
    set $P102, param_2306
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_bind_attr_obj $P103, $P104, "$!stop-after-first-arg", 3, $P101
.annotate 'line', 1863
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "BUILD" :anon :subid("163_1340317678.734") :outer("333_1340317678.734")
    .param pmc param_2308
    .param pmc param_2309 :optional :named("specs")
    .param int has_param_2309 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1867
    .const 'Sub' $P2314 = "334_1340317678.734" 
    capture_lex $P2314
    .lex "self", param_2308
    if has_param_2309, optparam_1044
    $P2310 = root_new ['parrot';'ResizablePMCArray']
    set param_2309, $P2310
  optparam_1044:
    .lex "@specs", param_2309
.annotate 'line', 1868
    new $P101, "Float"
    assign $P101, 1
    set $P102, param_2308
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2311, $P103, $P104, "%!stopper", 2
    unless_null $P2311, vivify_1045
    $P2311 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P103, $P104, "%!stopper", 2, $P2311
  vivify_1045:
    set $P2311["--"], $P101
.annotate 'line', 1869
    new $P101, "Float"
    assign $P101, 0
    set $P102, param_2308
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_bind_attr_obj $P103, $P104, "$!stop-after-first-arg", 3, $P101
.annotate 'line', 1870
    set $P2312, param_2309
    unless_null $P2312, vivify_1046
    $P2312 = root_new ['parrot';'ResizablePMCArray']
  vivify_1046:
    defined $I100, $P2312
    unless $I100, for_undef_1047
    iter $P101, $P2312
    new $P103, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P103, loop2316_handler
    push_eh $P103
  loop2316_test:
    unless $P101, loop2316_done
    shift $P102, $P101
  loop2316_redo:
    .const 'Sub' $P2314 = "334_1340317678.734" 
    capture_lex $P2314
    $P2314($P102)
  loop2316_next:
    goto loop2316_test
  loop2316_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P104, exception, 'type'
    eq $P104, .CONTROL_LOOP_NEXT, loop2316_next
    eq $P104, .CONTROL_LOOP_REDO, loop2316_redo
  loop2316_done:
    pop_eh 
  for_undef_1047:
.annotate 'line', 1867
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2313"  :anon :subid("334_1340317678.734") :outer("163_1340317678.734")
    .param pmc param_2315
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1870
    .lex "$_", param_2315
.annotate 'line', 1871
    find_lex $P103, "self"
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$_"
    unless_null $P105, vivify_1048
    new $P105, "Undef"
  vivify_1048:
    $P106 = $P104."add-spec"($P105)
.annotate 'line', 1870
    .return ($P106)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "add-stopper" :anon :subid("164_1340317678.734") :outer("333_1340317678.734")
    .param pmc param_2318
    .param pmc param_2319
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1874
    .lex "self", param_2318
    .lex "$x", param_2319
.annotate 'line', 1875
    new $P101, "Float"
    assign $P101, 1
    set $P102, param_2319
    unless_null $P102, vivify_1049
    new $P102, "Undef"
  vivify_1049:
    set $P103, param_2318
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2320, $P104, $P105, "%!stopper", 2
    unless_null $P2320, vivify_1050
    $P2320 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P104, $P105, "%!stopper", 2, $P2320
  vivify_1050:
    set $P2320[$P102], $P101
.annotate 'line', 1874
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "split-option-aliases" :anon :subid("165_1340317678.734") :outer("333_1340317678.734")
    .param pmc param_2322
    .param pmc param_2323
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1878
    .lex "self", param_2322
    .lex "$s", param_2323
.annotate 'line', 1879
    set $P101, param_2323
    unless_null $P101, vivify_1051
    new $P101, "Undef"
  vivify_1051:
    set $S100, $P101
    split $P102, "|", $S100
.annotate 'line', 1878
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "add-spec" :anon :subid("166_1340317678.734") :outer("333_1340317678.734")
    .param pmc param_2325
    .param pmc param_2326
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1883
    .const 'Sub' $P2335 = "335_1340317678.734" 
    capture_lex $P2335
    .lex "self", param_2325
    .lex "$s", param_2326
.annotate 'line', 1884
    new $P101, "Undef"
    set $P2327, $P101
    .lex "$i", $P2327
.annotate 'line', 1885
    new $P102, "Undef"
    set $P2328, $P102
    .lex "$type", $P2328
.annotate 'line', 1886
    $P2330 = root_new ['parrot';'ResizablePMCArray']
    set $P2329, $P2330
    .lex "@options", $P2329
.annotate 'line', 1884
    set $P103, param_2326
    unless_null $P103, vivify_1052
    new $P103, "Undef"
  vivify_1052:
    set $S100, $P103
    index $I100, $S100, "="
    new $P104, 'Integer'
    set $P104, $I100
    set $P2327, $P104
.annotate 'line', 1883
    set $P103, $P2328
    unless_null $P103, vivify_1053
    new $P103, "Undef"
  vivify_1053:
    set $P2331, $P2329
    unless_null $P2331, vivify_1054
    $P2331 = root_new ['parrot';'ResizablePMCArray']
  vivify_1054:
.annotate 'line', 1887
    set $P103, $P2327
    unless_null $P103, vivify_1055
    new $P103, "Undef"
  vivify_1055:
    set $N100, $P103
    set $N101, 0
    islt $I100, $N100, $N101
    if $I100, if_2332
.annotate 'line', 1891
    set $P104, param_2326
    unless_null $P104, vivify_1056
    new $P104, "Undef"
  vivify_1056:
    set $S100, $P104
    set $P105, $P2327
    unless_null $P105, vivify_1057
    new $P105, "Undef"
  vivify_1057:
    add $P106, $P105, 1
    set $I101, $P106
    substr $S101, $S100, $I101
    new $P107, 'String'
    set $P107, $S101
    set $P2328, $P107
.annotate 'line', 1892
    set $P104, param_2325
    nqp_decontainerize $P105, $P104
    set $P106, param_2326
    unless_null $P106, vivify_1058
    new $P106, "Undef"
  vivify_1058:
    set $S100, $P106
    set $P107, $P2327
    unless_null $P107, vivify_1059
    new $P107, "Undef"
  vivify_1059:
    set $I101, $P107
    substr $S101, $S100, 0, $I101
    $P108 = $P105."split-option-aliases"($S101)
    set $P2329, $P108
.annotate 'line', 1890
    goto if_2332_end
  if_2332:
.annotate 'line', 1888
    new $P104, "String"
    assign $P104, "b"
    set $P2328, $P104
.annotate 'line', 1889
    set $P104, param_2325
    nqp_decontainerize $P105, $P104
    set $P106, param_2326
    unless_null $P106, vivify_1060
    new $P106, "Undef"
  vivify_1060:
    $P107 = $P105."split-option-aliases"($P106)
    set $P2329, $P107
  if_2332_end:
.annotate 'line', 1894
    set $P2333, $P2329
    unless_null $P2333, vivify_1061
    $P2333 = root_new ['parrot';'ResizablePMCArray']
  vivify_1061:
    defined $I100, $P2333
    unless $I100, for_undef_1062
    iter $P103, $P2333
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop2338_handler
    push_eh $P106
  loop2338_test:
    unless $P103, loop2338_done
    shift $P104, $P103
  loop2338_redo:
    .const 'Sub' $P2335 = "335_1340317678.734" 
    capture_lex $P2335
    $P2335($P104)
  loop2338_next:
    goto loop2338_test
  loop2338_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop2338_next
    eq $P107, .CONTROL_LOOP_REDO, loop2338_redo
  loop2338_done:
    pop_eh 
  for_undef_1062:
.annotate 'line', 1883
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2334"  :anon :subid("335_1340317678.734") :outer("166_1340317678.734")
    .param pmc param_2336
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1894
    .lex "$_", param_2336
.annotate 'line', 1895
    find_lex $P105, "$type"
    unless_null $P105, vivify_1063
    new $P105, "Undef"
  vivify_1063:
    find_lex $P106, "$_"
    unless_null $P106, vivify_1064
    new $P106, "Undef"
  vivify_1064:
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2337, $P108, $P109, "%!options", 1
    unless_null $P2337, vivify_1065
    $P2337 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P108, $P109, "%!options", 1, $P2337
  vivify_1065:
    set $P2337[$P106], $P105
.annotate 'line', 1894
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "is-option" :anon :subid("167_1340317678.734") :outer("333_1340317678.734")
    .param pmc param_2342
    .param pmc param_2343
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1900
    new $P2341, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2341, control_2340
    push_eh $P2341
    .lex "self", param_2342
    .lex "$x", param_2343
.annotate 'line', 1901
    set $P102, param_2343
    unless_null $P102, vivify_1066
    new $P102, "Undef"
  vivify_1066:
    set $S100, $P102
    iseq $I100, $S100, "-"
    unless $I100, unless_2345
    new $P101, 'Integer'
    set $P101, $I100
    goto unless_2345_end
  unless_2345:
    set $P103, param_2343
    unless_null $P103, vivify_1067
    new $P103, "Undef"
  vivify_1067:
    set $S101, $P103
    iseq $I101, $S101, "--"
    new $P101, 'Integer'
    set $P101, $I101
  unless_2345_end:
    unless $P101, if_2344_end
    new $P104, "Exception"
    set $P104['type'], .CONTROL_RETURN
    new $P105, "Float"
    assign $P105, 0
    setattribute $P104, 'payload', $P105
    throw $P104
  if_2344_end:
.annotate 'line', 1902
    set $P101, param_2343
    unless_null $P101, vivify_1068
    new $P101, "Undef"
  vivify_1068:
    set $S100, $P101
    substr $S101, $S100, 0, 1
    iseq $I100, $S101, "-"
    unless $I100, if_2346_end
    new $P102, "Exception"
    set $P102['type'], .CONTROL_RETURN
    new $P103, "Float"
    assign $P103, 1
    setattribute $P102, 'payload', $P103
    throw $P102
  if_2346_end:
.annotate 'line', 1900
    .return (0)
  control_2340:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P101, exception, "payload"
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "wants-value" :anon :subid("168_1340317678.734") :outer("333_1340317678.734")
    .param pmc param_2348
    .param pmc param_2349
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1906
    .lex "self", param_2348
    .lex "$x", param_2349
.annotate 'line', 1907
    new $P101, "Undef"
    set $P2350, $P101
    .lex "$spec", $P2350
    set $P102, param_2349
    unless_null $P102, vivify_1069
    new $P102, "Undef"
  vivify_1069:
    set $P103, param_2348
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2351, $P104, $P105, "%!options", 1
    unless_null $P2351, vivify_1070
    $P2351 = root_new ['parrot';'Hash']
  vivify_1070:
    set $P106, $P2351[$P102]
    unless_null $P106, vivify_1071
    new $P106, "Undef"
  vivify_1071:
    set $P2350, $P106
.annotate 'line', 1908
    set $P102, $P2350
    unless_null $P102, vivify_1072
    new $P102, "Undef"
  vivify_1072:
    set $S100, $P102
    substr $S101, $S100, 0, 1
    iseq $I100, $S101, "s"
.annotate 'line', 1906
    .return ($I100)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "optional-value" :anon :subid("169_1340317678.734") :outer("333_1340317678.734")
    .param pmc param_2353
    .param pmc param_2354
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1911
    .lex "self", param_2353
    .lex "$x", param_2354
.annotate 'line', 1912
    new $P101, "Undef"
    set $P2355, $P101
    .lex "$spec", $P2355
    set $P102, param_2354
    unless_null $P102, vivify_1073
    new $P102, "Undef"
  vivify_1073:
    set $P103, param_2353
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2356, $P104, $P105, "%!options", 1
    unless_null $P2356, vivify_1074
    $P2356 = root_new ['parrot';'Hash']
  vivify_1074:
    set $P106, $P2356[$P102]
    unless_null $P106, vivify_1075
    new $P106, "Undef"
  vivify_1075:
    set $P2355, $P106
.annotate 'line', 1913
    set $P102, $P2355
    unless_null $P102, vivify_1076
    new $P102, "Undef"
  vivify_1076:
    set $S100, $P102
    iseq $I100, $S100, "s?"
.annotate 'line', 1911
    .return ($I100)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "parse" :anon :subid("170_1340317678.734") :outer("333_1340317678.734")
    .param pmc param_2360
    .param pmc param_2361
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1916
    .const 'Sub' $P2386 = "338_1340317678.734" 
    capture_lex $P2386
    .const 'Sub' $P2378 = "337_1340317678.734" 
    capture_lex $P2378
    .const 'Sub' $P2366 = "336_1340317678.734" 
    capture_lex $P2366
    new $P2359, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2359, control_2358
    push_eh $P2359
    .lex "self", param_2360
    .lex "@args", param_2361
.annotate 'line', 1917
    new $P101, "Undef"
    set $P2362, $P101
    .lex "$i", $P2362
.annotate 'line', 1918
    new $P102, "Undef"
    set $P2363, $P102
    .lex "$arg-count", $P2363
.annotate 'line', 1920
    new $P103, "Undef"
    set $P2364, $P103
    .lex "$result", $P2364
.annotate 'line', 1924
    .const 'Sub' $P2366 = "336_1340317678.734" 
    newclosure $P2376, $P2366
    set $P2365, $P2376
    .lex "get-value", $P2365
.annotate 'line', 1939
    .const 'Sub' $P2378 = "337_1340317678.734" 
    newclosure $P2383, $P2378
    set $P2377, $P2383
    .lex "slurp-rest", $P2377
.annotate 'line', 1917
    new $P105, "Float"
    assign $P105, 0
    set $P2362, $P105
.annotate 'line', 1918
    set $P2384, param_2361
    unless_null $P2384, vivify_1102
    $P2384 = root_new ['parrot';'ResizablePMCArray']
  vivify_1102:
    set $N100, $P2384
    new $P105, 'Float'
    set $P105, $N100
    set $P2363, $P105
.annotate 'line', 1920
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "HLL"
    nqp_get_package_through_who $P107, $P106, "CommandLine"
    get_who $P108, $P107
    set $P109, $P108["Result"]
    $P110 = $P109."new"()
    set $P2364, $P110
.annotate 'line', 1921
    set $P105, $P2364
    unless_null $P105, vivify_1103
    new $P105, "Undef"
  vivify_1103:
    $P105."init"()
.annotate 'line', 1916
    set $P105, $P2365
    set $P105, $P2377
.annotate 'line', 1947
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2434_handler
    push_eh $P108
  loop2434_test:
    set $P105, $P2362
    unless_null $P105, vivify_1104
    new $P105, "Undef"
  vivify_1104:
    set $N100, $P105
    set $P106, $P2363
    unless_null $P106, vivify_1105
    new $P106, "Undef"
  vivify_1105:
    set $N101, $P106
    islt $I101, $N100, $N101
    unless $I101, loop2434_done
  loop2434_redo:
    .const 'Sub' $P2386 = "338_1340317678.734" 
    capture_lex $P2386
    $P2386()
  loop2434_next:
    goto loop2434_test
  loop2434_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2434_next
    eq $P109, .CONTROL_LOOP_REDO, loop2434_redo
  loop2434_done:
    pop_eh 
.annotate 'line', 2016
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, $P2364
    unless_null $P106, vivify_1180
    new $P106, "Undef"
  vivify_1180:
    setattribute $P105, 'payload', $P106
    throw $P105
.annotate 'line', 1916
    .return ()
  control_2358:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "get-value"  :subid("336_1340317678.734") :outer("170_1340317678.734")
    .param pmc param_2367
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1924
    .lex "$opt", param_2367
.annotate 'line', 1925
    find_lex $P105, "$i"
    unless_null $P105, vivify_1077
    new $P105, "Undef"
  vivify_1077:
    set $N100, $P105
    find_lex $P106, "$arg-count"
    unless_null $P106, vivify_1078
    new $P106, "Undef"
  vivify_1078:
    sub $P107, $P106, 1
    set $N101, $P107
    iseq $I100, $N100, $N101
    if $I100, if_2368
.annotate 'line', 1927
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$i"
    unless_null $P111, vivify_1079
    new $P111, "Undef"
  vivify_1079:
    add $P112, $P111, 1
    set $I101, $P112
    find_lex $P2370, "@args"
    unless_null $P2370, vivify_1080
    $P2370 = root_new ['parrot';'ResizablePMCArray']
  vivify_1080:
    set $P113, $P2370[$I101]
    unless_null $P113, vivify_1081
    new $P113, "Undef"
  vivify_1081:
    $P114 = $P110."is-option"($P113)
    if $P114, if_2369
.annotate 'line', 1929
    find_lex $P116, "$i"
    unless_null $P116, vivify_1082
    new $P116, "Undef"
  vivify_1082:
    add $P117, $P116, 1
    set $I102, $P117
    find_lex $P2372, "@args"
    unless_null $P2372, vivify_1083
    $P2372 = root_new ['parrot';'ResizablePMCArray']
  vivify_1083:
    set $P118, $P2372[$I102]
    unless_null $P118, vivify_1084
    new $P118, "Undef"
  vivify_1084:
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    nqp_get_sc_object $P121, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2373, $P120, $P121, "%!stopper", 2
    unless_null $P2373, vivify_1085
    $P2373 = root_new ['parrot';'Hash']
  vivify_1085:
    set $P122, $P2373[$P118]
    unless_null $P122, vivify_1086
    new $P122, "Undef"
  vivify_1086:
    if $P122, if_2371
.annotate 'line', 1931
    find_lex $P123, "$i"
    unless_null $P123, vivify_1087
    new $P123, "Undef"
  vivify_1087:
    clone $P2374, $P123
    inc $P123
    find_lex $P123, "$i"
    unless_null $P123, vivify_1088
    new $P123, "Undef"
  vivify_1088:
    set $I103, $P123
    find_lex $P2375, "@args"
    unless_null $P2375, vivify_1089
    $P2375 = root_new ['parrot';'ResizablePMCArray']
  vivify_1089:
    set $P124, $P2375[$I103]
    unless_null $P124, vivify_1090
    new $P124, "Undef"
  vivify_1090:
    set $P115, $P124
.annotate 'line', 1929
    goto if_2371_end
  if_2371:
.annotate 'line', 1930
    new $P123, 'String'
    set $P123, "Option "
    set $P124, param_2367
    unless_null $P124, vivify_1091
    new $P124, "Undef"
  vivify_1091:
    concat $P125, $P123, $P124
    concat $P126, $P125, " needs a value, but is followed by a stopper"
    die $P126
  if_2371_end:
.annotate 'line', 1929
    set $P108, $P115
.annotate 'line', 1927
    goto if_2369_end
  if_2369:
.annotate 'line', 1928
    new $P115, 'String'
    set $P115, "Option "
    set $P116, param_2367
    unless_null $P116, vivify_1092
    new $P116, "Undef"
  vivify_1092:
    concat $P117, $P115, $P116
    concat $P118, $P117, " needs a value, but is followed by an option"
    die $P118
  if_2369_end:
.annotate 'line', 1927
    set $P104, $P108
.annotate 'line', 1925
    goto if_2368_end
  if_2368:
.annotate 'line', 1926
    new $P108, 'String'
    set $P108, "Option "
    set $P109, param_2367
    unless_null $P109, vivify_1093
    new $P109, "Undef"
  vivify_1093:
    concat $P110, $P108, $P109
    concat $P111, $P110, " needs a value"
    die $P111
  if_2368_end:
.annotate 'line', 1924
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "slurp-rest"  :subid("337_1340317678.734") :outer("170_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1939
    find_lex $P105, "$i"
    unless_null $P105, vivify_1094
    new $P105, "Undef"
  vivify_1094:
    clone $P2379, $P105
    inc $P105
.annotate 'line', 1941
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop2382_handler
    push_eh $P107
  loop2382_test:
    find_lex $P105, "$i"
    unless_null $P105, vivify_1095
    new $P105, "Undef"
  vivify_1095:
    set $N100, $P105
    find_lex $P106, "$arg-count"
    unless_null $P106, vivify_1096
    new $P106, "Undef"
  vivify_1096:
    set $N101, $P106
    islt $I100, $N100, $N101
    unless $I100, loop2382_done
  loop2382_redo:
.annotate 'line', 1942
    find_lex $P107, "$result"
    unless_null $P107, vivify_1097
    new $P107, "Undef"
  vivify_1097:
    find_lex $P108, "$i"
    unless_null $P108, vivify_1098
    new $P108, "Undef"
  vivify_1098:
    set $I101, $P108
    find_lex $P2380, "@args"
    unless_null $P2380, vivify_1099
    $P2380 = root_new ['parrot';'ResizablePMCArray']
  vivify_1099:
    set $P109, $P2380[$I101]
    unless_null $P109, vivify_1100
    new $P109, "Undef"
  vivify_1100:
    $P107."add-argument"($P109)
.annotate 'line', 1941
    find_lex $P107, "$i"
    unless_null $P107, vivify_1101
    new $P107, "Undef"
  vivify_1101:
    clone $P2381, $P107
    inc $P107
  loop2382_next:
    goto loop2382_test
  loop2382_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop2382_next
    eq $P108, .CONTROL_LOOP_REDO, loop2382_redo
  loop2382_done:
    pop_eh 
.annotate 'line', 1939
    .return ($I100)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2385"  :anon :subid("338_1340317678.734") :outer("170_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1947
    .const 'Sub' $P2409 = "340_1340317678.734" 
    capture_lex $P2409
    .const 'Sub' $P2392 = "339_1340317678.734" 
    capture_lex $P2392
.annotate 'line', 1948
    new $P107, "Undef"
    set $P2387, $P107
    .lex "$cur", $P2387
    find_lex $P108, "$i"
    unless_null $P108, vivify_1106
    new $P108, "Undef"
  vivify_1106:
    set $I102, $P108
    find_lex $P2388, "@args"
    unless_null $P2388, vivify_1107
    $P2388 = root_new ['parrot';'ResizablePMCArray']
  vivify_1107:
    set $P109, $P2388[$I102]
    unless_null $P109, vivify_1108
    new $P109, "Undef"
  vivify_1108:
    set $P2387, $P109
.annotate 'line', 1949
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    set $P110, $P2387
    unless_null $P110, vivify_1109
    new $P110, "Undef"
  vivify_1109:
    $P111 = $P109."is-option"($P110)
    if $P111, if_2389
.annotate 'line', 2008
    set $P112, $P2387
    unless_null $P112, vivify_1110
    new $P112, "Undef"
  vivify_1110:
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2431, $P114, $P115, "%!stopper", 2
    unless_null $P2431, vivify_1111
    $P2431 = root_new ['parrot';'Hash']
  vivify_1111:
    set $P116, $P2431[$P112]
    unless_null $P116, vivify_1112
    new $P116, "Undef"
  vivify_1112:
    if $P116, if_2430
.annotate 'line', 2011
    find_lex $P117, "$result"
    unless_null $P117, vivify_1113
    new $P117, "Undef"
  vivify_1113:
    set $P118, $P2387
    unless_null $P118, vivify_1114
    new $P118, "Undef"
  vivify_1114:
    $P117."add-argument"($P118)
.annotate 'line', 2012
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    nqp_get_sc_object $P119, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P120, $P118, $P119, "$!stop-after-first-arg", 3
    unless_null $P120, vivify_1115
    new $P120, "Undef"
  vivify_1115:
    unless $P120, if_2432_end
    "slurp-rest"()
  if_2432_end:
.annotate 'line', 2010
    goto if_2430_end
  if_2430:
.annotate 'line', 2009
    "slurp-rest"()
  if_2430_end:
.annotate 'line', 2008
    goto if_2389_end
  if_2389:
.annotate 'line', 1950
    set $P112, $P2387
    unless_null $P112, vivify_1116
    new $P112, "Undef"
  vivify_1116:
    set $S100, $P112
    substr $S101, $S100, 0, 2
    iseq $I102, $S101, "--"
    if $I102, if_2390
.annotate 'line', 1972
    .const 'Sub' $P2409 = "340_1340317678.734" 
    capture_lex $P2409
    $P2409()
    goto if_2390_end
  if_2390:
.annotate 'line', 1950
    .const 'Sub' $P2392 = "339_1340317678.734" 
    capture_lex $P2392
    $P2392()
  if_2390_end:
  if_2389_end:
.annotate 'line', 1947
    find_lex $P108, "$i"
    unless_null $P108, vivify_1179
    new $P108, "Undef"
  vivify_1179:
    clone $P2433, $P108
    inc $P108
    .return ($P2433)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2408"  :anon :subid("340_1340317678.734") :outer("338_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1972
    .const 'Sub' $P2419 = "341_1340317678.734" 
    capture_lex $P2419
.annotate 'line', 1973
    new $P118, "Undef"
    set $P2410, $P118
    .lex "$opt", $P2410
.annotate 'line', 1974
    new $P119, "Undef"
    set $P2411, $P119
    .lex "$len", $P2411
.annotate 'line', 1973
    find_lex $P120, "$cur"
    unless_null $P120, vivify_1117
    new $P120, "Undef"
  vivify_1117:
    set $S102, $P120
    substr $S103, $S102, 1
    new $P121, 'String'
    set $P121, $S103
    set $P2410, $P121
.annotate 'line', 1974
    set $P120, $P2410
    unless_null $P120, vivify_1118
    new $P120, "Undef"
  vivify_1118:
    set $S102, $P120
    length $I103, $S102
    new $P121, 'Integer'
    set $P121, $I103
    set $P2411, $P121
.annotate 'line', 1975
    set $P121, $P2411
    unless_null $P121, vivify_1119
    new $P121, "Undef"
  vivify_1119:
    set $N102, $P121
    set $N103, 1
    iseq $I103, $N102, $N103
    if $I103, if_2412
.annotate 'line', 1985
    .const 'Sub' $P2419 = "341_1340317678.734" 
    capture_lex $P2419
    $P124 = $P2419()
    set $P120, $P124
.annotate 'line', 1975
    goto if_2412_end
  if_2412:
.annotate 'line', 1977
    set $P122, $P2410
    unless_null $P122, vivify_1141
    new $P122, "Undef"
  vivify_1141:
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    nqp_get_sc_object $P125, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2414, $P124, $P125, "%!options", 1
    unless_null $P2414, vivify_1142
    $P2414 = root_new ['parrot';'Hash']
  vivify_1142:
    set $P126, $P2414[$P122]
    unless_null $P126, vivify_1143
    new $P126, "Undef"
  vivify_1143:
    if $P126, unless_2413_end
    new $P127, 'String'
    set $P127, "No such option -"
    set $P128, $P2410
    unless_null $P128, vivify_1144
    new $P128, "Undef"
  vivify_1144:
    concat $P129, $P127, $P128
    die $P129
  unless_2413_end:
.annotate 'line', 1978
    find_lex $P122, "self"
    nqp_decontainerize $P123, $P122
    set $P124, $P2410
    unless_null $P124, vivify_1145
    new $P124, "Undef"
  vivify_1145:
    $P125 = $P123."wants-value"($P124)
    if $P125, if_2415
.annotate 'line', 1982
    find_lex $P126, "$result"
    unless_null $P126, vivify_1146
    new $P126, "Undef"
  vivify_1146:
    set $P127, $P2410
    unless_null $P127, vivify_1147
    new $P127, "Undef"
  vivify_1147:
    $P126."add-option"($P127, 1)
.annotate 'line', 1981
    goto if_2415_end
  if_2415:
.annotate 'line', 1979
    find_lex $P126, "$result"
    unless_null $P126, vivify_1148
    new $P126, "Undef"
  vivify_1148:
    set $P127, $P2410
    unless_null $P127, vivify_1149
    new $P127, "Undef"
  vivify_1149:
.annotate 'line', 1980
    new $P128, 'String'
    set $P128, "-"
    set $P129, $P2410
    unless_null $P129, vivify_1150
    new $P129, "Undef"
  vivify_1150:
    concat $P130, $P128, $P129
    $P131 = "get-value"($P130)
    $P126."add-option"($P127, $P131)
  if_2415_end:
.annotate 'line', 1984
    new $P123, 'String'
    set $P123, "-"
    set $P124, $P2410
    unless_null $P124, vivify_1151
    new $P124, "Undef"
  vivify_1151:
    concat $P125, $P123, $P124
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    nqp_get_sc_object $P128, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2417, $P127, $P128, "%!stopper", 2
    unless_null $P2417, vivify_1152
    $P2417 = root_new ['parrot';'Hash']
  vivify_1152:
    set $P129, $P2417[$P125]
    unless_null $P129, vivify_1153
    new $P129, "Undef"
  vivify_1153:
    if $P129, if_2416
    set $P122, $P129
    goto if_2416_end
  if_2416:
    $P130 = "slurp-rest"()
    set $P122, $P130
  if_2416_end:
.annotate 'line', 1975
    set $P120, $P122
  if_2412_end:
.annotate 'line', 1972
    .return ($P120)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.include "except_types.pasm"
.sub "_block2418"  :anon :subid("341_1340317678.734") :outer("340_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1985
    .const 'Sub' $P2422 = "342_1340317678.734" 
    capture_lex $P2422
.annotate 'line', 1986
    new $P123, "Undef"
    set $P2420, $P123
    .lex "$i", $P2420
    new $P124, "Float"
    assign $P124, 0
    set $P2420, $P124
.annotate 'line', 1987
    new $P127, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P127, loop2429_handler
    push_eh $P127
  loop2429_test:
    set $P124, $P2420
    unless_null $P124, vivify_1120
    new $P124, "Undef"
  vivify_1120:
    set $N104, $P124
    find_lex $P125, "$len"
    unless_null $P125, vivify_1121
    new $P125, "Undef"
  vivify_1121:
    set $N105, $P125
    islt $I104, $N104, $N105
    unless $I104, loop2429_done
  loop2429_redo:
    .const 'Sub' $P2422 = "342_1340317678.734" 
    capture_lex $P2422
    $P2422()
  loop2429_next:
    goto loop2429_test
  loop2429_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P128, exception, 'type'
    eq $P128, .CONTROL_LOOP_NEXT, loop2429_next
    eq $P128, .CONTROL_LOOP_REDO, loop2429_redo
  loop2429_done:
    pop_eh 
.annotate 'line', 1985
    .return ($I104)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2421"  :anon :subid("342_1340317678.734") :outer("341_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1988
    new $P126, "Undef"
    set $P2423, $P126
    .lex "$o", $P2423
    find_lex $P127, "$opt"
    unless_null $P127, vivify_1122
    new $P127, "Undef"
  vivify_1122:
    set $S102, $P127
    find_lex $P128, "$i"
    unless_null $P128, vivify_1123
    new $P128, "Undef"
  vivify_1123:
    set $I105, $P128
    substr $S103, $S102, $I105, 1
    new $P129, 'String'
    set $P129, $S103
    set $P2423, $P129
.annotate 'line', 1989
    set $P127, $P2423
    unless_null $P127, vivify_1124
    new $P127, "Undef"
  vivify_1124:
    find_lex $P128, "self"
    nqp_decontainerize $P129, $P128
    nqp_get_sc_object $P130, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2425, $P129, $P130, "%!options", 1
    unless_null $P2425, vivify_1125
    $P2425 = root_new ['parrot';'Hash']
  vivify_1125:
    set $P131, $P2425[$P127]
    unless_null $P131, vivify_1126
    new $P131, "Undef"
  vivify_1126:
    if $P131, if_2424
.annotate 'line', 2002
    new $P132, 'String'
    set $P132, "Grouped options '-"
    find_lex $P133, "$opt"
    unless_null $P133, vivify_1127
    new $P133, "Undef"
  vivify_1127:
    concat $P134, $P132, $P133
    concat $P135, $P134, "' contain '"
    set $P136, $P2423
    unless_null $P136, vivify_1128
    new $P136, "Undef"
  vivify_1128:
    concat $P137, $P135, $P136
    concat $P138, $P137, "', which is not a valid option"
    die $P138
.annotate 'line', 2001
    goto if_2424_end
  if_2424:
.annotate 'line', 1990
    find_lex $P132, "self"
    nqp_decontainerize $P133, $P132
    set $P134, $P2423
    unless_null $P134, vivify_1129
    new $P134, "Undef"
  vivify_1129:
    $P135 = $P133."wants-value"($P134)
    if $P135, if_2426
.annotate 'line', 1998
    find_lex $P136, "$result"
    unless_null $P136, vivify_1130
    new $P136, "Undef"
  vivify_1130:
    set $P137, $P2423
    unless_null $P137, vivify_1131
    new $P137, "Undef"
  vivify_1131:
    $P136."add-option"($P137, 1)
.annotate 'line', 1997
    goto if_2426_end
  if_2426:
.annotate 'line', 1991
    find_lex $P136, "$i"
    unless_null $P136, vivify_1132
    new $P136, "Undef"
  vivify_1132:
    add $P137, $P136, 1
    set $N106, $P137
    find_lex $P138, "$len"
    unless_null $P138, vivify_1133
    new $P138, "Undef"
  vivify_1133:
    set $N107, $P138
    iseq $I105, $N106, $N107
    unless $I105, if_2427_end
.annotate 'line', 1992
    new $P139, 'String'
    set $P139, "Option '"
    set $P140, $P2423
    unless_null $P140, vivify_1134
    new $P140, "Undef"
  vivify_1134:
    concat $P141, $P139, $P140
    concat $P142, $P141, "' in grouped options '-"
    find_lex $P143, "$opt"
    unless_null $P143, vivify_1135
    new $P143, "Undef"
  vivify_1135:
    concat $P144, $P142, $P143
    concat $P145, $P144, "' needs a value, but does not have one"
    die $P145
  if_2427_end:
.annotate 'line', 1994
    find_lex $P136, "$result"
    unless_null $P136, vivify_1136
    new $P136, "Undef"
  vivify_1136:
    set $P137, $P2423
    unless_null $P137, vivify_1137
    new $P137, "Undef"
  vivify_1137:
    find_lex $P138, "$opt"
    unless_null $P138, vivify_1138
    new $P138, "Undef"
  vivify_1138:
    set $S102, $P138
    find_lex $P139, "$i"
    unless_null $P139, vivify_1139
    new $P139, "Undef"
  vivify_1139:
    add $P140, $P139, 1
    set $I105, $P140
    substr $S103, $S102, $I105
    $P136."add-option"($P137, $S103)
.annotate 'line', 1995
    die 0, .CONTROL_LOOP_LAST
  if_2426_end:
  if_2424_end:
.annotate 'line', 1987
    find_lex $P127, "$i"
    unless_null $P127, vivify_1140
    new $P127, "Undef"
  vivify_1140:
    clone $P2428, $P127
    inc $P127
    .return ($P2428)
.end


.HLL "nqp"

.namespace ["HLL";"CommandLine";"Parser"]
.sub "_block2391"  :anon :subid("339_1340317678.734") :outer("338_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1952
    new $P113, "Undef"
    set $P2393, $P113
    .lex "$opt", $P2393
.annotate 'line', 1953
    new $P114, "Undef"
    set $P2394, $P114
    .lex "$idx", $P2394
.annotate 'line', 1954
    new $P115, "Undef"
    set $P2395, $P115
    .lex "$value", $P2395
.annotate 'line', 1955
    new $P116, "Undef"
    set $P2396, $P116
    .lex "$has-value", $P2396
.annotate 'line', 1952
    find_lex $P117, "$i"
    unless_null $P117, vivify_1154
    new $P117, "Undef"
  vivify_1154:
    set $I103, $P117
    find_lex $P2397, "@args"
    unless_null $P2397, vivify_1155
    $P2397 = root_new ['parrot';'ResizablePMCArray']
  vivify_1155:
    set $P118, $P2397[$I103]
    unless_null $P118, vivify_1156
    new $P118, "Undef"
  vivify_1156:
    set $S102, $P118
    substr $S103, $S102, 2
    new $P119, 'String'
    set $P119, $S103
    set $P2393, $P119
.annotate 'line', 1953
    set $P117, $P2393
    unless_null $P117, vivify_1157
    new $P117, "Undef"
  vivify_1157:
    set $S102, $P117
    index $I103, $S102, "="
    new $P118, 'Integer'
    set $P118, $I103
    set $P2394, $P118
.annotate 'line', 1954
    new $P117, "Float"
    assign $P117, 1
    set $P2395, $P117
.annotate 'line', 1955
    new $P117, "Float"
    assign $P117, 0
    set $P2396, $P117
.annotate 'line', 1957
    set $P117, $P2394
    unless_null $P117, vivify_1158
    new $P117, "Undef"
  vivify_1158:
    set $N102, $P117
    set $N103, 0
    isge $I103, $N102, $N103
    if $I103, if_2398
.annotate 'line', 1961
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    set $P120, $P2393
    unless_null $P120, vivify_1159
    new $P120, "Undef"
  vivify_1159:
    $P121 = $P119."optional-value"($P120)
    unless $P121, if_2399_end
.annotate 'line', 1962
    new $P122, "String"
    assign $P122, ""
    set $P2395, $P122
.annotate 'line', 1963
    new $P122, "Float"
    assign $P122, 1
    set $P2396, $P122
  if_2399_end:
.annotate 'line', 1961
    goto if_2398_end
  if_2398:
.annotate 'line', 1958
    set $P118, $P2393
    unless_null $P118, vivify_1160
    new $P118, "Undef"
  vivify_1160:
    set $S102, $P118
    set $P119, $P2394
    unless_null $P119, vivify_1161
    new $P119, "Undef"
  vivify_1161:
    add $P120, $P119, 1
    set $I104, $P120
    substr $S103, $S102, $I104
    new $P121, 'String'
    set $P121, $S103
    set $P2395, $P121
.annotate 'line', 1959
    set $P118, $P2393
    unless_null $P118, vivify_1162
    new $P118, "Undef"
  vivify_1162:
    set $S102, $P118
    set $P119, $P2394
    unless_null $P119, vivify_1163
    new $P119, "Undef"
  vivify_1163:
    set $I104, $P119
    substr $S103, $S102, 0, $I104
    new $P120, 'String'
    set $P120, $S103
    set $P2393, $P120
.annotate 'line', 1960
    new $P118, "Float"
    assign $P118, 1
    set $P2396, $P118
  if_2398_end:
.annotate 'line', 1965
    set $P120, $P2393
    unless_null $P120, vivify_1164
    new $P120, "Undef"
  vivify_1164:
    set $S102, $P120
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    nqp_get_sc_object $P119, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2401, $P118, $P119, "%!options", 1
    unless_null $P2401, vivify_1165
    $P2401 = root_new ['parrot';'Hash']
  vivify_1165:
    exists $I103, $P2401[$S102]
    if $I103, unless_2400_end
    new $P121, 'String'
    set $P121, "Illegal option --"
    set $P122, $P2393
    unless_null $P122, vivify_1166
    new $P122, "Undef"
  vivify_1166:
    concat $P123, $P121, $P122
    die $P123
  unless_2400_end:
.annotate 'line', 1966
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    set $P120, $P2393
    unless_null $P120, vivify_1167
    new $P120, "Undef"
  vivify_1167:
    $P121 = $P119."wants-value"($P120)
    isfalse $I103, $P121
    if $I103, if_2403
    new $P117, 'Integer'
    set $P117, $I103
    goto if_2403_end
  if_2403:
    set $P122, $P2396
    unless_null $P122, vivify_1168
    new $P122, "Undef"
  vivify_1168:
    set $P117, $P122
  if_2403_end:
    unless $P117, if_2402_end
    new $P123, 'String'
    set $P123, "Option --"
    set $P124, $P2393
    unless_null $P124, vivify_1169
    new $P124, "Undef"
  vivify_1169:
    concat $P125, $P123, $P124
    concat $P126, $P125, " does not allow a value"
    die $P126
  if_2402_end:
.annotate 'line', 1967
    set $P118, $P2396
    unless_null $P118, vivify_1170
    new $P118, "Undef"
  vivify_1170:
    isfalse $I103, $P118
    if $I103, if_2405
    new $P117, 'Integer'
    set $P117, $I103
    goto if_2405_end
  if_2405:
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    set $P121, $P2393
    unless_null $P121, vivify_1171
    new $P121, "Undef"
  vivify_1171:
    $P122 = $P120."wants-value"($P121)
    set $P117, $P122
  if_2405_end:
    unless $P117, if_2404_end
.annotate 'line', 1968
    new $P123, 'String'
    set $P123, "--"
    set $P124, $P2393
    unless_null $P124, vivify_1172
    new $P124, "Undef"
  vivify_1172:
    concat $P125, $P123, $P124
    $P126 = "get-value"($P125)
    set $P2395, $P126
  if_2404_end:
.annotate 'line', 1970
    find_lex $P117, "$result"
    unless_null $P117, vivify_1173
    new $P117, "Undef"
  vivify_1173:
    set $P118, $P2393
    unless_null $P118, vivify_1174
    new $P118, "Undef"
  vivify_1174:
    set $P119, $P2395
    unless_null $P119, vivify_1175
    new $P119, "Undef"
  vivify_1175:
    $P117."add-option"($P118, $P119)
.annotate 'line', 1971
    new $P118, 'String'
    set $P118, "--"
    set $P119, $P2393
    unless_null $P119, vivify_1176
    new $P119, "Undef"
  vivify_1176:
    concat $P120, $P118, $P119
    find_lex $P121, "self"
    nqp_decontainerize $P122, $P121
    nqp_get_sc_object $P123, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 145
    repr_get_attr_obj $P2407, $P122, $P123, "%!stopper", 2
    unless_null $P2407, vivify_1177
    $P2407 = root_new ['parrot';'Hash']
  vivify_1177:
    set $P124, $P2407[$P120]
    unless_null $P124, vivify_1178
    new $P124, "Undef"
  vivify_1178:
    if $P124, if_2406
    set $P117, $P124
    goto if_2406_end
  if_2406:
    find_lex $P125, "slurp-rest"
    set $P117, $P125
  if_2406_end:
.annotate 'line', 1950
    .return ($P117)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "_block2436"  :subid("343_1340317678.734") :outer("191_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2042
    .const 'Sub' $P2536 = "190_1340317678.734" 
    capture_lex $P2536
    .const 'Sub' $P2533 = "189_1340317678.734" 
    capture_lex $P2533
    .const 'Sub' $P2530 = "188_1340317678.734" 
    capture_lex $P2530
    .const 'Sub' $P2528 = "187_1340317678.734" 
    capture_lex $P2528
    .const 'Sub' $P2526 = "186_1340317678.734" 
    capture_lex $P2526
    .const 'Sub' $P2514 = "185_1340317678.734" 
    capture_lex $P2514
    .const 'Sub' $P2505 = "184_1340317678.734" 
    capture_lex $P2505
    .const 'Sub' $P2496 = "183_1340317678.734" 
    capture_lex $P2496
    .const 'Sub' $P2494 = "182_1340317678.734" 
    capture_lex $P2494
    .const 'Sub' $P2490 = "181_1340317678.734" 
    capture_lex $P2490
    .const 'Sub' $P2485 = "180_1340317678.734" 
    capture_lex $P2485
    .const 'Sub' $P2479 = "179_1340317678.734" 
    capture_lex $P2479
    .const 'Sub' $P2475 = "178_1340317678.734" 
    capture_lex $P2475
    .const 'Sub' $P2472 = "177_1340317678.734" 
    capture_lex $P2472
    .const 'Sub' $P2466 = "176_1340317678.734" 
    capture_lex $P2466
    .const 'Sub' $P2463 = "175_1340317678.734" 
    capture_lex $P2463
    .const 'Sub' $P2456 = "174_1340317678.734" 
    capture_lex $P2456
    .const 'Sub' $P2450 = "173_1340317678.734" 
    capture_lex $P2450
    .const 'Sub' $P2445 = "172_1340317678.734" 
    capture_lex $P2445
    .const 'Sub' $P2440 = "171_1340317678.734" 
    capture_lex $P2440
    .lex "$?PACKAGE", $P2438
    .lex "$?CLASS", $P2439
.annotate 'line', 2246
    .const 'Sub' $P2536 = "190_1340317678.734" 
    newclosure $P2553, $P2536
.annotate 'line', 2042
    .return ($P2553)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "new" :anon :subid("171_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2441
    .param pmc param_2442 :named("handle")
    .param pmc param_2443 :optional :named("description")
    .param int has_param_2443 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2073
    .lex "self", param_2441
    .lex "$handle", param_2442
    if has_param_2443, optparam_1181
    new $P101, "String"
    assign $P101, "<unknown>"
    set param_2443, $P101
  optparam_1181:
    .lex "$description", param_2443
.annotate 'line', 2074
    new $P102, "Undef"
    set $P2444, $P102
    .lex "$obj", $P2444
    set $P103, param_2441
    nqp_decontainerize $P104, $P103
    $P105 = $P104."CREATE"()
    set $P2444, $P105
.annotate 'line', 2075
    set $P103, $P2444
    unless_null $P103, vivify_1182
    new $P103, "Undef"
  vivify_1182:
    set $P104, param_2442
    unless_null $P104, vivify_1183
    new $P104, "Undef"
  vivify_1183:
    set $P105, param_2443
    unless_null $P105, vivify_1184
    new $P105, "Undef"
  vivify_1184:
    $P103."BUILD"($P104 :named("handle"), $P105 :named("description"))
.annotate 'line', 2073
    set $P103, $P2444
    unless_null $P103, vivify_1185
    new $P103, "Undef"
  vivify_1185:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "BUILD" :anon :subid("172_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2446
    .param pmc param_2447 :named("handle")
    .param pmc param_2448 :named("description")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2079
    .lex "self", param_2446
    .lex "$handle", param_2447
    .lex "$description", param_2448
.annotate 'line', 2081
    set $P101, param_2447
    unless_null $P101, vivify_1186
    new $P101, "Undef"
  vivify_1186:
    set $S100, $P101
    nqp_create_sc $P102, $S100
    set $P103, param_2446
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_bind_attr_obj $P104, $P105, "$!sc", 0, $P102
.annotate 'line', 2082
    set $P101, param_2447
    unless_null $P101, vivify_1187
    new $P101, "Undef"
  vivify_1187:
    set $P102, param_2446
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_bind_attr_obj $P103, $P104, "$!handle", 1, $P101
.annotate 'line', 2083
    new $P101, "Hash"
    set $P102, param_2446
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_bind_attr_obj $P103, $P104, "%!addr_to_slot", 7, $P101
.annotate 'line', 2084
    new $P101, "ResizablePMCArray"
    set $P102, param_2446
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_bind_attr_obj $P103, $P104, "@!fixup_tasks", 6, $P101
.annotate 'line', 2085
    new $P101, "ResizablePMCArray"
    set $P102, param_2446
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_bind_attr_obj $P103, $P104, "@!load_dependency_tasks", 5, $P101
.annotate 'line', 2086
    find_dynamic_lex $P103, "%*COMPILING"
    unless_null $P103, vivify_1188
    get_hll_global $P101, "GLOBAL"
    get_who $P102, $P101
    set $P103, $P102["%COMPILING"]
    unless_null $P103, vivify_1189
    die "Contextual %*COMPILING not found"
  vivify_1189:
  vivify_1188:
    set $P2449, $P103["%?OPTIONS"]
    unless_null $P2449, vivify_1190
    $P2449 = root_new ['parrot';'Hash']
  vivify_1190:
    set $P104, $P2449["target"]
    unless_null $P104, vivify_1191
    new $P104, "Undef"
  vivify_1191:
    set $S100, $P104
    iseq $I100, $S100, "pir"
    new $P105, 'Integer'
    set $P105, $I100
    set $P106, param_2446
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_bind_attr_obj $P107, $P108, "$!precomp_mode", 2, $P105
.annotate 'line', 2087
    new $P101, "Float"
    assign $P101, 0
    set $P102, param_2446
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_bind_attr_obj $P103, $P104, "$!num_code_refs", 3, $P101
.annotate 'line', 2088
    new $P101, "ResizablePMCArray"
    set $P102, param_2446
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_bind_attr_obj $P103, $P104, "$!code_ref_blocks", 4, $P101
.annotate 'line', 2089
    set $P101, param_2446
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1192
    new $P104, "Undef"
  vivify_1192:
    set $P105, param_2448
    unless_null $P105, vivify_1193
    new $P105, "Undef"
  vivify_1193:
    $P104."set_description"($P105)
.annotate 'line', 2092
    set $P101, param_2446
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1194
    new $P104, "Undef"
  vivify_1194:
    nqp_push_compiling_sc $P104
.annotate 'line', 2079
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "slot_for_object" :anon :subid("173_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2451
    .param pmc param_2452
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2096
    .lex "self", param_2451
    .lex "$obj", param_2452
.annotate 'line', 2097
    new $P101, "Undef"
    set $P2453, $P101
    .lex "$slot", $P2453
    set $P102, param_2452
    unless_null $P102, vivify_1195
    new $P102, "Undef"
  vivify_1195:
    get_id $I100, $P102
    set $P103, param_2451
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P2454, $P104, $P105, "%!addr_to_slot", 7
    unless_null $P2454, vivify_1196
    $P2454 = root_new ['parrot';'Hash']
  vivify_1196:
    set $P106, $P2454[$I100]
    unless_null $P106, vivify_1197
    new $P106, "Undef"
  vivify_1197:
    set $P2453, $P106
.annotate 'line', 2098
    set $P102, $P2453
    unless_null $P102, vivify_1198
    new $P102, "Undef"
  vivify_1198:
    defined $I100, $P102
    if $I100, unless_2455_end
.annotate 'line', 2099
    new $P103, "String"
    assign $P103, "slot_for_object called on object not in context"
    die $P103
  unless_2455_end:
.annotate 'line', 2096
    set $P102, $P2453
    unless_null $P102, vivify_1199
    new $P102, "Undef"
  vivify_1199:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "get_slot_past_for_object" :anon :subid("174_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2457
    .param pmc param_2458
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2108
    .lex "self", param_2457
    .lex "$obj", param_2458
.annotate 'line', 2109
    new $P101, "Undef"
    set $P2459, $P101
    .lex "$slot", $P2459
.annotate 'line', 2110
    new $P102, "Undef"
    set $P2460, $P102
    .lex "$past", $P2460
.annotate 'line', 2109
    set $P103, param_2457
    nqp_decontainerize $P104, $P103
    set $P105, param_2458
    unless_null $P105, vivify_1200
    new $P105, "Undef"
  vivify_1200:
    $P106 = $P104."slot_for_object"($P105)
    set $P2459, $P106
.annotate 'line', 2110
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "PAST"
    get_who $P105, $P104
    set $P106, $P105["Op"]
    set $P107, param_2457
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P110, $P108, $P109, "$!handle", 1
    unless_null $P110, vivify_1201
    new $P110, "Undef"
  vivify_1201:
    set $P111, $P2459
    unless_null $P111, vivify_1202
    new $P111, "Undef"
  vivify_1202:
    $P112 = $P106."new"($P110, $P111, "nqp_get_sc_object Psi" :named("pirop"))
    set $P2460, $P112
.annotate 'line', 2111
    new $P103, "Float"
    assign $P103, 1
    set $P2461, $P2460
    unless_null $P2461, vivify_1203
    $P2461 = root_new ['parrot';'Hash']
    set $P2460, $P2461
  vivify_1203:
    set $P2461["has_compile_time_value"], $P103
.annotate 'line', 2112
    set $P103, param_2458
    unless_null $P103, vivify_1204
    new $P103, "Undef"
  vivify_1204:
    set $P2462, $P2460
    unless_null $P2462, vivify_1205
    $P2462 = root_new ['parrot';'Hash']
    set $P2460, $P2462
  vivify_1205:
    set $P2462["compile_time_value"], $P103
.annotate 'line', 2108
    set $P103, $P2460
    unless_null $P103, vivify_1206
    new $P103, "Undef"
  vivify_1206:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "get_slot_past_for_code_ref_at" :anon :subid("175_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2464
    .param pmc param_2465
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2117
    .lex "self", param_2464
    .lex "$idx", param_2465
.annotate 'line', 2118
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
    set $P105, param_2464
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P108, $P106, $P107, "$!handle", 1
    unless_null $P108, vivify_1207
    new $P108, "Undef"
  vivify_1207:
    set $P109, param_2465
    unless_null $P109, vivify_1208
    new $P109, "Undef"
  vivify_1208:
    $P110 = $P104."new"($P108, $P109, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 2117
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.include "except_types.pasm"
.sub "set_slot_past" :anon :subid("176_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2469
    .param pmc param_2470
    .param pmc param_2471
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2122
    new $P2468, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2468, control_2467
    push_eh $P2468
    .lex "self", param_2469
    .lex "$slot", param_2470
    .lex "$past_to_set", param_2471
.annotate 'line', 2123
    new $P101, "Exception"
    set $P101['type'], .CONTROL_RETURN
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "PAST"
    get_who $P104, $P103
    set $P105, $P104["Op"]
    set $P106, param_2469
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P109, $P107, $P108, "$!handle", 1
    unless_null $P109, vivify_1209
    new $P109, "Undef"
  vivify_1209:
    set $P110, param_2470
    unless_null $P110, vivify_1210
    new $P110, "Undef"
  vivify_1210:
    set $P111, param_2471
    unless_null $P111, vivify_1211
    new $P111, "Undef"
  vivify_1211:
    $P112 = $P105."new"($P109, $P110, $P111, "nqp_set_sc_object vsiP" :named("pirop"))
    setattribute $P101, 'payload', $P112
    throw $P101
.annotate 'line', 2122
    .return ()
  control_2467:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P101, exception, "payload"
    .return ($P101)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "set_cur_sc" :anon :subid("177_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2473
    .param pmc param_2474
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2129
    .lex "self", param_2473
    .lex "$to_wrap", param_2474
.annotate 'line', 2130
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
    set $P105, param_2474
    unless_null $P105, vivify_1212
    new $P105, "Undef"
  vivify_1212:
.annotate 'line', 2133
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Var"]
    $P110 = $P109."new"("cur_sc" :named("name"), "register" :named("scope"))
    $P111 = $P104."new"($P105, $P110, "nqp_set_sc_for_object__0PP" :named("pirop"))
.annotate 'line', 2129
    .return ($P111)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_object_to_cur_sc_past" :anon :subid("178_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2476
    .param pmc param_2477
    .param pmc param_2478
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2137
    .lex "self", param_2476
    .lex "$slot", param_2477
    .lex "$to_wrap", param_2478
.annotate 'line', 2138
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
.annotate 'line', 2140
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Var"]
    $P109 = $P108."new"("cur_sc" :named("name"), "register" :named("scope"))
    set $P110, param_2477
    unless_null $P110, vivify_1213
    new $P110, "Undef"
  vivify_1213:
    set $P111, param_2478
    unless_null $P111, vivify_1214
    new $P111, "Undef"
  vivify_1214:
    $P112 = $P104."new"($P109, $P110, $P111, "nqp_add_object_to_sc 2PiP" :named("pirop"))
.annotate 'line', 2137
    .return ($P112)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_object" :anon :subid("179_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2480
    .param pmc param_2481
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2147
    .lex "self", param_2480
    .lex "$obj", param_2481
.annotate 'line', 2149
    new $P101, "Undef"
    set $P2482, $P101
    .lex "$idx", $P2482
.annotate 'line', 2148
    set $P102, param_2481
    unless_null $P102, vivify_1215
    new $P102, "Undef"
  vivify_1215:
    set $P103, param_2480
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P106, $P104, $P105, "$!sc", 0
    unless_null $P106, vivify_1216
    new $P106, "Undef"
  vivify_1216:
    nqp_set_sc_for_object $P102, $P106
.annotate 'line', 2149
    set $P102, param_2480
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P105, $P103, $P104, "$!sc", 0
    unless_null $P105, vivify_1217
    new $P105, "Undef"
  vivify_1217:
    $P106 = $P105."elems"()
    set $P2482, $P106
.annotate 'line', 2150
    set $P102, param_2481
    unless_null $P102, vivify_1218
    new $P102, "Undef"
  vivify_1218:
    set $P103, $P2482
    unless_null $P103, vivify_1219
    new $P103, "Undef"
  vivify_1219:
    set $I100, $P103
    set $P104, param_2480
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P2483, $P105, $P106, "$!sc", 0
    unless_null $P2483, vivify_1220
    $P2483 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P105, $P106, "$!sc", 0, $P2483
  vivify_1220:
    set $P2483[$I100], $P102
.annotate 'line', 2151
    set $P102, $P2482
    unless_null $P102, vivify_1221
    new $P102, "Undef"
  vivify_1221:
    set $P103, param_2481
    unless_null $P103, vivify_1222
    new $P103, "Undef"
  vivify_1222:
    get_id $I100, $P103
    set $P104, param_2480
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P2484, $P105, $P106, "%!addr_to_slot", 7
    unless_null $P2484, vivify_1223
    $P2484 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P105, $P106, "%!addr_to_slot", 7, $P2484
  vivify_1223:
    set $P2484[$I100], $P102
.annotate 'line', 2147
    set $P102, $P2482
    unless_null $P102, vivify_1224
    new $P102, "Undef"
  vivify_1224:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_root_code_ref" :anon :subid("180_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2486
    .param pmc param_2487
    .param pmc param_2488
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2156
    .lex "self", param_2486
    .lex "$code_ref", param_2487
    .lex "$past_block", param_2488
.annotate 'line', 2157
    new $P101, "Undef"
    set $P2489, $P101
    .lex "$code_ref_idx", $P2489
    set $P102, param_2486
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P105, $P103, $P104, "$!num_code_refs", 3
    unless_null $P105, vivify_1225
    new $P105, "Undef"
  vivify_1225:
    set $P2489, $P105
.annotate 'line', 2158
    set $P102, param_2486
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P105, $P103, $P104, "$!num_code_refs", 3
    unless_null $P105, vivify_1226
    new $P105, "Undef"
  vivify_1226:
    add $P106, $P105, 1
    set $P107, param_2486
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_bind_attr_obj $P108, $P109, "$!num_code_refs", 3, $P106
.annotate 'line', 2159
    set $P102, param_2486
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P105, $P103, $P104, "$!code_ref_blocks", 4
    unless_null $P105, vivify_1227
    new $P105, "Undef"
  vivify_1227:
    set $P106, param_2488
    unless_null $P106, vivify_1228
    new $P106, "Undef"
  vivify_1228:
    $P105."push"($P106)
.annotate 'line', 2160
    set $P102, param_2486
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P105, $P103, $P104, "$!sc", 0
    unless_null $P105, vivify_1229
    new $P105, "Undef"
  vivify_1229:
    set $P106, $P2489
    unless_null $P106, vivify_1230
    new $P106, "Undef"
  vivify_1230:
    set $I100, $P106
    set $P107, param_2487
    unless_null $P107, vivify_1231
    new $P107, "Undef"
  vivify_1231:
    nqp_add_code_ref_to_sc $P105, $I100, $P107
.annotate 'line', 2156
    set $P102, $P2489
    unless_null $P102, vivify_1232
    new $P102, "Undef"
  vivify_1232:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "update_root_code_ref" :anon :subid("181_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2491
    .param pmc param_2492
    .param pmc param_2493
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2165
    .lex "self", param_2491
    .lex "$idx", param_2492
    .lex "$new_code_ref", param_2493
.annotate 'line', 2166
    set $P101, param_2491
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1233
    new $P104, "Undef"
  vivify_1233:
    set $P105, param_2492
    unless_null $P105, vivify_1234
    new $P105, "Undef"
  vivify_1234:
    set $I100, $P105
    set $P106, param_2493
    unless_null $P106, vivify_1235
    new $P106, "Undef"
  vivify_1235:
    nqp_add_code_ref_to_sc $P104, $I100, $P106
.annotate 'line', 2165
    .return ()
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "is_precompilation_mode" :anon :subid("182_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2495
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2170
    .lex "self", param_2495
    set $P101, param_2495
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!precomp_mode", 2
    unless_null $P104, vivify_1236
    new $P104, "Undef"
  vivify_1236:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_load_dependency_task" :anon :subid("183_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2497
    .param pmc param_2498 :optional :named("deserialize_past")
    .param int has_param_2498 :opt_flag
    .param pmc param_2499 :optional :named("fixup_past")
    .param int has_param_2499 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2176
    .lex "self", param_2497
    if has_param_2498, optparam_1237
    new $P101, "Undef"
    set param_2498, $P101
  optparam_1237:
    .lex "$deserialize_past", param_2498
    if has_param_2499, optparam_1238
    new $P102, "Undef"
    set param_2499, $P102
  optparam_1238:
    .lex "$fixup_past", param_2499
.annotate 'line', 2177
    set $P104, param_2497
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P107, $P105, $P106, "$!precomp_mode", 2
    unless_null $P107, vivify_1239
    new $P107, "Undef"
  vivify_1239:
    if $P107, if_2500
.annotate 'line', 2181
    set $P110, param_2499
    unless_null $P110, vivify_1240
    new $P110, "Undef"
  vivify_1240:
    if $P110, if_2503
    set $P109, $P110
    goto if_2503_end
  if_2503:
    set $P111, param_2497
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P2504, $P112, $P113, "@!load_dependency_tasks", 5
    unless_null $P2504, vivify_1241
    $P2504 = root_new ['parrot';'ResizablePMCArray']
  vivify_1241:
    set $P114, param_2499
    unless_null $P114, vivify_1242
    new $P114, "Undef"
  vivify_1242:
    $P115 = $P2504."push"($P114)
    set $P109, $P115
  if_2503_end:
.annotate 'line', 2180
    set $P103, $P109
.annotate 'line', 2177
    goto if_2500_end
  if_2500:
.annotate 'line', 2178
    set $P109, param_2498
    unless_null $P109, vivify_1243
    new $P109, "Undef"
  vivify_1243:
    if $P109, if_2501
    set $P108, $P109
    goto if_2501_end
  if_2501:
    set $P110, param_2497
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P2502, $P111, $P112, "@!load_dependency_tasks", 5
    unless_null $P2502, vivify_1244
    $P2502 = root_new ['parrot';'ResizablePMCArray']
  vivify_1244:
    set $P113, param_2498
    unless_null $P113, vivify_1245
    new $P113, "Undef"
  vivify_1245:
    $P114 = $P2502."push"($P113)
    set $P108, $P114
  if_2501_end:
.annotate 'line', 2177
    set $P103, $P108
  if_2500_end:
.annotate 'line', 2176
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "add_fixup_task" :anon :subid("184_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2506
    .param pmc param_2507 :optional :named("deserialize_past")
    .param int has_param_2507 :opt_flag
    .param pmc param_2508 :optional :named("fixup_past")
    .param int has_param_2508 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2187
    .lex "self", param_2506
    if has_param_2507, optparam_1246
    new $P101, "Undef"
    set param_2507, $P101
  optparam_1246:
    .lex "$deserialize_past", param_2507
    if has_param_2508, optparam_1247
    new $P102, "Undef"
    set param_2508, $P102
  optparam_1247:
    .lex "$fixup_past", param_2508
.annotate 'line', 2188
    set $P104, param_2506
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P107, $P105, $P106, "$!precomp_mode", 2
    unless_null $P107, vivify_1248
    new $P107, "Undef"
  vivify_1248:
    if $P107, if_2509
.annotate 'line', 2192
    set $P110, param_2508
    unless_null $P110, vivify_1249
    new $P110, "Undef"
  vivify_1249:
    if $P110, if_2512
    set $P109, $P110
    goto if_2512_end
  if_2512:
    set $P111, param_2506
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P2513, $P112, $P113, "@!fixup_tasks", 6
    unless_null $P2513, vivify_1250
    $P2513 = root_new ['parrot';'ResizablePMCArray']
  vivify_1250:
    set $P114, param_2508
    unless_null $P114, vivify_1251
    new $P114, "Undef"
  vivify_1251:
    $P115 = $P2513."push"($P114)
    set $P109, $P115
  if_2512_end:
.annotate 'line', 2191
    set $P103, $P109
.annotate 'line', 2188
    goto if_2509_end
  if_2509:
.annotate 'line', 2189
    set $P109, param_2507
    unless_null $P109, vivify_1252
    new $P109, "Undef"
  vivify_1252:
    if $P109, if_2510
    set $P108, $P109
    goto if_2510_end
  if_2510:
    set $P110, param_2506
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P2511, $P111, $P112, "@!fixup_tasks", 6
    unless_null $P2511, vivify_1253
    $P2511 = root_new ['parrot';'ResizablePMCArray']
  vivify_1253:
    set $P113, param_2507
    unless_null $P113, vivify_1254
    new $P113, "Undef"
  vivify_1254:
    $P114 = $P2511."push"($P113)
    set $P108, $P114
  if_2510_end:
.annotate 'line', 2188
    set $P103, $P108
  if_2509_end:
.annotate 'line', 2187
    .return ($P103)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "get_ref" :anon :subid("185_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2515
    .param pmc param_2516
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2199
    .const 'Sub' $P2521 = "344_1340317678.734" 
    capture_lex $P2521
    .lex "self", param_2515
    .lex "$obj", param_2516
.annotate 'line', 2202
    new $P101, "Undef"
    set $P2517, $P101
    .lex "$sc", $P2517
    set $P102, param_2516
    unless_null $P102, vivify_1255
    new $P102, "Undef"
  vivify_1255:
    nqp_get_sc_for_object $P103, $P102
    set $P2517, $P103
.annotate 'line', 2203
    set $P102, $P2517
    unless_null $P102, vivify_1256
    new $P102, "Undef"
  vivify_1256:
    defined $I100, $P102
    if $I100, unless_2518_end
.annotate 'line', 2204
    set $P103, param_2515
    nqp_decontainerize $P104, $P103
    set $P105, param_2516
    unless_null $P105, vivify_1257
    new $P105, "Undef"
  vivify_1257:
    $P104."add_object"($P105)
.annotate 'line', 2205
    set $P103, param_2515
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P106, $P104, $P105, "$!sc", 0
    unless_null $P106, vivify_1258
    new $P106, "Undef"
  vivify_1258:
    set $P2517, $P106
  unless_2518_end:
.annotate 'line', 2211
    set $P103, $P2517
    unless_null $P103, vivify_1259
    new $P103, "Undef"
  vivify_1259:
    set $P104, param_2515
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P107, $P105, $P106, "$!sc", 0
    unless_null $P107, vivify_1260
    new $P107, "Undef"
  vivify_1260:
    issame $I100, $P103, $P107
    if $I100, if_2519
.annotate 'line', 2214
    .const 'Sub' $P2521 = "344_1340317678.734" 
    capture_lex $P2521
    $P112 = $P2521()
    set $P102, $P112
.annotate 'line', 2211
    goto if_2519_end
  if_2519:
.annotate 'line', 2212
    set $P108, param_2515
    nqp_decontainerize $P109, $P108
    set $P110, param_2516
    unless_null $P110, vivify_1269
    new $P110, "Undef"
  vivify_1269:
    $P111 = $P109."get_slot_past_for_object"($P110)
.annotate 'line', 2211
    set $P102, $P111
  if_2519_end:
.annotate 'line', 2199
    .return ($P102)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "_block2520"  :anon :subid("344_1340317678.734") :outer("185_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2215
    new $P108, "Undef"
    set $P2522, $P108
    .lex "$handle", $P2522
.annotate 'line', 2216
    new $P109, "Undef"
    set $P2523, $P109
    .lex "$past", $P2523
.annotate 'line', 2215
    find_lex $P110, "$sc"
    unless_null $P110, vivify_1261
    new $P110, "Undef"
  vivify_1261:
    $P112 = $P110."handle"()
    set $P2522, $P112
.annotate 'line', 2216
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P112, $P110, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Op"]
    set $P115, $P2522
    unless_null $P115, vivify_1262
    new $P115, "Undef"
  vivify_1262:
.annotate 'line', 2217
    find_lex $P116, "$sc"
    unless_null $P116, vivify_1263
    new $P116, "Undef"
  vivify_1263:
    find_lex $P117, "$obj"
    unless_null $P117, vivify_1264
    new $P117, "Undef"
  vivify_1264:
    $P118 = $P116."slot_index_for"($P117)
    $P119 = $P114."new"($P115, $P118, "nqp_get_sc_object Psi" :named("pirop"))
.annotate 'line', 2216
    set $P2523, $P119
.annotate 'line', 2218
    new $P110, "Float"
    assign $P110, 1
    set $P2524, $P2523
    unless_null $P2524, vivify_1265
    $P2524 = root_new ['parrot';'Hash']
    set $P2523, $P2524
  vivify_1265:
    set $P2524["has_compile_time_value"], $P110
.annotate 'line', 2219
    find_lex $P110, "$obj"
    unless_null $P110, vivify_1266
    new $P110, "Undef"
  vivify_1266:
    set $P2525, $P2523
    unless_null $P2525, vivify_1267
    $P2525 = root_new ['parrot';'Hash']
    set $P2523, $P2525
  vivify_1267:
    set $P2525["compile_time_value"], $P110
.annotate 'line', 2214
    set $P110, $P2523
    unless_null $P110, vivify_1268
    new $P110, "Undef"
  vivify_1268:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "sc" :anon :subid("186_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2527
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2225
    .lex "self", param_2527
    set $P101, param_2527
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!sc", 0
    unless_null $P104, vivify_1270
    new $P104, "Undef"
  vivify_1270:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "handle" :anon :subid("187_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2529
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2230
    .lex "self", param_2529
    set $P101, param_2529
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P104, $P102, $P103, "$!handle", 1
    unless_null $P104, vivify_1271
    new $P104, "Undef"
  vivify_1271:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "load_dependency_tasks" :anon :subid("188_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2531
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2235
    .lex "self", param_2531
    set $P101, param_2531
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P2532, $P102, $P103, "@!load_dependency_tasks", 5
    unless_null $P2532, vivify_1272
    $P2532 = root_new ['parrot';'ResizablePMCArray']
  vivify_1272:
    .return ($P2532)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "fixup_tasks" :anon :subid("189_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2534
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2240
    .lex "self", param_2534
    set $P101, param_2534
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P2535, $P102, $P103, "@!fixup_tasks", 6
    unless_null $P2535, vivify_1273
    $P2535 = root_new ['parrot';'ResizablePMCArray']
  vivify_1273:
    .return ($P2535)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.include "except_types.pasm"
.sub "serialize_and_produce_deserialization_past" :anon :subid("190_1340317678.734") :outer("343_1340317678.734")
    .param pmc param_2537
    .param pmc param_2538
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2246
    .const 'Sub' $P2550 = "345_1340317678.734" 
    capture_lex $P2550
    .lex "self", param_2537
    .lex "$sc_reg", param_2538
.annotate 'line', 2248
    new $P101, "Undef"
    set $P2539, $P101
    .lex "$sh", $P2539
.annotate 'line', 2249
    new $P102, "Undef"
    set $P2540, $P102
    .lex "$serialized", $P2540
.annotate 'line', 2255
    new $P103, "Undef"
    set $P2541, $P103
    .lex "$sh_past", $P2541
.annotate 'line', 2260
    new $P104, "Undef"
    set $P2542, $P104
    .lex "$sh_elems", $P2542
.annotate 'line', 2261
    new $P105, "Undef"
    set $P2543, $P105
    .lex "$i", $P2543
.annotate 'line', 2272
    new $P106, "Undef"
    set $P2544, $P106
    .lex "$cr_past", $P2544
.annotate 'line', 2248
    new $P107, "ResizableStringArray"
    set $P2539, $P107
.annotate 'line', 2249
    set $P107, param_2537
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P110, $P108, $P109, "$!sc", 0
    unless_null $P110, vivify_1274
    new $P110, "Undef"
  vivify_1274:
    set $P111, $P2539
    unless_null $P111, vivify_1275
    new $P111, "Undef"
  vivify_1275:
    nqp_serialize_sc $S100, $P110, $P111
    new $P112, 'String'
    set $P112, $S100
    set $P2540, $P112
.annotate 'line', 2252
    nqp_pop_compiling_sc 
.annotate 'line', 2255
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Stmts"]
.annotate 'line', 2256
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Op"]
.annotate 'line', 2258
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Var"]
    $P119 = $P118."new"("register" :named("scope"), "string_heap" :named("name"), 1 :named("isdecl"))
.annotate 'line', 2259
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    $P124 = $P123."new"("ResizableStringArray", "new Ps" :named("pirop"))
    $P125 = $P114."new"($P119, $P124, "bind" :named("pasttype"))
.annotate 'line', 2256
    $P126 = $P110."new"($P125)
.annotate 'line', 2255
    set $P2541, $P126
.annotate 'line', 2260
    set $P107, $P2539
    unless_null $P107, vivify_1276
    new $P107, "Undef"
  vivify_1276:
    elements $I100, $P107
    new $P108, 'Integer'
    set $P108, $I100
    set $P2542, $P108
.annotate 'line', 2261
    new $P107, "Float"
    assign $P107, 0
    set $P2543, $P107
.annotate 'line', 2262
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop2548_handler
    push_eh $P109
  loop2548_test:
    set $P107, $P2543
    unless_null $P107, vivify_1277
    new $P107, "Undef"
  vivify_1277:
    set $N100, $P107
    set $P108, $P2542
    unless_null $P108, vivify_1278
    new $P108, "Undef"
  vivify_1278:
    set $N101, $P108
    islt $I100, $N100, $N101
    unless $I100, loop2548_done
  loop2548_redo:
.annotate 'line', 2263
    set $P109, $P2541
    unless_null $P109, vivify_1279
    new $P109, "Undef"
  vivify_1279:
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Op"]
.annotate 'line', 2265
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Var"]
    $P118 = $P117."new"("register" :named("scope"), "string_heap" :named("name"))
.annotate 'line', 2266
    set $P120, $P2543
    unless_null $P120, vivify_1280
    new $P120, "Undef"
  vivify_1280:
    set $I101, $P120
    set $P2546, $P2539
    unless_null $P2546, vivify_1281
    $P2546 = root_new ['parrot';'ResizablePMCArray']
  vivify_1281:
    set $P121, $P2546[$I101]
    unless_null $P121, vivify_1282
    new $P121, "Undef"
  vivify_1282:
    set $S100, $P121
    isnull $I102, $S100
    if $I102, if_2545
    set $P127, $P2543
    unless_null $P127, vivify_1283
    new $P127, "Undef"
  vivify_1283:
    set $I103, $P127
    set $P2547, $P2539
    unless_null $P2547, vivify_1284
    $P2547 = root_new ['parrot';'ResizablePMCArray']
  vivify_1284:
    set $P128, $P2547[$I103]
    unless_null $P128, vivify_1285
    new $P128, "Undef"
  vivify_1285:
    set $P119, $P128
    goto if_2545_end
  if_2545:
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    $P126 = $P125."new"("null S" :named("pirop"))
    set $P119, $P126
  if_2545_end:
    $P129 = $P113."new"($P118, $P119, "push vPs" :named("pirop"))
.annotate 'line', 2263
    $P109."push"($P129)
.annotate 'line', 2267
    set $P109, $P2543
    unless_null $P109, vivify_1286
    new $P109, "Undef"
  vivify_1286:
    add $P110, $P109, 1
    set $P2543, $P110
  loop2548_next:
.annotate 'line', 2262
    goto loop2548_test
  loop2548_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop2548_next
    eq $P110, .CONTROL_LOOP_REDO, loop2548_redo
  loop2548_done:
    pop_eh 
.annotate 'line', 2269
    set $P107, $P2541
    unless_null $P107, vivify_1287
    new $P107, "Undef"
  vivify_1287:
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Var"]
    $P112 = $P111."new"("register" :named("scope"), "string_heap" :named("name"))
    $P107."push"($P112)
.annotate 'line', 2272
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    $P111 = $P110."new"("list" :named("pasttype"))
    set $P2544, $P111
.annotate 'line', 2273
    set $P108, param_2537
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "65A5EE7C0CFF07AFA1FF086BD73BE3BAD5C48303-1340317678.547", 156
    repr_get_attr_obj $P111, $P109, $P110, "$!code_ref_blocks", 4
    unless_null $P111, vivify_1288
    new $P111, "Undef"
  vivify_1288:
    defined $I100, $P111
    unless $I100, for_undef_1289
    iter $P107, $P111
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2552_handler
    push_eh $P113
  loop2552_test:
    unless $P107, loop2552_done
    shift $P112, $P107
  loop2552_redo:
    .const 'Sub' $P2550 = "345_1340317678.734" 
    capture_lex $P2550
    $P2550($P112)
  loop2552_next:
    goto loop2552_test
  loop2552_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop2552_next
    eq $P114, .CONTROL_LOOP_REDO, loop2552_redo
  loop2552_done:
    pop_eh 
  for_undef_1289:
.annotate 'line', 2278
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    set $P111, $P2540
    unless_null $P111, vivify_1292
    new $P111, "Undef"
  vivify_1292:
.annotate 'line', 2281
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Var"]
    set $P116, param_2538
    unless_null $P116, vivify_1293
    new $P116, "Undef"
  vivify_1293:
    $P117 = $P115."new"($P116 :named("name"), "register" :named("scope"))
    set $P118, $P2541
    unless_null $P118, vivify_1294
    new $P118, "Undef"
  vivify_1294:
.annotate 'line', 2283
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Block"]
    set $P123, $P2544
    unless_null $P123, vivify_1295
    new $P123, "Undef"
  vivify_1295:
    $P124 = $P122."new"($P123, "immediate" :named("blocktype"))
    $P125 = $P110."new"($P111, $P117, $P118, $P124, "nqp_deserialize_sc__vSPPP" :named("pirop"))
.annotate 'line', 2246
    .return ($P125)
.end


.HLL "nqp"

.namespace ["HLL";"World"]
.sub "_block2549"  :anon :subid("345_1340317678.734") :outer("190_1340317678.734")
    .param pmc param_2551
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 2273
    .lex "$block", param_2551
.annotate 'line', 2274
    find_lex $P113, "$cr_past"
    unless_null $P113, vivify_1290
    new $P113, "Undef"
  vivify_1290:
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Val"]
    set $P118, param_2551
    unless_null $P118, vivify_1291
    new $P118, "Undef"
  vivify_1291:
    $P119 = $P117."new"($P118 :named("value"), "Sub" :named("returns"))
    $P120 = $P113."push"($P119)
.annotate 'line', 2273
    .return ($P120)
.end


.HLL "nqp"

.namespace []
.sub "_block2555" :load :anon :subid("346_1340317678.734")
.annotate 'file', "src\\stage2\\gen\\NQPHLL.pm"
.annotate 'line', 1045
    .const '' $P2557 = "191_1340317678.734" 
    $P107 = $P2557()
    .return ($P107)
.end

